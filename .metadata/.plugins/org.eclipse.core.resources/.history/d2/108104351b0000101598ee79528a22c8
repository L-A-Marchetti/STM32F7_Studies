/*
 * stream_process.c
 *
 *  Created on: Mar 13, 2025
 *      Author: lam
 */

#include "stream_process.h"
#include <string.h>

#define BOARD_SIZE 8

int x_center = (480 / 2) - (4 * 24);
int y_center = (272 / 2) - (4 * 24);

static char previous_board[BOARD_SIZE][BOARD_SIZE];

void draw_board(const char piece, int row, int col) {
	if (previous_board[row][col] == piece) return;
    BSP_LCD_SetFont(PIECE_FONT);

    // Définir la taille des cases
    const int SQUARE_SIZE = PIECE_FONT_SIZE;

    // Déterminer la couleur de la case
    uint32_t square_color = ((row + col) % 2 == 0) ? LCD_COLOR_LIGHTGRAY : LCD_COLOR_BROWN;

    // Dessiner le carré de la case
    BSP_LCD_SetBackColor(square_color);
    BSP_LCD_FillRect(col * SQUARE_SIZE + x_center, row * SQUARE_SIZE + y_center, SQUARE_SIZE, SQUARE_SIZE);

    // Déterminer la couleur de la pièce
    char display_piece = piece;
    if (islower(piece)) {
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
        display_piece = toupper(piece);
    } else {
        BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
    }

    // Afficher la pièce
    char piece_str[2] = {display_piece, '\0'};
    BSP_LCD_DisplayStringAt(col * SQUARE_SIZE + x_center, row * SQUARE_SIZE + y_center, (uint8_t*)piece_str, LEFT_MODE);
    previous_board[row][col] = piece;
}



void parse_fen(const char* fen) {
    int row = 0, col = 0;

    while (*fen && *fen != ' ') {
        if (*fen == '/') {
            row++;
            col = 0;
        } else if (*fen >= '1' && *fen <= '8') {
            int empty_squares = *fen - '0';
            for (int i = 0; i < empty_squares; i++) {
                draw_board(' ', row, col);
                col++;
            }
        } else {
            draw_board(*fen, row, col);
            col++;
        }
        fen++;
    }
}


void process_stream(const char* buffer) {
	const char* fen_start = strstr(buffer, "\"fen\":\"");
	if (fen_start) {
	    fen_start += 7; // Sauter "fen":"
	    const char* fen_end = strchr(fen_start, '"');
	    if (fen_end) {
	        char fen[128];
	        int fen_length = fen_end - fen_start;
	        strncpy(fen, fen_start, fen_length);
	        fen[fen_length] = '\0';
	        //debug_log(0, (char*)fen, 0);
	        parse_fen(fen);
	    }
	}
	const char* w_player_start = strstr(buffer, "\"players\":[{\"color\":\"white\",\"user\":{\"name\":\"");
	if (w_player_start) {
		w_player_start += 44;
		const char* w_player_end = strchr(w_player_start, '"');
		if (w_player_end) {
			char w_player[128];
			int w_player_length = w_player_end - w_player_start;
			strncpy(w_player, w_player_start, w_player_length);
			w_player[w_player_length] = '\0';
			BSP_LCD_SetFont(&Font12);
			BSP_LCD_SetBackColor(LCD_COLOR_BROWN);
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
			BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)w_player, RIGHT_MODE);
		}
	}
	const char* b_player_start = strstr(buffer, "\"color\":\"black\",\"user\":{\"name\":\"");
	    if (b_player_start) {
	        b_player_start += 32; // Sauter jusqu'au début du nom
	        const char* b_player_end = strchr(b_player_start, '"');
	        if (b_player_end) {
	            char b_player[128];
	            int b_player_length = b_player_end - b_player_start;
	            strncpy(b_player, b_player_start, b_player_length);
	            b_player[b_player_length] = '\0';

	            // Affichage du nom du joueur noir
	            BSP_LCD_SetFont(&Font12);
	            BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGRAY);
	            BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
	            BSP_LCD_DisplayStringAt(0, 480, (uint8_t*)b_player, LEFT_MODE);
	        }
	    }
}

void init_board_state() {
    for (int i = 0; i < BOARD_SIZE; i++) {
        for (int j = 0; j < BOARD_SIZE; j++) {
            previous_board[i][j] = ' ';
            draw_board('!', i, j);
        }
    }
}

