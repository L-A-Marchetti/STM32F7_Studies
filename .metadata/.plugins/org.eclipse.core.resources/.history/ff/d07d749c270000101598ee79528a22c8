/*
 * stream_process.c
 *
 *  Created on: Mar 13, 2025
 *      Author: lam
 */

#include "stream_process.h"
#include <string.h>

#define BOARD_SIZE 8

int x_center = (480 / 2) - (4 * 24);
int y_center = (272 / 2) - (4 * 24);

static char previous_board[BOARD_SIZE][BOARD_SIZE];

void draw_board(const char piece, int row, int col) {
	if (previous_board[row][col] == piece) return;
    BSP_LCD_SetFont(PIECE_FONT);

    // Définir la taille des cases
    const int SQUARE_SIZE = PIECE_FONT_SIZE;

    // Déterminer la couleur de la case
    uint32_t square_color = ((row + col) % 2 == 0) ? LCD_COLOR_LIGHTGRAY : LCD_COLOR_BROWN;

    // Dessiner le carré de la case
    BSP_LCD_SetBackColor(square_color);
    BSP_LCD_FillRect(col * SQUARE_SIZE + x_center, row * SQUARE_SIZE + y_center, SQUARE_SIZE, SQUARE_SIZE);

    // Déterminer la couleur de la pièce
    char display_piece = piece;
    if (islower(piece)) {
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
        display_piece = toupper(piece);
    } else {
        BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
    }

    // Afficher la pièce
    char piece_str[2] = {display_piece, '\0'};
    BSP_LCD_DisplayStringAt(col * SQUARE_SIZE + x_center, row * SQUARE_SIZE + y_center, (uint8_t*)piece_str, LEFT_MODE);
    previous_board[row][col] = piece;
}



void parse_fen(const char* fen) {
    int row = 0, col = 0;

    while (*fen && *fen != ' ') {
        if (*fen == '/') {
            row++;
            col = 0;
        } else if (*fen >= '1' && *fen <= '8') {
            int empty_squares = *fen - '0';
            for (int i = 0; i < empty_squares; i++) {
                draw_board(' ', row, col);
                col++;
            }
        } else {
            draw_board(*fen, row, col);
            col++;
        }
        fen++;
    }
}


void process_stream(const char* buffer) {
    // Récupérer le fen (déjà fait dans votre code)
    const char* fen_start = strstr(buffer, "\"fen\":\"");
    if (fen_start) {
        fen_start += 7; // Sauter "fen":"
        const char* fen_end = strchr(fen_start, '"');
        if (fen_end) {
            char fen[128];
            int fen_length = fen_end - fen_start;
            strncpy(fen, fen_start, fen_length);
            fen[fen_length] = '\0';
            parse_fen(fen);
        }
    }

    // Extraire les informations pour le joueur blanc
    const char* white_name_start = strstr(buffer, "\"color\":\"white\",\"user\":{\"name\":\"");
    if (white_name_start) {
        white_name_start += 32; // Sauter "color":"white","user":{"name":"
        const char* white_name_end = strchr(white_name_start, '"');
        if (white_name_end) {
            char white_name[64];
            int name_length = white_name_end - white_name_start;
            strncpy(white_name, white_name_start, name_length);
            white_name[name_length] = '\0';

            // Récupérer le titre du joueur blanc
            char white_title[8] = ""; // Vide par défaut
            const char* white_title_start = strstr(white_name_end, "\"title\":\"");
            if (white_title_start) {
                white_title_start += 9; // Sauter "title":"
                const char* white_title_end = strchr(white_title_start, '"');
                if (white_title_end) {
                    int title_length = white_title_end - white_title_start;
                    strncpy(white_title, white_title_start, title_length);
                    white_title[title_length] = '\0';
                }
            }

            // Récupérer le rating du joueur blanc
            int white_rating = 0;
            const char* white_rating_start = strstr(buffer, "\"color\":\"white\"") + 1;
            white_rating_start = strstr(white_rating_start, "\"rating\":");
            if (white_rating_start) {
                white_rating_start += 9; // Sauter "rating":
                white_rating = atoi(white_rating_start);
            }

            // Afficher ou stocker les informations du joueur blanc
            debug_log(0, white_name, 0);
            debug_log(0, white_title, 0);
            debug_log(0, &white_rating, 0); // Adaptez selon votre fonction de log
        }
    }

    // Extraire les informations pour le joueur noir
    const char* black_name_start = strstr(buffer, "\"color\":\"black\",\"user\":{\"name\":\"");
    if (black_name_start) {
        black_name_start += 32; // Sauter "color":"black","user":{"name":"
        const char* black_name_end = strchr(black_name_start, '"');
        if (black_name_end) {
            char black_name[64];
            int name_length = black_name_end - black_name_start;
            strncpy(black_name, black_name_start, name_length);
            black_name[name_length] = '\0';

            // Récupérer le titre du joueur noir (peut être absent)
            char black_title[8] = ""; // Vide par défaut
            const char* black_title_start = strstr(black_name_end, "\"title\":\"");
            if (black_title_start && (black_title_start < strstr(black_name_end, "\"rating\":"))) {
                black_title_start += 9; // Sauter "title":"
                const char* black_title_end = strchr(black_title_start, '"');
                if (black_title_end) {
                    int title_length = black_title_end - black_title_start;
                    strncpy(black_title, black_title_start, title_length);
                    black_title[title_length] = '\0';
                }
            }

            // Récupérer le rating du joueur noir
            int black_rating = 0;
            const char* black_rating_start = strstr(buffer, "\"color\":\"black\"") + 1;
            black_rating_start = strstr(black_rating_start, "\"rating\":");
            if (black_rating_start) {
                black_rating_start += 9; // Sauter "rating":
                black_rating = atoi(black_rating_start);
            }

            // Afficher ou stocker les informations du joueur noir
            debug_log(0, black_name, 0);
            debug_log(0, black_title, 0);
            debug_log(0, &black_rating, 0); // Adaptez selon votre fonction de log
        }
    }
}

void init_board_state() {
    for (int i = 0; i < BOARD_SIZE; i++) {
        for (int j = 0; j < BOARD_SIZE; j++) {
            previous_board[i][j] = ' ';
            draw_board('!', i, j);
        }
    }
}

