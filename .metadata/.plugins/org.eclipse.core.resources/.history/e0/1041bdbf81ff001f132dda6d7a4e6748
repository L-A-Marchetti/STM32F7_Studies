/*
 * request.c
 *
 *  Created on: Mar 12, 2025
 *      Author: lam
 */


#include "request.h"

void Custom_LWIP_Init(void)
{
	HAL_Delay(8000);
	struct netif gnetif;
	ip4_addr_t ipaddr, netmask, gw, dns_addr;
	uint8_t IP_ADDRESS[4];
	uint8_t NETMASK_ADDRESS[4];
	uint8_t GATEWAY_ADDRESS[4];
	IP_ADDRESS[0] = 192;
	  IP_ADDRESS[1] = 168;
	  IP_ADDRESS[2] = 0;
	  IP_ADDRESS[3] = 19;
	  NETMASK_ADDRESS[0] = 255;
	  NETMASK_ADDRESS[1] = 255;
	  NETMASK_ADDRESS[2] = 255;
	  NETMASK_ADDRESS[3] = 0;
	  GATEWAY_ADDRESS[0] = 192;
	  GATEWAY_ADDRESS[1] = 168;
	  GATEWAY_ADDRESS[2] = 0;
	  GATEWAY_ADDRESS[3] = 1;
	uint16_t font_size = BSP_LCD_GetFont()->Height;
    // Affichage de l'état initial sur l'écran
    BSP_LCD_Clear(LCD_COLOR_BLACK);
    BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"Initializing network", LEFT_MODE);

    // Initialisation de la pile TCP/IP
    tcpip_init(NULL, NULL);

    // Ajouter l'interface réseau (sans configuration IP statique ici)
    IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
      IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
      IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
      IP4_ADDR(&dns_addr, 192, 168, 0, 1); // Utilise la passerelle comme serveur DNS
      dns_setserver(0, &dns_addr);

      /* add the network interface */
      netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);


      /*  Registers the default network interface */
      netif_set_default(&gnetif);
      netif_set_up(&gnetif);

    // Activer l'interface (en préparation pour obtenir une IP via DHCP)


    // Demander une adresse IP via DHCP
   //dhcp_start(&gnetif);

    // Attendre que DHCP nous attribue une adresse IP
    while (gnetif.ip_addr.addr == 0) {
        BSP_LCD_DisplayStringAt(0, font_size*1, (uint8_t *)"Waiting for IP", LEFT_MODE);
        sys_msleep(100);  // Attendre un peu avant de vérifier à nouveau
    }

    // Afficher l'adresse IP une fois qu'elle est obtenue
    char ip_str[16];
    ip4addr_ntoa_r(&gnetif.ip_addr, ip_str, sizeof(ip_str));
    BSP_LCD_DisplayStringAt(0, font_size*2, (uint8_t *)"IP Obtained", LEFT_MODE);
    BSP_LCD_DisplayStringAt(0, font_size*3, (uint8_t *)ip_str, LEFT_MODE);

}


void send_lichess_request(void)
{
	HAL_Delay(8000);
    int sock;
    struct sockaddr_in server_addr;
    char *path = "/api/tv/feed";
    char buffer[1024];
    uint16_t font_size = BSP_LCD_GetFont()->Height;

    BSP_LCD_Clear(LCD_COLOR_BLACK);
    BSP_LCD_DisplayStringAt(0, font_size*0, (uint8_t *)"Lichess Request", LEFT_MODE);

    BSP_LCD_DisplayStringAt(0, font_size*2, (uint8_t *)"Creating socket...", LEFT_MODE);
    sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock < 0) {
        BSP_LCD_DisplayStringAt(0, font_size*3, (uint8_t *)"Socket Creation Failed", LEFT_MODE);
        return;
    }

    BSP_LCD_DisplayStringAt(0, font_size*4, (uint8_t *)"Connecting to server...", LEFT_MODE);
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(80);
    server_addr.sin_addr.s_addr = inet_addr("37.187.205.99");

    if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        BSP_LCD_DisplayStringAt(0, font_size*5, (uint8_t *)"Connection Failed", LEFT_MODE);
        close(sock);
        return;
    }

    BSP_LCD_DisplayStringAt(0, font_size*6, (uint8_t *)"Sending request...", LEFT_MODE);
    snprintf(buffer, sizeof(buffer),
             "GET %s HTTP/1.1\r\n"
             "Host: lichess.org\r\n"
             "Connection: close\r\n\r\n", path);
    send(sock, buffer, strlen(buffer), 0);

    BSP_LCD_DisplayStringAt(0, font_size*7, (uint8_t *)"Receiving response...", LEFT_MODE);

    int total_received = 0;
    int bytes_received;
    while ((bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0)) > 0) {
        buffer[bytes_received] = '\0';  // Null-terminate the received data
        total_received += bytes_received;

        // Clear screen and display latest chunk
        BSP_LCD_Clear(LCD_COLOR_BLACK);
        BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)buffer, LEFT_MODE);

        // Display total bytes received
        char received_str[50];
        snprintf(received_str, sizeof(received_str), "Bytes received: %d", total_received);
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - font_size, (uint8_t *)received_str, LEFT_MODE);

        HAL_Delay(1000);  // Pause for a second to allow reading
    }

    if (bytes_received < 0) {
        BSP_LCD_DisplayStringAt(0, font_size*8, (uint8_t *)"Receive Error", LEFT_MODE);
    } else {
        BSP_LCD_DisplayStringAt(0, font_size*8, (uint8_t *)"Request Complete", LEFT_MODE);
    }

    close(sock);
}
