/*
 * stream_process.c
 *
 *  Created on: Mar 13, 2025
 *      Author: lam
 */

#include "stream_process.h"
#include <string.h>

#define BOARD_SIZE 8

typedef enum {
    EMPTY,
    WHITE_KING, WHITE_QUEEN, WHITE_ROOK, WHITE_BISHOP, WHITE_KNIGHT, WHITE_PAWN,
    BLACK_KING, BLACK_QUEEN, BLACK_ROOK, BLACK_BISHOP, BLACK_KNIGHT, BLACK_PAWN
} Piece;

Piece board[BOARD_SIZE][BOARD_SIZE];

void draw_board(const char* piece, int row, int col) {
	BSP_LCD_SetFont(DEBUG_FONT);
	if (row == 0 && col == 0)
	{
		 BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
		 BSP_LCD_Clear(LCD_COLOR_BLACK);
	}
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
	BSP_LCD_DisplayStringAt(0, DEBUG_FONT_SIZE * row, (uint8_t*)piece, LEFT_MODE);
}

void parse_fen(const char* fen) {
    memset(board, EMPTY, sizeof(board));
    int row = 0, col = 0;

    while (*fen && *fen != ' ') {
        if (*fen == '/') {
            row++;
            col = 0;
        } else if (*fen >= '1' && *fen <= '8') {
            col += *fen - '0';
        } else {
            Piece piece;
            switch (*fen) {
                case 'K': piece = WHITE_KING; break;
                case 'Q': piece = WHITE_QUEEN; break;
                case 'R': piece = WHITE_ROOK; break;
                case 'B': piece = WHITE_BISHOP; break;
                case 'N': piece = WHITE_KNIGHT; break;
                case 'P': piece = WHITE_PAWN; break;
                case 'k': piece = BLACK_KING; break;
                case 'q': piece = BLACK_QUEEN; break;
                case 'r': piece = BLACK_ROOK; break;
                case 'b': piece = BLACK_BISHOP; break;
                case 'n': piece = BLACK_KNIGHT; break;
                case 'p': piece = BLACK_PAWN; break;
                default: piece = EMPTY;
            }
            board[row][col++] = piece;
        }
        draw_board(fen, row, col);
        fen++;
    }
}

void process_stream(const char* buffer) {
	const char* fen_start = strstr(buffer, "\"fen\":\"");
	if (fen_start) {
	    fen_start += 7; // Sauter "fen":"
	    const char* fen_end = strchr(fen_start, '"');
	    if (fen_end) {
	        char fen[128];
	        int fen_length = fen_end - fen_start;
	        strncpy(fen, fen_start, fen_length);
	        fen[fen_length] = '\0';
	        debug_log(0, (char*)fen, 0);
	        parse_fen(fen);
	    }
	}
}
