/*
 * stream_process.c
 *
 *  Created on: Mar 13, 2025
 *      Author: lam
 */

#include "stream_process.h"
#include <string.h>
#include <ctype.h>

#define BOARD_SIZE 8
static char previous_board[BOARD_SIZE][BOARD_SIZE];

void draw_board(const char piece, int row, int col) {
    BSP_LCD_SetFont(PIECE_FONT);
    const int SQUARE_SIZE = PIECE_FONT_SIZE;

    // Vérifier si la case a changé
    if (previous_board[row][col] == piece) {
        return; // Ne pas redessiner si rien n'a changé
    }
    previous_board[row][col] = piece; // Mettre à jour l'état sauvegardé

    // Déterminer la couleur de la case
    uint32_t square_color = ((row + col) % 2 == 0) ? LCD_COLOR_LIGHTGRAY : LCD_COLOR_BROWN;

    // Dessiner le carré de la case
    BSP_LCD_SetBackColor(square_color);
    BSP_LCD_FillRect(col * SQUARE_SIZE + 150, row * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE);

    // Déterminer la couleur de la pièce
    char display_piece = piece;
    if (islower(piece)) {
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
        display_piece = toupper(piece);
    } else {
        BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
    }

    // Afficher la pièce si ce n'est pas une case vide
    if (piece != ' ') {
        char piece_str[2] = {display_piece, '\0'};
        BSP_LCD_DisplayStringAt(col * SQUARE_SIZE + 150, row * SQUARE_SIZE, (uint8_t*)piece_str, LEFT_MODE);
    }
}

void parse_fen(const char* fen) {
    int row = 0, col = 0;

    while (*fen && *fen != ' ') {
        if (*fen == '/') {
            row++;
            col = 0;
        } else if (*fen >= '1' && *fen <= '8') {
            int empty_squares = *fen - '0';
            for (int i = 0; i < empty_squares; i++) {
                draw_board(' ', row, col);
                col++;
            }
        } else {
            draw_board(*fen, row, col);
            col++;
        }
        fen++;
    }
}

void process_stream(const char* buffer) {
    const char* fen_start = strstr(buffer, "\"fen\":\"");
    if (fen_start) {
        fen_start += 7; // Sauter "fen":"
        const char* fen_end = strchr(fen_start, '"');
        if (fen_end) {
            char fen[128];
            int fen_length = fen_end - fen_start;
            strncpy(fen, fen_start, fen_length);
            fen[fen_length] = '\0';
            parse_fen(fen);
        }
    }
}

// Initialisation de l'échiquier pour forcer le premier affichage
void init_board_state() {
	const int SQUARE_SIZE = PIECE_FONT_SIZE;
    for (int i = 0; i < BOARD_SIZE; i++) {
        for (int j = 0; j < BOARD_SIZE; j++) {
        	uint32_t square_color = ((i + j) % 2 == 0) ? LCD_COLOR_LIGHTGRAY : LCD_COLOR_BROWN;
        	BSP_LCD_SetBackColor(square_color);
        	BSP_LCD_FillRect(j * SQUARE_SIZE + 150, i * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE);
        }
    }
}

