/*
 * stream_process.c
 *
 *  Created on: Mar 13, 2025
 *      Author: lam
 */

#include "stream_process.h"
#include <string.h>

#define BOARD_SIZE 8

int x_center = (480 / 2) - (4 * 24);
int y_center = (272 / 2) - (4 * 24);

static char previous_board[BOARD_SIZE][BOARD_SIZE];

void draw_board(const char piece, int row, int col) {
	if (previous_board[row][col] == piece) return;
    BSP_LCD_SetFont(PIECE_FONT);

    // Définir la taille des cases
    const int SQUARE_SIZE = PIECE_FONT_SIZE;

    // Déterminer la couleur de la case
    uint32_t square_color = ((row + col) % 2 == 0) ? LCD_COLOR_LIGHTGRAY : LCD_COLOR_BROWN;

    // Dessiner le carré de la case
    BSP_LCD_SetBackColor(square_color);
    BSP_LCD_FillRect(col * SQUARE_SIZE + x_center, row * SQUARE_SIZE + y_center, SQUARE_SIZE, SQUARE_SIZE);

    // Déterminer la couleur de la pièce
    char display_piece = piece;
    if (islower(piece)) {
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
        display_piece = toupper(piece);
    } else {
        BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
    }

    // Afficher la pièce
    char piece_str[2] = {display_piece, '\0'};
    BSP_LCD_DisplayStringAt(col * SQUARE_SIZE + x_center, row * SQUARE_SIZE + y_center, (uint8_t*)piece_str, LEFT_MODE);
    previous_board[row][col] = piece;
}



void parse_fen(const char* fen) {
    int row = 0, col = 0;

    while (*fen && *fen != ' ') {
        if (*fen == '/') {
            row++;
            col = 0;
        } else if (*fen >= '1' && *fen <= '8') {
            int empty_squares = *fen - '0';
            for (int i = 0; i < empty_squares; i++) {
                draw_board(' ', row, col);
                col++;
            }
        } else {
            draw_board(*fen, row, col);
            col++;
        }
        fen++;
    }
}


void process_stream(const char* buffer) {
    // Partie FEN (déjà correcte dans votre code)
    const char* fen_start = strstr(buffer, "\"fen\":\"");
    if (fen_start) {
        fen_start += 7; // Sauter "fen":"
        const char* fen_end = strchr(fen_start, '"');
        if (fen_end) {
            char fen[128];
            int fen_length = fen_end - fen_start;
            strncpy(fen, fen_start, fen_length);
            fen[fen_length] = '\0';
            parse_fen(fen);
        }
    }

    // Extraire les informations des joueurs
    const char* players_start = strstr(buffer, "\"players\":[");
    if (players_start) {
        const char* player_white = NULL;
        const char* player_black = NULL;

        // Trouver les sections des joueurs
        players_start += 11; // Sauter "players":[
        const char* current_pos = players_start;

        // Chercher les deux joueurs
        while (current_pos && *current_pos) {
            const char* color_field = strstr(current_pos, "\"color\":\"");
            if (!color_field) break;

            color_field += 9; // Sauter "color":"
            if (strncmp(color_field, "white", 5) == 0) {
                player_white = current_pos;
            } else if (strncmp(color_field, "black", 5) == 0) {
                player_black = current_pos;
            }

            // Avancer au joueur suivant ou à la fin de la section players
            current_pos = strchr(current_pos + 1, '}');
            if (current_pos) current_pos++;
        }

        // Extraire les informations du joueur blanc
        if (player_white) {
            const char* name_start = strstr(player_white, "\"name\":\"");
            if (name_start) {
                name_start += 8; // Sauter "name":"
                const char* name_end = strchr(name_start, '"');
                if (name_end) {
                    char white_name[64];
                    int name_length = name_end - name_start;
                    strncpy(white_name, name_start, name_length);
                    white_name[name_length] = '\0';

                    // Titre du joueur blanc (peut être absent)
                    char white_title[8] = ""; // Vide par défaut
                    const char* title_start = strstr(player_white, "\"title\":\"");
                    if (title_start && title_start < strchr(player_white, '}')) {
                        title_start += 9; // Sauter "title":"
                        const char* title_end = strchr(title_start, '"');
                        if (title_end) {
                            int title_length = title_end - title_start;
                            strncpy(white_title, title_start, title_length);
                            white_title[title_length] = '\0';
                        }
                    }

                    // Rating du joueur blanc
                    int white_rating = 0;
                    const char* rating_start = strstr(player_white, "\"rating\":");
                    if (rating_start) {
                        rating_start += 9; // Sauter "rating":
                        white_rating = atoi(rating_start);
                    }

                    // Utiliser les informations (adapter selon vos besoins)
                    debug_log(0, white_name, 0);
                    debug_log(0, white_title, 0);
                    debug_log(0, &white_rating, 0);
                }
            }
        }

        // Extraire les informations du joueur noir
        if (player_black) {
            const char* name_start = strstr(player_black, "\"name\":\"");
            if (name_start) {
                name_start += 8; // Sauter "name":"
                const char* name_end = strchr(name_start, '"');
                if (name_end) {
                    char black_name[64];
                    int name_length = name_end - name_start;
                    strncpy(black_name, name_start, name_length);
                    black_name[name_length] = '\0';

                    // Titre du joueur noir (peut être absent)
                    char black_title[8] = ""; // Vide par défaut
                    const char* title_start = strstr(player_black, "\"title\":\"");
                    if (title_start && title_start < strchr(player_black, '}')) {
                        title_start += 9; // Sauter "title":"
                        const char* title_end = strchr(title_start, '"');
                        if (title_end) {
                            int title_length = title_end - title_start;
                            strncpy(black_title, title_start, title_length);
                            black_title[title_length] = '\0';
                        }
                    }

                    // Rating du joueur noir
                    int black_rating = 0;
                    const char* rating_start = strstr(player_black, "\"rating\":");
                    if (rating_start) {
                        rating_start += 9; // Sauter "rating":
                        black_rating = atoi(rating_start);
                    }

                    // Utiliser les informations (adapter selon vos besoins)
                    debug_log(0, black_name, 0);
                    debug_log(0, black_title, 0);
                    debug_log(0, &black_rating, 0);
                }
            }
        }
    }
}

void init_board_state() {
    for (int i = 0; i < BOARD_SIZE; i++) {
        for (int j = 0; j < BOARD_SIZE; j++) {
            previous_board[i][j] = ' ';
            draw_board('!', i, j);
        }
    }
}

