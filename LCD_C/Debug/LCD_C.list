
LCD_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b54  0800d6b0  0800d6b0  0000e6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f204  0800f204  0001108c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f204  0800f204  00010204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f20c  0800f20c  0001108c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f20c  0800f20c  0001020c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f210  0800f210  00010210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800f214  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000905c  2000008c  0800f2a0  0001108c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200090e8  0800f2a0  000110e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001108c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002caff  00000000  00000000  000110bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005dbb  00000000  00000000  0003dbbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020a8  00000000  00000000  00043978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001902  00000000  00000000  00045a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032774  00000000  00000000  00047322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a7a0  00000000  00000000  00079a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00127bdf  00000000  00000000  000a4236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cbe15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008be8  00000000  00000000  001cbe58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001d4a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d698 	.word	0x0800d698

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	0800d698 	.word	0x0800d698

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
	...

08000534 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	4a07      	ldr	r2, [pc, #28]	@ (8000560 <vApplicationGetIdleTaskMemory+0x2c>)
 8000544:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	4a06      	ldr	r2, [pc, #24]	@ (8000564 <vApplicationGetIdleTaskMemory+0x30>)
 800054a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2280      	movs	r2, #128	@ 0x80
 8000550:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	200000a8 	.word	0x200000a8
 8000564:	20000100 	.word	0x20000100

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b08a      	sub	sp, #40	@ 0x28
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f001 fac7 	bl	8001b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f84d 	bl	8000610 <SystemClock_Config>
  //MX_TIM12_Init();
  //MX_USART1_UART_Init();
  //MX_USART6_UART_Init();
  //MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000576:	f000 fc2d 	bl	8000dd4 <BSP_LCD_Init>
    /* Initialize the LCD Layers */
    BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 800057a:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800057e:	2001      	movs	r0, #1
 8000580:	f000 fcc0 	bl	8000f04 <BSP_LCD_LayerDefaultInit>

    /* Set LCD Foreground Layer  */
    BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8000584:	2001      	movs	r0, #1
 8000586:	f000 fd1d 	bl	8000fc4 <BSP_LCD_SelectLayer>

    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800058a:	481d      	ldr	r0, [pc, #116]	@ (8000600 <main+0x98>)
 800058c:	f000 fd5c 	bl	8001048 <BSP_LCD_SetFont>

    /* Clear the LCD */
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000590:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000594:	f000 fd3e 	bl	8001014 <BSP_LCD_SetBackColor>
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000598:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800059c:	f000 fd84 	bl	80010a8 <BSP_LCD_Clear>

    /* Set the LCD Text Color */
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80005a4:	f000 fd1e 	bl	8000fe4 <BSP_LCD_SetTextColor>
    uint32_t y_size = BSP_LCD_GetYSize();
 80005a8:	f000 fc98 	bl	8000edc <BSP_LCD_GetYSize>
 80005ac:	6278      	str	r0, [r7, #36]	@ 0x24
    uint16_t font_size = BSP_LCD_GetFont()->Height;
 80005ae:	f000 fd65 	bl	800107c <BSP_LCD_GetFont>
 80005b2:	4603      	mov	r3, r0
 80005b4:	88db      	ldrh	r3, [r3, #6]
 80005b6:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t y_center = (y_size / 2) - (font_size / 2);
 80005b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ba:	085b      	lsrs	r3, r3, #1
 80005bc:	b29a      	uxth	r2, r3
 80005be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80005c0:	085b      	lsrs	r3, r3, #1
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	843b      	strh	r3, [r7, #32]


    /* Display LCD messages */
    BSP_LCD_DisplayStringAt(0, y_center, (uint8_t *)"Hello, there!", CENTER_MODE);
 80005c8:	8c39      	ldrh	r1, [r7, #32]
 80005ca:	2301      	movs	r3, #1
 80005cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000604 <main+0x9c>)
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fdd6 	bl	8001180 <BSP_LCD_DisplayStringAt>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <main+0xa0>)
 80005d6:	1d3c      	adds	r4, r7, #4
 80005d8:	461d      	mov	r5, r3
 80005da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f00a f929 	bl	800a842 <osThreadCreate>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a06      	ldr	r2, [pc, #24]	@ (800060c <main+0xa4>)
 80005f4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f6:	f00a f91d 	bl	800a834 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fa:	bf00      	nop
 80005fc:	e7fd      	b.n	80005fa <main+0x92>
 80005fe:	bf00      	nop
 8000600:	20000004 	.word	0x20000004
 8000604:	0800d6b0 	.word	0x0800d6b0
 8000608:	0800d6cc 	.word	0x0800d6cc
 800060c:	200003e8 	.word	0x200003e8

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	@ 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f00c ff9e 	bl	800d560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000634:	f004 ff4a 	bl	80054cc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	4b2c      	ldr	r3, [pc, #176]	@ (80006ec <SystemClock_Config+0xdc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	4a2b      	ldr	r2, [pc, #172]	@ (80006ec <SystemClock_Config+0xdc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	@ 0x40
 8000644:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <SystemClock_Config+0xdc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <SystemClock_Config+0xe0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a26      	ldr	r2, [pc, #152]	@ (80006f0 <SystemClock_Config+0xe0>)
 8000656:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <SystemClock_Config+0xe0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000668:	2309      	movs	r3, #9
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000672:	2301      	movs	r3, #1
 8000674:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000680:	2319      	movs	r3, #25
 8000682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000684:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000688:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800068e:	2309      	movs	r3, #9
 8000690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	4618      	mov	r0, r3
 8000698:	f004 ff78 	bl	800558c <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006a2:	f000 f843 	bl	800072c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a6:	f004 ff21 	bl	80054ec <HAL_PWREx_EnableOverDrive>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006b0:	f000 f83c 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2106      	movs	r1, #6
 80006d2:	4618      	mov	r0, r3
 80006d4:	f005 f9fe 	bl	8005ad4 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006de:	f000 f825 	bl	800072c <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	@ 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80006fc:	f00c fb7a 	bl	800cdf4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f00a f8ea 	bl	800a8da <osDelay>
 8000706:	e7fb      	b.n	8000700 <StartDefaultTask+0xc>

08000708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a04      	ldr	r2, [pc, #16]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d101      	bne.n	800071e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800071a:	f001 f9ff 	bl	8001b1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40001000 	.word	0x40001000

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <Error_Handler+0x8>

08000738 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <HAL_MspInit+0x4c>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000742:	4a10      	ldr	r2, [pc, #64]	@ (8000784 <HAL_MspInit+0x4c>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000748:	6413      	str	r3, [r2, #64]	@ 0x40
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <HAL_MspInit+0x4c>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <HAL_MspInit+0x4c>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075a:	4a0a      	ldr	r2, [pc, #40]	@ (8000784 <HAL_MspInit+0x4c>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000760:	6453      	str	r3, [r2, #68]	@ 0x44
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <HAL_MspInit+0x4c>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	210f      	movs	r1, #15
 8000772:	f06f 0001 	mvn.w	r0, #1
 8000776:	f001 facd 	bl	8001d14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0d      	ldr	r2, [pc, #52]	@ (80007cc <HAL_DMA2D_MspInit+0x44>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d113      	bne.n	80007c2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <HAL_DMA2D_MspInit+0x48>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a0c      	ldr	r2, [pc, #48]	@ (80007d0 <HAL_DMA2D_MspInit+0x48>)
 80007a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <HAL_DMA2D_MspInit+0x48>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2105      	movs	r1, #5
 80007b6:	205a      	movs	r0, #90	@ 0x5a
 80007b8:	f001 faac 	bl	8001d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80007bc:	205a      	movs	r0, #90	@ 0x5a
 80007be:	f001 fac5 	bl	8001d4c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	4002b000 	.word	0x4002b000
 80007d0:	40023800 	.word	0x40023800

080007d4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08e      	sub	sp, #56	@ 0x38
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a55      	ldr	r2, [pc, #340]	@ (8000948 <HAL_LTDC_MspInit+0x174>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	f040 80a3 	bne.w	800093e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80007f8:	4b54      	ldr	r3, [pc, #336]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 80007fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007fc:	4a53      	ldr	r2, [pc, #332]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 80007fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000802:	6453      	str	r3, [r2, #68]	@ 0x44
 8000804:	4b51      	ldr	r3, [pc, #324]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 8000806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000808:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800080c:	623b      	str	r3, [r7, #32]
 800080e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000810:	4b4e      	ldr	r3, [pc, #312]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 8000812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000814:	4a4d      	ldr	r2, [pc, #308]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 8000816:	f043 0310 	orr.w	r3, r3, #16
 800081a:	6313      	str	r3, [r2, #48]	@ 0x30
 800081c:	4b4b      	ldr	r3, [pc, #300]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 800081e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000820:	f003 0310 	and.w	r3, r3, #16
 8000824:	61fb      	str	r3, [r7, #28]
 8000826:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000828:	4b48      	ldr	r3, [pc, #288]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082c:	4a47      	ldr	r2, [pc, #284]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 800082e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000832:	6313      	str	r3, [r2, #48]	@ 0x30
 8000834:	4b45      	ldr	r3, [pc, #276]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800083c:	61bb      	str	r3, [r7, #24]
 800083e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000840:	4b42      	ldr	r3, [pc, #264]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000844:	4a41      	ldr	r2, [pc, #260]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 8000846:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800084a:	6313      	str	r3, [r2, #48]	@ 0x30
 800084c:	4b3f      	ldr	r3, [pc, #252]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000858:	4b3c      	ldr	r3, [pc, #240]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085c:	4a3b      	ldr	r2, [pc, #236]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 800085e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000862:	6313      	str	r3, [r2, #48]	@ 0x30
 8000864:	4b39      	ldr	r3, [pc, #228]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000870:	4b36      	ldr	r3, [pc, #216]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000874:	4a35      	ldr	r2, [pc, #212]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 8000876:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800087a:	6313      	str	r3, [r2, #48]	@ 0x30
 800087c:	4b33      	ldr	r3, [pc, #204]	@ (800094c <HAL_LTDC_MspInit+0x178>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000888:	2310      	movs	r3, #16
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000898:	230e      	movs	r3, #14
 800089a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a0:	4619      	mov	r1, r3
 80008a2:	482b      	ldr	r0, [pc, #172]	@ (8000950 <HAL_LTDC_MspInit+0x17c>)
 80008a4:	f001 ffba 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80008a8:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008ba:	230e      	movs	r3, #14
 80008bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80008be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c2:	4619      	mov	r1, r3
 80008c4:	4823      	ldr	r0, [pc, #140]	@ (8000954 <HAL_LTDC_MspInit+0x180>)
 80008c6:	f001 ffa9 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80008ca:	23f7      	movs	r3, #247	@ 0xf7
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008da:	230e      	movs	r3, #14
 80008dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	481c      	ldr	r0, [pc, #112]	@ (8000958 <HAL_LTDC_MspInit+0x184>)
 80008e6:	f001 ff99 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80008ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80008fc:	2309      	movs	r3, #9
 80008fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000904:	4619      	mov	r1, r3
 8000906:	4815      	ldr	r0, [pc, #84]	@ (800095c <HAL_LTDC_MspInit+0x188>)
 8000908:	f001 ff88 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800090c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800091e:	230e      	movs	r3, #14
 8000920:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000926:	4619      	mov	r1, r3
 8000928:	480d      	ldr	r0, [pc, #52]	@ (8000960 <HAL_LTDC_MspInit+0x18c>)
 800092a:	f001 ff77 	bl	800281c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2105      	movs	r1, #5
 8000932:	2058      	movs	r0, #88	@ 0x58
 8000934:	f001 f9ee 	bl	8001d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000938:	2058      	movs	r0, #88	@ 0x58
 800093a:	f001 fa07 	bl	8001d4c <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800093e:	bf00      	nop
 8000940:	3738      	adds	r7, #56	@ 0x38
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40016800 	.word	0x40016800
 800094c:	40023800 	.word	0x40023800
 8000950:	40021000 	.word	0x40021000
 8000954:	40022400 	.word	0x40022400
 8000958:	40022800 	.word	0x40022800
 800095c:	40021800 	.word	0x40021800
 8000960:	40022000 	.word	0x40022000

08000964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000964:	b480      	push	{r7}
 8000966:	b089      	sub	sp, #36	@ 0x24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a2e      	ldr	r2, [pc, #184]	@ (8000a2c <HAL_TIM_Base_MspInit+0xc8>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d10c      	bne.n	8000990 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000976:	4b2e      	ldr	r3, [pc, #184]	@ (8000a30 <HAL_TIM_Base_MspInit+0xcc>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	4a2d      	ldr	r2, [pc, #180]	@ (8000a30 <HAL_TIM_Base_MspInit+0xcc>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6453      	str	r3, [r2, #68]	@ 0x44
 8000982:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <HAL_TIM_Base_MspInit+0xcc>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	61fb      	str	r3, [r7, #28]
 800098c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800098e:	e046      	b.n	8000a1e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000998:	d10c      	bne.n	80009b4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800099a:	4b25      	ldr	r3, [pc, #148]	@ (8000a30 <HAL_TIM_Base_MspInit+0xcc>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	4a24      	ldr	r2, [pc, #144]	@ (8000a30 <HAL_TIM_Base_MspInit+0xcc>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a6:	4b22      	ldr	r3, [pc, #136]	@ (8000a30 <HAL_TIM_Base_MspInit+0xcc>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	61bb      	str	r3, [r7, #24]
 80009b0:	69bb      	ldr	r3, [r7, #24]
}
 80009b2:	e034      	b.n	8000a1e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000a34 <HAL_TIM_Base_MspInit+0xd0>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d10c      	bne.n	80009d8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009be:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <HAL_TIM_Base_MspInit+0xcc>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	4a1b      	ldr	r2, [pc, #108]	@ (8000a30 <HAL_TIM_Base_MspInit+0xcc>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ca:	4b19      	ldr	r3, [pc, #100]	@ (8000a30 <HAL_TIM_Base_MspInit+0xcc>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697b      	ldr	r3, [r7, #20]
}
 80009d6:	e022      	b.n	8000a1e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a16      	ldr	r2, [pc, #88]	@ (8000a38 <HAL_TIM_Base_MspInit+0xd4>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d10c      	bne.n	80009fc <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80009e2:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <HAL_TIM_Base_MspInit+0xcc>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	4a12      	ldr	r2, [pc, #72]	@ (8000a30 <HAL_TIM_Base_MspInit+0xcc>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <HAL_TIM_Base_MspInit+0xcc>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
}
 80009fa:	e010      	b.n	8000a1e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0e      	ldr	r2, [pc, #56]	@ (8000a3c <HAL_TIM_Base_MspInit+0xd8>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d10b      	bne.n	8000a1e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000a06:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <HAL_TIM_Base_MspInit+0xcc>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	4a09      	ldr	r2, [pc, #36]	@ (8000a30 <HAL_TIM_Base_MspInit+0xcc>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a12:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <HAL_TIM_Base_MspInit+0xcc>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
}
 8000a1e:	bf00      	nop
 8000a20:	3724      	adds	r7, #36	@ 0x24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40010000 	.word	0x40010000
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40000400 	.word	0x40000400
 8000a38:	40000c00 	.word	0x40000c00
 8000a3c:	40010400 	.word	0x40010400

08000a40 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a54:	4b3a      	ldr	r3, [pc, #232]	@ (8000b40 <HAL_FMC_MspInit+0x100>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d16d      	bne.n	8000b38 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000a5c:	4b38      	ldr	r3, [pc, #224]	@ (8000b40 <HAL_FMC_MspInit+0x100>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a62:	4b38      	ldr	r3, [pc, #224]	@ (8000b44 <HAL_FMC_MspInit+0x104>)
 8000a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a66:	4a37      	ldr	r2, [pc, #220]	@ (8000b44 <HAL_FMC_MspInit+0x104>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6393      	str	r3, [r2, #56]	@ 0x38
 8000a6e:	4b35      	ldr	r3, [pc, #212]	@ (8000b44 <HAL_FMC_MspInit+0x104>)
 8000a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000a7a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000a7e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	482c      	ldr	r0, [pc, #176]	@ (8000b48 <HAL_FMC_MspInit+0x108>)
 8000a96:	f001 fec1 	bl	800281c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a9a:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000a9e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aac:	230c      	movs	r3, #12
 8000aae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4825      	ldr	r0, [pc, #148]	@ (8000b4c <HAL_FMC_MspInit+0x10c>)
 8000ab6:	f001 feb1 	bl	800281c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000aba:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000abe:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000acc:	230c      	movs	r3, #12
 8000ace:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	481e      	ldr	r0, [pc, #120]	@ (8000b50 <HAL_FMC_MspInit+0x110>)
 8000ad6:	f001 fea1 	bl	800281c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000ada:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000ade:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aec:	230c      	movs	r3, #12
 8000aee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4619      	mov	r1, r3
 8000af4:	4817      	ldr	r0, [pc, #92]	@ (8000b54 <HAL_FMC_MspInit+0x114>)
 8000af6:	f001 fe91 	bl	800281c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000afa:	2328      	movs	r3, #40	@ 0x28
 8000afc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4619      	mov	r1, r3
 8000b12:	4811      	ldr	r0, [pc, #68]	@ (8000b58 <HAL_FMC_MspInit+0x118>)
 8000b14:	f001 fe82 	bl	800281c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b28:	230c      	movs	r3, #12
 8000b2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480a      	ldr	r0, [pc, #40]	@ (8000b5c <HAL_FMC_MspInit+0x11c>)
 8000b32:	f001 fe73 	bl	800281c <HAL_GPIO_Init>
 8000b36:	e000      	b.n	8000b3a <HAL_FMC_MspInit+0xfa>
    return;
 8000b38:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200003ec 	.word	0x200003ec
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40021800 	.word	0x40021800
 8000b50:	40020c00 	.word	0x40020c00
 8000b54:	40021400 	.word	0x40021400
 8000b58:	40021c00 	.word	0x40021c00
 8000b5c:	40020800 	.word	0x40020800

08000b60 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b68:	f7ff ff6a 	bl	8000a40 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	@ 0x38
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b84:	4b33      	ldr	r3, [pc, #204]	@ (8000c54 <HAL_InitTick+0xe0>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b88:	4a32      	ldr	r2, [pc, #200]	@ (8000c54 <HAL_InitTick+0xe0>)
 8000b8a:	f043 0310 	orr.w	r3, r3, #16
 8000b8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b90:	4b30      	ldr	r3, [pc, #192]	@ (8000c54 <HAL_InitTick+0xe0>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b94:	f003 0310 	and.w	r3, r3, #16
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b9c:	f107 0210 	add.w	r2, r7, #16
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f005 f966 	bl	8005e78 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d103      	bne.n	8000bbe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bb6:	f005 f94b 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 8000bba:	6378      	str	r0, [r7, #52]	@ 0x34
 8000bbc:	e004      	b.n	8000bc8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bbe:	f005 f947 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bca:	4a23      	ldr	r2, [pc, #140]	@ (8000c58 <HAL_InitTick+0xe4>)
 8000bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd0:	0c9b      	lsrs	r3, r3, #18
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <HAL_InitTick+0xe8>)
 8000bd8:	4a21      	ldr	r2, [pc, #132]	@ (8000c60 <HAL_InitTick+0xec>)
 8000bda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <HAL_InitTick+0xe8>)
 8000bde:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000be2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000be4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c5c <HAL_InitTick+0xe8>)
 8000be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <HAL_InitTick+0xe8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <HAL_InitTick+0xe8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <HAL_InitTick+0xe8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bfc:	4817      	ldr	r0, [pc, #92]	@ (8000c5c <HAL_InitTick+0xe8>)
 8000bfe:	f005 fdee 	bl	80067de <HAL_TIM_Base_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d11b      	bne.n	8000c48 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c10:	4812      	ldr	r0, [pc, #72]	@ (8000c5c <HAL_InitTick+0xe8>)
 8000c12:	f005 fe3b 	bl	800688c <HAL_TIM_Base_Start_IT>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d111      	bne.n	8000c48 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c24:	2036      	movs	r0, #54	@ 0x36
 8000c26:	f001 f891 	bl	8001d4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d808      	bhi.n	8000c42 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	2036      	movs	r0, #54	@ 0x36
 8000c36:	f001 f86d 	bl	8001d14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <HAL_InitTick+0xf0>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	e002      	b.n	8000c48 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3738      	adds	r7, #56	@ 0x38
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	431bde83 	.word	0x431bde83
 8000c5c:	200003f0 	.word	0x200003f0
 8000c60:	40001000 	.word	0x40001000
 8000c64:	20000010 	.word	0x20000010

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <NMI_Handler+0x4>

08000c70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <MemManage_Handler+0x4>

08000c80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ca4:	4802      	ldr	r0, [pc, #8]	@ (8000cb0 <TIM6_DAC_IRQHandler+0x10>)
 8000ca6:	f005 fe69 	bl	800697c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200003f0 	.word	0x200003f0

08000cb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cb8:	4802      	ldr	r0, [pc, #8]	@ (8000cc4 <OTG_FS_IRQHandler+0x10>)
 8000cba:	f002 fa55 	bl	8003168 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20008bc0 	.word	0x20008bc0

08000cc8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000ccc:	4802      	ldr	r0, [pc, #8]	@ (8000cd8 <LTDC_IRQHandler+0x10>)
 8000cce:	f004 f955 	bl	8004f7c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000340 	.word	0x20000340

08000cdc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8000ce0:	4802      	ldr	r0, [pc, #8]	@ (8000cec <DMA2D_IRQHandler+0x10>)
 8000ce2:	f001 fb5d 	bl	80023a0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000300 	.word	0x20000300

08000cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf8:	4a14      	ldr	r2, [pc, #80]	@ (8000d4c <_sbrk+0x5c>)
 8000cfa:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <_sbrk+0x60>)
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d04:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <_sbrk+0x64>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <_sbrk+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d12:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d207      	bcs.n	8000d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d20:	f00c fc36 	bl	800d590 <__errno>
 8000d24:	4603      	mov	r3, r0
 8000d26:	220c      	movs	r2, #12
 8000d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d2e:	e009      	b.n	8000d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d36:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a05      	ldr	r2, [pc, #20]	@ (8000d54 <_sbrk+0x64>)
 8000d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20050000 	.word	0x20050000
 8000d50:	00000400 	.word	0x00000400
 8000d54:	2000043c 	.word	0x2000043c
 8000d58:	200090e8 	.word	0x200090e8

08000d5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	@ (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d84:	f7ff ffea 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	@ (8000dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f00c fbf5 	bl	800d59c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fbd9 	bl	8000568 <main>
  bx  lr    
 8000db6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000dc4:	0800f214 	.word	0x0800f214
  ldr r2, =_sbss
 8000dc8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000dcc:	200090e8 	.word	0x200090e8

08000dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC_IRQHandler>
	...

08000dd4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8000dd8:	4b31      	ldr	r3, [pc, #196]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000dda:	2228      	movs	r2, #40	@ 0x28
 8000ddc:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8000dde:	4b30      	ldr	r3, [pc, #192]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000de0:	2209      	movs	r2, #9
 8000de2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8000de4:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000de6:	2235      	movs	r2, #53	@ 0x35
 8000de8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8000dea:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000dec:	220b      	movs	r2, #11
 8000dee:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8000df0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000df2:	f240 121b 	movw	r2, #283	@ 0x11b
 8000df6:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8000df8:	4b29      	ldr	r3, [pc, #164]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000dfa:	f240 2215 	movw	r2, #533	@ 0x215
 8000dfe:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8000e00:	4b27      	ldr	r3, [pc, #156]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000e02:	f240 121d 	movw	r2, #285	@ 0x11d
 8000e06:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8000e08:	4b25      	ldr	r3, [pc, #148]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000e0a:	f240 2235 	movw	r2, #565	@ 0x235
 8000e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8000e10:	2100      	movs	r1, #0
 8000e12:	4823      	ldr	r0, [pc, #140]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000e14:	f000 fb9e 	bl	8001554 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8000e18:	4b21      	ldr	r3, [pc, #132]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000e1a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000e1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8000e20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000e22:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8000e26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8000e28:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8000e38:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e40:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8000e46:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8000e4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e52:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8000e58:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ea4 <BSP_LCD_Init+0xd0>)
 8000e5c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8000e5e:	4810      	ldr	r0, [pc, #64]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000e60:	f004 f98c 	bl	800517c <HAL_LTDC_GetState>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d103      	bne.n	8000e72 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	480c      	ldr	r0, [pc, #48]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000e6e:	f000 fa97 	bl	80013a0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8000e72:	480b      	ldr	r0, [pc, #44]	@ (8000ea0 <BSP_LCD_Init+0xcc>)
 8000e74:	f003 ffb2 	bl	8004ddc <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e7e:	480a      	ldr	r0, [pc, #40]	@ (8000ea8 <BSP_LCD_Init+0xd4>)
 8000e80:	f001 fe78 	bl	8002b74 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2108      	movs	r1, #8
 8000e88:	4808      	ldr	r0, [pc, #32]	@ (8000eac <BSP_LCD_Init+0xd8>)
 8000e8a:	f001 fe73 	bl	8002b74 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8000e8e:	f000 fc81 	bl	8001794 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000e92:	4807      	ldr	r0, [pc, #28]	@ (8000eb0 <BSP_LCD_Init+0xdc>)
 8000e94:	f000 f8d8 	bl	8001048 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000440 	.word	0x20000440
 8000ea4:	40016800 	.word	0x40016800
 8000ea8:	40022000 	.word	0x40022000
 8000eac:	40022800 	.word	0x40022800
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <BSP_LCD_GetXSize+0x20>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a06      	ldr	r2, [pc, #24]	@ (8000ed8 <BSP_LCD_GetXSize+0x24>)
 8000ebe:	2134      	movs	r1, #52	@ 0x34
 8000ec0:	fb01 f303 	mul.w	r3, r1, r3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3360      	adds	r3, #96	@ 0x60
 8000ec8:	681b      	ldr	r3, [r3, #0]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	20000528 	.word	0x20000528
 8000ed8:	20000440 	.word	0x20000440

08000edc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <BSP_LCD_GetYSize+0x20>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a06      	ldr	r2, [pc, #24]	@ (8000f00 <BSP_LCD_GetYSize+0x24>)
 8000ee6:	2134      	movs	r1, #52	@ 0x34
 8000ee8:	fb01 f303 	mul.w	r3, r1, r3
 8000eec:	4413      	add	r3, r2
 8000eee:	3364      	adds	r3, #100	@ 0x64
 8000ef0:	681b      	ldr	r3, [r3, #0]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	20000528 	.word	0x20000528
 8000f00:	20000440 	.word	0x20000440

08000f04 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b090      	sub	sp, #64	@ 0x40
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8000f14:	f7ff ffce 	bl	8000eb4 <BSP_LCD_GetXSize>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000f20:	f7ff ffdc 	bl	8000edc <BSP_LCD_GetYSize>
 8000f24:	4603      	mov	r3, r0
 8000f26:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8000f30:	23ff      	movs	r3, #255	@ 0xff
 8000f32:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f4a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f50:	2307      	movs	r3, #7
 8000f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8000f54:	f7ff ffae 	bl	8000eb4 <BSP_LCD_GetXSize>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000f5c:	f7ff ffbe 	bl	8000edc <BSP_LCD_GetYSize>
 8000f60:	4603      	mov	r3, r0
 8000f62:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000f64:	88fa      	ldrh	r2, [r7, #6]
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4812      	ldr	r0, [pc, #72]	@ (8000fb8 <BSP_LCD_LayerDefaultInit+0xb4>)
 8000f6e:	f004 f8c7 	bl	8005100 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000f72:	88fa      	ldrh	r2, [r7, #6]
 8000f74:	4911      	ldr	r1, [pc, #68]	@ (8000fbc <BSP_LCD_LayerDefaultInit+0xb8>)
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	3304      	adds	r3, #4
 8000f82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f86:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000f88:	88fa      	ldrh	r2, [r7, #6]
 8000f8a:	490c      	ldr	r1, [pc, #48]	@ (8000fbc <BSP_LCD_LayerDefaultInit+0xb8>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	3308      	adds	r3, #8
 8000f98:	4a09      	ldr	r2, [pc, #36]	@ (8000fc0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8000f9a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000f9c:	88fa      	ldrh	r2, [r7, #6]
 8000f9e:	4907      	ldr	r1, [pc, #28]	@ (8000fbc <BSP_LCD_LayerDefaultInit+0xb8>)
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8000fae:	601a      	str	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	3740      	adds	r7, #64	@ 0x40
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000440 	.word	0x20000440
 8000fbc:	2000052c 	.word	0x2000052c
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8000fcc:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <BSP_LCD_SelectLayer+0x1c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
} 
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000528 	.word	0x20000528

08000fe4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000fec:	4b07      	ldr	r3, [pc, #28]	@ (800100c <BSP_LCD_SetTextColor+0x28>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4907      	ldr	r1, [pc, #28]	@ (8001010 <BSP_LCD_SetTextColor+0x2c>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	601a      	str	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	20000528 	.word	0x20000528
 8001010:	2000052c 	.word	0x2000052c

08001014 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <BSP_LCD_SetBackColor+0x2c>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4908      	ldr	r1, [pc, #32]	@ (8001044 <BSP_LCD_SetBackColor+0x30>)
 8001022:	4613      	mov	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	3304      	adds	r3, #4
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	601a      	str	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000528 	.word	0x20000528
 8001044:	2000052c 	.word	0x2000052c

08001048 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <BSP_LCD_SetFont+0x2c>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4908      	ldr	r1, [pc, #32]	@ (8001078 <BSP_LCD_SetFont+0x30>)
 8001056:	4613      	mov	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4413      	add	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	440b      	add	r3, r1
 8001060:	3308      	adds	r3, #8
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	601a      	str	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000528 	.word	0x20000528
 8001078:	2000052c 	.word	0x2000052c

0800107c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001080:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <BSP_LCD_GetFont+0x24>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4907      	ldr	r1, [pc, #28]	@ (80010a4 <BSP_LCD_GetFont+0x28>)
 8001086:	4613      	mov	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	3308      	adds	r3, #8
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000528 	.word	0x20000528
 80010a4:	2000052c 	.word	0x2000052c

080010a8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80010a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <BSP_LCD_Clear+0x48>)
 80010b2:	681c      	ldr	r4, [r3, #0]
 80010b4:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <BSP_LCD_Clear+0x48>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0e      	ldr	r2, [pc, #56]	@ (80010f4 <BSP_LCD_Clear+0x4c>)
 80010ba:	2134      	movs	r1, #52	@ 0x34
 80010bc:	fb01 f303 	mul.w	r3, r1, r3
 80010c0:	4413      	add	r3, r2
 80010c2:	335c      	adds	r3, #92	@ 0x5c
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	461e      	mov	r6, r3
 80010c8:	f7ff fef4 	bl	8000eb4 <BSP_LCD_GetXSize>
 80010cc:	4605      	mov	r5, r0
 80010ce:	f7ff ff05 	bl	8000edc <BSP_LCD_GetYSize>
 80010d2:	4602      	mov	r2, r0
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	2300      	movs	r3, #0
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	4613      	mov	r3, r2
 80010de:	462a      	mov	r2, r5
 80010e0:	4631      	mov	r1, r6
 80010e2:	4620      	mov	r0, r4
 80010e4:	f000 fb0a 	bl	80016fc <LL_FillBuffer>
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f0:	20000528 	.word	0x20000528
 80010f4:	20000440 	.word	0x20000440

080010f8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
 8001102:	460b      	mov	r3, r1
 8001104:	80bb      	strh	r3, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800110a:	4b1b      	ldr	r3, [pc, #108]	@ (8001178 <BSP_LCD_DisplayChar+0x80>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	491b      	ldr	r1, [pc, #108]	@ (800117c <BSP_LCD_DisplayChar+0x84>)
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	3308      	adds	r3, #8
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6819      	ldr	r1, [r3, #0]
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001126:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <BSP_LCD_DisplayChar+0x80>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4c14      	ldr	r4, [pc, #80]	@ (800117c <BSP_LCD_DisplayChar+0x84>)
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4423      	add	r3, r4
 8001136:	3308      	adds	r3, #8
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800113c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001140:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <BSP_LCD_DisplayChar+0x80>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4c0d      	ldr	r4, [pc, #52]	@ (800117c <BSP_LCD_DisplayChar+0x84>)
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4423      	add	r3, r4
 8001150:	3308      	adds	r3, #8
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	889b      	ldrh	r3, [r3, #4]
 8001156:	3307      	adds	r3, #7
 8001158:	2b00      	cmp	r3, #0
 800115a:	da00      	bge.n	800115e <BSP_LCD_DisplayChar+0x66>
 800115c:	3307      	adds	r3, #7
 800115e:	10db      	asrs	r3, r3, #3
 8001160:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001164:	18ca      	adds	r2, r1, r3
 8001166:	88b9      	ldrh	r1, [r7, #4]
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fa0e 	bl	800158c <DrawChar>
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	bd90      	pop	{r4, r7, pc}
 8001178:	20000528 	.word	0x20000528
 800117c:	2000052c 	.word	0x2000052c

08001180 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	60ba      	str	r2, [r7, #8]
 8001188:	461a      	mov	r2, r3
 800118a:	4603      	mov	r3, r0
 800118c:	81fb      	strh	r3, [r7, #14]
 800118e:	460b      	mov	r3, r1
 8001190:	81bb      	strh	r3, [r7, #12]
 8001192:	4613      	mov	r3, r2
 8001194:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8001196:	2301      	movs	r3, #1
 8001198:	83fb      	strh	r3, [r7, #30]
 800119a:	2300      	movs	r3, #0
 800119c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80011aa:	e002      	b.n	80011b2 <BSP_LCD_DisplayStringAt+0x32>
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	3301      	adds	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	617a      	str	r2, [r7, #20]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f6      	bne.n	80011ac <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80011be:	f7ff fe79 	bl	8000eb4 <BSP_LCD_GetXSize>
 80011c2:	4601      	mov	r1, r0
 80011c4:	4b50      	ldr	r3, [pc, #320]	@ (8001308 <BSP_LCD_DisplayStringAt+0x188>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4850      	ldr	r0, [pc, #320]	@ (800130c <BSP_LCD_DisplayStringAt+0x18c>)
 80011ca:	4613      	mov	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4403      	add	r3, r0
 80011d4:	3308      	adds	r3, #8
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	889b      	ldrh	r3, [r3, #4]
 80011da:	fbb1 f3f3 	udiv	r3, r1, r3
 80011de:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d01c      	beq.n	8001220 <BSP_LCD_DisplayStringAt+0xa0>
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	dc33      	bgt.n	8001252 <BSP_LCD_DisplayStringAt+0xd2>
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d002      	beq.n	80011f4 <BSP_LCD_DisplayStringAt+0x74>
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d019      	beq.n	8001226 <BSP_LCD_DisplayStringAt+0xa6>
 80011f2:	e02e      	b.n	8001252 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	1ad1      	subs	r1, r2, r3
 80011fa:	4b43      	ldr	r3, [pc, #268]	@ (8001308 <BSP_LCD_DisplayStringAt+0x188>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4843      	ldr	r0, [pc, #268]	@ (800130c <BSP_LCD_DisplayStringAt+0x18c>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4403      	add	r3, r0
 800120a:	3308      	adds	r3, #8
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	889b      	ldrh	r3, [r3, #4]
 8001210:	fb01 f303 	mul.w	r3, r1, r3
 8001214:	085b      	lsrs	r3, r3, #1
 8001216:	b29a      	uxth	r2, r3
 8001218:	89fb      	ldrh	r3, [r7, #14]
 800121a:	4413      	add	r3, r2
 800121c:	83fb      	strh	r3, [r7, #30]
      break;
 800121e:	e01b      	b.n	8001258 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8001220:	89fb      	ldrh	r3, [r7, #14]
 8001222:	83fb      	strh	r3, [r7, #30]
      break;
 8001224:	e018      	b.n	8001258 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	b299      	uxth	r1, r3
 800122e:	4b36      	ldr	r3, [pc, #216]	@ (8001308 <BSP_LCD_DisplayStringAt+0x188>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4836      	ldr	r0, [pc, #216]	@ (800130c <BSP_LCD_DisplayStringAt+0x18c>)
 8001234:	4613      	mov	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4403      	add	r3, r0
 800123e:	3308      	adds	r3, #8
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	889b      	ldrh	r3, [r3, #4]
 8001244:	fb11 f303 	smulbb	r3, r1, r3
 8001248:	b29a      	uxth	r2, r3
 800124a:	89fb      	ldrh	r3, [r7, #14]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	83fb      	strh	r3, [r7, #30]
      break;
 8001250:	e002      	b.n	8001258 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8001252:	89fb      	ldrh	r3, [r7, #14]
 8001254:	83fb      	strh	r3, [r7, #30]
      break;
 8001256:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001258:	8bfb      	ldrh	r3, [r7, #30]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <BSP_LCD_DisplayStringAt+0xe6>
 800125e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001262:	2b00      	cmp	r3, #0
 8001264:	da1d      	bge.n	80012a2 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8001266:	2301      	movs	r3, #1
 8001268:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800126a:	e01a      	b.n	80012a2 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	781a      	ldrb	r2, [r3, #0]
 8001270:	89b9      	ldrh	r1, [r7, #12]
 8001272:	8bfb      	ldrh	r3, [r7, #30]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff3f 	bl	80010f8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800127a:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <BSP_LCD_DisplayStringAt+0x188>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4923      	ldr	r1, [pc, #140]	@ (800130c <BSP_LCD_DisplayStringAt+0x18c>)
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	3308      	adds	r3, #8
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	889a      	ldrh	r2, [r3, #4]
 8001290:	8bfb      	ldrh	r3, [r7, #30]
 8001292:	4413      	add	r3, r2
 8001294:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3301      	adds	r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
    i++;
 800129c:	8bbb      	ldrh	r3, [r7, #28]
 800129e:	3301      	adds	r3, #1
 80012a0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bf14      	ite	ne
 80012aa:	2301      	movne	r3, #1
 80012ac:	2300      	moveq	r3, #0
 80012ae:	b2dc      	uxtb	r4, r3
 80012b0:	f7ff fe00 	bl	8000eb4 <BSP_LCD_GetXSize>
 80012b4:	8bb9      	ldrh	r1, [r7, #28]
 80012b6:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <BSP_LCD_DisplayStringAt+0x188>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4d14      	ldr	r5, [pc, #80]	@ (800130c <BSP_LCD_DisplayStringAt+0x18c>)
 80012bc:	4613      	mov	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	442b      	add	r3, r5
 80012c6:	3308      	adds	r3, #8
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	889b      	ldrh	r3, [r3, #4]
 80012cc:	fb01 f303 	mul.w	r3, r1, r3
 80012d0:	1ac3      	subs	r3, r0, r3
 80012d2:	b299      	uxth	r1, r3
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <BSP_LCD_DisplayStringAt+0x188>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	480c      	ldr	r0, [pc, #48]	@ (800130c <BSP_LCD_DisplayStringAt+0x18c>)
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4403      	add	r3, r0
 80012e4:	3308      	adds	r3, #8
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	889b      	ldrh	r3, [r3, #4]
 80012ea:	4299      	cmp	r1, r3
 80012ec:	bf2c      	ite	cs
 80012ee:	2301      	movcs	r3, #1
 80012f0:	2300      	movcc	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4023      	ands	r3, r4
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1b7      	bne.n	800126c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3720      	adds	r7, #32
 8001302:	46bd      	mov	sp, r7
 8001304:	bdb0      	pop	{r4, r5, r7, pc}
 8001306:	bf00      	nop
 8001308:	20000528 	.word	0x20000528
 800130c:	2000052c 	.word	0x2000052c

08001310 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	603a      	str	r2, [r7, #0]
 800131a:	80fb      	strh	r3, [r7, #6]
 800131c:	460b      	mov	r3, r1
 800131e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001320:	4b1d      	ldr	r3, [pc, #116]	@ (8001398 <BSP_LCD_DrawPixel+0x88>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1d      	ldr	r2, [pc, #116]	@ (800139c <BSP_LCD_DrawPixel+0x8c>)
 8001326:	2134      	movs	r1, #52	@ 0x34
 8001328:	fb01 f303 	mul.w	r3, r1, r3
 800132c:	4413      	add	r3, r2
 800132e:	3348      	adds	r3, #72	@ 0x48
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d116      	bne.n	8001364 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001336:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <BSP_LCD_DrawPixel+0x88>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a18      	ldr	r2, [pc, #96]	@ (800139c <BSP_LCD_DrawPixel+0x8c>)
 800133c:	2134      	movs	r1, #52	@ 0x34
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	4413      	add	r3, r2
 8001344:	335c      	adds	r3, #92	@ 0x5c
 8001346:	681c      	ldr	r4, [r3, #0]
 8001348:	88bd      	ldrh	r5, [r7, #4]
 800134a:	f7ff fdb3 	bl	8000eb4 <BSP_LCD_GetXSize>
 800134e:	4603      	mov	r3, r0
 8001350:	fb03 f205 	mul.w	r2, r3, r5
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	4413      	add	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4423      	add	r3, r4
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	b292      	uxth	r2, r2
 8001360:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8001362:	e015      	b.n	8001390 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <BSP_LCD_DrawPixel+0x88>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0c      	ldr	r2, [pc, #48]	@ (800139c <BSP_LCD_DrawPixel+0x8c>)
 800136a:	2134      	movs	r1, #52	@ 0x34
 800136c:	fb01 f303 	mul.w	r3, r1, r3
 8001370:	4413      	add	r3, r2
 8001372:	335c      	adds	r3, #92	@ 0x5c
 8001374:	681c      	ldr	r4, [r3, #0]
 8001376:	88bd      	ldrh	r5, [r7, #4]
 8001378:	f7ff fd9c 	bl	8000eb4 <BSP_LCD_GetXSize>
 800137c:	4603      	mov	r3, r0
 800137e:	fb03 f205 	mul.w	r2, r3, r5
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4423      	add	r3, r4
 800138a:	461a      	mov	r2, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bdb0      	pop	{r4, r5, r7, pc}
 8001398:	20000528 	.word	0x20000528
 800139c:	20000440 	.word	0x20000440

080013a0 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b090      	sub	sp, #64	@ 0x40
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80013aa:	4b64      	ldr	r3, [pc, #400]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ae:	4a63      	ldr	r2, [pc, #396]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 80013b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80013b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013b6:	4b61      	ldr	r3, [pc, #388]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80013c2:	4b5e      	ldr	r3, [pc, #376]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a5d      	ldr	r2, [pc, #372]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 80013c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b5b      	ldr	r3, [pc, #364]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80013d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013da:	4b58      	ldr	r3, [pc, #352]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a57      	ldr	r2, [pc, #348]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 80013e0:	f043 0310 	orr.w	r3, r3, #16
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b55      	ldr	r3, [pc, #340]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	623b      	str	r3, [r7, #32]
 80013f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013f2:	4b52      	ldr	r3, [pc, #328]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a51      	ldr	r2, [pc, #324]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 80013f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b4f      	ldr	r3, [pc, #316]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800140a:	4b4c      	ldr	r3, [pc, #304]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a4b      	ldr	r2, [pc, #300]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 8001410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b49      	ldr	r3, [pc, #292]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800141e:	61bb      	str	r3, [r7, #24]
 8001420:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001422:	4b46      	ldr	r3, [pc, #280]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a45      	ldr	r2, [pc, #276]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 8001428:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b43      	ldr	r3, [pc, #268]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800143a:	4b40      	ldr	r3, [pc, #256]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a3f      	ldr	r2, [pc, #252]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 8001440:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b3d      	ldr	r3, [pc, #244]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8001452:	4b3a      	ldr	r3, [pc, #232]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a39      	ldr	r2, [pc, #228]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b37      	ldr	r3, [pc, #220]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800146a:	4b34      	ldr	r3, [pc, #208]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a33      	ldr	r2, [pc, #204]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 8001470:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b31      	ldr	r3, [pc, #196]	@ (800153c <BSP_LCD_MspInit+0x19c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8001482:	2310      	movs	r3, #16
 8001484:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800148e:	2302      	movs	r3, #2
 8001490:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001492:	230e      	movs	r3, #14
 8001494:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001496:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800149a:	4619      	mov	r1, r3
 800149c:	4828      	ldr	r0, [pc, #160]	@ (8001540 <BSP_LCD_MspInit+0x1a0>)
 800149e:	f001 f9bd 	bl	800281c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80014a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80014ac:	2309      	movs	r3, #9
 80014ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80014b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b4:	4619      	mov	r1, r3
 80014b6:	4823      	ldr	r0, [pc, #140]	@ (8001544 <BSP_LCD_MspInit+0x1a4>)
 80014b8:	f001 f9b0 	bl	800281c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80014bc:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80014c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80014c6:	230e      	movs	r3, #14
 80014c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80014ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014ce:	4619      	mov	r1, r3
 80014d0:	481d      	ldr	r0, [pc, #116]	@ (8001548 <BSP_LCD_MspInit+0x1a8>)
 80014d2:	f001 f9a3 	bl	800281c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80014d6:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80014da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80014e0:	230e      	movs	r3, #14
 80014e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80014e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014e8:	4619      	mov	r1, r3
 80014ea:	4818      	ldr	r0, [pc, #96]	@ (800154c <BSP_LCD_MspInit+0x1ac>)
 80014ec:	f001 f996 	bl	800281c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80014f0:	23f7      	movs	r3, #247	@ 0xf7
 80014f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80014f8:	230e      	movs	r3, #14
 80014fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80014fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001500:	4619      	mov	r1, r3
 8001502:	4813      	ldr	r0, [pc, #76]	@ (8001550 <BSP_LCD_MspInit+0x1b0>)
 8001504:	f001 f98a 	bl	800281c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001508:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001512:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001516:	4619      	mov	r1, r3
 8001518:	480b      	ldr	r0, [pc, #44]	@ (8001548 <BSP_LCD_MspInit+0x1a8>)
 800151a:	f001 f97f 	bl	800281c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800151e:	2308      	movs	r3, #8
 8001520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001526:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800152a:	4619      	mov	r1, r3
 800152c:	4808      	ldr	r0, [pc, #32]	@ (8001550 <BSP_LCD_MspInit+0x1b0>)
 800152e:	f001 f975 	bl	800281c <HAL_GPIO_Init>
}
 8001532:	bf00      	nop
 8001534:	3740      	adds	r7, #64	@ 0x40
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40021000 	.word	0x40021000
 8001544:	40021800 	.word	0x40021800
 8001548:	40022000 	.word	0x40022000
 800154c:	40022400 	.word	0x40022400
 8001550:	40022800 	.word	0x40022800

08001554 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800155e:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <BSP_LCD_ClockConfig+0x34>)
 8001560:	2208      	movs	r2, #8
 8001562:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <BSP_LCD_ClockConfig+0x34>)
 8001566:	22c0      	movs	r2, #192	@ 0xc0
 8001568:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800156a:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <BSP_LCD_ClockConfig+0x34>)
 800156c:	2205      	movs	r2, #5
 800156e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001570:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <BSP_LCD_ClockConfig+0x34>)
 8001572:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001576:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001578:	4803      	ldr	r0, [pc, #12]	@ (8001588 <BSP_LCD_ClockConfig+0x34>)
 800157a:	f004 fcaf 	bl	8005edc <HAL_RCCEx_PeriphCLKConfig>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000544 	.word	0x20000544

0800158c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	603a      	str	r2, [r7, #0]
 8001596:	80fb      	strh	r3, [r7, #6]
 8001598:	460b      	mov	r3, r1
 800159a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80015a4:	4b53      	ldr	r3, [pc, #332]	@ (80016f4 <DrawChar+0x168>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4953      	ldr	r1, [pc, #332]	@ (80016f8 <DrawChar+0x16c>)
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	3308      	adds	r3, #8
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	88db      	ldrh	r3, [r3, #6]
 80015ba:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80015bc:	4b4d      	ldr	r3, [pc, #308]	@ (80016f4 <DrawChar+0x168>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	494d      	ldr	r1, [pc, #308]	@ (80016f8 <DrawChar+0x16c>)
 80015c2:	4613      	mov	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	3308      	adds	r3, #8
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	889b      	ldrh	r3, [r3, #4]
 80015d2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80015d4:	8a3b      	ldrh	r3, [r7, #16]
 80015d6:	3307      	adds	r3, #7
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da00      	bge.n	80015de <DrawChar+0x52>
 80015dc:	3307      	adds	r3, #7
 80015de:	10db      	asrs	r3, r3, #3
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	8a3b      	ldrh	r3, [r7, #16]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	e076      	b.n	80016e2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80015f4:	8a3b      	ldrh	r3, [r7, #16]
 80015f6:	3307      	adds	r3, #7
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	da00      	bge.n	80015fe <DrawChar+0x72>
 80015fc:	3307      	adds	r3, #7
 80015fe:	10db      	asrs	r3, r3, #3
 8001600:	461a      	mov	r2, r3
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	4413      	add	r3, r2
 800160c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800160e:	8a3b      	ldrh	r3, [r7, #16]
 8001610:	3307      	adds	r3, #7
 8001612:	2b00      	cmp	r3, #0
 8001614:	da00      	bge.n	8001618 <DrawChar+0x8c>
 8001616:	3307      	adds	r3, #7
 8001618:	10db      	asrs	r3, r3, #3
 800161a:	2b01      	cmp	r3, #1
 800161c:	d002      	beq.n	8001624 <DrawChar+0x98>
 800161e:	2b02      	cmp	r3, #2
 8001620:	d004      	beq.n	800162c <DrawChar+0xa0>
 8001622:	e00c      	b.n	800163e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	617b      	str	r3, [r7, #20]
      break;
 800162a:	e016      	b.n	800165a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	3201      	adds	r2, #1
 8001636:	7812      	ldrb	r2, [r2, #0]
 8001638:	4313      	orrs	r3, r2
 800163a:	617b      	str	r3, [r7, #20]
      break;
 800163c:	e00d      	b.n	800165a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	041a      	lsls	r2, r3, #16
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	3301      	adds	r3, #1
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	4313      	orrs	r3, r2
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	3202      	adds	r2, #2
 8001652:	7812      	ldrb	r2, [r2, #0]
 8001654:	4313      	orrs	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
      break;
 8001658:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	e036      	b.n	80016ce <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001660:	8a3a      	ldrh	r2, [r7, #16]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	1ad2      	subs	r2, r2, r3
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	4413      	add	r3, r2
 800166a:	3b01      	subs	r3, #1
 800166c:	2201      	movs	r2, #1
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	461a      	mov	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	4013      	ands	r3, r2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d012      	beq.n	80016a2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	b29a      	uxth	r2, r3
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	4413      	add	r3, r2
 8001684:	b298      	uxth	r0, r3
 8001686:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <DrawChar+0x168>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	491b      	ldr	r1, [pc, #108]	@ (80016f8 <DrawChar+0x16c>)
 800168c:	4613      	mov	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	88bb      	ldrh	r3, [r7, #4]
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff fe38 	bl	8001310 <BSP_LCD_DrawPixel>
 80016a0:	e012      	b.n	80016c8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	4413      	add	r3, r2
 80016aa:	b298      	uxth	r0, r3
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <DrawChar+0x168>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4911      	ldr	r1, [pc, #68]	@ (80016f8 <DrawChar+0x16c>)
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	3304      	adds	r3, #4
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	88bb      	ldrh	r3, [r7, #4]
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff fe24 	bl	8001310 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	3301      	adds	r3, #1
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	8a3b      	ldrh	r3, [r7, #16]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d3c4      	bcc.n	8001660 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80016d6:	88bb      	ldrh	r3, [r7, #4]
 80016d8:	3301      	adds	r3, #1
 80016da:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	3301      	adds	r3, #1
 80016e0:	61fb      	str	r3, [r7, #28]
 80016e2:	8a7b      	ldrh	r3, [r7, #18]
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d384      	bcc.n	80015f4 <DrawChar+0x68>
  }
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	3720      	adds	r7, #32
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000528 	.word	0x20000528
 80016f8:	2000052c 	.word	0x2000052c

080016fc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af02      	add	r7, sp, #8
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
 8001708:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800170a:	4b1e      	ldr	r3, [pc, #120]	@ (8001784 <LL_FillBuffer+0x88>)
 800170c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001710:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001712:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <LL_FillBuffer+0x8c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a1d      	ldr	r2, [pc, #116]	@ (800178c <LL_FillBuffer+0x90>)
 8001718:	2134      	movs	r1, #52	@ 0x34
 800171a:	fb01 f303 	mul.w	r3, r1, r3
 800171e:	4413      	add	r3, r2
 8001720:	3348      	adds	r3, #72	@ 0x48
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d103      	bne.n	8001730 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8001728:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <LL_FillBuffer+0x88>)
 800172a:	2202      	movs	r2, #2
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	e002      	b.n	8001736 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001730:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <LL_FillBuffer+0x88>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001736:	4a13      	ldr	r2, [pc, #76]	@ (8001784 <LL_FillBuffer+0x88>)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <LL_FillBuffer+0x88>)
 800173e:	4a14      	ldr	r2, [pc, #80]	@ (8001790 <LL_FillBuffer+0x94>)
 8001740:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001742:	4810      	ldr	r0, [pc, #64]	@ (8001784 <LL_FillBuffer+0x88>)
 8001744:	f000 fcce 	bl	80020e4 <HAL_DMA2D_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d115      	bne.n	800177a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800174e:	68f9      	ldr	r1, [r7, #12]
 8001750:	480c      	ldr	r0, [pc, #48]	@ (8001784 <LL_FillBuffer+0x88>)
 8001752:	f000 ff35 	bl	80025c0 <HAL_DMA2D_ConfigLayer>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10e      	bne.n	800177a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69f9      	ldr	r1, [r7, #28]
 8001766:	4807      	ldr	r0, [pc, #28]	@ (8001784 <LL_FillBuffer+0x88>)
 8001768:	f000 fd06 	bl	8002178 <HAL_DMA2D_Start>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d103      	bne.n	800177a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001772:	210a      	movs	r1, #10
 8001774:	4803      	ldr	r0, [pc, #12]	@ (8001784 <LL_FillBuffer+0x88>)
 8001776:	f000 fd2a 	bl	80021ce <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200004e8 	.word	0x200004e8
 8001788:	20000528 	.word	0x20000528
 800178c:	20000440 	.word	0x20000440
 8001790:	4002b000 	.word	0x4002b000

08001794 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001798:	4b29      	ldr	r3, [pc, #164]	@ (8001840 <BSP_SDRAM_Init+0xac>)
 800179a:	4a2a      	ldr	r2, [pc, #168]	@ (8001844 <BSP_SDRAM_Init+0xb0>)
 800179c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800179e:	4b2a      	ldr	r3, [pc, #168]	@ (8001848 <BSP_SDRAM_Init+0xb4>)
 80017a0:	2202      	movs	r2, #2
 80017a2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80017a4:	4b28      	ldr	r3, [pc, #160]	@ (8001848 <BSP_SDRAM_Init+0xb4>)
 80017a6:	2207      	movs	r2, #7
 80017a8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80017aa:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <BSP_SDRAM_Init+0xb4>)
 80017ac:	2204      	movs	r2, #4
 80017ae:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80017b0:	4b25      	ldr	r3, [pc, #148]	@ (8001848 <BSP_SDRAM_Init+0xb4>)
 80017b2:	2207      	movs	r2, #7
 80017b4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80017b6:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <BSP_SDRAM_Init+0xb4>)
 80017b8:	2202      	movs	r2, #2
 80017ba:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80017bc:	4b22      	ldr	r3, [pc, #136]	@ (8001848 <BSP_SDRAM_Init+0xb4>)
 80017be:	2202      	movs	r2, #2
 80017c0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80017c2:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <BSP_SDRAM_Init+0xb4>)
 80017c4:	2202      	movs	r2, #2
 80017c6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80017c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <BSP_SDRAM_Init+0xac>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80017ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001840 <BSP_SDRAM_Init+0xac>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80017d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <BSP_SDRAM_Init+0xac>)
 80017d6:	2204      	movs	r2, #4
 80017d8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80017da:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <BSP_SDRAM_Init+0xac>)
 80017dc:	2210      	movs	r2, #16
 80017de:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80017e0:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <BSP_SDRAM_Init+0xac>)
 80017e2:	2240      	movs	r2, #64	@ 0x40
 80017e4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80017e6:	4b16      	ldr	r3, [pc, #88]	@ (8001840 <BSP_SDRAM_Init+0xac>)
 80017e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ec:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <BSP_SDRAM_Init+0xac>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <BSP_SDRAM_Init+0xac>)
 80017f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017fa:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80017fc:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <BSP_SDRAM_Init+0xac>)
 80017fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001802:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001804:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <BSP_SDRAM_Init+0xac>)
 8001806:	2200      	movs	r2, #0
 8001808:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800180a:	2100      	movs	r1, #0
 800180c:	480c      	ldr	r0, [pc, #48]	@ (8001840 <BSP_SDRAM_Init+0xac>)
 800180e:	f000 f87f 	bl	8001910 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001812:	490d      	ldr	r1, [pc, #52]	@ (8001848 <BSP_SDRAM_Init+0xb4>)
 8001814:	480a      	ldr	r0, [pc, #40]	@ (8001840 <BSP_SDRAM_Init+0xac>)
 8001816:	f004 ff51 	bl	80066bc <HAL_SDRAM_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001820:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <BSP_SDRAM_Init+0xb8>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e002      	b.n	800182e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001828:	4b08      	ldr	r3, [pc, #32]	@ (800184c <BSP_SDRAM_Init+0xb8>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800182e:	f240 6003 	movw	r0, #1539	@ 0x603
 8001832:	f000 f80d 	bl	8001850 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001836:	4b05      	ldr	r3, [pc, #20]	@ (800184c <BSP_SDRAM_Init+0xb8>)
 8001838:	781b      	ldrb	r3, [r3, #0]
}
 800183a:	4618      	mov	r0, r3
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200005c8 	.word	0x200005c8
 8001844:	a0000140 	.word	0xa0000140
 8001848:	200005fc 	.word	0x200005fc
 800184c:	2000000c 	.word	0x2000000c

08001850 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800185c:	4b2a      	ldr	r3, [pc, #168]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001862:	4b29      	ldr	r3, [pc, #164]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001864:	2210      	movs	r2, #16
 8001866:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001868:	4b27      	ldr	r3, [pc, #156]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800186a:	2201      	movs	r2, #1
 800186c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800186e:	4b26      	ldr	r3, [pc, #152]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001874:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001878:	4923      	ldr	r1, [pc, #140]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800187a:	4824      	ldr	r0, [pc, #144]	@ (800190c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800187c:	f004 ff52 	bl	8006724 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001880:	2001      	movs	r0, #1
 8001882:	f000 f96b 	bl	8001b5c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001886:	4b20      	ldr	r3, [pc, #128]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001888:	2202      	movs	r2, #2
 800188a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800188c:	4b1e      	ldr	r3, [pc, #120]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800188e:	2210      	movs	r2, #16
 8001890:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001892:	4b1d      	ldr	r3, [pc, #116]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001894:	2201      	movs	r2, #1
 8001896:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001898:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800189e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018a2:	4919      	ldr	r1, [pc, #100]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018a4:	4819      	ldr	r0, [pc, #100]	@ (800190c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018a6:	f004 ff3d 	bl	8006724 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80018aa:	4b17      	ldr	r3, [pc, #92]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018ac:	2203      	movs	r2, #3
 80018ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018b0:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018b2:	2210      	movs	r2, #16
 80018b4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80018b6:	4b14      	ldr	r3, [pc, #80]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018b8:	2208      	movs	r2, #8
 80018ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80018bc:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80018c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018c6:	4910      	ldr	r1, [pc, #64]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018c8:	4810      	ldr	r0, [pc, #64]	@ (800190c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018ca:	f004 ff2b 	bl	8006724 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80018ce:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80018d2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018d6:	2204      	movs	r2, #4
 80018d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018da:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018dc:	2210      	movs	r2, #16
 80018de:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80018e0:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4a07      	ldr	r2, [pc, #28]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018ea:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80018ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018f0:	4905      	ldr	r1, [pc, #20]	@ (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018f2:	4806      	ldr	r0, [pc, #24]	@ (800190c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018f4:	f004 ff16 	bl	8006724 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4804      	ldr	r0, [pc, #16]	@ (800190c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018fc:	f004 ff47 	bl	800678e <HAL_SDRAM_ProgramRefreshRate>
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000618 	.word	0x20000618
 800190c:	200005c8 	.word	0x200005c8

08001910 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001910:	b580      	push	{r7, lr}
 8001912:	b090      	sub	sp, #64	@ 0x40
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800191a:	4b70      	ldr	r3, [pc, #448]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 800191c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800191e:	4a6f      	ldr	r2, [pc, #444]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6393      	str	r3, [r2, #56]	@ 0x38
 8001926:	4b6d      	ldr	r3, [pc, #436]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 8001928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001932:	4b6a      	ldr	r3, [pc, #424]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a69      	ldr	r2, [pc, #420]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 8001938:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b67      	ldr	r3, [pc, #412]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194a:	4b64      	ldr	r3, [pc, #400]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4a63      	ldr	r2, [pc, #396]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4b61      	ldr	r3, [pc, #388]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	623b      	str	r3, [r7, #32]
 8001960:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001962:	4b5e      	ldr	r3, [pc, #376]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a5d      	ldr	r2, [pc, #372]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b5b      	ldr	r3, [pc, #364]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	61fb      	str	r3, [r7, #28]
 8001978:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800197a:	4b58      	ldr	r3, [pc, #352]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a57      	ldr	r2, [pc, #348]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 8001980:	f043 0310 	orr.w	r3, r3, #16
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b55      	ldr	r3, [pc, #340]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0310 	and.w	r3, r3, #16
 800198e:	61bb      	str	r3, [r7, #24]
 8001990:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001992:	4b52      	ldr	r3, [pc, #328]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a51      	ldr	r2, [pc, #324]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 8001998:	f043 0320 	orr.w	r3, r3, #32
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b4f      	ldr	r3, [pc, #316]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019aa:	4b4c      	ldr	r3, [pc, #304]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a4b      	ldr	r2, [pc, #300]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 80019b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b49      	ldr	r3, [pc, #292]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c2:	4b46      	ldr	r3, [pc, #280]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	4a45      	ldr	r2, [pc, #276]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 80019c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ce:	4b43      	ldr	r3, [pc, #268]	@ (8001adc <BSP_SDRAM_MspInit+0x1cc>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80019de:	2301      	movs	r3, #1
 80019e0:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80019e2:	2302      	movs	r3, #2
 80019e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80019e6:	230c      	movs	r3, #12
 80019e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80019ea:	2308      	movs	r3, #8
 80019ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80019ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019f2:	4619      	mov	r1, r3
 80019f4:	483a      	ldr	r0, [pc, #232]	@ (8001ae0 <BSP_SDRAM_MspInit+0x1d0>)
 80019f6:	f000 ff11 	bl	800281c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80019fa:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80019fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001a00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a04:	4619      	mov	r1, r3
 8001a06:	4837      	ldr	r0, [pc, #220]	@ (8001ae4 <BSP_SDRAM_MspInit+0x1d4>)
 8001a08:	f000 ff08 	bl	800281c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001a0c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001a12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a16:	4619      	mov	r1, r3
 8001a18:	4833      	ldr	r0, [pc, #204]	@ (8001ae8 <BSP_SDRAM_MspInit+0x1d8>)
 8001a1a:	f000 feff 	bl	800281c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001a1e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001a24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4830      	ldr	r0, [pc, #192]	@ (8001aec <BSP_SDRAM_MspInit+0x1dc>)
 8001a2c:	f000 fef6 	bl	800281c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001a30:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001a36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	482c      	ldr	r0, [pc, #176]	@ (8001af0 <BSP_SDRAM_MspInit+0x1e0>)
 8001a3e:	f000 feed 	bl	800281c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001a42:	2328      	movs	r3, #40	@ 0x28
 8001a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001a46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4829      	ldr	r0, [pc, #164]	@ (8001af4 <BSP_SDRAM_MspInit+0x1e4>)
 8001a4e:	f000 fee5 	bl	800281c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001a52:	4b29      	ldr	r3, [pc, #164]	@ (8001af8 <BSP_SDRAM_MspInit+0x1e8>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001a58:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <BSP_SDRAM_MspInit+0x1e8>)
 8001a5a:	2280      	movs	r2, #128	@ 0x80
 8001a5c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001a5e:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <BSP_SDRAM_MspInit+0x1e8>)
 8001a60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a64:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001a66:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <BSP_SDRAM_MspInit+0x1e8>)
 8001a68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a6c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a6e:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <BSP_SDRAM_MspInit+0x1e8>)
 8001a70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a74:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001a76:	4b20      	ldr	r3, [pc, #128]	@ (8001af8 <BSP_SDRAM_MspInit+0x1e8>)
 8001a78:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a7c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <BSP_SDRAM_MspInit+0x1e8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001a84:	4b1c      	ldr	r3, [pc, #112]	@ (8001af8 <BSP_SDRAM_MspInit+0x1e8>)
 8001a86:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a8a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <BSP_SDRAM_MspInit+0x1e8>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001a92:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <BSP_SDRAM_MspInit+0x1e8>)
 8001a94:	2203      	movs	r2, #3
 8001a96:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001a98:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <BSP_SDRAM_MspInit+0x1e8>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <BSP_SDRAM_MspInit+0x1e8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <BSP_SDRAM_MspInit+0x1e8>)
 8001aa6:	4a15      	ldr	r2, [pc, #84]	@ (8001afc <BSP_SDRAM_MspInit+0x1ec>)
 8001aa8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a12      	ldr	r2, [pc, #72]	@ (8001af8 <BSP_SDRAM_MspInit+0x1e8>)
 8001aae:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ab0:	4a11      	ldr	r2, [pc, #68]	@ (8001af8 <BSP_SDRAM_MspInit+0x1e8>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001ab6:	4810      	ldr	r0, [pc, #64]	@ (8001af8 <BSP_SDRAM_MspInit+0x1e8>)
 8001ab8:	f000 fa04 	bl	8001ec4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001abc:	480e      	ldr	r0, [pc, #56]	@ (8001af8 <BSP_SDRAM_MspInit+0x1e8>)
 8001abe:	f000 f953 	bl	8001d68 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	210f      	movs	r1, #15
 8001ac6:	2038      	movs	r0, #56	@ 0x38
 8001ac8:	f000 f924 	bl	8001d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001acc:	2038      	movs	r0, #56	@ 0x38
 8001ace:	f000 f93d 	bl	8001d4c <HAL_NVIC_EnableIRQ>
}
 8001ad2:	bf00      	nop
 8001ad4:	3740      	adds	r7, #64	@ 0x40
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020800 	.word	0x40020800
 8001ae4:	40020c00 	.word	0x40020c00
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40021400 	.word	0x40021400
 8001af0:	40021800 	.word	0x40021800
 8001af4:	40021c00 	.word	0x40021c00
 8001af8:	20000628 	.word	0x20000628
 8001afc:	40026410 	.word	0x40026410

08001b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b04:	2003      	movs	r0, #3
 8001b06:	f000 f8fa 	bl	8001cfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f7ff f832 	bl	8000b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b10:	f7fe fe12 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_IncTick+0x20>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <HAL_IncTick+0x24>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	4a04      	ldr	r2, [pc, #16]	@ (8001b40 <HAL_IncTick+0x24>)
 8001b2e:	6013      	str	r3, [r2, #0]
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000014 	.word	0x20000014
 8001b40:	20000688 	.word	0x20000688

08001b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return uwTick;
 8001b48:	4b03      	ldr	r3, [pc, #12]	@ (8001b58 <HAL_GetTick+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000688 	.word	0x20000688

08001b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b64:	f7ff ffee 	bl	8001b44 <HAL_GetTick>
 8001b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b74:	d005      	beq.n	8001b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <HAL_Delay+0x44>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b82:	bf00      	nop
 8001b84:	f7ff ffde 	bl	8001b44 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d8f7      	bhi.n	8001b84 <HAL_Delay+0x28>
  {
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000014 	.word	0x20000014

08001ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <__NVIC_SetPriorityGrouping+0x40>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bcc:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	@ (8001be4 <__NVIC_SetPriorityGrouping+0x40>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00
 8001be8:	05fa0000 	.word	0x05fa0000

08001bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf0:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	f003 0307 	and.w	r3, r3, #7
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	db0b      	blt.n	8001c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	f003 021f 	and.w	r2, r3, #31
 8001c20:	4907      	ldr	r1, [pc, #28]	@ (8001c40 <__NVIC_EnableIRQ+0x38>)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	095b      	lsrs	r3, r3, #5
 8001c28:	2001      	movs	r0, #1
 8001c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000e100 	.word	0xe000e100

08001c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	db0a      	blt.n	8001c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	490c      	ldr	r1, [pc, #48]	@ (8001c90 <__NVIC_SetPriority+0x4c>)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	0112      	lsls	r2, r2, #4
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	440b      	add	r3, r1
 8001c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c6c:	e00a      	b.n	8001c84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4908      	ldr	r1, [pc, #32]	@ (8001c94 <__NVIC_SetPriority+0x50>)
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	3b04      	subs	r3, #4
 8001c7c:	0112      	lsls	r2, r2, #4
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	440b      	add	r3, r1
 8001c82:	761a      	strb	r2, [r3, #24]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000e100 	.word	0xe000e100
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	@ 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f1c3 0307 	rsb	r3, r3, #7
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	bf28      	it	cs
 8001cb6:	2304      	movcs	r3, #4
 8001cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	2b06      	cmp	r3, #6
 8001cc0:	d902      	bls.n	8001cc8 <NVIC_EncodePriority+0x30>
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3b03      	subs	r3, #3
 8001cc6:	e000      	b.n	8001cca <NVIC_EncodePriority+0x32>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	401a      	ands	r2, r3
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	43d9      	mvns	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	4313      	orrs	r3, r2
         );
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3724      	adds	r7, #36	@ 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ff4c 	bl	8001ba4 <__NVIC_SetPriorityGrouping>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d26:	f7ff ff61 	bl	8001bec <__NVIC_GetPriorityGrouping>
 8001d2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	68b9      	ldr	r1, [r7, #8]
 8001d30:	6978      	ldr	r0, [r7, #20]
 8001d32:	f7ff ffb1 	bl	8001c98 <NVIC_EncodePriority>
 8001d36:	4602      	mov	r2, r0
 8001d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff80 	bl	8001c44 <__NVIC_SetPriority>
}
 8001d44:	bf00      	nop
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff54 	bl	8001c08 <__NVIC_EnableIRQ>
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d74:	f7ff fee6 	bl	8001b44 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e099      	b.n	8001eb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da4:	e00f      	b.n	8001dc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001da6:	f7ff fecd 	bl	8001b44 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b05      	cmp	r3, #5
 8001db2:	d908      	bls.n	8001dc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2220      	movs	r2, #32
 8001db8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e078      	b.n	8001eb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1e8      	bne.n	8001da6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	4b38      	ldr	r3, [pc, #224]	@ (8001ec0 <HAL_DMA_Init+0x158>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d107      	bne.n	8001e30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f023 0307 	bic.w	r3, r3, #7
 8001e46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d117      	bne.n	8001e8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00e      	beq.n	8001e8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f8bd 	bl	8001fec <DMA_CheckFifoParam>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2240      	movs	r2, #64	@ 0x40
 8001e7c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e86:	2301      	movs	r3, #1
 8001e88:	e016      	b.n	8001eb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f874 	bl	8001f80 <DMA_CalcBaseAndBitshift>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea0:	223f      	movs	r2, #63	@ 0x3f
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	f010803f 	.word	0xf010803f

08001ec4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e050      	b.n	8001f78 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e048      	b.n	8001f78 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0201 	bic.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2200      	movs	r2, #0
 8001f04:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2221      	movs	r2, #33	@ 0x21
 8001f24:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f82a 	bl	8001f80 <DMA_CalcBaseAndBitshift>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f34:	223f      	movs	r2, #63	@ 0x3f
 8001f36:	409a      	lsls	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	3b10      	subs	r3, #16
 8001f90:	4a13      	ldr	r2, [pc, #76]	@ (8001fe0 <DMA_CalcBaseAndBitshift+0x60>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f9a:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <DMA_CalcBaseAndBitshift+0x64>)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d908      	bls.n	8001fc0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <DMA_CalcBaseAndBitshift+0x68>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	1d1a      	adds	r2, r3, #4
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	659a      	str	r2, [r3, #88]	@ 0x58
 8001fbe:	e006      	b.n	8001fce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <DMA_CalcBaseAndBitshift+0x68>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	aaaaaaab 	.word	0xaaaaaaab
 8001fe4:	0800f1fc 	.word	0x0800f1fc
 8001fe8:	fffffc00 	.word	0xfffffc00

08001fec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d11f      	bne.n	8002046 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d856      	bhi.n	80020ba <DMA_CheckFifoParam+0xce>
 800200c:	a201      	add	r2, pc, #4	@ (adr r2, 8002014 <DMA_CheckFifoParam+0x28>)
 800200e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002012:	bf00      	nop
 8002014:	08002025 	.word	0x08002025
 8002018:	08002037 	.word	0x08002037
 800201c:	08002025 	.word	0x08002025
 8002020:	080020bb 	.word	0x080020bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002028:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d046      	beq.n	80020be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002034:	e043      	b.n	80020be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800203e:	d140      	bne.n	80020c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002044:	e03d      	b.n	80020c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800204e:	d121      	bne.n	8002094 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b03      	cmp	r3, #3
 8002054:	d837      	bhi.n	80020c6 <DMA_CheckFifoParam+0xda>
 8002056:	a201      	add	r2, pc, #4	@ (adr r2, 800205c <DMA_CheckFifoParam+0x70>)
 8002058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205c:	0800206d 	.word	0x0800206d
 8002060:	08002073 	.word	0x08002073
 8002064:	0800206d 	.word	0x0800206d
 8002068:	08002085 	.word	0x08002085
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
      break;
 8002070:	e030      	b.n	80020d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002076:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d025      	beq.n	80020ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002082:	e022      	b.n	80020ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002088:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800208c:	d11f      	bne.n	80020ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002092:	e01c      	b.n	80020ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d903      	bls.n	80020a2 <DMA_CheckFifoParam+0xb6>
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d003      	beq.n	80020a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020a0:	e018      	b.n	80020d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
      break;
 80020a6:	e015      	b.n	80020d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00e      	beq.n	80020d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
      break;
 80020b8:	e00b      	b.n	80020d2 <DMA_CheckFifoParam+0xe6>
      break;
 80020ba:	bf00      	nop
 80020bc:	e00a      	b.n	80020d4 <DMA_CheckFifoParam+0xe8>
      break;
 80020be:	bf00      	nop
 80020c0:	e008      	b.n	80020d4 <DMA_CheckFifoParam+0xe8>
      break;
 80020c2:	bf00      	nop
 80020c4:	e006      	b.n	80020d4 <DMA_CheckFifoParam+0xe8>
      break;
 80020c6:	bf00      	nop
 80020c8:	e004      	b.n	80020d4 <DMA_CheckFifoParam+0xe8>
      break;
 80020ca:	bf00      	nop
 80020cc:	e002      	b.n	80020d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80020ce:	bf00      	nop
 80020d0:	e000      	b.n	80020d4 <DMA_CheckFifoParam+0xe8>
      break;
 80020d2:	bf00      	nop
    }
  } 
  
  return status; 
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop

080020e4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e039      	b.n	800216a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fb3c 	bl	8000788 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002134:	f023 0107 	bic.w	r1, r3, #7
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800214a:	4b0a      	ldr	r3, [pc, #40]	@ (8002174 <HAL_DMA2D_Init+0x90>)
 800214c:	4013      	ands	r3, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68d1      	ldr	r1, [r2, #12]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	430b      	orrs	r3, r1
 8002158:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	ffffc000 	.word	0xffffc000

08002178 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af02      	add	r7, sp, #8
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_DMA2D_Start+0x1c>
 8002190:	2302      	movs	r3, #2
 8002192:	e018      	b.n	80021c6 <HAL_DMA2D_Start+0x4e>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 fa98 	bl	80026e4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d056      	beq.n	8002298 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80021ea:	f7ff fcab 	bl	8001b44 <HAL_GetTick>
 80021ee:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80021f0:	e04b      	b.n	800228a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002200:	2b00      	cmp	r3, #0
 8002202:	d023      	beq.n	800224c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002212:	f043 0202 	orr.w	r2, r3, #2
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002228:	f043 0201 	orr.w	r2, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2221      	movs	r2, #33	@ 0x21
 8002236:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2204      	movs	r2, #4
 800223c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0a5      	b.n	8002398 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002252:	d01a      	beq.n	800228a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002254:	f7ff fc76 	bl	8001b44 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d302      	bcc.n	800226a <HAL_DMA2D_PollForTransfer+0x9c>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10f      	bne.n	800228a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800226e:	f043 0220 	orr.w	r2, r3, #32
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2203      	movs	r2, #3
 800227a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e086      	b.n	8002398 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0ac      	beq.n	80021f2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d061      	beq.n	800237e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80022ba:	f7ff fc43 	bl	8001b44 <HAL_GetTick>
 80022be:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80022c0:	e056      	b.n	8002370 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d02e      	beq.n	8002332 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e2:	f043 0204 	orr.w	r2, r3, #4
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f8:	f043 0202 	orr.w	r2, r3, #2
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2229      	movs	r2, #41	@ 0x29
 800231c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2204      	movs	r2, #4
 8002322:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e032      	b.n	8002398 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002338:	d01a      	beq.n	8002370 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800233a:	f7ff fc03 	bl	8001b44 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d302      	bcc.n	8002350 <HAL_DMA2D_PollForTransfer+0x182>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10f      	bne.n	8002370 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2203      	movs	r2, #3
 8002360:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e013      	b.n	8002398 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0a1      	beq.n	80022c2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2212      	movs	r2, #18
 8002384:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d026      	beq.n	8002410 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d021      	beq.n	8002410 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023da:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e0:	f043 0201 	orr.w	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2201      	movs	r2, #1
 80023ee:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2204      	movs	r2, #4
 80023f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0320 	and.w	r3, r3, #32
 8002416:	2b00      	cmp	r3, #0
 8002418:	d026      	beq.n	8002468 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d021      	beq.n	8002468 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002432:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2220      	movs	r2, #32
 800243a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002440:	f043 0202 	orr.w	r2, r3, #2
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2204      	movs	r2, #4
 800244c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d026      	beq.n	80024c0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002478:	2b00      	cmp	r3, #0
 800247a:	d021      	beq.n	80024c0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800248a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2208      	movs	r2, #8
 8002492:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002498:	f043 0204 	orr.w	r2, r3, #4
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2204      	movs	r2, #4
 80024a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d013      	beq.n	80024f2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00e      	beq.n	80024f2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024e2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2204      	movs	r2, #4
 80024ea:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f853 	bl	8002598 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d024      	beq.n	8002546 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002502:	2b00      	cmp	r3, #0
 8002504:	d01f      	beq.n	8002546 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002514:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2202      	movs	r2, #2
 800251c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01f      	beq.n	8002590 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01a      	beq.n	8002590 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002568:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2210      	movs	r2, #16
 8002570:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f80e 	bl	80025ac <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_DMA2D_ConfigLayer+0x20>
 80025dc:	2302      	movs	r3, #2
 80025de:	e079      	b.n	80026d4 <HAL_DMA2D_ConfigLayer+0x114>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	3318      	adds	r3, #24
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	041b      	lsls	r3, r3, #16
 8002606:	4313      	orrs	r3, r2
 8002608:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800260a:	4b35      	ldr	r3, [pc, #212]	@ (80026e0 <HAL_DMA2D_ConfigLayer+0x120>)
 800260c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b0a      	cmp	r3, #10
 8002614:	d003      	beq.n	800261e <HAL_DMA2D_ConfigLayer+0x5e>
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b09      	cmp	r3, #9
 800261c:	d107      	bne.n	800262e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	e005      	b.n	800263a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	061b      	lsls	r3, r3, #24
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d120      	bne.n	8002682 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	43db      	mvns	r3, r3
 800264a:	ea02 0103 	and.w	r1, r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	430a      	orrs	r2, r1
 8002656:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b0a      	cmp	r3, #10
 8002668:	d003      	beq.n	8002672 <HAL_DMA2D_ConfigLayer+0xb2>
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b09      	cmp	r3, #9
 8002670:	d127      	bne.n	80026c2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800267e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002680:	e01f      	b.n	80026c2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	69da      	ldr	r2, [r3, #28]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	43db      	mvns	r3, r3
 800268c:	ea02 0103 	and.w	r1, r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	430a      	orrs	r2, r1
 8002698:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b0a      	cmp	r3, #10
 80026aa:	d003      	beq.n	80026b4 <HAL_DMA2D_ConfigLayer+0xf4>
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b09      	cmp	r3, #9
 80026b2:	d106      	bne.n	80026c2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80026c0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	ff03000f 	.word	0xff03000f

080026e4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b08b      	sub	sp, #44	@ 0x2c
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f8:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	041a      	lsls	r2, r3, #16
 8002700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002702:	431a      	orrs	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800271c:	d174      	bne.n	8002808 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002724:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800272c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002734:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d108      	bne.n	8002756 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	431a      	orrs	r2, r3
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	4313      	orrs	r3, r2
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4313      	orrs	r3, r2
 8002752:	627b      	str	r3, [r7, #36]	@ 0x24
 8002754:	e053      	b.n	80027fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d106      	bne.n	800276c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	4313      	orrs	r3, r2
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	627b      	str	r3, [r7, #36]	@ 0x24
 800276a:	e048      	b.n	80027fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d111      	bne.n	8002798 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	0cdb      	lsrs	r3, r3, #19
 8002778:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	0a9b      	lsrs	r3, r3, #10
 800277e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	08db      	lsrs	r3, r3, #3
 8002784:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	02db      	lsls	r3, r3, #11
 800278e:	4313      	orrs	r3, r2
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
 8002796:	e032      	b.n	80027fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d117      	bne.n	80027d0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	0fdb      	lsrs	r3, r3, #31
 80027a4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	0cdb      	lsrs	r3, r3, #19
 80027aa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	0adb      	lsrs	r3, r3, #11
 80027b0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	08db      	lsrs	r3, r3, #3
 80027b6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	029b      	lsls	r3, r3, #10
 80027c0:	431a      	orrs	r2, r3
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	03db      	lsls	r3, r3, #15
 80027c6:	4313      	orrs	r3, r2
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ce:	e016      	b.n	80027fe <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	0f1b      	lsrs	r3, r3, #28
 80027d4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	0d1b      	lsrs	r3, r3, #20
 80027da:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	0b1b      	lsrs	r3, r3, #12
 80027e0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	011a      	lsls	r2, r3, #4
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	431a      	orrs	r2, r3
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	031b      	lsls	r3, r3, #12
 80027f6:	4313      	orrs	r3, r2
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002804:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002806:	e003      	b.n	8002810 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	60da      	str	r2, [r3, #12]
}
 8002810:	bf00      	nop
 8002812:	372c      	adds	r7, #44	@ 0x2c
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	@ 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	e175      	b.n	8002b28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800283c:	2201      	movs	r2, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	f040 8164 	bne.w	8002b22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d005      	beq.n	8002872 <HAL_GPIO_Init+0x56>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d130      	bne.n	80028d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	2203      	movs	r2, #3
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a8:	2201      	movs	r2, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 0201 	and.w	r2, r3, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d017      	beq.n	8002910 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	2203      	movs	r2, #3
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d123      	bne.n	8002964 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	08da      	lsrs	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3208      	adds	r2, #8
 8002924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	220f      	movs	r2, #15
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	08da      	lsrs	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3208      	adds	r2, #8
 800295e:	69b9      	ldr	r1, [r7, #24]
 8002960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0203 	and.w	r2, r3, #3
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80be 	beq.w	8002b22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	4b66      	ldr	r3, [pc, #408]	@ (8002b40 <HAL_GPIO_Init+0x324>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	4a65      	ldr	r2, [pc, #404]	@ (8002b40 <HAL_GPIO_Init+0x324>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029b2:	4b63      	ldr	r3, [pc, #396]	@ (8002b40 <HAL_GPIO_Init+0x324>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029be:	4a61      	ldr	r2, [pc, #388]	@ (8002b44 <HAL_GPIO_Init+0x328>)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	3302      	adds	r3, #2
 80029c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a58      	ldr	r2, [pc, #352]	@ (8002b48 <HAL_GPIO_Init+0x32c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d037      	beq.n	8002a5a <HAL_GPIO_Init+0x23e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a57      	ldr	r2, [pc, #348]	@ (8002b4c <HAL_GPIO_Init+0x330>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d031      	beq.n	8002a56 <HAL_GPIO_Init+0x23a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a56      	ldr	r2, [pc, #344]	@ (8002b50 <HAL_GPIO_Init+0x334>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d02b      	beq.n	8002a52 <HAL_GPIO_Init+0x236>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a55      	ldr	r2, [pc, #340]	@ (8002b54 <HAL_GPIO_Init+0x338>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d025      	beq.n	8002a4e <HAL_GPIO_Init+0x232>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a54      	ldr	r2, [pc, #336]	@ (8002b58 <HAL_GPIO_Init+0x33c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01f      	beq.n	8002a4a <HAL_GPIO_Init+0x22e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a53      	ldr	r2, [pc, #332]	@ (8002b5c <HAL_GPIO_Init+0x340>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d019      	beq.n	8002a46 <HAL_GPIO_Init+0x22a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a52      	ldr	r2, [pc, #328]	@ (8002b60 <HAL_GPIO_Init+0x344>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_GPIO_Init+0x226>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a51      	ldr	r2, [pc, #324]	@ (8002b64 <HAL_GPIO_Init+0x348>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00d      	beq.n	8002a3e <HAL_GPIO_Init+0x222>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a50      	ldr	r2, [pc, #320]	@ (8002b68 <HAL_GPIO_Init+0x34c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <HAL_GPIO_Init+0x21e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4f      	ldr	r2, [pc, #316]	@ (8002b6c <HAL_GPIO_Init+0x350>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d101      	bne.n	8002a36 <HAL_GPIO_Init+0x21a>
 8002a32:	2309      	movs	r3, #9
 8002a34:	e012      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a36:	230a      	movs	r3, #10
 8002a38:	e010      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a3a:	2308      	movs	r3, #8
 8002a3c:	e00e      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a3e:	2307      	movs	r3, #7
 8002a40:	e00c      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a42:	2306      	movs	r3, #6
 8002a44:	e00a      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a46:	2305      	movs	r3, #5
 8002a48:	e008      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	e006      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e004      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e002      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	f002 0203 	and.w	r2, r2, #3
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	4093      	lsls	r3, r2
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a6c:	4935      	ldr	r1, [pc, #212]	@ (8002b44 <HAL_GPIO_Init+0x328>)
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	089b      	lsrs	r3, r3, #2
 8002a72:	3302      	adds	r3, #2
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b70 <HAL_GPIO_Init+0x354>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a9e:	4a34      	ldr	r2, [pc, #208]	@ (8002b70 <HAL_GPIO_Init+0x354>)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa4:	4b32      	ldr	r3, [pc, #200]	@ (8002b70 <HAL_GPIO_Init+0x354>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac8:	4a29      	ldr	r2, [pc, #164]	@ (8002b70 <HAL_GPIO_Init+0x354>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ace:	4b28      	ldr	r3, [pc, #160]	@ (8002b70 <HAL_GPIO_Init+0x354>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002af2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b70 <HAL_GPIO_Init+0x354>)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b70 <HAL_GPIO_Init+0x354>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b1c:	4a14      	ldr	r2, [pc, #80]	@ (8002b70 <HAL_GPIO_Init+0x354>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	f67f ae86 	bls.w	800283c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3724      	adds	r7, #36	@ 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40013800 	.word	0x40013800
 8002b48:	40020000 	.word	0x40020000
 8002b4c:	40020400 	.word	0x40020400
 8002b50:	40020800 	.word	0x40020800
 8002b54:	40020c00 	.word	0x40020c00
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40021400 	.word	0x40021400
 8002b60:	40021800 	.word	0x40021800
 8002b64:	40021c00 	.word	0x40021c00
 8002b68:	40022000 	.word	0x40022000
 8002b6c:	40022400 	.word	0x40022400
 8002b70:	40013c00 	.word	0x40013c00

08002b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	807b      	strh	r3, [r7, #2]
 8002b80:	4613      	mov	r3, r2
 8002b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b84:	787b      	ldrb	r3, [r7, #1]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b90:	e003      	b.n	8002b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b92:	887b      	ldrh	r3, [r7, #2]
 8002b94:	041a      	lsls	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	619a      	str	r2, [r3, #24]
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b086      	sub	sp, #24
 8002baa:	af02      	add	r7, sp, #8
 8002bac:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e059      	b.n	8002c6c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f00a f962 	bl	800ce9c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2203      	movs	r2, #3
 8002bdc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002be6:	d102      	bne.n	8002bee <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f004 fa29 	bl	800704a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	7c1a      	ldrb	r2, [r3, #16]
 8002c00:	f88d 2000 	strb.w	r2, [sp]
 8002c04:	3304      	adds	r3, #4
 8002c06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c08:	f004 f9b4 	bl	8006f74 <USB_CoreInit>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e026      	b.n	8002c6c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2101      	movs	r1, #1
 8002c24:	4618      	mov	r0, r3
 8002c26:	f004 fa21 	bl	800706c <USB_SetCurrentMode>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e017      	b.n	8002c6c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7c1a      	ldrb	r2, [r3, #16]
 8002c44:	f88d 2000 	strb.w	r2, [sp]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c4c:	f004 fbc4 	bl	80073d8 <USB_HostInit>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e004      	b.n	8002c6c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002c74:	b590      	push	{r4, r7, lr}
 8002c76:	b08b      	sub	sp, #44	@ 0x2c
 8002c78:	af04      	add	r7, sp, #16
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	4611      	mov	r1, r2
 8002c80:	461a      	mov	r2, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	70fb      	strb	r3, [r7, #3]
 8002c86:	460b      	mov	r3, r1
 8002c88:	70bb      	strb	r3, [r7, #2]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002c8e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002c90:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_HCD_HC_Init+0x2c>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e09d      	b.n	8002ddc <HAL_HCD_HC_Init+0x168>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	3319      	adds	r3, #25
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	3314      	adds	r3, #20
 8002ccc:	787a      	ldrb	r2, [r7, #1]
 8002cce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3315      	adds	r3, #21
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3326      	adds	r3, #38	@ 0x26
 8002cf4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002cf8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	78bb      	ldrb	r3, [r7, #2]
 8002cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d02:	b2d8      	uxtb	r0, r3
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	3316      	adds	r3, #22
 8002d12:	4602      	mov	r2, r0
 8002d14:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fbc8 	bl	80034b0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002d20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	da0a      	bge.n	8002d3e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	3317      	adds	r3, #23
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]
 8002d3c:	e009      	b.n	8002d52 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3317      	adds	r3, #23
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f004 fc96 	bl	8007688 <USB_GetHostSpeed>
 8002d5c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002d5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d10b      	bne.n	8002d7e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002d66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d107      	bne.n	8002d7e <HAL_HCD_HC_Init+0x10a>
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d104      	bne.n	8002d7e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2bbc      	cmp	r3, #188	@ 0xbc
 8002d78:	d901      	bls.n	8002d7e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002d7a:	23bc      	movs	r3, #188	@ 0xbc
 8002d7c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3318      	adds	r3, #24
 8002d8e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002d92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	b298      	uxth	r0, r3
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	3328      	adds	r3, #40	@ 0x28
 8002da8:	4602      	mov	r2, r0
 8002daa:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	787c      	ldrb	r4, [r7, #1]
 8002db6:	78ba      	ldrb	r2, [r7, #2]
 8002db8:	78f9      	ldrb	r1, [r7, #3]
 8002dba:	9302      	str	r3, [sp, #8]
 8002dbc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002dc0:	9301      	str	r3, [sp, #4]
 8002dc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	4623      	mov	r3, r4
 8002dca:	f004 fc85 	bl	80076d8 <USB_HC_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	371c      	adds	r7, #28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd90      	pop	{r4, r7, pc}

08002de4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_HCD_HC_Halt+0x1e>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e00f      	b.n	8002e22 <HAL_HCD_HC_Halt+0x3e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f005 f817 	bl	8007e46 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	4608      	mov	r0, r1
 8002e36:	4611      	mov	r1, r2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	70fb      	strb	r3, [r7, #3]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	70bb      	strb	r3, [r7, #2]
 8002e42:	4613      	mov	r3, r2
 8002e44:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	3317      	adds	r3, #23
 8002e56:	78ba      	ldrb	r2, [r7, #2]
 8002e58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	3326      	adds	r3, #38	@ 0x26
 8002e6a:	787a      	ldrb	r2, [r7, #1]
 8002e6c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002e6e:	7c3b      	ldrb	r3, [r7, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d114      	bne.n	8002e9e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	332a      	adds	r3, #42	@ 0x2a
 8002e84:	2203      	movs	r2, #3
 8002e86:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	3319      	adds	r3, #25
 8002e98:	7f3a      	ldrb	r2, [r7, #28]
 8002e9a:	701a      	strb	r2, [r3, #0]
 8002e9c:	e009      	b.n	8002eb2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	332a      	adds	r3, #42	@ 0x2a
 8002eae:	2202      	movs	r2, #2
 8002eb0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002eb2:	787b      	ldrb	r3, [r7, #1]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	f200 8102 	bhi.w	80030be <HAL_HCD_HC_SubmitRequest+0x292>
 8002eba:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec0:	08002ed1 	.word	0x08002ed1
 8002ec4:	080030a9 	.word	0x080030a9
 8002ec8:	08002f95 	.word	0x08002f95
 8002ecc:	0800301f 	.word	0x0800301f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002ed0:	7c3b      	ldrb	r3, [r7, #16]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	f040 80f5 	bne.w	80030c2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002ed8:	78bb      	ldrb	r3, [r7, #2]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d12d      	bne.n	8002f3a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002ede:	8b3b      	ldrh	r3, [r7, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	333d      	adds	r3, #61	@ 0x3d
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	333d      	adds	r3, #61	@ 0x3d
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10a      	bne.n	8002f24 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	332a      	adds	r3, #42	@ 0x2a
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002f22:	e0ce      	b.n	80030c2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	332a      	adds	r3, #42	@ 0x2a
 8002f34:	2202      	movs	r2, #2
 8002f36:	701a      	strb	r2, [r3, #0]
      break;
 8002f38:	e0c3      	b.n	80030c2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	331a      	adds	r3, #26
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	f040 80b8 	bne.w	80030c2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	333c      	adds	r3, #60	@ 0x3c
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10a      	bne.n	8002f7e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	332a      	adds	r3, #42	@ 0x2a
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
      break;
 8002f7c:	e0a1      	b.n	80030c2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	332a      	adds	r3, #42	@ 0x2a
 8002f8e:	2202      	movs	r2, #2
 8002f90:	701a      	strb	r2, [r3, #0]
      break;
 8002f92:	e096      	b.n	80030c2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002f94:	78bb      	ldrb	r3, [r7, #2]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d120      	bne.n	8002fdc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	333d      	adds	r3, #61	@ 0x3d
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10a      	bne.n	8002fc6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	332a      	adds	r3, #42	@ 0x2a
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002fc4:	e07e      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	332a      	adds	r3, #42	@ 0x2a
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	701a      	strb	r2, [r3, #0]
      break;
 8002fda:	e073      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	333c      	adds	r3, #60	@ 0x3c
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	332a      	adds	r3, #42	@ 0x2a
 8003002:	2200      	movs	r2, #0
 8003004:	701a      	strb	r2, [r3, #0]
      break;
 8003006:	e05d      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	332a      	adds	r3, #42	@ 0x2a
 8003018:	2202      	movs	r2, #2
 800301a:	701a      	strb	r2, [r3, #0]
      break;
 800301c:	e052      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800301e:	78bb      	ldrb	r3, [r7, #2]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d120      	bne.n	8003066 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	333d      	adds	r3, #61	@ 0x3d
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	332a      	adds	r3, #42	@ 0x2a
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800304e:	e039      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	332a      	adds	r3, #42	@ 0x2a
 8003060:	2202      	movs	r2, #2
 8003062:	701a      	strb	r2, [r3, #0]
      break;
 8003064:	e02e      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	333c      	adds	r3, #60	@ 0x3c
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10a      	bne.n	8003092 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	332a      	adds	r3, #42	@ 0x2a
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
      break;
 8003090:	e018      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	332a      	adds	r3, #42	@ 0x2a
 80030a2:	2202      	movs	r2, #2
 80030a4:	701a      	strb	r2, [r3, #0]
      break;
 80030a6:	e00d      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030a8:	78fa      	ldrb	r2, [r7, #3]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	332a      	adds	r3, #42	@ 0x2a
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
      break;
 80030bc:	e002      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80030be:	bf00      	nop
 80030c0:	e000      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80030c2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	332c      	adds	r3, #44	@ 0x2c
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	8b39      	ldrh	r1, [r7, #24]
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4403      	add	r3, r0
 80030e8:	3334      	adds	r3, #52	@ 0x34
 80030ea:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	334c      	adds	r3, #76	@ 0x4c
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003100:	78fa      	ldrb	r2, [r7, #3]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	3338      	adds	r3, #56	@ 0x38
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	3315      	adds	r3, #21
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	334d      	adds	r3, #77	@ 0x4d
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	3310      	adds	r3, #16
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	1d19      	adds	r1, r3, #4
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	799b      	ldrb	r3, [r3, #6]
 8003156:	461a      	mov	r2, r3
 8003158:	f004 fbea 	bl	8007930 <USB_HC_StartXfer>
 800315c:	4603      	mov	r3, r0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop

08003168 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f004 f8ea 	bl	8007358 <USB_GetMode>
 8003184:	4603      	mov	r3, r0
 8003186:	2b01      	cmp	r3, #1
 8003188:	f040 80fb 	bne.w	8003382 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f004 f8ad 	bl	80072f0 <USB_ReadInterrupts>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80f1 	beq.w	8003380 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f004 f8a4 	bl	80072f0 <USB_ReadInterrupts>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031b2:	d104      	bne.n	80031be <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80031bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f004 f894 	bl	80072f0 <USB_ReadInterrupts>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031d2:	d104      	bne.n	80031de <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80031dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f004 f884 	bl	80072f0 <USB_ReadInterrupts>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031f2:	d104      	bne.n	80031fe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80031fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f004 f874 	bl	80072f0 <USB_ReadInterrupts>
 8003208:	4603      	mov	r3, r0
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b02      	cmp	r3, #2
 8003210:	d103      	bne.n	800321a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2202      	movs	r2, #2
 8003218:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f004 f866 	bl	80072f0 <USB_ReadInterrupts>
 8003224:	4603      	mov	r3, r0
 8003226:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800322a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800322e:	d120      	bne.n	8003272 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003238:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d113      	bne.n	8003272 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800324a:	2110      	movs	r1, #16
 800324c:	6938      	ldr	r0, [r7, #16]
 800324e:	f003 ff59 	bl	8007104 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003252:	6938      	ldr	r0, [r7, #16]
 8003254:	f003 ff88 	bl	8007168 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	7a5b      	ldrb	r3, [r3, #9]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d105      	bne.n	800326c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2101      	movs	r1, #1
 8003266:	4618      	mov	r0, r3
 8003268:	f004 f96e 	bl	8007548 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f009 fe87 	bl	800cf80 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f004 f83a 	bl	80072f0 <USB_ReadInterrupts>
 800327c:	4603      	mov	r3, r0
 800327e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003282:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003286:	d102      	bne.n	800328e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f001 fd33 	bl	8004cf4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f004 f82c 	bl	80072f0 <USB_ReadInterrupts>
 8003298:	4603      	mov	r3, r0
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d106      	bne.n	80032b0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f009 fe50 	bl	800cf48 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2208      	movs	r2, #8
 80032ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f004 f81b 	bl	80072f0 <USB_ReadInterrupts>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032c4:	d139      	bne.n	800333a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f004 fdaa 	bl	8007e24 <USB_HC_ReadInterrupt>
 80032d0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	e025      	b.n	8003324 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d018      	beq.n	800331e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003302:	d106      	bne.n	8003312 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	4619      	mov	r1, r3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f905 	bl	800351a <HCD_HC_IN_IRQHandler>
 8003310:	e005      	b.n	800331e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 ff67 	bl	80041ec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	3301      	adds	r3, #1
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	795b      	ldrb	r3, [r3, #5]
 8003328:	461a      	mov	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	4293      	cmp	r3, r2
 800332e:	d3d3      	bcc.n	80032d8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003338:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f003 ffd6 	bl	80072f0 <USB_ReadInterrupts>
 8003344:	4603      	mov	r3, r0
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b10      	cmp	r3, #16
 800334c:	d101      	bne.n	8003352 <HAL_HCD_IRQHandler+0x1ea>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <HAL_HCD_IRQHandler+0x1ec>
 8003352:	2300      	movs	r3, #0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d014      	beq.n	8003382 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0210 	bic.w	r2, r2, #16
 8003366:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f001 fbe4 	bl	8004b36 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0210 	orr.w	r2, r2, #16
 800337c:	619a      	str	r2, [r3, #24]
 800337e:	e000      	b.n	8003382 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003380:	bf00      	nop
    }
  }
}
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_HCD_Start+0x16>
 800339a:	2302      	movs	r3, #2
 800339c:	e013      	b.n	80033c6 <HAL_HCD_Start+0x3e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2101      	movs	r1, #1
 80033ac:	4618      	mov	r0, r3
 80033ae:	f004 f932 	bl	8007616 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f003 fe36 	bl	8007028 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_HCD_Stop+0x16>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e00d      	b.n	8003400 <HAL_HCD_Stop+0x32>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f004 fe85 	bl	8008100 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f004 f8d4 	bl	80075c2 <USB_ResetPort>
 800341a:	4603      	mov	r3, r0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	334c      	adds	r3, #76	@ 0x4c
 8003440:	781b      	ldrb	r3, [r3, #0]
}
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	460b      	mov	r3, r1
 8003458:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	3338      	adds	r3, #56	@ 0x38
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f004 f916 	bl	80076b6 <USB_GetCurrentFrame>
 800348a:	4603      	mov	r3, r0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f004 f8f1 	bl	8007688 <USB_GetHostSpeed>
 80034a6:	4603      	mov	r3, r0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	331a      	adds	r3, #26
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	331b      	adds	r3, #27
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	3325      	adds	r3, #37	@ 0x25
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80034f8:	78fa      	ldrb	r2, [r7, #3]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	3324      	adds	r3, #36	@ 0x24
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f003 feec 	bl	8007316 <USB_ReadChInterrupts>
 800353e:	4603      	mov	r3, r0
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b04      	cmp	r3, #4
 8003546:	d11a      	bne.n	800357e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003554:	461a      	mov	r2, r3
 8003556:	2304      	movs	r3, #4
 8003558:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	334d      	adds	r3, #77	@ 0x4d
 800356a:	2207      	movs	r2, #7
 800356c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f004 fc65 	bl	8007e46 <USB_HC_Halt>
 800357c:	e09e      	b.n	80036bc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	78fa      	ldrb	r2, [r7, #3]
 8003584:	4611      	mov	r1, r2
 8003586:	4618      	mov	r0, r3
 8003588:	f003 fec5 	bl	8007316 <USB_ReadChInterrupts>
 800358c:	4603      	mov	r3, r0
 800358e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003596:	d11b      	bne.n	80035d0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035a4:	461a      	mov	r2, r3
 80035a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	334d      	adds	r3, #77	@ 0x4d
 80035bc:	2208      	movs	r2, #8
 80035be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	4611      	mov	r1, r2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f004 fc3c 	bl	8007e46 <USB_HC_Halt>
 80035ce:	e075      	b.n	80036bc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f003 fe9c 	bl	8007316 <USB_ReadChInterrupts>
 80035de:	4603      	mov	r3, r0
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d11a      	bne.n	800361e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f4:	461a      	mov	r2, r3
 80035f6:	2308      	movs	r3, #8
 80035f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	334d      	adds	r3, #77	@ 0x4d
 800360a:	2206      	movs	r2, #6
 800360c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f004 fc15 	bl	8007e46 <USB_HC_Halt>
 800361c:	e04e      	b.n	80036bc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	4611      	mov	r1, r2
 8003626:	4618      	mov	r0, r3
 8003628:	f003 fe75 	bl	8007316 <USB_ReadChInterrupts>
 800362c:	4603      	mov	r3, r0
 800362e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003636:	d11b      	bne.n	8003670 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4413      	add	r3, r2
 8003640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003644:	461a      	mov	r2, r3
 8003646:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800364a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	334d      	adds	r3, #77	@ 0x4d
 800365c:	2209      	movs	r2, #9
 800365e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f004 fbec 	bl	8007e46 <USB_HC_Halt>
 800366e:	e025      	b.n	80036bc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f003 fe4c 	bl	8007316 <USB_ReadChInterrupts>
 800367e:	4603      	mov	r3, r0
 8003680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003684:	2b80      	cmp	r3, #128	@ 0x80
 8003686:	d119      	bne.n	80036bc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003694:	461a      	mov	r2, r3
 8003696:	2380      	movs	r3, #128	@ 0x80
 8003698:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	334d      	adds	r3, #77	@ 0x4d
 80036aa:	2207      	movs	r2, #7
 80036ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f004 fbc5 	bl	8007e46 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f003 fe26 	bl	8007316 <USB_ReadChInterrupts>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036d4:	d112      	bne.n	80036fc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	4611      	mov	r1, r2
 80036de:	4618      	mov	r0, r3
 80036e0:	f004 fbb1 	bl	8007e46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036f0:	461a      	mov	r2, r3
 80036f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036f6:	6093      	str	r3, [r2, #8]
 80036f8:	f000 bd75 	b.w	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f003 fe06 	bl	8007316 <USB_ReadChInterrupts>
 800370a:	4603      	mov	r3, r0
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b01      	cmp	r3, #1
 8003712:	f040 8128 	bne.w	8003966 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003716:	78fb      	ldrb	r3, [r7, #3]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4413      	add	r3, r2
 800371e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003722:	461a      	mov	r2, r3
 8003724:	2320      	movs	r3, #32
 8003726:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	331b      	adds	r3, #27
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d119      	bne.n	8003772 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	331b      	adds	r3, #27
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4413      	add	r3, r2
 800375a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	0151      	lsls	r1, r2, #5
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	440a      	add	r2, r1
 8003768:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800376c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003770:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	799b      	ldrb	r3, [r3, #6]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d01b      	beq.n	80037b2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	3330      	adds	r3, #48	@ 0x30
 800378a:	6819      	ldr	r1, [r3, #0]
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4413      	add	r3, r2
 8003794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379e:	78fa      	ldrb	r2, [r7, #3]
 80037a0:	1ac9      	subs	r1, r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4403      	add	r3, r0
 80037ae:	3338      	adds	r3, #56	@ 0x38
 80037b0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	334d      	adds	r3, #77	@ 0x4d
 80037c2:	2201      	movs	r2, #1
 80037c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80037c6:	78fa      	ldrb	r2, [r7, #3]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	3344      	adds	r3, #68	@ 0x44
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e6:	461a      	mov	r2, r3
 80037e8:	2301      	movs	r3, #1
 80037ea:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037ec:	78fa      	ldrb	r2, [r7, #3]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	3326      	adds	r3, #38	@ 0x26
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	3326      	adds	r3, #38	@ 0x26
 8003812:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003814:	2b02      	cmp	r3, #2
 8003816:	d110      	bne.n	800383a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f004 fb10 	bl	8007e46 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003826:	78fb      	ldrb	r3, [r7, #3]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4413      	add	r3, r2
 800382e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003832:	461a      	mov	r2, r3
 8003834:	2310      	movs	r3, #16
 8003836:	6093      	str	r3, [r2, #8]
 8003838:	e03d      	b.n	80038b6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	3326      	adds	r3, #38	@ 0x26
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b03      	cmp	r3, #3
 800384e:	d00a      	beq.n	8003866 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	3326      	adds	r3, #38	@ 0x26
 8003860:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003862:	2b01      	cmp	r3, #1
 8003864:	d127      	bne.n	80038b6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4413      	add	r3, r2
 800386e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	78fa      	ldrb	r2, [r7, #3]
 8003876:	0151      	lsls	r1, r2, #5
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	440a      	add	r2, r1
 800387c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003880:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003884:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	334c      	adds	r3, #76	@ 0x4c
 8003896:	2201      	movs	r2, #1
 8003898:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	334c      	adds	r3, #76	@ 0x4c
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	4619      	mov	r1, r3
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f009 fb73 	bl	800cf9c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	799b      	ldrb	r3, [r3, #6]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d13b      	bne.n	8003936 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	3338      	adds	r3, #56	@ 0x38
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4403      	add	r3, r0
 80038de:	3328      	adds	r3, #40	@ 0x28
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	440b      	add	r3, r1
 80038e4:	1e59      	subs	r1, r3, #1
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4403      	add	r3, r0
 80038f4:	3328      	adds	r3, #40	@ 0x28
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 8470 	beq.w	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003906:	78fa      	ldrb	r2, [r7, #3]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	333c      	adds	r3, #60	@ 0x3c
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	f083 0301 	eor.w	r3, r3, #1
 800391e:	b2d8      	uxtb	r0, r3
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	333c      	adds	r3, #60	@ 0x3c
 800392e:	4602      	mov	r2, r0
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	f000 bc58 	b.w	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	333c      	adds	r3, #60	@ 0x3c
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	f083 0301 	eor.w	r3, r3, #1
 800394e:	b2d8      	uxtb	r0, r3
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	333c      	adds	r3, #60	@ 0x3c
 800395e:	4602      	mov	r2, r0
 8003960:	701a      	strb	r2, [r3, #0]
 8003962:	f000 bc40 	b.w	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f003 fcd1 	bl	8007316 <USB_ReadChInterrupts>
 8003974:	4603      	mov	r3, r0
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b20      	cmp	r3, #32
 800397c:	d131      	bne.n	80039e2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4413      	add	r3, r2
 8003986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800398a:	461a      	mov	r2, r3
 800398c:	2320      	movs	r3, #32
 800398e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	331a      	adds	r3, #26
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	f040 841f 	bne.w	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	331b      	adds	r3, #27
 80039b8:	2201      	movs	r2, #1
 80039ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	334d      	adds	r3, #77	@ 0x4d
 80039cc:	2203      	movs	r2, #3
 80039ce:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f004 fa34 	bl	8007e46 <USB_HC_Halt>
 80039de:	f000 bc02 	b.w	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f003 fc93 	bl	8007316 <USB_ReadChInterrupts>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	f040 8305 	bne.w	8004006 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	334d      	adds	r3, #77	@ 0x4d
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d114      	bne.n	8003a4e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	334d      	adds	r3, #77	@ 0x4d
 8003a34:	2202      	movs	r2, #2
 8003a36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003a38:	78fa      	ldrb	r2, [r7, #3]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	334c      	adds	r3, #76	@ 0x4c
 8003a48:	2201      	movs	r2, #1
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	e2cc      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	334d      	adds	r3, #77	@ 0x4d
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b06      	cmp	r3, #6
 8003a62:	d114      	bne.n	8003a8e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	334d      	adds	r3, #77	@ 0x4d
 8003a74:	2202      	movs	r2, #2
 8003a76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	334c      	adds	r3, #76	@ 0x4c
 8003a88:	2205      	movs	r2, #5
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	e2ac      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	334d      	adds	r3, #77	@ 0x4d
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b07      	cmp	r3, #7
 8003aa2:	d00b      	beq.n	8003abc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	334d      	adds	r3, #77	@ 0x4d
 8003ab4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ab6:	2b09      	cmp	r3, #9
 8003ab8:	f040 80a6 	bne.w	8003c08 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	334d      	adds	r3, #77	@ 0x4d
 8003acc:	2202      	movs	r2, #2
 8003ace:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	3344      	adds	r3, #68	@ 0x44
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	1c59      	adds	r1, r3, #1
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4403      	add	r3, r0
 8003af0:	3344      	adds	r3, #68	@ 0x44
 8003af2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	3344      	adds	r3, #68	@ 0x44
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d943      	bls.n	8003b92 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	3344      	adds	r3, #68	@ 0x44
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003b1e:	78fa      	ldrb	r2, [r7, #3]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	331a      	adds	r3, #26
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d123      	bne.n	8003b7c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	331b      	adds	r3, #27
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	331c      	adds	r3, #28
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	0151      	lsls	r1, r2, #5
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	440a      	add	r2, r1
 8003b72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	334c      	adds	r3, #76	@ 0x4c
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b90:	e229      	b.n	8003fe6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	334c      	adds	r3, #76	@ 0x4c
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	3326      	adds	r3, #38	@ 0x26
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00b      	beq.n	8003bd4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	3326      	adds	r3, #38	@ 0x26
 8003bcc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	f040 8209 	bne.w	8003fe6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bea:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bf2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c00:	461a      	mov	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c06:	e1ee      	b.n	8003fe6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003c08:	78fa      	ldrb	r2, [r7, #3]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	334d      	adds	r3, #77	@ 0x4d
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	f040 80c8 	bne.w	8003db0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	334d      	adds	r3, #77	@ 0x4d
 8003c30:	2202      	movs	r2, #2
 8003c32:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	331b      	adds	r3, #27
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	f040 81ce 	bne.w	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	3326      	adds	r3, #38	@ 0x26
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d16b      	bne.n	8003d3a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	3348      	adds	r3, #72	@ 0x48
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	1c59      	adds	r1, r3, #1
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4403      	add	r3, r0
 8003c82:	3348      	adds	r3, #72	@ 0x48
 8003c84:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003c86:	78fa      	ldrb	r2, [r7, #3]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	3348      	adds	r3, #72	@ 0x48
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d943      	bls.n	8003d24 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	3348      	adds	r3, #72	@ 0x48
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	331b      	adds	r3, #27
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003cc4:	78fa      	ldrb	r2, [r7, #3]
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3344      	adds	r3, #68	@ 0x44
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d809      	bhi.n	8003cee <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	331c      	adds	r3, #28
 8003cea:	2201      	movs	r2, #1
 8003cec:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003cee:	78fb      	ldrb	r3, [r7, #3]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	0151      	lsls	r1, r2, #5
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	440a      	add	r2, r1
 8003d04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d0c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d0e:	78fa      	ldrb	r2, [r7, #3]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	334c      	adds	r3, #76	@ 0x4c
 8003d1e:	2204      	movs	r2, #4
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	e014      	b.n	8003d4e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d24:	78fa      	ldrb	r2, [r7, #3]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	334c      	adds	r3, #76	@ 0x4c
 8003d34:	2202      	movs	r2, #2
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	e009      	b.n	8003d4e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d3a:	78fa      	ldrb	r2, [r7, #3]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	334c      	adds	r3, #76	@ 0x4c
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	3326      	adds	r3, #38	@ 0x26
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00b      	beq.n	8003d7c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	3326      	adds	r3, #38	@ 0x26
 8003d74:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	f040 8136 	bne.w	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d92:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d9a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003da8:	461a      	mov	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e11b      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	334d      	adds	r3, #77	@ 0x4d
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	f040 8081 	bne.w	8003eca <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	334d      	adds	r3, #77	@ 0x4d
 8003dd8:	2202      	movs	r2, #2
 8003dda:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	331b      	adds	r3, #27
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	f040 80fa 	bne.w	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	334c      	adds	r3, #76	@ 0x4c
 8003e04:	2202      	movs	r2, #2
 8003e06:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	0151      	lsls	r1, r2, #5
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	440a      	add	r2, r1
 8003e1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e26:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	0151      	lsls	r1, r2, #5
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e46:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	78fa      	ldrb	r2, [r7, #3]
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e62:	f023 0320 	bic.w	r3, r3, #32
 8003e66:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	3326      	adds	r3, #38	@ 0x26
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	3326      	adds	r3, #38	@ 0x26
 8003e8e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	f040 80a9 	bne.w	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e96:	78fb      	ldrb	r3, [r7, #3]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003eac:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003eb4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003eb6:	78fb      	ldrb	r3, [r7, #3]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	e08e      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003eca:	78fa      	ldrb	r2, [r7, #3]
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	334d      	adds	r3, #77	@ 0x4d
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d143      	bne.n	8003f68 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ee0:	78fa      	ldrb	r2, [r7, #3]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	334d      	adds	r3, #77	@ 0x4d
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	334c      	adds	r3, #76	@ 0x4c
 8003f04:	2202      	movs	r2, #2
 8003f06:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f08:	78fa      	ldrb	r2, [r7, #3]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	3326      	adds	r3, #38	@ 0x26
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f1e:	78fa      	ldrb	r2, [r7, #3]
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	4613      	mov	r3, r2
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	3326      	adds	r3, #38	@ 0x26
 8003f2e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d159      	bne.n	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f4a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f52:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f60:	461a      	mov	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e03f      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	334d      	adds	r3, #77	@ 0x4d
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d126      	bne.n	8003fcc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	334d      	adds	r3, #77	@ 0x4d
 8003f8e:	2202      	movs	r2, #2
 8003f90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	3344      	adds	r3, #68	@ 0x44
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	1c59      	adds	r1, r3, #1
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	1a9b      	subs	r3, r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4403      	add	r3, r0
 8003fb2:	3344      	adds	r3, #68	@ 0x44
 8003fb4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	334c      	adds	r3, #76	@ 0x4c
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	e00d      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003fcc:	78fa      	ldrb	r2, [r7, #3]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	334d      	adds	r3, #77	@ 0x4d
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	f000 8100 	beq.w	80041e4 <HCD_HC_IN_IRQHandler+0xcca>
 8003fe4:	e000      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fe6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003fe8:	78fa      	ldrb	r2, [r7, #3]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	334c      	adds	r3, #76	@ 0x4c
 8003ff8:	781a      	ldrb	r2, [r3, #0]
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f008 ffcc 	bl	800cf9c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004004:	e0ef      	b.n	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f003 f981 	bl	8007316 <USB_ReadChInterrupts>
 8004014:	4603      	mov	r3, r0
 8004016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401a:	2b40      	cmp	r3, #64	@ 0x40
 800401c:	d12f      	bne.n	800407e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4413      	add	r3, r2
 8004026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800402a:	461a      	mov	r2, r3
 800402c:	2340      	movs	r3, #64	@ 0x40
 800402e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004030:	78fa      	ldrb	r2, [r7, #3]
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	334d      	adds	r3, #77	@ 0x4d
 8004040:	2205      	movs	r2, #5
 8004042:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004044:	78fa      	ldrb	r2, [r7, #3]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	331a      	adds	r3, #26
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800405a:	78fa      	ldrb	r2, [r7, #3]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	3344      	adds	r3, #68	@ 0x44
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	4611      	mov	r1, r2
 8004076:	4618      	mov	r0, r3
 8004078:	f003 fee5 	bl	8007e46 <USB_HC_Halt>
 800407c:	e0b3      	b.n	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f003 f945 	bl	8007316 <USB_ReadChInterrupts>
 800408c:	4603      	mov	r3, r0
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b10      	cmp	r3, #16
 8004094:	f040 80a7 	bne.w	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	3326      	adds	r3, #38	@ 0x26
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d11b      	bne.n	80040e6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80040ae:	78fa      	ldrb	r2, [r7, #3]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	3344      	adds	r3, #68	@ 0x44
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	334d      	adds	r3, #77	@ 0x4d
 80040d2:	2204      	movs	r2, #4
 80040d4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f003 feb1 	bl	8007e46 <USB_HC_Halt>
 80040e4:	e03f      	b.n	8004166 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040e6:	78fa      	ldrb	r2, [r7, #3]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	3326      	adds	r3, #38	@ 0x26
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80040fc:	78fa      	ldrb	r2, [r7, #3]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	3326      	adds	r3, #38	@ 0x26
 800410c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800410e:	2b02      	cmp	r3, #2
 8004110:	d129      	bne.n	8004166 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004112:	78fa      	ldrb	r2, [r7, #3]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	3344      	adds	r3, #68	@ 0x44
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	799b      	ldrb	r3, [r3, #6]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HCD_HC_IN_IRQHandler+0xc2a>
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	331b      	adds	r3, #27
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d110      	bne.n	8004166 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	334d      	adds	r3, #77	@ 0x4d
 8004154:	2204      	movs	r2, #4
 8004156:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f003 fe70 	bl	8007e46 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004166:	78fa      	ldrb	r2, [r7, #3]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	331b      	adds	r3, #27
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d129      	bne.n	80041d0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	331b      	adds	r3, #27
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4413      	add	r3, r2
 8004198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	78fa      	ldrb	r2, [r7, #3]
 80041a0:	0151      	lsls	r1, r2, #5
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	440a      	add	r2, r1
 80041a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ae:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	78fa      	ldrb	r2, [r7, #3]
 80041c0:	0151      	lsls	r1, r2, #5
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	440a      	add	r2, r1
 80041c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041ca:	f043 0320 	orr.w	r3, r3, #32
 80041ce:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041dc:	461a      	mov	r2, r3
 80041de:	2310      	movs	r3, #16
 80041e0:	6093      	str	r3, [r2, #8]
 80041e2:	e000      	b.n	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80041e4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	4611      	mov	r1, r2
 800420a:	4618      	mov	r0, r3
 800420c:	f003 f883 	bl	8007316 <USB_ReadChInterrupts>
 8004210:	4603      	mov	r3, r0
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b04      	cmp	r3, #4
 8004218:	d11b      	bne.n	8004252 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4413      	add	r3, r2
 8004222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004226:	461a      	mov	r2, r3
 8004228:	2304      	movs	r3, #4
 800422a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	334d      	adds	r3, #77	@ 0x4d
 800423c:	2207      	movs	r2, #7
 800423e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	4611      	mov	r1, r2
 8004248:	4618      	mov	r0, r3
 800424a:	f003 fdfc 	bl	8007e46 <USB_HC_Halt>
 800424e:	f000 bc6f 	b.w	8004b30 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	78fa      	ldrb	r2, [r7, #3]
 8004258:	4611      	mov	r1, r2
 800425a:	4618      	mov	r0, r3
 800425c:	f003 f85b 	bl	8007316 <USB_ReadChInterrupts>
 8004260:	4603      	mov	r3, r0
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b20      	cmp	r3, #32
 8004268:	f040 8082 	bne.w	8004370 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	4413      	add	r3, r2
 8004274:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004278:	461a      	mov	r2, r3
 800427a:	2320      	movs	r3, #32
 800427c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	3319      	adds	r3, #25
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d124      	bne.n	80042de <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004294:	78fa      	ldrb	r2, [r7, #3]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	3319      	adds	r3, #25
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	334c      	adds	r3, #76	@ 0x4c
 80042b8:	2202      	movs	r2, #2
 80042ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	334d      	adds	r3, #77	@ 0x4d
 80042cc:	2203      	movs	r2, #3
 80042ce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f003 fdb4 	bl	8007e46 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80042de:	78fa      	ldrb	r2, [r7, #3]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	331a      	adds	r3, #26
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	f040 841d 	bne.w	8004b30 <HCD_HC_OUT_IRQHandler+0x944>
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	331b      	adds	r3, #27
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	f040 8411 	bne.w	8004b30 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800430e:	78fa      	ldrb	r2, [r7, #3]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	3326      	adds	r3, #38	@ 0x26
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d009      	beq.n	8004338 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004324:	78fa      	ldrb	r2, [r7, #3]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	331b      	adds	r3, #27
 8004334:	2201      	movs	r2, #1
 8004336:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004338:	78fa      	ldrb	r2, [r7, #3]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	1a9b      	subs	r3, r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	334d      	adds	r3, #77	@ 0x4d
 8004348:	2203      	movs	r2, #3
 800434a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	78fa      	ldrb	r2, [r7, #3]
 8004352:	4611      	mov	r1, r2
 8004354:	4618      	mov	r0, r3
 8004356:	f003 fd76 	bl	8007e46 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800435a:	78fa      	ldrb	r2, [r7, #3]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	3344      	adds	r3, #68	@ 0x44
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	e3df      	b.n	8004b30 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	78fa      	ldrb	r2, [r7, #3]
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f002 ffcc 	bl	8007316 <USB_ReadChInterrupts>
 800437e:	4603      	mov	r3, r0
 8004380:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004388:	d111      	bne.n	80043ae <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4413      	add	r3, r2
 8004392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004396:	461a      	mov	r2, r3
 8004398:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800439c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f003 fd4d 	bl	8007e46 <USB_HC_Halt>
 80043ac:	e3c0      	b.n	8004b30 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	78fa      	ldrb	r2, [r7, #3]
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f002 ffad 	bl	8007316 <USB_ReadChInterrupts>
 80043bc:	4603      	mov	r3, r0
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d168      	bne.n	8004498 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	3344      	adds	r3, #68	@ 0x44
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	4611      	mov	r1, r2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f002 ff97 	bl	8007316 <USB_ReadChInterrupts>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ee:	2b40      	cmp	r3, #64	@ 0x40
 80043f0:	d112      	bne.n	8004418 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	3319      	adds	r3, #25
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4413      	add	r3, r2
 800440e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004412:	461a      	mov	r2, r3
 8004414:	2340      	movs	r3, #64	@ 0x40
 8004416:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	331b      	adds	r3, #27
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d019      	beq.n	8004462 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	331b      	adds	r3, #27
 800443e:	2200      	movs	r2, #0
 8004440:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4413      	add	r3, r2
 800444a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	78fa      	ldrb	r2, [r7, #3]
 8004452:	0151      	lsls	r1, r2, #5
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	440a      	add	r2, r1
 8004458:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800445c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004460:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4413      	add	r3, r2
 800446a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800446e:	461a      	mov	r2, r3
 8004470:	2301      	movs	r3, #1
 8004472:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	334d      	adds	r3, #77	@ 0x4d
 8004484:	2201      	movs	r2, #1
 8004486:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	4611      	mov	r1, r2
 8004490:	4618      	mov	r0, r3
 8004492:	f003 fcd8 	bl	8007e46 <USB_HC_Halt>
 8004496:	e34b      	b.n	8004b30 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	78fa      	ldrb	r2, [r7, #3]
 800449e:	4611      	mov	r1, r2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f002 ff38 	bl	8007316 <USB_ReadChInterrupts>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ac:	2b40      	cmp	r3, #64	@ 0x40
 80044ae:	d139      	bne.n	8004524 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80044b0:	78fa      	ldrb	r2, [r7, #3]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	334d      	adds	r3, #77	@ 0x4d
 80044c0:	2205      	movs	r2, #5
 80044c2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	331a      	adds	r3, #26
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80044da:	78fa      	ldrb	r2, [r7, #3]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	3319      	adds	r3, #25
 80044ea:	2201      	movs	r2, #1
 80044ec:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80044ee:	78fa      	ldrb	r2, [r7, #3]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	1a9b      	subs	r3, r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	3344      	adds	r3, #68	@ 0x44
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	4611      	mov	r1, r2
 800450a:	4618      	mov	r0, r3
 800450c:	f003 fc9b 	bl	8007e46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4413      	add	r3, r2
 8004518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800451c:	461a      	mov	r2, r3
 800451e:	2340      	movs	r3, #64	@ 0x40
 8004520:	6093      	str	r3, [r2, #8]
 8004522:	e305      	b.n	8004b30 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	78fa      	ldrb	r2, [r7, #3]
 800452a:	4611      	mov	r1, r2
 800452c:	4618      	mov	r0, r3
 800452e:	f002 fef2 	bl	8007316 <USB_ReadChInterrupts>
 8004532:	4603      	mov	r3, r0
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b08      	cmp	r3, #8
 800453a:	d11a      	bne.n	8004572 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	4413      	add	r3, r2
 8004544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004548:	461a      	mov	r2, r3
 800454a:	2308      	movs	r3, #8
 800454c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	334d      	adds	r3, #77	@ 0x4d
 800455e:	2206      	movs	r2, #6
 8004560:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	4611      	mov	r1, r2
 800456a:	4618      	mov	r0, r3
 800456c:	f003 fc6b 	bl	8007e46 <USB_HC_Halt>
 8004570:	e2de      	b.n	8004b30 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	78fa      	ldrb	r2, [r7, #3]
 8004578:	4611      	mov	r1, r2
 800457a:	4618      	mov	r0, r3
 800457c:	f002 fecb 	bl	8007316 <USB_ReadChInterrupts>
 8004580:	4603      	mov	r3, r0
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b10      	cmp	r3, #16
 8004588:	d144      	bne.n	8004614 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800458a:	78fa      	ldrb	r2, [r7, #3]
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	3344      	adds	r3, #68	@ 0x44
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800459e:	78fa      	ldrb	r2, [r7, #3]
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	334d      	adds	r3, #77	@ 0x4d
 80045ae:	2204      	movs	r2, #4
 80045b0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	3319      	adds	r3, #25
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d114      	bne.n	80045f2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80045c8:	78fa      	ldrb	r2, [r7, #3]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	3318      	adds	r3, #24
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	3319      	adds	r3, #25
 80045ee:	2201      	movs	r2, #1
 80045f0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	78fa      	ldrb	r2, [r7, #3]
 80045f8:	4611      	mov	r1, r2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f003 fc23 	bl	8007e46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4413      	add	r3, r2
 8004608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800460c:	461a      	mov	r2, r3
 800460e:	2310      	movs	r3, #16
 8004610:	6093      	str	r3, [r2, #8]
 8004612:	e28d      	b.n	8004b30 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	78fa      	ldrb	r2, [r7, #3]
 800461a:	4611      	mov	r1, r2
 800461c:	4618      	mov	r0, r3
 800461e:	f002 fe7a 	bl	8007316 <USB_ReadChInterrupts>
 8004622:	4603      	mov	r3, r0
 8004624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004628:	2b80      	cmp	r3, #128	@ 0x80
 800462a:	d169      	bne.n	8004700 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	799b      	ldrb	r3, [r3, #6]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d111      	bne.n	8004658 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	334d      	adds	r3, #77	@ 0x4d
 8004644:	2207      	movs	r2, #7
 8004646:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	78fa      	ldrb	r2, [r7, #3]
 800464e:	4611      	mov	r1, r2
 8004650:	4618      	mov	r0, r3
 8004652:	f003 fbf8 	bl	8007e46 <USB_HC_Halt>
 8004656:	e049      	b.n	80046ec <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	3344      	adds	r3, #68	@ 0x44
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	1c59      	adds	r1, r3, #1
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	4613      	mov	r3, r2
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4403      	add	r3, r0
 8004678:	3344      	adds	r3, #68	@ 0x44
 800467a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800467c:	78fa      	ldrb	r2, [r7, #3]
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	1a9b      	subs	r3, r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	3344      	adds	r3, #68	@ 0x44
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d922      	bls.n	80046d8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004692:	78fa      	ldrb	r2, [r7, #3]
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	4613      	mov	r3, r2
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	1a9b      	subs	r3, r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	440b      	add	r3, r1
 80046a0:	3344      	adds	r3, #68	@ 0x44
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80046a6:	78fa      	ldrb	r2, [r7, #3]
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	1a9b      	subs	r3, r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	334c      	adds	r3, #76	@ 0x4c
 80046b6:	2204      	movs	r2, #4
 80046b8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80046ba:	78fa      	ldrb	r2, [r7, #3]
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	334c      	adds	r3, #76	@ 0x4c
 80046ca:	781a      	ldrb	r2, [r3, #0]
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	4619      	mov	r1, r3
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f008 fc63 	bl	800cf9c <HAL_HCD_HC_NotifyURBChange_Callback>
 80046d6:	e009      	b.n	80046ec <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046d8:	78fa      	ldrb	r2, [r7, #3]
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	4613      	mov	r3, r2
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	334c      	adds	r3, #76	@ 0x4c
 80046e8:	2202      	movs	r2, #2
 80046ea:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046f8:	461a      	mov	r2, r3
 80046fa:	2380      	movs	r3, #128	@ 0x80
 80046fc:	6093      	str	r3, [r2, #8]
 80046fe:	e217      	b.n	8004b30 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	78fa      	ldrb	r2, [r7, #3]
 8004706:	4611      	mov	r1, r2
 8004708:	4618      	mov	r0, r3
 800470a:	f002 fe04 	bl	8007316 <USB_ReadChInterrupts>
 800470e:	4603      	mov	r3, r0
 8004710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004718:	d11b      	bne.n	8004752 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800471a:	78fa      	ldrb	r2, [r7, #3]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	334d      	adds	r3, #77	@ 0x4d
 800472a:	2209      	movs	r2, #9
 800472c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	78fa      	ldrb	r2, [r7, #3]
 8004734:	4611      	mov	r1, r2
 8004736:	4618      	mov	r0, r3
 8004738:	f003 fb85 	bl	8007e46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800473c:	78fb      	ldrb	r3, [r7, #3]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4413      	add	r3, r2
 8004744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004748:	461a      	mov	r2, r3
 800474a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800474e:	6093      	str	r3, [r2, #8]
 8004750:	e1ee      	b.n	8004b30 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	4611      	mov	r1, r2
 800475a:	4618      	mov	r0, r3
 800475c:	f002 fddb 	bl	8007316 <USB_ReadChInterrupts>
 8004760:	4603      	mov	r3, r0
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b02      	cmp	r3, #2
 8004768:	f040 81df 	bne.w	8004b2a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4413      	add	r3, r2
 8004774:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004778:	461a      	mov	r2, r3
 800477a:	2302      	movs	r3, #2
 800477c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800477e:	78fa      	ldrb	r2, [r7, #3]
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	1a9b      	subs	r3, r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	440b      	add	r3, r1
 800478c:	334d      	adds	r3, #77	@ 0x4d
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b01      	cmp	r3, #1
 8004792:	f040 8093 	bne.w	80048bc <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	334d      	adds	r3, #77	@ 0x4d
 80047a6:	2202      	movs	r2, #2
 80047a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80047aa:	78fa      	ldrb	r2, [r7, #3]
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	1a9b      	subs	r3, r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	334c      	adds	r3, #76	@ 0x4c
 80047ba:	2201      	movs	r2, #1
 80047bc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80047be:	78fa      	ldrb	r2, [r7, #3]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	3326      	adds	r3, #38	@ 0x26
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d00b      	beq.n	80047ec <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80047d4:	78fa      	ldrb	r2, [r7, #3]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	3326      	adds	r3, #38	@ 0x26
 80047e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	f040 8190 	bne.w	8004b0c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	799b      	ldrb	r3, [r3, #6]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d115      	bne.n	8004820 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80047f4:	78fa      	ldrb	r2, [r7, #3]
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	333d      	adds	r3, #61	@ 0x3d
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	78fa      	ldrb	r2, [r7, #3]
 8004808:	f083 0301 	eor.w	r3, r3, #1
 800480c:	b2d8      	uxtb	r0, r3
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	333d      	adds	r3, #61	@ 0x3d
 800481c:	4602      	mov	r2, r0
 800481e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	799b      	ldrb	r3, [r3, #6]
 8004824:	2b01      	cmp	r3, #1
 8004826:	f040 8171 	bne.w	8004b0c <HCD_HC_OUT_IRQHandler+0x920>
 800482a:	78fa      	ldrb	r2, [r7, #3]
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	1a9b      	subs	r3, r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	440b      	add	r3, r1
 8004838:	3334      	adds	r3, #52	@ 0x34
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 8165 	beq.w	8004b0c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004842:	78fa      	ldrb	r2, [r7, #3]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	3334      	adds	r3, #52	@ 0x34
 8004852:	6819      	ldr	r1, [r3, #0]
 8004854:	78fa      	ldrb	r2, [r7, #3]
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	4613      	mov	r3, r2
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	1a9b      	subs	r3, r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4403      	add	r3, r0
 8004862:	3328      	adds	r3, #40	@ 0x28
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	440b      	add	r3, r1
 8004868:	1e59      	subs	r1, r3, #1
 800486a:	78fa      	ldrb	r2, [r7, #3]
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	1a9b      	subs	r3, r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4403      	add	r3, r0
 8004878:	3328      	adds	r3, #40	@ 0x28
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004880:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 813f 	beq.w	8004b0c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800488e:	78fa      	ldrb	r2, [r7, #3]
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	1a9b      	subs	r3, r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
 800489c:	333d      	adds	r3, #61	@ 0x3d
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	f083 0301 	eor.w	r3, r3, #1
 80048a6:	b2d8      	uxtb	r0, r3
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	333d      	adds	r3, #61	@ 0x3d
 80048b6:	4602      	mov	r2, r0
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	e127      	b.n	8004b0c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	334d      	adds	r3, #77	@ 0x4d
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d120      	bne.n	8004914 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	334d      	adds	r3, #77	@ 0x4d
 80048e2:	2202      	movs	r2, #2
 80048e4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80048e6:	78fa      	ldrb	r2, [r7, #3]
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	331b      	adds	r3, #27
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	f040 8107 	bne.w	8004b0c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048fe:	78fa      	ldrb	r2, [r7, #3]
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	1a9b      	subs	r3, r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	440b      	add	r3, r1
 800490c:	334c      	adds	r3, #76	@ 0x4c
 800490e:	2202      	movs	r2, #2
 8004910:	701a      	strb	r2, [r3, #0]
 8004912:	e0fb      	b.n	8004b0c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004914:	78fa      	ldrb	r2, [r7, #3]
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	4613      	mov	r3, r2
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	1a9b      	subs	r3, r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	334d      	adds	r3, #77	@ 0x4d
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b04      	cmp	r3, #4
 8004928:	d13a      	bne.n	80049a0 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800492a:	78fa      	ldrb	r2, [r7, #3]
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	334d      	adds	r3, #77	@ 0x4d
 800493a:	2202      	movs	r2, #2
 800493c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	334c      	adds	r3, #76	@ 0x4c
 800494e:	2202      	movs	r2, #2
 8004950:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004952:	78fa      	ldrb	r2, [r7, #3]
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	331b      	adds	r3, #27
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	f040 80d1 	bne.w	8004b0c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800496a:	78fa      	ldrb	r2, [r7, #3]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	1a9b      	subs	r3, r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	440b      	add	r3, r1
 8004978:	331b      	adds	r3, #27
 800497a:	2200      	movs	r2, #0
 800497c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4413      	add	r3, r2
 8004986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	78fa      	ldrb	r2, [r7, #3]
 800498e:	0151      	lsls	r1, r2, #5
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	440a      	add	r2, r1
 8004994:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800499c:	6053      	str	r3, [r2, #4]
 800499e:	e0b5      	b.n	8004b0c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80049a0:	78fa      	ldrb	r2, [r7, #3]
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	4613      	mov	r3, r2
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	1a9b      	subs	r3, r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	334d      	adds	r3, #77	@ 0x4d
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b05      	cmp	r3, #5
 80049b4:	d114      	bne.n	80049e0 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	334d      	adds	r3, #77	@ 0x4d
 80049c6:	2202      	movs	r2, #2
 80049c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80049ca:	78fa      	ldrb	r2, [r7, #3]
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	4613      	mov	r3, r2
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	1a9b      	subs	r3, r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	440b      	add	r3, r1
 80049d8:	334c      	adds	r3, #76	@ 0x4c
 80049da:	2202      	movs	r2, #2
 80049dc:	701a      	strb	r2, [r3, #0]
 80049de:	e095      	b.n	8004b0c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80049e0:	78fa      	ldrb	r2, [r7, #3]
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	1a9b      	subs	r3, r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	334d      	adds	r3, #77	@ 0x4d
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2b06      	cmp	r3, #6
 80049f4:	d114      	bne.n	8004a20 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	334d      	adds	r3, #77	@ 0x4d
 8004a06:	2202      	movs	r2, #2
 8004a08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	334c      	adds	r3, #76	@ 0x4c
 8004a1a:	2205      	movs	r2, #5
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e075      	b.n	8004b0c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a20:	78fa      	ldrb	r2, [r7, #3]
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	334d      	adds	r3, #77	@ 0x4d
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b07      	cmp	r3, #7
 8004a34:	d00a      	beq.n	8004a4c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004a36:	78fa      	ldrb	r2, [r7, #3]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	334d      	adds	r3, #77	@ 0x4d
 8004a46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a48:	2b09      	cmp	r3, #9
 8004a4a:	d170      	bne.n	8004b2e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a4c:	78fa      	ldrb	r2, [r7, #3]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	334d      	adds	r3, #77	@ 0x4d
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004a60:	78fa      	ldrb	r2, [r7, #3]
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	3344      	adds	r3, #68	@ 0x44
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	1c59      	adds	r1, r3, #1
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4403      	add	r3, r0
 8004a80:	3344      	adds	r3, #68	@ 0x44
 8004a82:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a84:	78fa      	ldrb	r2, [r7, #3]
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	1a9b      	subs	r3, r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	3344      	adds	r3, #68	@ 0x44
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d914      	bls.n	8004ac4 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004a9a:	78fa      	ldrb	r2, [r7, #3]
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	1a9b      	subs	r3, r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	3344      	adds	r3, #68	@ 0x44
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004aae:	78fa      	ldrb	r2, [r7, #3]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	334c      	adds	r3, #76	@ 0x4c
 8004abe:	2204      	movs	r2, #4
 8004ac0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ac2:	e022      	b.n	8004b0a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ac4:	78fa      	ldrb	r2, [r7, #3]
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	334c      	adds	r3, #76	@ 0x4c
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004aee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004af6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b04:	461a      	mov	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b0a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	334c      	adds	r3, #76	@ 0x4c
 8004b1c:	781a      	ldrb	r2, [r3, #0]
 8004b1e:	78fb      	ldrb	r3, [r7, #3]
 8004b20:	4619      	mov	r1, r3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f008 fa3a 	bl	800cf9c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b28:	e002      	b.n	8004b30 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004b2e:	bf00      	nop
  }
}
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b08a      	sub	sp, #40	@ 0x28
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b46:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	0c5b      	lsrs	r3, r3, #17
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	091b      	lsrs	r3, r3, #4
 8004b66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b6a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d004      	beq.n	8004b7c <HCD_RXQLVL_IRQHandler+0x46>
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b05      	cmp	r3, #5
 8004b76:	f000 80b6 	beq.w	8004ce6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004b7a:	e0b7      	b.n	8004cec <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 80b3 	beq.w	8004cea <HCD_RXQLVL_IRQHandler+0x1b4>
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	332c      	adds	r3, #44	@ 0x2c
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 80a7 	beq.w	8004cea <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	3338      	adds	r3, #56	@ 0x38
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	18d1      	adds	r1, r2, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4403      	add	r3, r0
 8004bc0:	3334      	adds	r3, #52	@ 0x34
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4299      	cmp	r1, r3
 8004bc6:	f200 8083 	bhi.w	8004cd0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	332c      	adds	r3, #44	@ 0x2c
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	b292      	uxth	r2, r2
 8004be4:	4619      	mov	r1, r3
 8004be6:	f002 fb2b 	bl	8007240 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	332c      	adds	r3, #44	@ 0x2c
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	18d1      	adds	r1, r2, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	4613      	mov	r3, r2
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	1a9b      	subs	r3, r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4403      	add	r3, r0
 8004c0e:	332c      	adds	r3, #44	@ 0x2c
 8004c10:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	4613      	mov	r3, r2
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	1a9b      	subs	r3, r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	3338      	adds	r3, #56	@ 0x38
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	18d1      	adds	r1, r2, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	1a9b      	subs	r3, r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4403      	add	r3, r0
 8004c36:	3338      	adds	r3, #56	@ 0x38
 8004c38:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	0cdb      	lsrs	r3, r3, #19
 8004c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c4e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	4613      	mov	r3, r2
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	1a9b      	subs	r3, r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	3328      	adds	r3, #40	@ 0x28
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d13f      	bne.n	8004cea <HCD_RXQLVL_IRQHandler+0x1b4>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d03c      	beq.n	8004cea <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c86:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c8e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	333c      	adds	r3, #60	@ 0x3c
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	f083 0301 	eor.w	r3, r3, #1
 8004cb8:	b2d8      	uxtb	r0, r3
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	1a9b      	subs	r3, r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	333c      	adds	r3, #60	@ 0x3c
 8004cca:	4602      	mov	r2, r0
 8004ccc:	701a      	strb	r2, [r3, #0]
      break;
 8004cce:	e00c      	b.n	8004cea <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	1a9b      	subs	r3, r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	334c      	adds	r3, #76	@ 0x4c
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	701a      	strb	r2, [r3, #0]
      break;
 8004ce4:	e001      	b.n	8004cea <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e000      	b.n	8004cec <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004cea:	bf00      	nop
  }
}
 8004cec:	bf00      	nop
 8004cee:	3728      	adds	r7, #40	@ 0x28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004d20:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d10b      	bne.n	8004d44 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d102      	bne.n	8004d3c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f008 f914 	bl	800cf64 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f043 0302 	orr.w	r3, r3, #2
 8004d42:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d132      	bne.n	8004db4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f043 0308 	orr.w	r3, r3, #8
 8004d54:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d126      	bne.n	8004dae <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	7a5b      	ldrb	r3, [r3, #9]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d113      	bne.n	8004d90 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004d6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d72:	d106      	bne.n	8004d82 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2102      	movs	r1, #2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f002 fbe4 	bl	8007548 <USB_InitFSLSPClkSel>
 8004d80:	e011      	b.n	8004da6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2101      	movs	r1, #1
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f002 fbdd 	bl	8007548 <USB_InitFSLSPClkSel>
 8004d8e:	e00a      	b.n	8004da6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	79db      	ldrb	r3, [r3, #7]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d106      	bne.n	8004da6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004da4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f008 f90a 	bl	800cfc0 <HAL_HCD_PortEnabled_Callback>
 8004dac:	e002      	b.n	8004db4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f008 f914 	bl	800cfdc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b20      	cmp	r3, #32
 8004dbc:	d103      	bne.n	8004dc6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f043 0320 	orr.w	r3, r3, #32
 8004dc4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004dcc:	461a      	mov	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	6013      	str	r3, [r2, #0]
}
 8004dd2:	bf00      	nop
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e0bf      	b.n	8004f6e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fb fce6 	bl	80007d4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004e1e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6999      	ldr	r1, [r3, #24]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e34:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6899      	ldr	r1, [r3, #8]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8004f78 <HAL_LTDC_Init+0x19c>)
 8004e50:	400b      	ands	r3, r1
 8004e52:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6899      	ldr	r1, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68d9      	ldr	r1, [r3, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f78 <HAL_LTDC_Init+0x19c>)
 8004e7e:	400b      	ands	r3, r1
 8004e80:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68d9      	ldr	r1, [r3, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1a      	ldr	r2, [r3, #32]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6919      	ldr	r1, [r3, #16]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4b33      	ldr	r3, [pc, #204]	@ (8004f78 <HAL_LTDC_Init+0x19c>)
 8004eac:	400b      	ands	r3, r1
 8004eae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb4:	041b      	lsls	r3, r3, #16
 8004eb6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6919      	ldr	r1, [r3, #16]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6959      	ldr	r1, [r3, #20]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4b27      	ldr	r3, [pc, #156]	@ (8004f78 <HAL_LTDC_Init+0x19c>)
 8004eda:	400b      	ands	r3, r1
 8004edc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee2:	041b      	lsls	r3, r3, #16
 8004ee4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6959      	ldr	r1, [r3, #20]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004f0c:	041b      	lsls	r3, r3, #16
 8004f0e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0206 	orr.w	r2, r2, #6
 8004f4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0201 	orr.w	r2, r2, #1
 8004f5a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	f000f800 	.word	0xf000f800

08004f7c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f92:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d023      	beq.n	8004fe6 <HAL_LTDC_IRQHandler+0x6a>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01e      	beq.n	8004fe6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0204 	bic.w	r2, r2, #4
 8004fb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004fc6:	f043 0201 	orr.w	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2204      	movs	r2, #4
 8004fd4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f86f 	bl	80050c4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d023      	beq.n	8005038 <HAL_LTDC_IRQHandler+0xbc>
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01e      	beq.n	8005038 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0202 	bic.w	r2, r2, #2
 8005008:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2202      	movs	r2, #2
 8005010:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005018:	f043 0202 	orr.w	r2, r3, #2
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2204      	movs	r2, #4
 8005026:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f846 	bl	80050c4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d01b      	beq.n	800507a <HAL_LTDC_IRQHandler+0xfe>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d016      	beq.n	800507a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0201 	bic.w	r2, r2, #1
 800505a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2201      	movs	r2, #1
 8005062:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f82f 	bl	80050d8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01b      	beq.n	80050bc <HAL_LTDC_IRQHandler+0x140>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d016      	beq.n	80050bc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0208 	bic.w	r2, r2, #8
 800509c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2208      	movs	r2, #8
 80050a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f818 	bl	80050ec <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80050bc:	bf00      	nop
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005100:	b5b0      	push	{r4, r5, r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_LTDC_ConfigLayer+0x1a>
 8005116:	2302      	movs	r3, #2
 8005118:	e02c      	b.n	8005174 <HAL_LTDC_ConfigLayer+0x74>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2202      	movs	r2, #2
 8005126:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2134      	movs	r1, #52	@ 0x34
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	4413      	add	r3, r2
 8005136:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4614      	mov	r4, r2
 800513e:	461d      	mov	r5, r3
 8005140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800514a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 f81f 	bl	8005198 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2201      	movs	r2, #1
 8005160:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bdb0      	pop	{r4, r5, r7, pc}

0800517c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800518a:	b2db      	uxtb	r3, r3
}
 800518c:	4618      	mov	r0, r3
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005198:	b480      	push	{r7}
 800519a:	b089      	sub	sp, #36	@ 0x24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	0c1b      	lsrs	r3, r3, #16
 80051b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b4:	4413      	add	r3, r2
 80051b6:	041b      	lsls	r3, r3, #16
 80051b8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	01db      	lsls	r3, r3, #7
 80051c4:	4413      	add	r3, r2
 80051c6:	3384      	adds	r3, #132	@ 0x84
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	6812      	ldr	r2, [r2, #0]
 80051ce:	4611      	mov	r1, r2
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	01d2      	lsls	r2, r2, #7
 80051d4:	440a      	add	r2, r1
 80051d6:	3284      	adds	r2, #132	@ 0x84
 80051d8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80051dc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	0c1b      	lsrs	r3, r3, #16
 80051ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051ee:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80051f0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4619      	mov	r1, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	01db      	lsls	r3, r3, #7
 80051fc:	440b      	add	r3, r1
 80051fe:	3384      	adds	r3, #132	@ 0x84
 8005200:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005206:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005216:	4413      	add	r3, r2
 8005218:	041b      	lsls	r3, r3, #16
 800521a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	461a      	mov	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	01db      	lsls	r3, r3, #7
 8005226:	4413      	add	r3, r2
 8005228:	3384      	adds	r3, #132	@ 0x84
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	4611      	mov	r1, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	01d2      	lsls	r2, r2, #7
 8005236:	440a      	add	r2, r1
 8005238:	3284      	adds	r2, #132	@ 0x84
 800523a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800523e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800524e:	4413      	add	r3, r2
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4619      	mov	r1, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	01db      	lsls	r3, r3, #7
 800525c:	440b      	add	r3, r1
 800525e:	3384      	adds	r3, #132	@ 0x84
 8005260:	4619      	mov	r1, r3
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	4313      	orrs	r3, r2
 8005266:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	461a      	mov	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	01db      	lsls	r3, r3, #7
 8005272:	4413      	add	r3, r2
 8005274:	3384      	adds	r3, #132	@ 0x84
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	6812      	ldr	r2, [r2, #0]
 800527c:	4611      	mov	r1, r2
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	01d2      	lsls	r2, r2, #7
 8005282:	440a      	add	r2, r1
 8005284:	3284      	adds	r2, #132	@ 0x84
 8005286:	f023 0307 	bic.w	r3, r3, #7
 800528a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	01db      	lsls	r3, r3, #7
 8005296:	4413      	add	r3, r2
 8005298:	3384      	adds	r3, #132	@ 0x84
 800529a:	461a      	mov	r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80052b2:	041b      	lsls	r3, r3, #16
 80052b4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	061b      	lsls	r3, r3, #24
 80052bc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	01db      	lsls	r3, r3, #7
 80052c8:	4413      	add	r3, r2
 80052ca:	3384      	adds	r3, #132	@ 0x84
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	01db      	lsls	r3, r3, #7
 80052d8:	4413      	add	r3, r2
 80052da:	3384      	adds	r3, #132	@ 0x84
 80052dc:	461a      	mov	r2, r3
 80052de:	2300      	movs	r3, #0
 80052e0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80052e8:	461a      	mov	r2, r3
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	431a      	orrs	r2, r3
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	431a      	orrs	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4619      	mov	r1, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	01db      	lsls	r3, r3, #7
 80052fc:	440b      	add	r3, r1
 80052fe:	3384      	adds	r3, #132	@ 0x84
 8005300:	4619      	mov	r1, r3
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	01db      	lsls	r3, r3, #7
 8005312:	4413      	add	r3, r2
 8005314:	3384      	adds	r3, #132	@ 0x84
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	4611      	mov	r1, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	01d2      	lsls	r2, r2, #7
 8005322:	440a      	add	r2, r1
 8005324:	3284      	adds	r2, #132	@ 0x84
 8005326:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800532a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	01db      	lsls	r3, r3, #7
 8005336:	4413      	add	r3, r2
 8005338:	3384      	adds	r3, #132	@ 0x84
 800533a:	461a      	mov	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	01db      	lsls	r3, r3, #7
 800534c:	4413      	add	r3, r2
 800534e:	3384      	adds	r3, #132	@ 0x84
 8005350:	69da      	ldr	r2, [r3, #28]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4619      	mov	r1, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	01db      	lsls	r3, r3, #7
 800535c:	440b      	add	r3, r1
 800535e:	3384      	adds	r3, #132	@ 0x84
 8005360:	4619      	mov	r1, r3
 8005362:	4b58      	ldr	r3, [pc, #352]	@ (80054c4 <LTDC_SetConfig+0x32c>)
 8005364:	4013      	ands	r3, r2
 8005366:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	69da      	ldr	r2, [r3, #28]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	68f9      	ldr	r1, [r7, #12]
 8005372:	6809      	ldr	r1, [r1, #0]
 8005374:	4608      	mov	r0, r1
 8005376:	6879      	ldr	r1, [r7, #4]
 8005378:	01c9      	lsls	r1, r1, #7
 800537a:	4401      	add	r1, r0
 800537c:	3184      	adds	r1, #132	@ 0x84
 800537e:	4313      	orrs	r3, r2
 8005380:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	01db      	lsls	r3, r3, #7
 800538c:	4413      	add	r3, r2
 800538e:	3384      	adds	r3, #132	@ 0x84
 8005390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	01db      	lsls	r3, r3, #7
 800539c:	4413      	add	r3, r2
 800539e:	3384      	adds	r3, #132	@ 0x84
 80053a0:	461a      	mov	r2, r3
 80053a2:	2300      	movs	r3, #0
 80053a4:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	01db      	lsls	r3, r3, #7
 80053b0:	4413      	add	r3, r2
 80053b2:	3384      	adds	r3, #132	@ 0x84
 80053b4:	461a      	mov	r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d102      	bne.n	80053ca <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80053c4:	2304      	movs	r3, #4
 80053c6:	61fb      	str	r3, [r7, #28]
 80053c8:	e01b      	b.n	8005402 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d102      	bne.n	80053d8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80053d2:	2303      	movs	r3, #3
 80053d4:	61fb      	str	r3, [r7, #28]
 80053d6:	e014      	b.n	8005402 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d00b      	beq.n	80053f8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d007      	beq.n	80053f8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d003      	beq.n	80053f8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80053f4:	2b07      	cmp	r3, #7
 80053f6:	d102      	bne.n	80053fe <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80053f8:	2302      	movs	r3, #2
 80053fa:	61fb      	str	r3, [r7, #28]
 80053fc:	e001      	b.n	8005402 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80053fe:	2301      	movs	r3, #1
 8005400:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	01db      	lsls	r3, r3, #7
 800540c:	4413      	add	r3, r2
 800540e:	3384      	adds	r3, #132	@ 0x84
 8005410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	6812      	ldr	r2, [r2, #0]
 8005416:	4611      	mov	r1, r2
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	01d2      	lsls	r2, r2, #7
 800541c:	440a      	add	r2, r1
 800541e:	3284      	adds	r2, #132	@ 0x84
 8005420:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005424:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	fb02 f303 	mul.w	r3, r2, r3
 8005430:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	6859      	ldr	r1, [r3, #4]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	1acb      	subs	r3, r1, r3
 800543c:	69f9      	ldr	r1, [r7, #28]
 800543e:	fb01 f303 	mul.w	r3, r1, r3
 8005442:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005444:	68f9      	ldr	r1, [r7, #12]
 8005446:	6809      	ldr	r1, [r1, #0]
 8005448:	4608      	mov	r0, r1
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	01c9      	lsls	r1, r1, #7
 800544e:	4401      	add	r1, r0
 8005450:	3184      	adds	r1, #132	@ 0x84
 8005452:	4313      	orrs	r3, r2
 8005454:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	01db      	lsls	r3, r3, #7
 8005460:	4413      	add	r3, r2
 8005462:	3384      	adds	r3, #132	@ 0x84
 8005464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4619      	mov	r1, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	01db      	lsls	r3, r3, #7
 8005470:	440b      	add	r3, r1
 8005472:	3384      	adds	r3, #132	@ 0x84
 8005474:	4619      	mov	r1, r3
 8005476:	4b14      	ldr	r3, [pc, #80]	@ (80054c8 <LTDC_SetConfig+0x330>)
 8005478:	4013      	ands	r3, r2
 800547a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	01db      	lsls	r3, r3, #7
 8005486:	4413      	add	r3, r2
 8005488:	3384      	adds	r3, #132	@ 0x84
 800548a:	461a      	mov	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005490:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	01db      	lsls	r3, r3, #7
 800549c:	4413      	add	r3, r2
 800549e:	3384      	adds	r3, #132	@ 0x84
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	4611      	mov	r1, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	01d2      	lsls	r2, r2, #7
 80054ac:	440a      	add	r2, r1
 80054ae:	3284      	adds	r2, #132	@ 0x84
 80054b0:	f043 0301 	orr.w	r3, r3, #1
 80054b4:	6013      	str	r3, [r2, #0]
}
 80054b6:	bf00      	nop
 80054b8:	3724      	adds	r7, #36	@ 0x24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	fffff8f8 	.word	0xfffff8f8
 80054c8:	fffff800 	.word	0xfffff800

080054cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054d0:	4b05      	ldr	r3, [pc, #20]	@ (80054e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a04      	ldr	r2, [pc, #16]	@ (80054e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054da:	6013      	str	r3, [r2, #0]
}
 80054dc:	bf00      	nop
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40007000 	.word	0x40007000

080054ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80054f2:	2300      	movs	r3, #0
 80054f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80054f6:	4b23      	ldr	r3, [pc, #140]	@ (8005584 <HAL_PWREx_EnableOverDrive+0x98>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	4a22      	ldr	r2, [pc, #136]	@ (8005584 <HAL_PWREx_EnableOverDrive+0x98>)
 80054fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005500:	6413      	str	r3, [r2, #64]	@ 0x40
 8005502:	4b20      	ldr	r3, [pc, #128]	@ (8005584 <HAL_PWREx_EnableOverDrive+0x98>)
 8005504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800550a:	603b      	str	r3, [r7, #0]
 800550c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800550e:	4b1e      	ldr	r3, [pc, #120]	@ (8005588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1d      	ldr	r2, [pc, #116]	@ (8005588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005518:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800551a:	f7fc fb13 	bl	8001b44 <HAL_GetTick>
 800551e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005520:	e009      	b.n	8005536 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005522:	f7fc fb0f 	bl	8001b44 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005530:	d901      	bls.n	8005536 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e022      	b.n	800557c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005536:	4b14      	ldr	r3, [pc, #80]	@ (8005588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800553e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005542:	d1ee      	bne.n	8005522 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005544:	4b10      	ldr	r3, [pc, #64]	@ (8005588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a0f      	ldr	r2, [pc, #60]	@ (8005588 <HAL_PWREx_EnableOverDrive+0x9c>)
 800554a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800554e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005550:	f7fc faf8 	bl	8001b44 <HAL_GetTick>
 8005554:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005556:	e009      	b.n	800556c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005558:	f7fc faf4 	bl	8001b44 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005566:	d901      	bls.n	800556c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e007      	b.n	800557c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800556c:	4b06      	ldr	r3, [pc, #24]	@ (8005588 <HAL_PWREx_EnableOverDrive+0x9c>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005574:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005578:	d1ee      	bne.n	8005558 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40023800 	.word	0x40023800
 8005588:	40007000 	.word	0x40007000

0800558c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005594:	2300      	movs	r3, #0
 8005596:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e291      	b.n	8005ac6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 8087 	beq.w	80056be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055b0:	4b96      	ldr	r3, [pc, #600]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 030c 	and.w	r3, r3, #12
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d00c      	beq.n	80055d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055bc:	4b93      	ldr	r3, [pc, #588]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f003 030c 	and.w	r3, r3, #12
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d112      	bne.n	80055ee <HAL_RCC_OscConfig+0x62>
 80055c8:	4b90      	ldr	r3, [pc, #576]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055d4:	d10b      	bne.n	80055ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d6:	4b8d      	ldr	r3, [pc, #564]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d06c      	beq.n	80056bc <HAL_RCC_OscConfig+0x130>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d168      	bne.n	80056bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e26b      	b.n	8005ac6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055f6:	d106      	bne.n	8005606 <HAL_RCC_OscConfig+0x7a>
 80055f8:	4b84      	ldr	r3, [pc, #528]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a83      	ldr	r2, [pc, #524]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 80055fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	e02e      	b.n	8005664 <HAL_RCC_OscConfig+0xd8>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10c      	bne.n	8005628 <HAL_RCC_OscConfig+0x9c>
 800560e:	4b7f      	ldr	r3, [pc, #508]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a7e      	ldr	r2, [pc, #504]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 8005614:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	4b7c      	ldr	r3, [pc, #496]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a7b      	ldr	r2, [pc, #492]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 8005620:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	e01d      	b.n	8005664 <HAL_RCC_OscConfig+0xd8>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005630:	d10c      	bne.n	800564c <HAL_RCC_OscConfig+0xc0>
 8005632:	4b76      	ldr	r3, [pc, #472]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a75      	ldr	r2, [pc, #468]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 8005638:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	4b73      	ldr	r3, [pc, #460]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a72      	ldr	r2, [pc, #456]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 8005644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	e00b      	b.n	8005664 <HAL_RCC_OscConfig+0xd8>
 800564c:	4b6f      	ldr	r3, [pc, #444]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a6e      	ldr	r2, [pc, #440]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 8005652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	4b6c      	ldr	r3, [pc, #432]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a6b      	ldr	r2, [pc, #428]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 800565e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d013      	beq.n	8005694 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566c:	f7fc fa6a 	bl	8001b44 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005674:	f7fc fa66 	bl	8001b44 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b64      	cmp	r3, #100	@ 0x64
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e21f      	b.n	8005ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005686:	4b61      	ldr	r3, [pc, #388]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f0      	beq.n	8005674 <HAL_RCC_OscConfig+0xe8>
 8005692:	e014      	b.n	80056be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005694:	f7fc fa56 	bl	8001b44 <HAL_GetTick>
 8005698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800569a:	e008      	b.n	80056ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800569c:	f7fc fa52 	bl	8001b44 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b64      	cmp	r3, #100	@ 0x64
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e20b      	b.n	8005ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ae:	4b57      	ldr	r3, [pc, #348]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1f0      	bne.n	800569c <HAL_RCC_OscConfig+0x110>
 80056ba:	e000      	b.n	80056be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d069      	beq.n	800579e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056ca:	4b50      	ldr	r3, [pc, #320]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 030c 	and.w	r3, r3, #12
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00b      	beq.n	80056ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056d6:	4b4d      	ldr	r3, [pc, #308]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 030c 	and.w	r3, r3, #12
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d11c      	bne.n	800571c <HAL_RCC_OscConfig+0x190>
 80056e2:	4b4a      	ldr	r3, [pc, #296]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d116      	bne.n	800571c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ee:	4b47      	ldr	r3, [pc, #284]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <HAL_RCC_OscConfig+0x17a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d001      	beq.n	8005706 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e1df      	b.n	8005ac6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005706:	4b41      	ldr	r3, [pc, #260]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	493d      	ldr	r1, [pc, #244]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 8005716:	4313      	orrs	r3, r2
 8005718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800571a:	e040      	b.n	800579e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d023      	beq.n	800576c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005724:	4b39      	ldr	r3, [pc, #228]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a38      	ldr	r2, [pc, #224]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 800572a:	f043 0301 	orr.w	r3, r3, #1
 800572e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005730:	f7fc fa08 	bl	8001b44 <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005738:	f7fc fa04 	bl	8001b44 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e1bd      	b.n	8005ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800574a:	4b30      	ldr	r3, [pc, #192]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0f0      	beq.n	8005738 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005756:	4b2d      	ldr	r3, [pc, #180]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	4929      	ldr	r1, [pc, #164]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 8005766:	4313      	orrs	r3, r2
 8005768:	600b      	str	r3, [r1, #0]
 800576a:	e018      	b.n	800579e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800576c:	4b27      	ldr	r3, [pc, #156]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a26      	ldr	r2, [pc, #152]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 8005772:	f023 0301 	bic.w	r3, r3, #1
 8005776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fc f9e4 	bl	8001b44 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005780:	f7fc f9e0 	bl	8001b44 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e199      	b.n	8005ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005792:	4b1e      	ldr	r3, [pc, #120]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1f0      	bne.n	8005780 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0308 	and.w	r3, r3, #8
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d038      	beq.n	800581c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d019      	beq.n	80057e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057b2:	4b16      	ldr	r3, [pc, #88]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 80057b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b6:	4a15      	ldr	r2, [pc, #84]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 80057b8:	f043 0301 	orr.w	r3, r3, #1
 80057bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057be:	f7fc f9c1 	bl	8001b44 <HAL_GetTick>
 80057c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057c4:	e008      	b.n	80057d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057c6:	f7fc f9bd 	bl	8001b44 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e176      	b.n	8005ac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057d8:	4b0c      	ldr	r3, [pc, #48]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 80057da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0f0      	beq.n	80057c6 <HAL_RCC_OscConfig+0x23a>
 80057e4:	e01a      	b.n	800581c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057e6:	4b09      	ldr	r3, [pc, #36]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 80057e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ea:	4a08      	ldr	r2, [pc, #32]	@ (800580c <HAL_RCC_OscConfig+0x280>)
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f2:	f7fc f9a7 	bl	8001b44 <HAL_GetTick>
 80057f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057f8:	e00a      	b.n	8005810 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057fa:	f7fc f9a3 	bl	8001b44 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d903      	bls.n	8005810 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e15c      	b.n	8005ac6 <HAL_RCC_OscConfig+0x53a>
 800580c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005810:	4b91      	ldr	r3, [pc, #580]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 8005812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1ee      	bne.n	80057fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80a4 	beq.w	8005972 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800582a:	4b8b      	ldr	r3, [pc, #556]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 800582c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10d      	bne.n	8005852 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005836:	4b88      	ldr	r3, [pc, #544]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 8005838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583a:	4a87      	ldr	r2, [pc, #540]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 800583c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005840:	6413      	str	r3, [r2, #64]	@ 0x40
 8005842:	4b85      	ldr	r3, [pc, #532]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 8005844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800584a:	60bb      	str	r3, [r7, #8]
 800584c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800584e:	2301      	movs	r3, #1
 8005850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005852:	4b82      	ldr	r3, [pc, #520]	@ (8005a5c <HAL_RCC_OscConfig+0x4d0>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585a:	2b00      	cmp	r3, #0
 800585c:	d118      	bne.n	8005890 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800585e:	4b7f      	ldr	r3, [pc, #508]	@ (8005a5c <HAL_RCC_OscConfig+0x4d0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a7e      	ldr	r2, [pc, #504]	@ (8005a5c <HAL_RCC_OscConfig+0x4d0>)
 8005864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800586a:	f7fc f96b 	bl	8001b44 <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005872:	f7fc f967 	bl	8001b44 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b64      	cmp	r3, #100	@ 0x64
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e120      	b.n	8005ac6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005884:	4b75      	ldr	r3, [pc, #468]	@ (8005a5c <HAL_RCC_OscConfig+0x4d0>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0f0      	beq.n	8005872 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d106      	bne.n	80058a6 <HAL_RCC_OscConfig+0x31a>
 8005898:	4b6f      	ldr	r3, [pc, #444]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 800589a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589c:	4a6e      	ldr	r2, [pc, #440]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80058a4:	e02d      	b.n	8005902 <HAL_RCC_OscConfig+0x376>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10c      	bne.n	80058c8 <HAL_RCC_OscConfig+0x33c>
 80058ae:	4b6a      	ldr	r3, [pc, #424]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 80058b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b2:	4a69      	ldr	r2, [pc, #420]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 80058b4:	f023 0301 	bic.w	r3, r3, #1
 80058b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80058ba:	4b67      	ldr	r3, [pc, #412]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 80058bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058be:	4a66      	ldr	r2, [pc, #408]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 80058c0:	f023 0304 	bic.w	r3, r3, #4
 80058c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80058c6:	e01c      	b.n	8005902 <HAL_RCC_OscConfig+0x376>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2b05      	cmp	r3, #5
 80058ce:	d10c      	bne.n	80058ea <HAL_RCC_OscConfig+0x35e>
 80058d0:	4b61      	ldr	r3, [pc, #388]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d4:	4a60      	ldr	r2, [pc, #384]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 80058d6:	f043 0304 	orr.w	r3, r3, #4
 80058da:	6713      	str	r3, [r2, #112]	@ 0x70
 80058dc:	4b5e      	ldr	r3, [pc, #376]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 80058de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e0:	4a5d      	ldr	r2, [pc, #372]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80058e8:	e00b      	b.n	8005902 <HAL_RCC_OscConfig+0x376>
 80058ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ee:	4a5a      	ldr	r2, [pc, #360]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 80058f0:	f023 0301 	bic.w	r3, r3, #1
 80058f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80058f6:	4b58      	ldr	r3, [pc, #352]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 80058f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fa:	4a57      	ldr	r2, [pc, #348]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 80058fc:	f023 0304 	bic.w	r3, r3, #4
 8005900:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d015      	beq.n	8005936 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590a:	f7fc f91b 	bl	8001b44 <HAL_GetTick>
 800590e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005910:	e00a      	b.n	8005928 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005912:	f7fc f917 	bl	8001b44 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005920:	4293      	cmp	r3, r2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e0ce      	b.n	8005ac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005928:	4b4b      	ldr	r3, [pc, #300]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 800592a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0ee      	beq.n	8005912 <HAL_RCC_OscConfig+0x386>
 8005934:	e014      	b.n	8005960 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005936:	f7fc f905 	bl	8001b44 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800593c:	e00a      	b.n	8005954 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800593e:	f7fc f901 	bl	8001b44 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800594c:	4293      	cmp	r3, r2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e0b8      	b.n	8005ac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005954:	4b40      	ldr	r3, [pc, #256]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 8005956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1ee      	bne.n	800593e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005960:	7dfb      	ldrb	r3, [r7, #23]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d105      	bne.n	8005972 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005966:	4b3c      	ldr	r3, [pc, #240]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	4a3b      	ldr	r2, [pc, #236]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 800596c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005970:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 80a4 	beq.w	8005ac4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800597c:	4b36      	ldr	r3, [pc, #216]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 030c 	and.w	r3, r3, #12
 8005984:	2b08      	cmp	r3, #8
 8005986:	d06b      	beq.n	8005a60 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d149      	bne.n	8005a24 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005990:	4b31      	ldr	r3, [pc, #196]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a30      	ldr	r2, [pc, #192]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 8005996:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800599a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599c:	f7fc f8d2 	bl	8001b44 <HAL_GetTick>
 80059a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a4:	f7fc f8ce 	bl	8001b44 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e087      	b.n	8005ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059b6:	4b28      	ldr	r3, [pc, #160]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1f0      	bne.n	80059a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69da      	ldr	r2, [r3, #28]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d0:	019b      	lsls	r3, r3, #6
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d8:	085b      	lsrs	r3, r3, #1
 80059da:	3b01      	subs	r3, #1
 80059dc:	041b      	lsls	r3, r3, #16
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e4:	061b      	lsls	r3, r3, #24
 80059e6:	4313      	orrs	r3, r2
 80059e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 80059ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059f0:	4b19      	ldr	r3, [pc, #100]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a18      	ldr	r2, [pc, #96]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 80059f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fc:	f7fc f8a2 	bl	8001b44 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a04:	f7fc f89e 	bl	8001b44 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e057      	b.n	8005ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a16:	4b10      	ldr	r3, [pc, #64]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0f0      	beq.n	8005a04 <HAL_RCC_OscConfig+0x478>
 8005a22:	e04f      	b.n	8005ac4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a24:	4b0c      	ldr	r3, [pc, #48]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a0b      	ldr	r2, [pc, #44]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 8005a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a30:	f7fc f888 	bl	8001b44 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a38:	f7fc f884 	bl	8001b44 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e03d      	b.n	8005ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a4a:	4b03      	ldr	r3, [pc, #12]	@ (8005a58 <HAL_RCC_OscConfig+0x4cc>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f0      	bne.n	8005a38 <HAL_RCC_OscConfig+0x4ac>
 8005a56:	e035      	b.n	8005ac4 <HAL_RCC_OscConfig+0x538>
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005a60:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad0 <HAL_RCC_OscConfig+0x544>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d028      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d121      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d11a      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a90:	4013      	ands	r3, r2
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d111      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa6:	085b      	lsrs	r3, r3, #1
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d107      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	40023800 	.word	0x40023800

08005ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e0d0      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005aec:	4b6a      	ldr	r3, [pc, #424]	@ (8005c98 <HAL_RCC_ClockConfig+0x1c4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d910      	bls.n	8005b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afa:	4b67      	ldr	r3, [pc, #412]	@ (8005c98 <HAL_RCC_ClockConfig+0x1c4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f023 020f 	bic.w	r2, r3, #15
 8005b02:	4965      	ldr	r1, [pc, #404]	@ (8005c98 <HAL_RCC_ClockConfig+0x1c4>)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0a:	4b63      	ldr	r3, [pc, #396]	@ (8005c98 <HAL_RCC_ClockConfig+0x1c4>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0b8      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d020      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b34:	4b59      	ldr	r3, [pc, #356]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	4a58      	ldr	r2, [pc, #352]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d005      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b4c:	4b53      	ldr	r3, [pc, #332]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	4a52      	ldr	r2, [pc, #328]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b58:	4b50      	ldr	r3, [pc, #320]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	494d      	ldr	r1, [pc, #308]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d040      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d107      	bne.n	8005b8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b7e:	4b47      	ldr	r3, [pc, #284]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d115      	bne.n	8005bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e07f      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d107      	bne.n	8005ba6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b96:	4b41      	ldr	r3, [pc, #260]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e073      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e06b      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bb6:	4b39      	ldr	r3, [pc, #228]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f023 0203 	bic.w	r2, r3, #3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	4936      	ldr	r1, [pc, #216]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bc8:	f7fb ffbc 	bl	8001b44 <HAL_GetTick>
 8005bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bce:	e00a      	b.n	8005be6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bd0:	f7fb ffb8 	bl	8001b44 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e053      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be6:	4b2d      	ldr	r3, [pc, #180]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 020c 	and.w	r2, r3, #12
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d1eb      	bne.n	8005bd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bf8:	4b27      	ldr	r3, [pc, #156]	@ (8005c98 <HAL_RCC_ClockConfig+0x1c4>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d210      	bcs.n	8005c28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c06:	4b24      	ldr	r3, [pc, #144]	@ (8005c98 <HAL_RCC_ClockConfig+0x1c4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f023 020f 	bic.w	r2, r3, #15
 8005c0e:	4922      	ldr	r1, [pc, #136]	@ (8005c98 <HAL_RCC_ClockConfig+0x1c4>)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c16:	4b20      	ldr	r3, [pc, #128]	@ (8005c98 <HAL_RCC_ClockConfig+0x1c4>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d001      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e032      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d008      	beq.n	8005c46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c34:	4b19      	ldr	r3, [pc, #100]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4916      	ldr	r1, [pc, #88]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d009      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c52:	4b12      	ldr	r3, [pc, #72]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	490e      	ldr	r1, [pc, #56]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c66:	f000 f821 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c9c <HAL_RCC_ClockConfig+0x1c8>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	091b      	lsrs	r3, r3, #4
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	490a      	ldr	r1, [pc, #40]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1cc>)
 8005c78:	5ccb      	ldrb	r3, [r1, r3]
 8005c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c7e:	4a09      	ldr	r2, [pc, #36]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1d0>)
 8005c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c82:	4b09      	ldr	r3, [pc, #36]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1d4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fa ff74 	bl	8000b74 <HAL_InitTick>

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	40023c00 	.word	0x40023c00
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	0800d72c 	.word	0x0800d72c
 8005ca4:	20000000 	.word	0x20000000
 8005ca8:	20000010 	.word	0x20000010

08005cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cb0:	b090      	sub	sp, #64	@ 0x40
 8005cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cb8:	2300      	movs	r3, #0
 8005cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cc4:	4b59      	ldr	r3, [pc, #356]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f003 030c 	and.w	r3, r3, #12
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d00d      	beq.n	8005cec <HAL_RCC_GetSysClockFreq+0x40>
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	f200 80a1 	bhi.w	8005e18 <HAL_RCC_GetSysClockFreq+0x16c>
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d003      	beq.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005cde:	e09b      	b.n	8005e18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ce0:	4b53      	ldr	r3, [pc, #332]	@ (8005e30 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005ce4:	e09b      	b.n	8005e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ce6:	4b53      	ldr	r3, [pc, #332]	@ (8005e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005cea:	e098      	b.n	8005e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cec:	4b4f      	ldr	r3, [pc, #316]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cf4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005cf6:	4b4d      	ldr	r3, [pc, #308]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d028      	beq.n	8005d54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d02:	4b4a      	ldr	r3, [pc, #296]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	099b      	lsrs	r3, r3, #6
 8005d08:	2200      	movs	r2, #0
 8005d0a:	623b      	str	r3, [r7, #32]
 8005d0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005d14:	2100      	movs	r1, #0
 8005d16:	4b47      	ldr	r3, [pc, #284]	@ (8005e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d18:	fb03 f201 	mul.w	r2, r3, r1
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	fb00 f303 	mul.w	r3, r0, r3
 8005d22:	4413      	add	r3, r2
 8005d24:	4a43      	ldr	r2, [pc, #268]	@ (8005e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d26:	fba0 1202 	umull	r1, r2, r0, r2
 8005d2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d2c:	460a      	mov	r2, r1
 8005d2e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005d30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d32:	4413      	add	r3, r2
 8005d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d38:	2200      	movs	r2, #0
 8005d3a:	61bb      	str	r3, [r7, #24]
 8005d3c:	61fa      	str	r2, [r7, #28]
 8005d3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005d46:	f7fa fa63 	bl	8000210 <__aeabi_uldivmod>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	4613      	mov	r3, r2
 8005d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d52:	e053      	b.n	8005dfc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d54:	4b35      	ldr	r3, [pc, #212]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	099b      	lsrs	r3, r3, #6
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	617a      	str	r2, [r7, #20]
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005d66:	f04f 0b00 	mov.w	fp, #0
 8005d6a:	4652      	mov	r2, sl
 8005d6c:	465b      	mov	r3, fp
 8005d6e:	f04f 0000 	mov.w	r0, #0
 8005d72:	f04f 0100 	mov.w	r1, #0
 8005d76:	0159      	lsls	r1, r3, #5
 8005d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d7c:	0150      	lsls	r0, r2, #5
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	ebb2 080a 	subs.w	r8, r2, sl
 8005d86:	eb63 090b 	sbc.w	r9, r3, fp
 8005d8a:	f04f 0200 	mov.w	r2, #0
 8005d8e:	f04f 0300 	mov.w	r3, #0
 8005d92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005d96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005d9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005d9e:	ebb2 0408 	subs.w	r4, r2, r8
 8005da2:	eb63 0509 	sbc.w	r5, r3, r9
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	00eb      	lsls	r3, r5, #3
 8005db0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005db4:	00e2      	lsls	r2, r4, #3
 8005db6:	4614      	mov	r4, r2
 8005db8:	461d      	mov	r5, r3
 8005dba:	eb14 030a 	adds.w	r3, r4, sl
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	eb45 030b 	adc.w	r3, r5, fp
 8005dc4:	607b      	str	r3, [r7, #4]
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	f04f 0300 	mov.w	r3, #0
 8005dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	028b      	lsls	r3, r1, #10
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ddc:	4621      	mov	r1, r4
 8005dde:	028a      	lsls	r2, r1, #10
 8005de0:	4610      	mov	r0, r2
 8005de2:	4619      	mov	r1, r3
 8005de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005de6:	2200      	movs	r2, #0
 8005de8:	60bb      	str	r3, [r7, #8]
 8005dea:	60fa      	str	r2, [r7, #12]
 8005dec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005df0:	f7fa fa0e 	bl	8000210 <__aeabi_uldivmod>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	4613      	mov	r3, r2
 8005dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	0c1b      	lsrs	r3, r3, #16
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	3301      	adds	r3, #1
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005e0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005e16:	e002      	b.n	8005e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e18:	4b05      	ldr	r3, [pc, #20]	@ (8005e30 <HAL_RCC_GetSysClockFreq+0x184>)
 8005e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3740      	adds	r7, #64	@ 0x40
 8005e24:	46bd      	mov	sp, r7
 8005e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	00f42400 	.word	0x00f42400
 8005e34:	017d7840 	.word	0x017d7840

08005e38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e3c:	4b03      	ldr	r3, [pc, #12]	@ (8005e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	20000000 	.word	0x20000000

08005e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e54:	f7ff fff0 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	4b05      	ldr	r3, [pc, #20]	@ (8005e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	0a9b      	lsrs	r3, r3, #10
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	4903      	ldr	r1, [pc, #12]	@ (8005e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e66:	5ccb      	ldrb	r3, [r1, r3]
 8005e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	40023800 	.word	0x40023800
 8005e74:	0800d73c 	.word	0x0800d73c

08005e78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	220f      	movs	r2, #15
 8005e86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e88:	4b12      	ldr	r3, [pc, #72]	@ (8005ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 0203 	and.w	r2, r3, #3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e94:	4b0f      	ldr	r3, [pc, #60]	@ (8005ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005eac:	4b09      	ldr	r3, [pc, #36]	@ (8005ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	08db      	lsrs	r3, r3, #3
 8005eb2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005eba:	4b07      	ldr	r3, [pc, #28]	@ (8005ed8 <HAL_RCC_GetClockConfig+0x60>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 020f 	and.w	r2, r3, #15
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	601a      	str	r2, [r3, #0]
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40023800 	.word	0x40023800
 8005ed8:	40023c00 	.word	0x40023c00

08005edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d012      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f04:	4b69      	ldr	r3, [pc, #420]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	4a68      	ldr	r2, [pc, #416]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f0a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005f0e:	6093      	str	r3, [r2, #8]
 8005f10:	4b66      	ldr	r3, [pc, #408]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f18:	4964      	ldr	r1, [pc, #400]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005f26:	2301      	movs	r3, #1
 8005f28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d017      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f36:	4b5d      	ldr	r3, [pc, #372]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f3c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f44:	4959      	ldr	r1, [pc, #356]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f54:	d101      	bne.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005f56:	2301      	movs	r3, #1
 8005f58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005f62:	2301      	movs	r3, #1
 8005f64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d017      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f72:	4b4e      	ldr	r3, [pc, #312]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f80:	494a      	ldr	r1, [pc, #296]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f90:	d101      	bne.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005f92:	2301      	movs	r3, #1
 8005f94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 808b 	beq.w	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fc0:	4b3a      	ldr	r3, [pc, #232]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc4:	4a39      	ldr	r2, [pc, #228]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fca:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fcc:	4b37      	ldr	r3, [pc, #220]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fd4:	60bb      	str	r3, [r7, #8]
 8005fd6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005fd8:	4b35      	ldr	r3, [pc, #212]	@ (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a34      	ldr	r2, [pc, #208]	@ (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fe4:	f7fb fdae 	bl	8001b44 <HAL_GetTick>
 8005fe8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005fea:	e008      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fec:	f7fb fdaa 	bl	8001b44 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b64      	cmp	r3, #100	@ 0x64
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e357      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006006:	2b00      	cmp	r3, #0
 8006008:	d0f0      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800600a:	4b28      	ldr	r3, [pc, #160]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800600c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800600e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006012:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d035      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	429a      	cmp	r2, r3
 8006026:	d02e      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006028:	4b20      	ldr	r3, [pc, #128]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800602c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006030:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006032:	4b1e      	ldr	r3, [pc, #120]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006036:	4a1d      	ldr	r2, [pc, #116]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800603c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800603e:	4b1b      	ldr	r3, [pc, #108]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006042:	4a1a      	ldr	r2, [pc, #104]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006048:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800604a:	4a18      	ldr	r2, [pc, #96]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006050:	4b16      	ldr	r3, [pc, #88]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b01      	cmp	r3, #1
 800605a:	d114      	bne.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605c:	f7fb fd72 	bl	8001b44 <HAL_GetTick>
 8006060:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006062:	e00a      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006064:	f7fb fd6e 	bl	8001b44 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006072:	4293      	cmp	r3, r2
 8006074:	d901      	bls.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e319      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800607a:	4b0c      	ldr	r3, [pc, #48]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800607c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0ee      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800608a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800608e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006092:	d111      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006094:	4b05      	ldr	r3, [pc, #20]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80060a0:	4b04      	ldr	r3, [pc, #16]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060a2:	400b      	ands	r3, r1
 80060a4:	4901      	ldr	r1, [pc, #4]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	608b      	str	r3, [r1, #8]
 80060aa:	e00b      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80060ac:	40023800 	.word	0x40023800
 80060b0:	40007000 	.word	0x40007000
 80060b4:	0ffffcff 	.word	0x0ffffcff
 80060b8:	4baa      	ldr	r3, [pc, #680]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	4aa9      	ldr	r2, [pc, #676]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060be:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80060c2:	6093      	str	r3, [r2, #8]
 80060c4:	4ba7      	ldr	r3, [pc, #668]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d0:	49a4      	ldr	r1, [pc, #656]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d010      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060e2:	4ba0      	ldr	r3, [pc, #640]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060e8:	4a9e      	ldr	r2, [pc, #632]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80060f2:	4b9c      	ldr	r3, [pc, #624]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060fc:	4999      	ldr	r1, [pc, #612]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00a      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006110:	4b94      	ldr	r3, [pc, #592]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006116:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800611e:	4991      	ldr	r1, [pc, #580]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006120:	4313      	orrs	r3, r2
 8006122:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006132:	4b8c      	ldr	r3, [pc, #560]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006138:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006140:	4988      	ldr	r1, [pc, #544]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006142:	4313      	orrs	r3, r2
 8006144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006154:	4b83      	ldr	r3, [pc, #524]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800615a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006162:	4980      	ldr	r1, [pc, #512]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006164:	4313      	orrs	r3, r2
 8006166:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006176:	4b7b      	ldr	r3, [pc, #492]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800617c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006184:	4977      	ldr	r1, [pc, #476]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006186:	4313      	orrs	r3, r2
 8006188:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006198:	4b72      	ldr	r3, [pc, #456]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800619e:	f023 0203 	bic.w	r2, r3, #3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a6:	496f      	ldr	r1, [pc, #444]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061ba:	4b6a      	ldr	r3, [pc, #424]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c0:	f023 020c 	bic.w	r2, r3, #12
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061c8:	4966      	ldr	r1, [pc, #408]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061dc:	4b61      	ldr	r3, [pc, #388]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ea:	495e      	ldr	r1, [pc, #376]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061fe:	4b59      	ldr	r3, [pc, #356]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006204:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800620c:	4955      	ldr	r1, [pc, #340]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800620e:	4313      	orrs	r3, r2
 8006210:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006220:	4b50      	ldr	r3, [pc, #320]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006226:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622e:	494d      	ldr	r1, [pc, #308]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006230:	4313      	orrs	r3, r2
 8006232:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006242:	4b48      	ldr	r3, [pc, #288]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006248:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006250:	4944      	ldr	r1, [pc, #272]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006252:	4313      	orrs	r3, r2
 8006254:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00a      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006264:	4b3f      	ldr	r3, [pc, #252]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800626a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006272:	493c      	ldr	r1, [pc, #240]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006274:	4313      	orrs	r3, r2
 8006276:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006286:	4b37      	ldr	r3, [pc, #220]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800628c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006294:	4933      	ldr	r1, [pc, #204]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006296:	4313      	orrs	r3, r2
 8006298:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062a8:	4b2e      	ldr	r3, [pc, #184]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062b6:	492b      	ldr	r1, [pc, #172]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d011      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80062ca:	4b26      	ldr	r3, [pc, #152]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062d8:	4922      	ldr	r1, [pc, #136]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062e8:	d101      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80062ea:	2301      	movs	r3, #1
 80062ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80062fa:	2301      	movs	r3, #1
 80062fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800630a:	4b16      	ldr	r3, [pc, #88]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006310:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006318:	4912      	ldr	r1, [pc, #72]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00b      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800632c:	4b0d      	ldr	r3, [pc, #52]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800632e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006332:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800633c:	4909      	ldr	r1, [pc, #36]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800633e:	4313      	orrs	r3, r2
 8006340:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d006      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 80d9 	beq.w	800650a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006358:	4b02      	ldr	r3, [pc, #8]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a01      	ldr	r2, [pc, #4]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800635e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006362:	e001      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006364:	40023800 	.word	0x40023800
 8006368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800636a:	f7fb fbeb 	bl	8001b44 <HAL_GetTick>
 800636e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006370:	e008      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006372:	f7fb fbe7 	bl	8001b44 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b64      	cmp	r3, #100	@ 0x64
 800637e:	d901      	bls.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e194      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006384:	4b6c      	ldr	r3, [pc, #432]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1f0      	bne.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d021      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d11d      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80063a4:	4b64      	ldr	r3, [pc, #400]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063aa:	0c1b      	lsrs	r3, r3, #16
 80063ac:	f003 0303 	and.w	r3, r3, #3
 80063b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80063b2:	4b61      	ldr	r3, [pc, #388]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063b8:	0e1b      	lsrs	r3, r3, #24
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	019a      	lsls	r2, r3, #6
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	041b      	lsls	r3, r3, #16
 80063ca:	431a      	orrs	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	061b      	lsls	r3, r3, #24
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	071b      	lsls	r3, r3, #28
 80063d8:	4957      	ldr	r1, [pc, #348]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d004      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063f4:	d00a      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d02e      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006406:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800640a:	d129      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800640c:	4b4a      	ldr	r3, [pc, #296]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800640e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006412:	0c1b      	lsrs	r3, r3, #16
 8006414:	f003 0303 	and.w	r3, r3, #3
 8006418:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800641a:	4b47      	ldr	r3, [pc, #284]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800641c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006420:	0f1b      	lsrs	r3, r3, #28
 8006422:	f003 0307 	and.w	r3, r3, #7
 8006426:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	019a      	lsls	r2, r3, #6
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	041b      	lsls	r3, r3, #16
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	061b      	lsls	r3, r3, #24
 800643a:	431a      	orrs	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	071b      	lsls	r3, r3, #28
 8006440:	493d      	ldr	r1, [pc, #244]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006442:	4313      	orrs	r3, r2
 8006444:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006448:	4b3b      	ldr	r3, [pc, #236]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800644a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800644e:	f023 021f 	bic.w	r2, r3, #31
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006456:	3b01      	subs	r3, #1
 8006458:	4937      	ldr	r1, [pc, #220]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800645a:	4313      	orrs	r3, r2
 800645c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01d      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800646c:	4b32      	ldr	r3, [pc, #200]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800646e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006472:	0e1b      	lsrs	r3, r3, #24
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800647a:	4b2f      	ldr	r3, [pc, #188]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800647c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006480:	0f1b      	lsrs	r3, r3, #28
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	019a      	lsls	r2, r3, #6
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	041b      	lsls	r3, r3, #16
 8006494:	431a      	orrs	r2, r3
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	061b      	lsls	r3, r3, #24
 800649a:	431a      	orrs	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	071b      	lsls	r3, r3, #28
 80064a0:	4925      	ldr	r1, [pc, #148]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d011      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	019a      	lsls	r2, r3, #6
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	041b      	lsls	r3, r3, #16
 80064c0:	431a      	orrs	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	061b      	lsls	r3, r3, #24
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	071b      	lsls	r3, r3, #28
 80064d0:	4919      	ldr	r1, [pc, #100]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064d8:	4b17      	ldr	r3, [pc, #92]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a16      	ldr	r2, [pc, #88]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80064e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064e4:	f7fb fb2e 	bl	8001b44 <HAL_GetTick>
 80064e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064ea:	e008      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064ec:	f7fb fb2a 	bl	8001b44 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b64      	cmp	r3, #100	@ 0x64
 80064f8:	d901      	bls.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e0d7      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0f0      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	2b01      	cmp	r3, #1
 800650e:	f040 80cd 	bne.w	80066ac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006512:	4b09      	ldr	r3, [pc, #36]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a08      	ldr	r2, [pc, #32]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006518:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800651c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800651e:	f7fb fb11 	bl	8001b44 <HAL_GetTick>
 8006522:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006524:	e00a      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006526:	f7fb fb0d 	bl	8001b44 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b64      	cmp	r3, #100	@ 0x64
 8006532:	d903      	bls.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e0ba      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006538:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800653c:	4b5e      	ldr	r3, [pc, #376]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006548:	d0ed      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800655a:	2b00      	cmp	r3, #0
 800655c:	d009      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006566:	2b00      	cmp	r3, #0
 8006568:	d02e      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	d12a      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006572:	4b51      	ldr	r3, [pc, #324]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006578:	0c1b      	lsrs	r3, r3, #16
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006580:	4b4d      	ldr	r3, [pc, #308]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006586:	0f1b      	lsrs	r3, r3, #28
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	019a      	lsls	r2, r3, #6
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	041b      	lsls	r3, r3, #16
 8006598:	431a      	orrs	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	061b      	lsls	r3, r3, #24
 80065a0:	431a      	orrs	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	071b      	lsls	r3, r3, #28
 80065a6:	4944      	ldr	r1, [pc, #272]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80065ae:	4b42      	ldr	r3, [pc, #264]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065b4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065bc:	3b01      	subs	r3, #1
 80065be:	021b      	lsls	r3, r3, #8
 80065c0:	493d      	ldr	r1, [pc, #244]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d022      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065dc:	d11d      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80065de:	4b36      	ldr	r3, [pc, #216]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e4:	0e1b      	lsrs	r3, r3, #24
 80065e6:	f003 030f 	and.w	r3, r3, #15
 80065ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80065ec:	4b32      	ldr	r3, [pc, #200]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f2:	0f1b      	lsrs	r3, r3, #28
 80065f4:	f003 0307 	and.w	r3, r3, #7
 80065f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	019a      	lsls	r2, r3, #6
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	041b      	lsls	r3, r3, #16
 8006606:	431a      	orrs	r2, r3
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	061b      	lsls	r3, r3, #24
 800660c:	431a      	orrs	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	071b      	lsls	r3, r3, #28
 8006612:	4929      	ldr	r1, [pc, #164]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006614:	4313      	orrs	r3, r2
 8006616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0308 	and.w	r3, r3, #8
 8006622:	2b00      	cmp	r3, #0
 8006624:	d028      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006626:	4b24      	ldr	r3, [pc, #144]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800662c:	0e1b      	lsrs	r3, r3, #24
 800662e:	f003 030f 	and.w	r3, r3, #15
 8006632:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006634:	4b20      	ldr	r3, [pc, #128]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800663a:	0c1b      	lsrs	r3, r3, #16
 800663c:	f003 0303 	and.w	r3, r3, #3
 8006640:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	019a      	lsls	r2, r3, #6
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	041b      	lsls	r3, r3, #16
 800664c:	431a      	orrs	r2, r3
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	061b      	lsls	r3, r3, #24
 8006652:	431a      	orrs	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	071b      	lsls	r3, r3, #28
 800665a:	4917      	ldr	r1, [pc, #92]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800665c:	4313      	orrs	r3, r2
 800665e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006662:	4b15      	ldr	r3, [pc, #84]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006664:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006668:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006670:	4911      	ldr	r1, [pc, #68]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006672:	4313      	orrs	r3, r2
 8006674:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006678:	4b0f      	ldr	r3, [pc, #60]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a0e      	ldr	r2, [pc, #56]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800667e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006684:	f7fb fa5e 	bl	8001b44 <HAL_GetTick>
 8006688:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800668a:	e008      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800668c:	f7fb fa5a 	bl	8001b44 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b64      	cmp	r3, #100	@ 0x64
 8006698:	d901      	bls.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e007      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800669e:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066aa:	d1ef      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3720      	adds	r7, #32
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	40023800 	.word	0x40023800

080066bc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e025      	b.n	800671c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d106      	bne.n	80066ea <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7fa fa3b 	bl	8000b60 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2202      	movs	r2, #2
 80066ee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	3304      	adds	r3, #4
 80066fa:	4619      	mov	r1, r3
 80066fc:	4610      	mov	r0, r2
 80066fe:	f000 fb37 	bl	8006d70 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6818      	ldr	r0, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	461a      	mov	r2, r3
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	f000 fb8b 	bl	8006e28 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006736:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d101      	bne.n	8006742 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800673e:	2302      	movs	r3, #2
 8006740:	e021      	b.n	8006786 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006742:	7dfb      	ldrb	r3, [r7, #23]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d002      	beq.n	800674e <HAL_SDRAM_SendCommand+0x2a>
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	2b05      	cmp	r3, #5
 800674c:	d118      	bne.n	8006780 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2202      	movs	r2, #2
 8006752:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	68b9      	ldr	r1, [r7, #8]
 800675e:	4618      	mov	r0, r3
 8006760:	f000 fbcc 	bl	8006efc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b02      	cmp	r3, #2
 800676a:	d104      	bne.n	8006776 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2205      	movs	r2, #5
 8006770:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006774:	e006      	b.n	8006784 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800677e:	e001      	b.n	8006784 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d101      	bne.n	80067a8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80067a4:	2302      	movs	r3, #2
 80067a6:	e016      	b.n	80067d6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d10f      	bne.n	80067d4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6839      	ldr	r1, [r7, #0]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fbbe 	bl	8006f44 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	e000      	b.n	80067d6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e049      	b.n	8006884 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d106      	bne.n	800680a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7fa f8ad 	bl	8000964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2202      	movs	r2, #2
 800680e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3304      	adds	r3, #4
 800681a:	4619      	mov	r1, r3
 800681c:	4610      	mov	r0, r2
 800681e:	f000 f9dd 	bl	8006bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	d001      	beq.n	80068a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e054      	b.n	800694e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0201 	orr.w	r2, r2, #1
 80068ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a26      	ldr	r2, [pc, #152]	@ (800695c <HAL_TIM_Base_Start_IT+0xd0>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d022      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ce:	d01d      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a22      	ldr	r2, [pc, #136]	@ (8006960 <HAL_TIM_Base_Start_IT+0xd4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d018      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a21      	ldr	r2, [pc, #132]	@ (8006964 <HAL_TIM_Base_Start_IT+0xd8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d013      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1f      	ldr	r2, [pc, #124]	@ (8006968 <HAL_TIM_Base_Start_IT+0xdc>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00e      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1e      	ldr	r2, [pc, #120]	@ (800696c <HAL_TIM_Base_Start_IT+0xe0>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d009      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006970 <HAL_TIM_Base_Start_IT+0xe4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d004      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a1b      	ldr	r2, [pc, #108]	@ (8006974 <HAL_TIM_Base_Start_IT+0xe8>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d115      	bne.n	8006938 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689a      	ldr	r2, [r3, #8]
 8006912:	4b19      	ldr	r3, [pc, #100]	@ (8006978 <HAL_TIM_Base_Start_IT+0xec>)
 8006914:	4013      	ands	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b06      	cmp	r3, #6
 800691c:	d015      	beq.n	800694a <HAL_TIM_Base_Start_IT+0xbe>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006924:	d011      	beq.n	800694a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f042 0201 	orr.w	r2, r2, #1
 8006934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006936:	e008      	b.n	800694a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0201 	orr.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	e000      	b.n	800694c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800694a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40010000 	.word	0x40010000
 8006960:	40000400 	.word	0x40000400
 8006964:	40000800 	.word	0x40000800
 8006968:	40000c00 	.word	0x40000c00
 800696c:	40010400 	.word	0x40010400
 8006970:	40014000 	.word	0x40014000
 8006974:	40001800 	.word	0x40001800
 8006978:	00010007 	.word	0x00010007

0800697c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d020      	beq.n	80069e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d01b      	beq.n	80069e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f06f 0202 	mvn.w	r2, #2
 80069b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f8e9 	bl	8006b9e <HAL_TIM_IC_CaptureCallback>
 80069cc:	e005      	b.n	80069da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f8db 	bl	8006b8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f8ec 	bl	8006bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d020      	beq.n	8006a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d01b      	beq.n	8006a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f06f 0204 	mvn.w	r2, #4
 80069fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2202      	movs	r2, #2
 8006a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f8c3 	bl	8006b9e <HAL_TIM_IC_CaptureCallback>
 8006a18:	e005      	b.n	8006a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f8b5 	bl	8006b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f8c6 	bl	8006bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d020      	beq.n	8006a78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f003 0308 	and.w	r3, r3, #8
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01b      	beq.n	8006a78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0208 	mvn.w	r2, #8
 8006a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2204      	movs	r2, #4
 8006a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f89d 	bl	8006b9e <HAL_TIM_IC_CaptureCallback>
 8006a64:	e005      	b.n	8006a72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f88f 	bl	8006b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f8a0 	bl	8006bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f003 0310 	and.w	r3, r3, #16
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d020      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f003 0310 	and.w	r3, r3, #16
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01b      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f06f 0210 	mvn.w	r2, #16
 8006a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2208      	movs	r2, #8
 8006a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f877 	bl	8006b9e <HAL_TIM_IC_CaptureCallback>
 8006ab0:	e005      	b.n	8006abe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f869 	bl	8006b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f87a 	bl	8006bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00c      	beq.n	8006ae8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f06f 0201 	mvn.w	r2, #1
 8006ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7f9 fe10 	bl	8000708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d104      	bne.n	8006afc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00c      	beq.n	8006b16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d007      	beq.n	8006b16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f919 	bl	8006d48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00c      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d007      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f911 	bl	8006d5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00c      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d007      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f834 	bl	8006bc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f003 0320 	and.w	r3, r3, #32
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00c      	beq.n	8006b82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f003 0320 	and.w	r3, r3, #32
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d007      	beq.n	8006b82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f06f 0220 	mvn.w	r2, #32
 8006b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f8d9 	bl	8006d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b82:	bf00      	nop
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b083      	sub	sp, #12
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b083      	sub	sp, #12
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bba:	bf00      	nop
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bce:	bf00      	nop
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
	...

08006bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a46      	ldr	r2, [pc, #280]	@ (8006d08 <TIM_Base_SetConfig+0x12c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d013      	beq.n	8006c1c <TIM_Base_SetConfig+0x40>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bfa:	d00f      	beq.n	8006c1c <TIM_Base_SetConfig+0x40>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a43      	ldr	r2, [pc, #268]	@ (8006d0c <TIM_Base_SetConfig+0x130>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d00b      	beq.n	8006c1c <TIM_Base_SetConfig+0x40>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a42      	ldr	r2, [pc, #264]	@ (8006d10 <TIM_Base_SetConfig+0x134>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d007      	beq.n	8006c1c <TIM_Base_SetConfig+0x40>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a41      	ldr	r2, [pc, #260]	@ (8006d14 <TIM_Base_SetConfig+0x138>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d003      	beq.n	8006c1c <TIM_Base_SetConfig+0x40>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a40      	ldr	r2, [pc, #256]	@ (8006d18 <TIM_Base_SetConfig+0x13c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d108      	bne.n	8006c2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a35      	ldr	r2, [pc, #212]	@ (8006d08 <TIM_Base_SetConfig+0x12c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d02b      	beq.n	8006c8e <TIM_Base_SetConfig+0xb2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c3c:	d027      	beq.n	8006c8e <TIM_Base_SetConfig+0xb2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a32      	ldr	r2, [pc, #200]	@ (8006d0c <TIM_Base_SetConfig+0x130>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d023      	beq.n	8006c8e <TIM_Base_SetConfig+0xb2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a31      	ldr	r2, [pc, #196]	@ (8006d10 <TIM_Base_SetConfig+0x134>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d01f      	beq.n	8006c8e <TIM_Base_SetConfig+0xb2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a30      	ldr	r2, [pc, #192]	@ (8006d14 <TIM_Base_SetConfig+0x138>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d01b      	beq.n	8006c8e <TIM_Base_SetConfig+0xb2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a2f      	ldr	r2, [pc, #188]	@ (8006d18 <TIM_Base_SetConfig+0x13c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d017      	beq.n	8006c8e <TIM_Base_SetConfig+0xb2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a2e      	ldr	r2, [pc, #184]	@ (8006d1c <TIM_Base_SetConfig+0x140>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d013      	beq.n	8006c8e <TIM_Base_SetConfig+0xb2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a2d      	ldr	r2, [pc, #180]	@ (8006d20 <TIM_Base_SetConfig+0x144>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00f      	beq.n	8006c8e <TIM_Base_SetConfig+0xb2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a2c      	ldr	r2, [pc, #176]	@ (8006d24 <TIM_Base_SetConfig+0x148>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d00b      	beq.n	8006c8e <TIM_Base_SetConfig+0xb2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a2b      	ldr	r2, [pc, #172]	@ (8006d28 <TIM_Base_SetConfig+0x14c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d007      	beq.n	8006c8e <TIM_Base_SetConfig+0xb2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a2a      	ldr	r2, [pc, #168]	@ (8006d2c <TIM_Base_SetConfig+0x150>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d003      	beq.n	8006c8e <TIM_Base_SetConfig+0xb2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a29      	ldr	r2, [pc, #164]	@ (8006d30 <TIM_Base_SetConfig+0x154>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d108      	bne.n	8006ca0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a10      	ldr	r2, [pc, #64]	@ (8006d08 <TIM_Base_SetConfig+0x12c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d003      	beq.n	8006cd4 <TIM_Base_SetConfig+0xf8>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a12      	ldr	r2, [pc, #72]	@ (8006d18 <TIM_Base_SetConfig+0x13c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d103      	bne.n	8006cdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d105      	bne.n	8006cfa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f023 0201 	bic.w	r2, r3, #1
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	611a      	str	r2, [r3, #16]
  }
}
 8006cfa:	bf00      	nop
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	40010000 	.word	0x40010000
 8006d0c:	40000400 	.word	0x40000400
 8006d10:	40000800 	.word	0x40000800
 8006d14:	40000c00 	.word	0x40000c00
 8006d18:	40010400 	.word	0x40010400
 8006d1c:	40014000 	.word	0x40014000
 8006d20:	40014400 	.word	0x40014400
 8006d24:	40014800 	.word	0x40014800
 8006d28:	40001800 	.word	0x40001800
 8006d2c:	40001c00 	.word	0x40001c00
 8006d30:	40002000 	.word	0x40002000

08006d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d121      	bne.n	8006dc6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	4b27      	ldr	r3, [pc, #156]	@ (8006e24 <FMC_SDRAM_Init+0xb4>)
 8006d88:	4013      	ands	r3, r2
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	6851      	ldr	r1, [r2, #4]
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	6892      	ldr	r2, [r2, #8]
 8006d92:	4311      	orrs	r1, r2
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	68d2      	ldr	r2, [r2, #12]
 8006d98:	4311      	orrs	r1, r2
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	6912      	ldr	r2, [r2, #16]
 8006d9e:	4311      	orrs	r1, r2
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	6952      	ldr	r2, [r2, #20]
 8006da4:	4311      	orrs	r1, r2
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	6992      	ldr	r2, [r2, #24]
 8006daa:	4311      	orrs	r1, r2
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	69d2      	ldr	r2, [r2, #28]
 8006db0:	4311      	orrs	r1, r2
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	6a12      	ldr	r2, [r2, #32]
 8006db6:	4311      	orrs	r1, r2
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	e026      	b.n	8006e14 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	69d9      	ldr	r1, [r3, #28]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	4319      	orrs	r1, r3
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ddc:	430b      	orrs	r3, r1
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	4b0e      	ldr	r3, [pc, #56]	@ (8006e24 <FMC_SDRAM_Init+0xb4>)
 8006dea:	4013      	ands	r3, r2
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	6851      	ldr	r1, [r2, #4]
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	6892      	ldr	r2, [r2, #8]
 8006df4:	4311      	orrs	r1, r2
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	68d2      	ldr	r2, [r2, #12]
 8006dfa:	4311      	orrs	r1, r2
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	6912      	ldr	r2, [r2, #16]
 8006e00:	4311      	orrs	r1, r2
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	6952      	ldr	r2, [r2, #20]
 8006e06:	4311      	orrs	r1, r2
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	6992      	ldr	r2, [r2, #24]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	ffff8000 	.word	0xffff8000

08006e28 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d128      	bne.n	8006e8c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	1e59      	subs	r1, r3, #1
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	4319      	orrs	r1, r3
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	021b      	lsls	r3, r3, #8
 8006e5a:	4319      	orrs	r1, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	031b      	lsls	r3, r3, #12
 8006e64:	4319      	orrs	r1, r3
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	041b      	lsls	r3, r3, #16
 8006e6e:	4319      	orrs	r1, r3
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	051b      	lsls	r3, r3, #20
 8006e78:	4319      	orrs	r1, r3
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	061b      	lsls	r3, r3, #24
 8006e82:	430b      	orrs	r3, r1
 8006e84:	431a      	orrs	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	609a      	str	r2, [r3, #8]
 8006e8a:	e02d      	b.n	8006ee8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	4b19      	ldr	r3, [pc, #100]	@ (8006ef8 <FMC_SDRAM_Timing_Init+0xd0>)
 8006e92:	4013      	ands	r3, r2
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	68d2      	ldr	r2, [r2, #12]
 8006e98:	3a01      	subs	r2, #1
 8006e9a:	0311      	lsls	r1, r2, #12
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	6952      	ldr	r2, [r2, #20]
 8006ea0:	3a01      	subs	r2, #1
 8006ea2:	0512      	lsls	r2, r2, #20
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	1e59      	subs	r1, r3, #1
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	011b      	lsls	r3, r3, #4
 8006ec2:	4319      	orrs	r1, r3
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	021b      	lsls	r3, r3, #8
 8006ecc:	4319      	orrs	r1, r3
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	041b      	lsls	r3, r3, #16
 8006ed6:	4319      	orrs	r1, r3
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	061b      	lsls	r3, r3, #24
 8006ee0:	430b      	orrs	r3, r1
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	ff0f0fff 	.word	0xff0f0fff

08006efc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	691a      	ldr	r2, [r3, #16]
 8006f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f40 <FMC_SDRAM_SendCommand+0x44>)
 8006f0e:	4013      	ands	r3, r2
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	6811      	ldr	r1, [r2, #0]
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	6852      	ldr	r2, [r2, #4]
 8006f18:	4311      	orrs	r1, r2
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	6892      	ldr	r2, [r2, #8]
 8006f1e:	3a01      	subs	r2, #1
 8006f20:	0152      	lsls	r2, r2, #5
 8006f22:	4311      	orrs	r1, r2
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	68d2      	ldr	r2, [r2, #12]
 8006f28:	0252      	lsls	r2, r2, #9
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	ffc00000 	.word	0xffc00000

08006f44 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	695a      	ldr	r2, [r3, #20]
 8006f52:	4b07      	ldr	r3, [pc, #28]	@ (8006f70 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	0052      	lsls	r2, r2, #1
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	ffffc001 	.word	0xffffc001

08006f74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f74:	b084      	sub	sp, #16
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b084      	sub	sp, #16
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	f107 001c 	add.w	r0, r7, #28
 8006f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f86:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d121      	bne.n	8006fd2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f92:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	4b21      	ldr	r3, [pc, #132]	@ (8007024 <USB_CoreInit+0xb0>)
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006fb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d105      	bne.n	8006fc6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f9d4 	bl	8007374 <USB_CoreReset>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	73fb      	strb	r3, [r7, #15]
 8006fd0:	e010      	b.n	8006ff4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f9c8 	bl	8007374 <USB_CoreReset>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006ff4:	7fbb      	ldrb	r3, [r7, #30]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d10b      	bne.n	8007012 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f043 0206 	orr.w	r2, r3, #6
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f043 0220 	orr.w	r2, r3, #32
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007012:	7bfb      	ldrb	r3, [r7, #15]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800701e:	b004      	add	sp, #16
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	ffbdffbf 	.word	0xffbdffbf

08007028 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f043 0201 	orr.w	r2, r3, #1
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f023 0201 	bic.w	r2, r3, #1
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007088:	78fb      	ldrb	r3, [r7, #3]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d115      	bne.n	80070ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800709a:	200a      	movs	r0, #10
 800709c:	f7fa fd5e 	bl	8001b5c <HAL_Delay>
      ms += 10U;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	330a      	adds	r3, #10
 80070a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f956 	bl	8007358 <USB_GetMode>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d01e      	beq.n	80070f0 <USB_SetCurrentMode+0x84>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2bc7      	cmp	r3, #199	@ 0xc7
 80070b6:	d9f0      	bls.n	800709a <USB_SetCurrentMode+0x2e>
 80070b8:	e01a      	b.n	80070f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80070ba:	78fb      	ldrb	r3, [r7, #3]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d115      	bne.n	80070ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80070cc:	200a      	movs	r0, #10
 80070ce:	f7fa fd45 	bl	8001b5c <HAL_Delay>
      ms += 10U;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	330a      	adds	r3, #10
 80070d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f93d 	bl	8007358 <USB_GetMode>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d005      	beq.n	80070f0 <USB_SetCurrentMode+0x84>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80070e8:	d9f0      	bls.n	80070cc <USB_SetCurrentMode+0x60>
 80070ea:	e001      	b.n	80070f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e005      	b.n	80070fc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2bc8      	cmp	r3, #200	@ 0xc8
 80070f4:	d101      	bne.n	80070fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e000      	b.n	80070fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3301      	adds	r3, #1
 8007116:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800711e:	d901      	bls.n	8007124 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e01b      	b.n	800715c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	daf2      	bge.n	8007112 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	019b      	lsls	r3, r3, #6
 8007134:	f043 0220 	orr.w	r2, r3, #32
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007148:	d901      	bls.n	800714e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e006      	b.n	800715c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b20      	cmp	r3, #32
 8007158:	d0f0      	beq.n	800713c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3301      	adds	r3, #1
 8007178:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007180:	d901      	bls.n	8007186 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e018      	b.n	80071b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	daf2      	bge.n	8007174 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2210      	movs	r2, #16
 8007196:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3301      	adds	r3, #1
 800719c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071a4:	d901      	bls.n	80071aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e006      	b.n	80071b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	f003 0310 	and.w	r3, r3, #16
 80071b2:	2b10      	cmp	r3, #16
 80071b4:	d0f0      	beq.n	8007198 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b089      	sub	sp, #36	@ 0x24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	4611      	mov	r1, r2
 80071d0:	461a      	mov	r2, r3
 80071d2:	460b      	mov	r3, r1
 80071d4:	71fb      	strb	r3, [r7, #7]
 80071d6:	4613      	mov	r3, r2
 80071d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80071e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d123      	bne.n	8007232 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071ea:	88bb      	ldrh	r3, [r7, #4]
 80071ec:	3303      	adds	r3, #3
 80071ee:	089b      	lsrs	r3, r3, #2
 80071f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80071f2:	2300      	movs	r3, #0
 80071f4:	61bb      	str	r3, [r7, #24]
 80071f6:	e018      	b.n	800722a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071f8:	79fb      	ldrb	r3, [r7, #7]
 80071fa:	031a      	lsls	r2, r3, #12
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007204:	461a      	mov	r2, r3
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	3301      	adds	r3, #1
 8007210:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	3301      	adds	r3, #1
 8007216:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	3301      	adds	r3, #1
 800721c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	3301      	adds	r3, #1
 8007222:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	3301      	adds	r3, #1
 8007228:	61bb      	str	r3, [r7, #24]
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	429a      	cmp	r2, r3
 8007230:	d3e2      	bcc.n	80071f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3724      	adds	r7, #36	@ 0x24
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007240:	b480      	push	{r7}
 8007242:	b08b      	sub	sp, #44	@ 0x2c
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	4613      	mov	r3, r2
 800724c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	089b      	lsrs	r3, r3, #2
 800725a:	b29b      	uxth	r3, r3
 800725c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800725e:	88fb      	ldrh	r3, [r7, #6]
 8007260:	f003 0303 	and.w	r3, r3, #3
 8007264:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007266:	2300      	movs	r3, #0
 8007268:	623b      	str	r3, [r7, #32]
 800726a:	e014      	b.n	8007296 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007276:	601a      	str	r2, [r3, #0]
    pDest++;
 8007278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727a:	3301      	adds	r3, #1
 800727c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800727e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007280:	3301      	adds	r3, #1
 8007282:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	3301      	adds	r3, #1
 8007288:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728c:	3301      	adds	r3, #1
 800728e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	3301      	adds	r3, #1
 8007294:	623b      	str	r3, [r7, #32]
 8007296:	6a3a      	ldr	r2, [r7, #32]
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	429a      	cmp	r2, r3
 800729c:	d3e6      	bcc.n	800726c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800729e:	8bfb      	ldrh	r3, [r7, #30]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d01e      	beq.n	80072e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072ae:	461a      	mov	r2, r3
 80072b0:	f107 0310 	add.w	r3, r7, #16
 80072b4:	6812      	ldr	r2, [r2, #0]
 80072b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	6a3b      	ldr	r3, [r7, #32]
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	fa22 f303 	lsr.w	r3, r2, r3
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c8:	701a      	strb	r2, [r3, #0]
      i++;
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	3301      	adds	r3, #1
 80072ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80072d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d2:	3301      	adds	r3, #1
 80072d4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80072d6:	8bfb      	ldrh	r3, [r7, #30]
 80072d8:	3b01      	subs	r3, #1
 80072da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80072dc:	8bfb      	ldrh	r3, [r7, #30]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1ea      	bne.n	80072b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	372c      	adds	r7, #44	@ 0x2c
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	4013      	ands	r3, r2
 8007306:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007308:	68fb      	ldr	r3, [r7, #12]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007316:	b480      	push	{r7}
 8007318:	b085      	sub	sp, #20
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	460b      	mov	r3, r1
 8007320:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007326:	78fb      	ldrb	r3, [r7, #3]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4413      	add	r3, r2
 800732e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007336:	78fb      	ldrb	r3, [r7, #3]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4413      	add	r3, r2
 800733e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	4013      	ands	r3, r2
 8007348:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800734a:	68bb      	ldr	r3, [r7, #8]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	f003 0301 	and.w	r3, r3, #1
}
 8007368:	4618      	mov	r0, r3
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	3301      	adds	r3, #1
 8007384:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800738c:	d901      	bls.n	8007392 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e01b      	b.n	80073ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	daf2      	bge.n	8007380 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f043 0201 	orr.w	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3301      	adds	r3, #1
 80073ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073b6:	d901      	bls.n	80073bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e006      	b.n	80073ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d0f0      	beq.n	80073aa <USB_CoreReset+0x36>

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
	...

080073d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073d8:	b084      	sub	sp, #16
 80073da:	b580      	push	{r7, lr}
 80073dc:	b086      	sub	sp, #24
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80073e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073f8:	461a      	mov	r2, r3
 80073fa:	2300      	movs	r3, #0
 80073fc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007402:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007412:	2b00      	cmp	r3, #0
 8007414:	d119      	bne.n	800744a <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007416:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800741a:	2b01      	cmp	r3, #1
 800741c:	d10a      	bne.n	8007434 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800742c:	f043 0304 	orr.w	r3, r3, #4
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	e014      	b.n	800745e <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007442:	f023 0304 	bic.w	r3, r3, #4
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	e009      	b.n	800745e <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007458:	f023 0304 	bic.w	r3, r3, #4
 800745c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800745e:	2110      	movs	r1, #16
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7ff fe4f 	bl	8007104 <USB_FlushTxFifo>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff fe79 	bl	8007168 <USB_FlushRxFifo>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007480:	2300      	movs	r3, #0
 8007482:	613b      	str	r3, [r7, #16]
 8007484:	e015      	b.n	80074b2 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4413      	add	r3, r2
 800748e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007492:	461a      	mov	r2, r3
 8007494:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007498:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074a6:	461a      	mov	r2, r3
 80074a8:	2300      	movs	r3, #0
 80074aa:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	3301      	adds	r3, #1
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80074b6:	461a      	mov	r2, r3
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d3e3      	bcc.n	8007486 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074ca:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a18      	ldr	r2, [pc, #96]	@ (8007530 <USB_HostInit+0x158>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d10b      	bne.n	80074ec <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074da:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a15      	ldr	r2, [pc, #84]	@ (8007534 <USB_HostInit+0x15c>)
 80074e0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a14      	ldr	r2, [pc, #80]	@ (8007538 <USB_HostInit+0x160>)
 80074e6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80074ea:	e009      	b.n	8007500 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2280      	movs	r2, #128	@ 0x80
 80074f0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a11      	ldr	r2, [pc, #68]	@ (800753c <USB_HostInit+0x164>)
 80074f6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a11      	ldr	r2, [pc, #68]	@ (8007540 <USB_HostInit+0x168>)
 80074fc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007500:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007504:	2b00      	cmp	r3, #0
 8007506:	d105      	bne.n	8007514 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	f043 0210 	orr.w	r2, r3, #16
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	699a      	ldr	r2, [r3, #24]
 8007518:	4b0a      	ldr	r3, [pc, #40]	@ (8007544 <USB_HostInit+0x16c>)
 800751a:	4313      	orrs	r3, r2
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007520:	7dfb      	ldrb	r3, [r7, #23]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800752c:	b004      	add	sp, #16
 800752e:	4770      	bx	lr
 8007530:	40040000 	.word	0x40040000
 8007534:	01000200 	.word	0x01000200
 8007538:	00e00300 	.word	0x00e00300
 800753c:	00600080 	.word	0x00600080
 8007540:	004000e0 	.word	0x004000e0
 8007544:	a3200008 	.word	0xa3200008

08007548 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007566:	f023 0303 	bic.w	r3, r3, #3
 800756a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	68f9      	ldr	r1, [r7, #12]
 800757c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007580:	4313      	orrs	r3, r2
 8007582:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007584:	78fb      	ldrb	r3, [r7, #3]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d107      	bne.n	800759a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007590:	461a      	mov	r2, r3
 8007592:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007596:	6053      	str	r3, [r2, #4]
 8007598:	e00c      	b.n	80075b4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800759a:	78fb      	ldrb	r3, [r7, #3]
 800759c:	2b02      	cmp	r3, #2
 800759e:	d107      	bne.n	80075b0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075a6:	461a      	mov	r2, r3
 80075a8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80075ac:	6053      	str	r3, [r2, #4]
 80075ae:	e001      	b.n	80075b4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e000      	b.n	80075b6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80075e2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80075ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075f0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80075f2:	2064      	movs	r0, #100	@ 0x64
 80075f4:	f7fa fab2 	bl	8001b5c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007604:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007606:	200a      	movs	r0, #10
 8007608:	f7fa faa8 	bl	8001b5c <HAL_Delay>

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007616:	b480      	push	{r7}
 8007618:	b085      	sub	sp, #20
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	460b      	mov	r3, r1
 8007620:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800763a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d109      	bne.n	800765a <USB_DriveVbus+0x44>
 8007646:	78fb      	ldrb	r3, [r7, #3]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d106      	bne.n	800765a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007654:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007658:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007664:	d109      	bne.n	800767a <USB_DriveVbus+0x64>
 8007666:	78fb      	ldrb	r3, [r7, #3]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d106      	bne.n	800767a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007674:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007678:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	0c5b      	lsrs	r3, r3, #17
 80076a6:	f003 0303 	and.w	r3, r3, #3
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b085      	sub	sp, #20
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	b29b      	uxth	r3, r3
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	4608      	mov	r0, r1
 80076e2:	4611      	mov	r1, r2
 80076e4:	461a      	mov	r2, r3
 80076e6:	4603      	mov	r3, r0
 80076e8:	70fb      	strb	r3, [r7, #3]
 80076ea:	460b      	mov	r3, r1
 80076ec:	70bb      	strb	r3, [r7, #2]
 80076ee:	4613      	mov	r3, r2
 80076f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80076fa:	78fb      	ldrb	r3, [r7, #3]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	4413      	add	r3, r2
 8007702:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007706:	461a      	mov	r2, r3
 8007708:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800770c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800770e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007712:	2b03      	cmp	r3, #3
 8007714:	d87c      	bhi.n	8007810 <USB_HC_Init+0x138>
 8007716:	a201      	add	r2, pc, #4	@ (adr r2, 800771c <USB_HC_Init+0x44>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	0800772d 	.word	0x0800772d
 8007720:	080077d3 	.word	0x080077d3
 8007724:	0800772d 	.word	0x0800772d
 8007728:	08007795 	.word	0x08007795
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800772c:	78fb      	ldrb	r3, [r7, #3]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	4413      	add	r3, r2
 8007734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007738:	461a      	mov	r2, r3
 800773a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800773e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007740:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007744:	2b00      	cmp	r3, #0
 8007746:	da10      	bge.n	800776a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007748:	78fb      	ldrb	r3, [r7, #3]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	4413      	add	r3, r2
 8007750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	78fa      	ldrb	r2, [r7, #3]
 8007758:	0151      	lsls	r1, r2, #5
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	440a      	add	r2, r1
 800775e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007766:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007768:	e055      	b.n	8007816 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a6f      	ldr	r2, [pc, #444]	@ (800792c <USB_HC_Init+0x254>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d151      	bne.n	8007816 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	4413      	add	r3, r2
 800777a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	78fa      	ldrb	r2, [r7, #3]
 8007782:	0151      	lsls	r1, r2, #5
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	440a      	add	r2, r1
 8007788:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800778c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007790:	60d3      	str	r3, [r2, #12]
      break;
 8007792:	e040      	b.n	8007816 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007794:	78fb      	ldrb	r3, [r7, #3]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	4413      	add	r3, r2
 800779c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077a0:	461a      	mov	r2, r3
 80077a2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80077a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80077a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	da34      	bge.n	800781a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	78fa      	ldrb	r2, [r7, #3]
 80077c0:	0151      	lsls	r1, r2, #5
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	440a      	add	r2, r1
 80077c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077ce:	60d3      	str	r3, [r2, #12]
      }

      break;
 80077d0:	e023      	b.n	800781a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80077d2:	78fb      	ldrb	r3, [r7, #3]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077de:	461a      	mov	r2, r3
 80077e0:	f240 2325 	movw	r3, #549	@ 0x225
 80077e4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80077e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	da17      	bge.n	800781e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80077ee:	78fb      	ldrb	r3, [r7, #3]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	78fa      	ldrb	r2, [r7, #3]
 80077fe:	0151      	lsls	r1, r2, #5
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	440a      	add	r2, r1
 8007804:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007808:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800780c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800780e:	e006      	b.n	800781e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	77fb      	strb	r3, [r7, #31]
      break;
 8007814:	e004      	b.n	8007820 <USB_HC_Init+0x148>
      break;
 8007816:	bf00      	nop
 8007818:	e002      	b.n	8007820 <USB_HC_Init+0x148>
      break;
 800781a:	bf00      	nop
 800781c:	e000      	b.n	8007820 <USB_HC_Init+0x148>
      break;
 800781e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	4413      	add	r3, r2
 8007828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800782c:	461a      	mov	r2, r3
 800782e:	2300      	movs	r3, #0
 8007830:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007832:	78fb      	ldrb	r3, [r7, #3]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	4413      	add	r3, r2
 800783a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	78fa      	ldrb	r2, [r7, #3]
 8007842:	0151      	lsls	r1, r2, #5
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	440a      	add	r2, r1
 8007848:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800784c:	f043 0302 	orr.w	r3, r3, #2
 8007850:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007858:	699a      	ldr	r2, [r3, #24]
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	2101      	movs	r1, #1
 8007862:	fa01 f303 	lsl.w	r3, r1, r3
 8007866:	6939      	ldr	r1, [r7, #16]
 8007868:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800786c:	4313      	orrs	r3, r2
 800786e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800787c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007880:	2b00      	cmp	r3, #0
 8007882:	da03      	bge.n	800788c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007884:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007888:	61bb      	str	r3, [r7, #24]
 800788a:	e001      	b.n	8007890 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800788c:	2300      	movs	r3, #0
 800788e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7ff fef9 	bl	8007688 <USB_GetHostSpeed>
 8007896:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007898:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800789c:	2b02      	cmp	r3, #2
 800789e:	d106      	bne.n	80078ae <USB_HC_Init+0x1d6>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d003      	beq.n	80078ae <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80078a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	e001      	b.n	80078b2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078b2:	787b      	ldrb	r3, [r7, #1]
 80078b4:	059b      	lsls	r3, r3, #22
 80078b6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80078ba:	78bb      	ldrb	r3, [r7, #2]
 80078bc:	02db      	lsls	r3, r3, #11
 80078be:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078c2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80078c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80078c8:	049b      	lsls	r3, r3, #18
 80078ca:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80078ce:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80078d0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80078d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80078d6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	431a      	orrs	r2, r3
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078e0:	78fa      	ldrb	r2, [r7, #3]
 80078e2:	0151      	lsls	r1, r2, #5
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	440a      	add	r2, r1
 80078e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80078ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078f0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80078f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d003      	beq.n	8007902 <USB_HC_Init+0x22a>
 80078fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d10f      	bne.n	8007922 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007902:	78fb      	ldrb	r3, [r7, #3]
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	4413      	add	r3, r2
 800790a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	78fa      	ldrb	r2, [r7, #3]
 8007912:	0151      	lsls	r1, r2, #5
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	440a      	add	r2, r1
 8007918:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800791c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007920:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007922:	7ffb      	ldrb	r3, [r7, #31]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3720      	adds	r7, #32
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	40040000 	.word	0x40040000

08007930 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08c      	sub	sp, #48	@ 0x30
 8007934:	af02      	add	r7, sp, #8
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	4613      	mov	r3, r2
 800793c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	785b      	ldrb	r3, [r3, #1]
 8007946:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007948:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800794c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	4a5d      	ldr	r2, [pc, #372]	@ (8007ac8 <USB_HC_StartXfer+0x198>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d12f      	bne.n	80079b6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d11c      	bne.n	8007996 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	7c9b      	ldrb	r3, [r3, #18]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d003      	beq.n	800796c <USB_HC_StartXfer+0x3c>
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	7c9b      	ldrb	r3, [r3, #18]
 8007968:	2b02      	cmp	r3, #2
 800796a:	d124      	bne.n	80079b6 <USB_HC_StartXfer+0x86>
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	799b      	ldrb	r3, [r3, #6]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d120      	bne.n	80079b6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	4413      	add	r3, r2
 800797c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	0151      	lsls	r1, r2, #5
 8007986:	6a3a      	ldr	r2, [r7, #32]
 8007988:	440a      	add	r2, r1
 800798a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800798e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007992:	60d3      	str	r3, [r2, #12]
 8007994:	e00f      	b.n	80079b6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	791b      	ldrb	r3, [r3, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10b      	bne.n	80079b6 <USB_HC_StartXfer+0x86>
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	795b      	ldrb	r3, [r3, #5]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d107      	bne.n	80079b6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	785b      	ldrb	r3, [r3, #1]
 80079aa:	4619      	mov	r1, r3
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fb6b 	bl	8008088 <USB_DoPing>
        return HAL_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	e232      	b.n	8007e1c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	799b      	ldrb	r3, [r3, #6]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d158      	bne.n	8007a70 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80079be:	2301      	movs	r3, #1
 80079c0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	78db      	ldrb	r3, [r3, #3]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d007      	beq.n	80079da <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80079ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	8a92      	ldrh	r2, [r2, #20]
 80079d0:	fb03 f202 	mul.w	r2, r3, r2
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	61da      	str	r2, [r3, #28]
 80079d8:	e07c      	b.n	8007ad4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	7c9b      	ldrb	r3, [r3, #18]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d130      	bne.n	8007a44 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	2bbc      	cmp	r3, #188	@ 0xbc
 80079e8:	d918      	bls.n	8007a1c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	8a9b      	ldrh	r3, [r3, #20]
 80079ee:	461a      	mov	r2, r3
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	69da      	ldr	r2, [r3, #28]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d003      	beq.n	8007a0c <USB_HC_StartXfer+0xdc>
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d103      	bne.n	8007a14 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	60da      	str	r2, [r3, #12]
 8007a12:	e05f      	b.n	8007ad4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2201      	movs	r2, #1
 8007a18:	60da      	str	r2, [r3, #12]
 8007a1a:	e05b      	b.n	8007ad4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	6a1a      	ldr	r2, [r3, #32]
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d007      	beq.n	8007a3c <USB_HC_StartXfer+0x10c>
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d003      	beq.n	8007a3c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2204      	movs	r2, #4
 8007a38:	60da      	str	r2, [r3, #12]
 8007a3a:	e04b      	b.n	8007ad4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	2203      	movs	r2, #3
 8007a40:	60da      	str	r2, [r3, #12]
 8007a42:	e047      	b.n	8007ad4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007a44:	79fb      	ldrb	r3, [r7, #7]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d10d      	bne.n	8007a66 <USB_HC_StartXfer+0x136>
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	8a92      	ldrh	r2, [r2, #20]
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d907      	bls.n	8007a66 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	8a92      	ldrh	r2, [r2, #20]
 8007a5c:	fb03 f202 	mul.w	r2, r3, r2
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	61da      	str	r2, [r3, #28]
 8007a64:	e036      	b.n	8007ad4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	6a1a      	ldr	r2, [r3, #32]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	61da      	str	r2, [r3, #28]
 8007a6e:	e031      	b.n	8007ad4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d018      	beq.n	8007aaa <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	6a1b      	ldr	r3, [r3, #32]
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	8a92      	ldrh	r2, [r2, #20]
 8007a80:	4413      	add	r3, r2
 8007a82:	3b01      	subs	r3, #1
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	8a92      	ldrh	r2, [r2, #20]
 8007a88:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a8c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007a8e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007a90:	8b7b      	ldrh	r3, [r7, #26]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d90b      	bls.n	8007aae <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007a96:	8b7b      	ldrh	r3, [r7, #26]
 8007a98:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	8a92      	ldrh	r2, [r2, #20]
 8007aa0:	fb03 f202 	mul.w	r2, r3, r2
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	61da      	str	r2, [r3, #28]
 8007aa8:	e001      	b.n	8007aae <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	78db      	ldrb	r3, [r3, #3]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ab6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	8a92      	ldrh	r2, [r2, #20]
 8007abc:	fb03 f202 	mul.w	r2, r3, r2
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	61da      	str	r2, [r3, #28]
 8007ac4:	e006      	b.n	8007ad4 <USB_HC_StartXfer+0x1a4>
 8007ac6:	bf00      	nop
 8007ac8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	6a1a      	ldr	r2, [r3, #32]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007adc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ade:	04d9      	lsls	r1, r3, #19
 8007ae0:	4ba3      	ldr	r3, [pc, #652]	@ (8007d70 <USB_HC_StartXfer+0x440>)
 8007ae2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ae4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	7d9b      	ldrb	r3, [r3, #22]
 8007aea:	075b      	lsls	r3, r3, #29
 8007aec:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007af0:	69f9      	ldr	r1, [r7, #28]
 8007af2:	0148      	lsls	r0, r1, #5
 8007af4:	6a39      	ldr	r1, [r7, #32]
 8007af6:	4401      	add	r1, r0
 8007af8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007afc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007afe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d009      	beq.n	8007b1a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	6999      	ldr	r1, [r3, #24]
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b16:	460a      	mov	r2, r1
 8007b18:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	bf0c      	ite	eq
 8007b2a:	2301      	moveq	r3, #1
 8007b2c:	2300      	movne	r3, #0
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	69fa      	ldr	r2, [r7, #28]
 8007b42:	0151      	lsls	r1, r2, #5
 8007b44:	6a3a      	ldr	r2, [r7, #32]
 8007b46:	440a      	add	r2, r1
 8007b48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b4c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007b50:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	015a      	lsls	r2, r3, #5
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	4413      	add	r3, r2
 8007b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	7e7b      	ldrb	r3, [r7, #25]
 8007b62:	075b      	lsls	r3, r3, #29
 8007b64:	69f9      	ldr	r1, [r7, #28]
 8007b66:	0148      	lsls	r0, r1, #5
 8007b68:	6a39      	ldr	r1, [r7, #32]
 8007b6a:	4401      	add	r1, r0
 8007b6c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007b70:	4313      	orrs	r3, r2
 8007b72:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	799b      	ldrb	r3, [r3, #6]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	f040 80c3 	bne.w	8007d04 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	7c5b      	ldrb	r3, [r3, #17]
 8007b82:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	69fa      	ldr	r2, [r7, #28]
 8007b8c:	0151      	lsls	r1, r2, #5
 8007b8e:	6a3a      	ldr	r2, [r7, #32]
 8007b90:	440a      	add	r2, r1
 8007b92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007b9a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	69fa      	ldr	r2, [r7, #28]
 8007bac:	0151      	lsls	r1, r2, #5
 8007bae:	6a3a      	ldr	r2, [r7, #32]
 8007bb0:	440a      	add	r2, r1
 8007bb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bb6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007bba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	79db      	ldrb	r3, [r3, #7]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d123      	bne.n	8007c0c <USB_HC_StartXfer+0x2dc>
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	78db      	ldrb	r3, [r3, #3]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d11f      	bne.n	8007c0c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	015a      	lsls	r2, r3, #5
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	0151      	lsls	r1, r2, #5
 8007bde:	6a3a      	ldr	r2, [r7, #32]
 8007be0:	440a      	add	r2, r1
 8007be2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bea:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	0151      	lsls	r1, r2, #5
 8007bfe:	6a3a      	ldr	r2, [r7, #32]
 8007c00:	440a      	add	r2, r1
 8007c02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c0a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	7c9b      	ldrb	r3, [r3, #18]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d003      	beq.n	8007c1c <USB_HC_StartXfer+0x2ec>
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	7c9b      	ldrb	r3, [r3, #18]
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d117      	bne.n	8007c4c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d113      	bne.n	8007c4c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	78db      	ldrb	r3, [r3, #3]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d10f      	bne.n	8007c4c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	0151      	lsls	r1, r2, #5
 8007c3e:	6a3a      	ldr	r2, [r7, #32]
 8007c40:	440a      	add	r2, r1
 8007c42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c4a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	7c9b      	ldrb	r3, [r3, #18]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d162      	bne.n	8007d1a <USB_HC_StartXfer+0x3ea>
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	78db      	ldrb	r3, [r3, #3]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d15e      	bne.n	8007d1a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d858      	bhi.n	8007d18 <USB_HC_StartXfer+0x3e8>
 8007c66:	a201      	add	r2, pc, #4	@ (adr r2, 8007c6c <USB_HC_StartXfer+0x33c>)
 8007c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6c:	08007c7d 	.word	0x08007c7d
 8007c70:	08007c9f 	.word	0x08007c9f
 8007c74:	08007cc1 	.word	0x08007cc1
 8007c78:	08007ce3 	.word	0x08007ce3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	69fa      	ldr	r2, [r7, #28]
 8007c8c:	0151      	lsls	r1, r2, #5
 8007c8e:	6a3a      	ldr	r2, [r7, #32]
 8007c90:	440a      	add	r2, r1
 8007c92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c9a:	6053      	str	r3, [r2, #4]
          break;
 8007c9c:	e03d      	b.n	8007d1a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	69fa      	ldr	r2, [r7, #28]
 8007cae:	0151      	lsls	r1, r2, #5
 8007cb0:	6a3a      	ldr	r2, [r7, #32]
 8007cb2:	440a      	add	r2, r1
 8007cb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cb8:	f043 030e 	orr.w	r3, r3, #14
 8007cbc:	6053      	str	r3, [r2, #4]
          break;
 8007cbe:	e02c      	b.n	8007d1a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	0151      	lsls	r1, r2, #5
 8007cd2:	6a3a      	ldr	r2, [r7, #32]
 8007cd4:	440a      	add	r2, r1
 8007cd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007cde:	6053      	str	r3, [r2, #4]
          break;
 8007ce0:	e01b      	b.n	8007d1a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	69fa      	ldr	r2, [r7, #28]
 8007cf2:	0151      	lsls	r1, r2, #5
 8007cf4:	6a3a      	ldr	r2, [r7, #32]
 8007cf6:	440a      	add	r2, r1
 8007cf8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d00:	6053      	str	r3, [r2, #4]
          break;
 8007d02:	e00a      	b.n	8007d1a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d10:	461a      	mov	r2, r3
 8007d12:	2300      	movs	r3, #0
 8007d14:	6053      	str	r3, [r2, #4]
 8007d16:	e000      	b.n	8007d1a <USB_HC_StartXfer+0x3ea>
          break;
 8007d18:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d30:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	78db      	ldrb	r3, [r3, #3]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d004      	beq.n	8007d44 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d40:	613b      	str	r3, [r7, #16]
 8007d42:	e003      	b.n	8007d4c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d4a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d52:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d60:	461a      	mov	r2, r3
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007d66:	79fb      	ldrb	r3, [r7, #7]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	e055      	b.n	8007e1c <USB_HC_StartXfer+0x4ec>
 8007d70:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	78db      	ldrb	r3, [r3, #3]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d14e      	bne.n	8007e1a <USB_HC_StartXfer+0x4ea>
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d04a      	beq.n	8007e1a <USB_HC_StartXfer+0x4ea>
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	79db      	ldrb	r3, [r3, #7]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d146      	bne.n	8007e1a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	7c9b      	ldrb	r3, [r3, #18]
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d831      	bhi.n	8007df8 <USB_HC_StartXfer+0x4c8>
 8007d94:	a201      	add	r2, pc, #4	@ (adr r2, 8007d9c <USB_HC_StartXfer+0x46c>)
 8007d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9a:	bf00      	nop
 8007d9c:	08007dad 	.word	0x08007dad
 8007da0:	08007dd1 	.word	0x08007dd1
 8007da4:	08007dad 	.word	0x08007dad
 8007da8:	08007dd1 	.word	0x08007dd1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	3303      	adds	r3, #3
 8007db2:	089b      	lsrs	r3, r3, #2
 8007db4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007db6:	8afa      	ldrh	r2, [r7, #22]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d91c      	bls.n	8007dfc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	f043 0220 	orr.w	r2, r3, #32
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	619a      	str	r2, [r3, #24]
        }
        break;
 8007dce:	e015      	b.n	8007dfc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	6a1b      	ldr	r3, [r3, #32]
 8007dd4:	3303      	adds	r3, #3
 8007dd6:	089b      	lsrs	r3, r3, #2
 8007dd8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007dda:	8afa      	ldrh	r2, [r7, #22]
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d90a      	bls.n	8007e00 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	619a      	str	r2, [r3, #24]
        }
        break;
 8007df6:	e003      	b.n	8007e00 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007df8:	bf00      	nop
 8007dfa:	e002      	b.n	8007e02 <USB_HC_StartXfer+0x4d2>
        break;
 8007dfc:	bf00      	nop
 8007dfe:	e000      	b.n	8007e02 <USB_HC_StartXfer+0x4d2>
        break;
 8007e00:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	6999      	ldr	r1, [r3, #24]
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	785a      	ldrb	r2, [r3, #1]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	2000      	movs	r0, #0
 8007e12:	9000      	str	r0, [sp, #0]
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f7ff f9d5 	bl	80071c4 <USB_WritePacket>
  }

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3728      	adds	r7, #40	@ 0x28
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	b29b      	uxth	r3, r3
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b089      	sub	sp, #36	@ 0x24
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	460b      	mov	r3, r1
 8007e50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007e56:	78fb      	ldrb	r3, [r7, #3]
 8007e58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	0c9b      	lsrs	r3, r3, #18
 8007e6e:	f003 0303 	and.w	r3, r3, #3
 8007e72:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	0fdb      	lsrs	r3, r3, #31
 8007e84:	f003 0301 	and.w	r3, r3, #1
 8007e88:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	015a      	lsls	r2, r3, #5
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	0fdb      	lsrs	r3, r3, #31
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	2b20      	cmp	r3, #32
 8007eaa:	d10d      	bne.n	8007ec8 <USB_HC_Halt+0x82>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10a      	bne.n	8007ec8 <USB_HC_Halt+0x82>
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d005      	beq.n	8007ec4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d002      	beq.n	8007ec4 <USB_HC_Halt+0x7e>
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	2b03      	cmp	r3, #3
 8007ec2:	d101      	bne.n	8007ec8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	e0d8      	b.n	800807a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <USB_HC_Halt+0x8e>
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d173      	bne.n	8007fbc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	0151      	lsls	r1, r2, #5
 8007ee6:	69fa      	ldr	r2, [r7, #28]
 8007ee8:	440a      	add	r2, r1
 8007eea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007eee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ef2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f003 0320 	and.w	r3, r3, #32
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d14a      	bne.n	8007f96 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d133      	bne.n	8007f74 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	0151      	lsls	r1, r2, #5
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	440a      	add	r2, r1
 8007f22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f2a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	69ba      	ldr	r2, [r7, #24]
 8007f3c:	0151      	lsls	r1, r2, #5
 8007f3e:	69fa      	ldr	r2, [r7, #28]
 8007f40:	440a      	add	r2, r1
 8007f42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f4a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f58:	d82e      	bhi.n	8007fb8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f70:	d0ec      	beq.n	8007f4c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f72:	e081      	b.n	8008078 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	0151      	lsls	r1, r2, #5
 8007f86:	69fa      	ldr	r2, [r7, #28]
 8007f88:	440a      	add	r2, r1
 8007f8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f92:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f94:	e070      	b.n	8008078 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	0151      	lsls	r1, r2, #5
 8007fa8:	69fa      	ldr	r2, [r7, #28]
 8007faa:	440a      	add	r2, r1
 8007fac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007fb4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fb6:	e05f      	b.n	8008078 <USB_HC_Halt+0x232>
            break;
 8007fb8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fba:	e05d      	b.n	8008078 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	0151      	lsls	r1, r2, #5
 8007fce:	69fa      	ldr	r2, [r7, #28]
 8007fd0:	440a      	add	r2, r1
 8007fd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fda:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d133      	bne.n	8008054 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	69ba      	ldr	r2, [r7, #24]
 8007ffc:	0151      	lsls	r1, r2, #5
 8007ffe:	69fa      	ldr	r2, [r7, #28]
 8008000:	440a      	add	r2, r1
 8008002:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008006:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800800a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	015a      	lsls	r2, r3, #5
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	4413      	add	r3, r2
 8008014:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	69ba      	ldr	r2, [r7, #24]
 800801c:	0151      	lsls	r1, r2, #5
 800801e:	69fa      	ldr	r2, [r7, #28]
 8008020:	440a      	add	r2, r1
 8008022:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008026:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800802a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	3301      	adds	r3, #1
 8008030:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008038:	d81d      	bhi.n	8008076 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	4413      	add	r3, r2
 8008042:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800804c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008050:	d0ec      	beq.n	800802c <USB_HC_Halt+0x1e6>
 8008052:	e011      	b.n	8008078 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	4413      	add	r3, r2
 800805c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	69ba      	ldr	r2, [r7, #24]
 8008064:	0151      	lsls	r1, r2, #5
 8008066:	69fa      	ldr	r2, [r7, #28]
 8008068:	440a      	add	r2, r1
 800806a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800806e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008072:	6013      	str	r3, [r2, #0]
 8008074:	e000      	b.n	8008078 <USB_HC_Halt+0x232>
          break;
 8008076:	bf00      	nop
    }
  }

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3724      	adds	r7, #36	@ 0x24
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
	...

08008088 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008098:	78fb      	ldrb	r3, [r7, #3]
 800809a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800809c:	2301      	movs	r3, #1
 800809e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	04da      	lsls	r2, r3, #19
 80080a4:	4b15      	ldr	r3, [pc, #84]	@ (80080fc <USB_DoPing+0x74>)
 80080a6:	4013      	ands	r3, r2
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	0151      	lsls	r1, r2, #5
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	440a      	add	r2, r1
 80080b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080b8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80080d0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080d8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	015a      	lsls	r2, r3, #5
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	4413      	add	r3, r2
 80080e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e6:	461a      	mov	r2, r3
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	1ff80000 	.word	0x1ff80000

08008100 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b088      	sub	sp, #32
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7fe ff98 	bl	800704a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800811a:	2110      	movs	r1, #16
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7fe fff1 	bl	8007104 <USB_FlushTxFifo>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d001      	beq.n	800812c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff f81b 	bl	8007168 <USB_FlushRxFifo>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800813c:	2300      	movs	r3, #0
 800813e:	61bb      	str	r3, [r7, #24]
 8008140:	e01f      	b.n	8008182 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	015a      	lsls	r2, r3, #5
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	4413      	add	r3, r2
 800814a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008158:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008160:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008168:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	4413      	add	r3, r2
 8008172:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008176:	461a      	mov	r2, r3
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	3301      	adds	r3, #1
 8008180:	61bb      	str	r3, [r7, #24]
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	2b0f      	cmp	r3, #15
 8008186:	d9dc      	bls.n	8008142 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008188:	2300      	movs	r3, #0
 800818a:	61bb      	str	r3, [r7, #24]
 800818c:	e034      	b.n	80081f8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	015a      	lsls	r2, r3, #5
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	4413      	add	r3, r2
 8008196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80081ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80081b4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081c2:	461a      	mov	r2, r3
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3301      	adds	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80081d4:	d80c      	bhi.n	80081f0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	015a      	lsls	r2, r3, #5
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	4413      	add	r3, r2
 80081de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081ec:	d0ec      	beq.n	80081c8 <USB_StopHost+0xc8>
 80081ee:	e000      	b.n	80081f2 <USB_StopHost+0xf2>
        break;
 80081f0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	3301      	adds	r3, #1
 80081f6:	61bb      	str	r3, [r7, #24]
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	2b0f      	cmp	r3, #15
 80081fc:	d9c7      	bls.n	800818e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008204:	461a      	mov	r2, r3
 8008206:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800820a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008212:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7fe ff07 	bl	8007028 <USB_EnableGlobalInt>

  return ret;
 800821a:	7ffb      	ldrb	r3, [r7, #31]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3720      	adds	r7, #32
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008224:	b590      	push	{r4, r7, lr}
 8008226:	b089      	sub	sp, #36	@ 0x24
 8008228:	af04      	add	r7, sp, #16
 800822a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800822c:	2301      	movs	r3, #1
 800822e:	2202      	movs	r2, #2
 8008230:	2102      	movs	r1, #2
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fcd7 	bl	8008be6 <USBH_FindInterface>
 8008238:	4603      	mov	r3, r0
 800823a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	2bff      	cmp	r3, #255	@ 0xff
 8008240:	d002      	beq.n	8008248 <USBH_CDC_InterfaceInit+0x24>
 8008242:	7bfb      	ldrb	r3, [r7, #15]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d901      	bls.n	800824c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008248:	2302      	movs	r3, #2
 800824a:	e13d      	b.n	80084c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800824c:	7bfb      	ldrb	r3, [r7, #15]
 800824e:	4619      	mov	r1, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fcac 	bl	8008bae <USBH_SelectInterface>
 8008256:	4603      	mov	r3, r0
 8008258:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800825a:	7bbb      	ldrb	r3, [r7, #14]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008260:	2302      	movs	r3, #2
 8008262:	e131      	b.n	80084c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800826a:	2050      	movs	r0, #80	@ 0x50
 800826c:	f005 f8ba 	bl	800d3e4 <malloc>
 8008270:	4603      	mov	r3, r0
 8008272:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008284:	2302      	movs	r3, #2
 8008286:	e11f      	b.n	80084c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008288:	2250      	movs	r2, #80	@ 0x50
 800828a:	2100      	movs	r1, #0
 800828c:	68b8      	ldr	r0, [r7, #8]
 800828e:	f005 f967 	bl	800d560 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008292:	7bfb      	ldrb	r3, [r7, #15]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	211a      	movs	r1, #26
 8008298:	fb01 f303 	mul.w	r3, r1, r3
 800829c:	4413      	add	r3, r2
 800829e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	b25b      	sxtb	r3, r3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	da15      	bge.n	80082d6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	211a      	movs	r1, #26
 80082b0:	fb01 f303 	mul.w	r3, r1, r3
 80082b4:	4413      	add	r3, r2
 80082b6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80082ba:	781a      	ldrb	r2, [r3, #0]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	211a      	movs	r1, #26
 80082c6:	fb01 f303 	mul.w	r3, r1, r3
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80082d0:	881a      	ldrh	r2, [r3, #0]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	785b      	ldrb	r3, [r3, #1]
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f002 fa1c 	bl	800a71a <USBH_AllocPipe>
 80082e2:	4603      	mov	r3, r0
 80082e4:	461a      	mov	r2, r3
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	7819      	ldrb	r1, [r3, #0]
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	7858      	ldrb	r0, [r3, #1]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	8952      	ldrh	r2, [r2, #10]
 8008302:	9202      	str	r2, [sp, #8]
 8008304:	2203      	movs	r2, #3
 8008306:	9201      	str	r2, [sp, #4]
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	4623      	mov	r3, r4
 800830c:	4602      	mov	r2, r0
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f002 f9d4 	bl	800a6bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2200      	movs	r2, #0
 800831a:	4619      	mov	r1, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f004 ffdb 	bl	800d2d8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008322:	2300      	movs	r3, #0
 8008324:	2200      	movs	r2, #0
 8008326:	210a      	movs	r1, #10
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fc5c 	bl	8008be6 <USBH_FindInterface>
 800832e:	4603      	mov	r3, r0
 8008330:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008332:	7bfb      	ldrb	r3, [r7, #15]
 8008334:	2bff      	cmp	r3, #255	@ 0xff
 8008336:	d002      	beq.n	800833e <USBH_CDC_InterfaceInit+0x11a>
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d901      	bls.n	8008342 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800833e:	2302      	movs	r3, #2
 8008340:	e0c2      	b.n	80084c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	211a      	movs	r1, #26
 8008348:	fb01 f303 	mul.w	r3, r1, r3
 800834c:	4413      	add	r3, r2
 800834e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	b25b      	sxtb	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	da16      	bge.n	8008388 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	211a      	movs	r1, #26
 8008360:	fb01 f303 	mul.w	r3, r1, r3
 8008364:	4413      	add	r3, r2
 8008366:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800836a:	781a      	ldrb	r2, [r3, #0]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	211a      	movs	r1, #26
 8008376:	fb01 f303 	mul.w	r3, r1, r3
 800837a:	4413      	add	r3, r2
 800837c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008380:	881a      	ldrh	r2, [r3, #0]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	835a      	strh	r2, [r3, #26]
 8008386:	e015      	b.n	80083b4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008388:	7bfb      	ldrb	r3, [r7, #15]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	211a      	movs	r1, #26
 800838e:	fb01 f303 	mul.w	r3, r1, r3
 8008392:	4413      	add	r3, r2
 8008394:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008398:	781a      	ldrb	r2, [r3, #0]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	211a      	movs	r1, #26
 80083a4:	fb01 f303 	mul.w	r3, r1, r3
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80083ae:	881a      	ldrh	r2, [r3, #0]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	211a      	movs	r1, #26
 80083ba:	fb01 f303 	mul.w	r3, r1, r3
 80083be:	4413      	add	r3, r2
 80083c0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	b25b      	sxtb	r3, r3
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	da16      	bge.n	80083fa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	211a      	movs	r1, #26
 80083d2:	fb01 f303 	mul.w	r3, r1, r3
 80083d6:	4413      	add	r3, r2
 80083d8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80083dc:	781a      	ldrb	r2, [r3, #0]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	211a      	movs	r1, #26
 80083e8:	fb01 f303 	mul.w	r3, r1, r3
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80083f2:	881a      	ldrh	r2, [r3, #0]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	835a      	strh	r2, [r3, #26]
 80083f8:	e015      	b.n	8008426 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	211a      	movs	r1, #26
 8008400:	fb01 f303 	mul.w	r3, r1, r3
 8008404:	4413      	add	r3, r2
 8008406:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800840a:	781a      	ldrb	r2, [r3, #0]
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	211a      	movs	r1, #26
 8008416:	fb01 f303 	mul.w	r3, r1, r3
 800841a:	4413      	add	r3, r2
 800841c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008420:	881a      	ldrh	r2, [r3, #0]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	7b9b      	ldrb	r3, [r3, #14]
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f002 f974 	bl	800a71a <USBH_AllocPipe>
 8008432:	4603      	mov	r3, r0
 8008434:	461a      	mov	r2, r3
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	7bdb      	ldrb	r3, [r3, #15]
 800843e:	4619      	mov	r1, r3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f002 f96a 	bl	800a71a <USBH_AllocPipe>
 8008446:	4603      	mov	r3, r0
 8008448:	461a      	mov	r2, r3
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	7b59      	ldrb	r1, [r3, #13]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	7b98      	ldrb	r0, [r3, #14]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	8b12      	ldrh	r2, [r2, #24]
 8008466:	9202      	str	r2, [sp, #8]
 8008468:	2202      	movs	r2, #2
 800846a:	9201      	str	r2, [sp, #4]
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	4623      	mov	r3, r4
 8008470:	4602      	mov	r2, r0
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f002 f922 	bl	800a6bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	7b19      	ldrb	r1, [r3, #12]
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	7bd8      	ldrb	r0, [r3, #15]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	8b52      	ldrh	r2, [r2, #26]
 8008490:	9202      	str	r2, [sp, #8]
 8008492:	2202      	movs	r2, #2
 8008494:	9201      	str	r2, [sp, #4]
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	4623      	mov	r3, r4
 800849a:	4602      	mov	r2, r0
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f002 f90d 	bl	800a6bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	7b5b      	ldrb	r3, [r3, #13]
 80084ae:	2200      	movs	r2, #0
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f004 ff10 	bl	800d2d8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	7b1b      	ldrb	r3, [r3, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f004 ff09 	bl	800d2d8 <USBH_LL_SetToggle>

  return USBH_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd90      	pop	{r4, r7, pc}

080084d0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084de:	69db      	ldr	r3, [r3, #28]
 80084e0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00e      	beq.n	8008508 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f002 f902 	bl	800a6fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f002 f92d 	bl	800a75c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	7b1b      	ldrb	r3, [r3, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00e      	beq.n	800852e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	7b1b      	ldrb	r3, [r3, #12]
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f002 f8ef 	bl	800a6fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	7b1b      	ldrb	r3, [r3, #12]
 8008520:	4619      	mov	r1, r3
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f002 f91a 	bl	800a75c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	7b5b      	ldrb	r3, [r3, #13]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00e      	beq.n	8008554 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	7b5b      	ldrb	r3, [r3, #13]
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f002 f8dc 	bl	800a6fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	7b5b      	ldrb	r3, [r3, #13]
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f002 f907 	bl	800a75c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00b      	beq.n	8008578 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	4618      	mov	r0, r3
 800856a:	f004 ff43 	bl	800d3f4 <free>
    phost->pActiveClass->pData = 0U;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008574:	2200      	movs	r2, #0
 8008576:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	3340      	adds	r3, #64	@ 0x40
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f8b1 	bl	8008702 <GetLineCoding>
 80085a0:	4603      	mov	r3, r0
 80085a2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80085a4:	7afb      	ldrb	r3, [r7, #11]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d105      	bne.n	80085b6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80085b0:	2102      	movs	r1, #2
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80085b6:	7afb      	ldrb	r3, [r7, #11]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80085c8:	2301      	movs	r3, #1
 80085ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085d6:	69db      	ldr	r3, [r3, #28]
 80085d8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80085e0:	2b04      	cmp	r3, #4
 80085e2:	d877      	bhi.n	80086d4 <USBH_CDC_Process+0x114>
 80085e4:	a201      	add	r2, pc, #4	@ (adr r2, 80085ec <USBH_CDC_Process+0x2c>)
 80085e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ea:	bf00      	nop
 80085ec:	08008601 	.word	0x08008601
 80085f0:	08008607 	.word	0x08008607
 80085f4:	08008637 	.word	0x08008637
 80085f8:	080086ab 	.word	0x080086ab
 80085fc:	080086b9 	.word	0x080086b9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	73fb      	strb	r3, [r7, #15]
      break;
 8008604:	e06d      	b.n	80086e2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f897 	bl	8008740 <SetLineCoding>
 8008612:	4603      	mov	r3, r0
 8008614:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008616:	7bbb      	ldrb	r3, [r7, #14]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d104      	bne.n	8008626 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008624:	e058      	b.n	80086d8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d055      	beq.n	80086d8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2204      	movs	r2, #4
 8008630:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008634:	e050      	b.n	80086d8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	3340      	adds	r3, #64	@ 0x40
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f860 	bl	8008702 <GetLineCoding>
 8008642:	4603      	mov	r3, r0
 8008644:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008646:	7bbb      	ldrb	r3, [r7, #14]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d126      	bne.n	800869a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800865e:	791b      	ldrb	r3, [r3, #4]
 8008660:	429a      	cmp	r2, r3
 8008662:	d13b      	bne.n	80086dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800866e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008670:	429a      	cmp	r2, r3
 8008672:	d133      	bne.n	80086dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800867e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008680:	429a      	cmp	r2, r3
 8008682:	d12b      	bne.n	80086dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800868c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800868e:	429a      	cmp	r2, r3
 8008690:	d124      	bne.n	80086dc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f982 	bl	800899c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008698:	e020      	b.n	80086dc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800869a:	7bbb      	ldrb	r3, [r7, #14]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d01d      	beq.n	80086dc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2204      	movs	r2, #4
 80086a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80086a8:	e018      	b.n	80086dc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f867 	bl	800877e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f8f6 	bl	80088a2 <CDC_ProcessReception>
      break;
 80086b6:	e014      	b.n	80086e2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80086b8:	2100      	movs	r1, #0
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f001 f988 	bl	80099d0 <USBH_ClrFeature>
 80086c0:	4603      	mov	r3, r0
 80086c2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10a      	bne.n	80086e0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80086d2:	e005      	b.n	80086e0 <USBH_CDC_Process+0x120>

    default:
      break;
 80086d4:	bf00      	nop
 80086d6:	e004      	b.n	80086e2 <USBH_CDC_Process+0x122>
      break;
 80086d8:	bf00      	nop
 80086da:	e002      	b.n	80086e2 <USBH_CDC_Process+0x122>
      break;
 80086dc:	bf00      	nop
 80086de:	e000      	b.n	80086e2 <USBH_CDC_Process+0x122>
      break;
 80086e0:	bf00      	nop

  }

  return status;
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	22a1      	movs	r2, #161	@ 0xa1
 8008710:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2221      	movs	r2, #33	@ 0x21
 8008716:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2207      	movs	r2, #7
 8008728:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2207      	movs	r2, #7
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f001 fc82 	bl	800a03a <USBH_CtlReq>
 8008736:	4603      	mov	r3, r0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2221      	movs	r2, #33	@ 0x21
 800874e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2220      	movs	r2, #32
 8008754:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2207      	movs	r2, #7
 8008766:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	2207      	movs	r2, #7
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f001 fc63 	bl	800a03a <USBH_CtlReq>
 8008774:	4603      	mov	r3, r0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b086      	sub	sp, #24
 8008782:	af02      	add	r7, sp, #8
 8008784:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008790:	2300      	movs	r3, #0
 8008792:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800879a:	2b01      	cmp	r3, #1
 800879c:	d002      	beq.n	80087a4 <CDC_ProcessTransmission+0x26>
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d023      	beq.n	80087ea <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80087a2:	e07a      	b.n	800889a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	8b12      	ldrh	r2, [r2, #24]
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d90b      	bls.n	80087c8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	69d9      	ldr	r1, [r3, #28]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	8b1a      	ldrh	r2, [r3, #24]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	7b5b      	ldrb	r3, [r3, #13]
 80087bc:	2001      	movs	r0, #1
 80087be:	9000      	str	r0, [sp, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f001 ff38 	bl	800a636 <USBH_BulkSendData>
 80087c6:	e00b      	b.n	80087e0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	7b5b      	ldrb	r3, [r3, #13]
 80087d6:	2001      	movs	r0, #1
 80087d8:	9000      	str	r0, [sp, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f001 ff2b 	bl	800a636 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2202      	movs	r2, #2
 80087e4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80087e8:	e057      	b.n	800889a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	7b5b      	ldrb	r3, [r3, #13]
 80087ee:	4619      	mov	r1, r3
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f004 fd47 	bl	800d284 <USBH_LL_GetURBState>
 80087f6:	4603      	mov	r3, r0
 80087f8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80087fa:	7afb      	ldrb	r3, [r7, #11]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d136      	bne.n	800886e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	8b12      	ldrh	r2, [r2, #24]
 8008808:	4293      	cmp	r3, r2
 800880a:	d90e      	bls.n	800882a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	8b12      	ldrh	r2, [r2, #24]
 8008814:	1a9a      	subs	r2, r3, r2
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	8b12      	ldrh	r2, [r2, #24]
 8008822:	441a      	add	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	61da      	str	r2, [r3, #28]
 8008828:	e002      	b.n	8008830 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008834:	2b00      	cmp	r3, #0
 8008836:	d004      	beq.n	8008842 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8008840:	e006      	b.n	8008850 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f892 	bl	8008974 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2204      	movs	r2, #4
 8008854:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008864:	2200      	movs	r2, #0
 8008866:	4619      	mov	r1, r3
 8008868:	f002 f874 	bl	800a954 <osMessagePut>
      break;
 800886c:	e014      	b.n	8008898 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800886e:	7afb      	ldrb	r3, [r7, #11]
 8008870:	2b02      	cmp	r3, #2
 8008872:	d111      	bne.n	8008898 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2204      	movs	r2, #4
 8008880:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008890:	2200      	movs	r2, #0
 8008892:	4619      	mov	r1, r3
 8008894:	f002 f85e 	bl	800a954 <osMessagePut>
      break;
 8008898:	bf00      	nop
  }
}
 800889a:	bf00      	nop
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b086      	sub	sp, #24
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80088b4:	2300      	movs	r3, #0
 80088b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80088be:	2b03      	cmp	r3, #3
 80088c0:	d002      	beq.n	80088c8 <CDC_ProcessReception+0x26>
 80088c2:	2b04      	cmp	r3, #4
 80088c4:	d00e      	beq.n	80088e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80088c6:	e051      	b.n	800896c <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	6a19      	ldr	r1, [r3, #32]
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	8b5a      	ldrh	r2, [r3, #26]
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	7b1b      	ldrb	r3, [r3, #12]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f001 fed3 	bl	800a680 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2204      	movs	r2, #4
 80088de:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80088e2:	e043      	b.n	800896c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	7b1b      	ldrb	r3, [r3, #12]
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f004 fcca 	bl	800d284 <USBH_LL_GetURBState>
 80088f0:	4603      	mov	r3, r0
 80088f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80088f4:	7cfb      	ldrb	r3, [r7, #19]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d137      	bne.n	800896a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	7b1b      	ldrb	r3, [r3, #12]
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f004 fc2d 	bl	800d160 <USBH_LL_GetLastXferSize>
 8008906:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	429a      	cmp	r2, r3
 8008910:	d016      	beq.n	8008940 <CDC_ProcessReception+0x9e>
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	8b5b      	ldrh	r3, [r3, #26]
 8008916:	461a      	mov	r2, r3
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4293      	cmp	r3, r2
 800891c:	d110      	bne.n	8008940 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	1ad2      	subs	r2, r2, r3
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	6a1a      	ldr	r2, [r3, #32]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	441a      	add	r2, r3
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2203      	movs	r2, #3
 800893a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800893e:	e006      	b.n	800894e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f81d 	bl	8008988 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2204      	movs	r2, #4
 8008952:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008962:	2200      	movs	r2, #0
 8008964:	4619      	mov	r1, r3
 8008966:	f001 fff5 	bl	800a954 <osMessagePut>
      break;
 800896a:	bf00      	nop
  }
}
 800896c:	bf00      	nop
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80089a4:	bf00      	nop
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80089b0:	b5b0      	push	{r4, r5, r7, lr}
 80089b2:	b090      	sub	sp, #64	@ 0x40
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	4613      	mov	r3, r2
 80089bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d101      	bne.n	80089c8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80089c4:	2302      	movs	r3, #2
 80089c6:	e04d      	b.n	8008a64 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	79fa      	ldrb	r2, [r7, #7]
 80089cc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f000 f847 	bl	8008a74 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8008a14:	4b15      	ldr	r3, [pc, #84]	@ (8008a6c <USBH_Init+0xbc>)
 8008a16:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8008a1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008a1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8008a20:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008a24:	2100      	movs	r1, #0
 8008a26:	4618      	mov	r0, r3
 8008a28:	f001 ff6b 	bl	800a902 <osMessageCreate>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8008a34:	4b0e      	ldr	r3, [pc, #56]	@ (8008a70 <USBH_Init+0xc0>)
 8008a36:	f107 0414 	add.w	r4, r7, #20
 8008a3a:	461d      	mov	r5, r3
 8008a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8008a48:	f107 0314 	add.w	r3, r7, #20
 8008a4c:	68f9      	ldr	r1, [r7, #12]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f001 fef7 	bl	800a842 <osThreadCreate>
 8008a54:	4602      	mov	r2, r0
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f004 facb 	bl	800cff8 <USBH_LL_Init>

  return USBH_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3740      	adds	r7, #64	@ 0x40
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8008a6c:	0800d6ec 	.word	0x0800d6ec
 8008a70:	0800d708 	.word	0x0800d708

08008a74 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008a80:	2300      	movs	r3, #0
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	e009      	b.n	8008a9a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	33e0      	adds	r3, #224	@ 0xe0
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	2200      	movs	r2, #0
 8008a92:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	3301      	adds	r3, #1
 8008a98:	60fb      	str	r3, [r7, #12]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2b0f      	cmp	r3, #15
 8008a9e:	d9f2      	bls.n	8008a86 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60fb      	str	r3, [r7, #12]
 8008aa4:	e009      	b.n	8008aba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	60fb      	str	r3, [r7, #12]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ac0:	d3f1      	bcc.n	8008aa6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2240      	movs	r2, #64	@ 0x40
 8008ae6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	331c      	adds	r3, #28
 8008b12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b16:	2100      	movs	r1, #0
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f004 fd21 	bl	800d560 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008b24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b28:	2100      	movs	r1, #0
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f004 fd18 	bl	800d560 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008b36:	2212      	movs	r2, #18
 8008b38:	2100      	movs	r1, #0
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f004 fd10 	bl	800d560 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008b46:	223e      	movs	r2, #62	@ 0x3e
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f004 fd08 	bl	800d560 <memset>

  return USBH_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b085      	sub	sp, #20
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d016      	beq.n	8008b9c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10e      	bne.n	8008b96 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008b7e:	1c59      	adds	r1, r3, #1
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	33de      	adds	r3, #222	@ 0xde
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]
 8008b94:	e004      	b.n	8008ba0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008b96:	2302      	movs	r3, #2
 8008b98:	73fb      	strb	r3, [r7, #15]
 8008b9a:	e001      	b.n	8008ba0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b085      	sub	sp, #20
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008bc4:	78fa      	ldrb	r2, [r7, #3]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d204      	bcs.n	8008bd4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	78fa      	ldrb	r2, [r7, #3]
 8008bce:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008bd2:	e001      	b.n	8008bd8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b087      	sub	sp, #28
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	4608      	mov	r0, r1
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	70fb      	strb	r3, [r7, #3]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70bb      	strb	r3, [r7, #2]
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008c04:	2300      	movs	r3, #0
 8008c06:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008c0e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008c10:	e025      	b.n	8008c5e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	221a      	movs	r2, #26
 8008c16:	fb02 f303 	mul.w	r3, r2, r3
 8008c1a:	3308      	adds	r3, #8
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	4413      	add	r3, r2
 8008c20:	3302      	adds	r3, #2
 8008c22:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	795b      	ldrb	r3, [r3, #5]
 8008c28:	78fa      	ldrb	r2, [r7, #3]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d002      	beq.n	8008c34 <USBH_FindInterface+0x4e>
 8008c2e:	78fb      	ldrb	r3, [r7, #3]
 8008c30:	2bff      	cmp	r3, #255	@ 0xff
 8008c32:	d111      	bne.n	8008c58 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008c38:	78ba      	ldrb	r2, [r7, #2]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d002      	beq.n	8008c44 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c3e:	78bb      	ldrb	r3, [r7, #2]
 8008c40:	2bff      	cmp	r3, #255	@ 0xff
 8008c42:	d109      	bne.n	8008c58 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c48:	787a      	ldrb	r2, [r7, #1]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d002      	beq.n	8008c54 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008c4e:	787b      	ldrb	r3, [r7, #1]
 8008c50:	2bff      	cmp	r3, #255	@ 0xff
 8008c52:	d101      	bne.n	8008c58 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	e006      	b.n	8008c66 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008c58:	7dfb      	ldrb	r3, [r7, #23]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d9d6      	bls.n	8008c12 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008c64:	23ff      	movs	r3, #255	@ 0xff
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	371c      	adds	r7, #28
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b082      	sub	sp, #8
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f004 f9f8 	bl	800d070 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008c80:	2101      	movs	r1, #1
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f004 fb11 	bl	800d2aa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
	...

08008c94 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b088      	sub	sp, #32
 8008c98:	af04      	add	r7, sp, #16
 8008c9a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d102      	bne.n	8008cb6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b0b      	cmp	r3, #11
 8008cbe:	f200 8244 	bhi.w	800914a <USBH_Process+0x4b6>
 8008cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8008cc8 <USBH_Process+0x34>)
 8008cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc8:	08008cf9 	.word	0x08008cf9
 8008ccc:	08008d47 	.word	0x08008d47
 8008cd0:	08008dcb 	.word	0x08008dcb
 8008cd4:	080090c9 	.word	0x080090c9
 8008cd8:	0800914b 	.word	0x0800914b
 8008cdc:	08008e87 	.word	0x08008e87
 8008ce0:	08009053 	.word	0x08009053
 8008ce4:	08008ed9 	.word	0x08008ed9
 8008ce8:	08008f15 	.word	0x08008f15
 8008cec:	08008f4d 	.word	0x08008f4d
 8008cf0:	08008fab 	.word	0x08008fab
 8008cf4:	080090b1 	.word	0x080090b1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 8224 	beq.w	800914e <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008d0c:	20c8      	movs	r0, #200	@ 0xc8
 8008d0e:	f004 fb16 	bl	800d33e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f004 fa09 	bl	800d12a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	4619      	mov	r1, r3
 8008d40:	f001 fe08 	bl	800a954 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d44:	e203      	b.n	800914e <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d107      	bne.n	8008d60 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	701a      	strb	r2, [r3, #0]
 8008d5e:	e025      	b.n	8008dac <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008d66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d6a:	d914      	bls.n	8008d96 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008d72:	3301      	adds	r3, #1
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	d903      	bls.n	8008d8e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	220d      	movs	r2, #13
 8008d8a:	701a      	strb	r2, [r3, #0]
 8008d8c:	e00e      	b.n	8008dac <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	701a      	strb	r2, [r3, #0]
 8008d94:	e00a      	b.n	8008dac <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008d9c:	f103 020a 	add.w	r2, r3, #10
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008da6:	200a      	movs	r0, #10
 8008da8:	f004 fac9 	bl	800d33e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	f001 fdc6 	bl	800a954 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008dc8:	e1c8      	b.n	800915c <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008dda:	2104      	movs	r1, #4
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008de0:	2064      	movs	r0, #100	@ 0x64
 8008de2:	f004 faac 	bl	800d33e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f004 f978 	bl	800d0dc <USBH_LL_GetSpeed>
 8008dec:	4603      	mov	r3, r0
 8008dee:	461a      	mov	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2205      	movs	r2, #5
 8008dfa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f001 fc8b 	bl	800a71a <USBH_AllocPipe>
 8008e04:	4603      	mov	r3, r0
 8008e06:	461a      	mov	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008e0c:	2180      	movs	r1, #128	@ 0x80
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f001 fc83 	bl	800a71a <USBH_AllocPipe>
 8008e14:	4603      	mov	r3, r0
 8008e16:	461a      	mov	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	7919      	ldrb	r1, [r3, #4]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008e30:	9202      	str	r2, [sp, #8]
 8008e32:	2200      	movs	r2, #0
 8008e34:	9201      	str	r2, [sp, #4]
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2280      	movs	r2, #128	@ 0x80
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f001 fc3d 	bl	800a6bc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	7959      	ldrb	r1, [r3, #5]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008e56:	9202      	str	r2, [sp, #8]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	9201      	str	r2, [sp, #4]
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2200      	movs	r2, #0
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f001 fc2a 	bl	800a6bc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4619      	mov	r1, r3
 8008e80:	f001 fd68 	bl	800a954 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e84:	e16a      	b.n	800915c <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f96e 	bl	8009168 <USBH_HandleEnum>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f040 815c 	bne.w	8009152 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d103      	bne.n	8008eb4 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2208      	movs	r2, #8
 8008eb0:	701a      	strb	r2, [r3, #0]
 8008eb2:	e002      	b.n	8008eba <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2207      	movs	r2, #7
 8008eb8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2205      	movs	r2, #5
 8008ebe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008ece:	2200      	movs	r2, #0
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	f001 fd3f 	bl	800a954 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ed6:	e13c      	b.n	8009152 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f000 8139 	beq.w	8009156 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008eea:	2101      	movs	r1, #1
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2208      	movs	r2, #8
 8008ef4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2205      	movs	r2, #5
 8008efa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	f001 fd21 	bl	800a954 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008f12:	e120      	b.n	8009156 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fd10 	bl	8009942 <USBH_SetCfg>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d102      	bne.n	8008f2e <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2209      	movs	r2, #9
 8008f2c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008f42:	2200      	movs	r2, #0
 8008f44:	4619      	mov	r1, r3
 8008f46:	f001 fd05 	bl	800a954 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f4a:	e107      	b.n	800915c <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008f52:	f003 0320 	and.w	r3, r3, #32
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d015      	beq.n	8008f86 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fd13 	bl	8009988 <USBH_SetFeature>
 8008f62:	4603      	mov	r3, r0
 8008f64:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d103      	bne.n	8008f76 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	220a      	movs	r2, #10
 8008f72:	701a      	strb	r2, [r3, #0]
 8008f74:	e00a      	b.n	8008f8c <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b03      	cmp	r3, #3
 8008f7c:	d106      	bne.n	8008f8c <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	220a      	movs	r2, #10
 8008f82:	701a      	strb	r2, [r3, #0]
 8008f84:	e002      	b.n	8008f8c <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	220a      	movs	r2, #10
 8008f8a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	f001 fcd6 	bl	800a954 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008fa8:	e0d8      	b.n	800915c <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d03f      	beq.n	8009034 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	73fb      	strb	r3, [r7, #15]
 8008fc0:	e016      	b.n	8008ff0 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008fc2:	7bfa      	ldrb	r2, [r7, #15]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	32de      	adds	r2, #222	@ 0xde
 8008fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fcc:	791a      	ldrb	r2, [r3, #4]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d108      	bne.n	8008fea <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008fd8:	7bfa      	ldrb	r2, [r7, #15]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	32de      	adds	r2, #222	@ 0xde
 8008fde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008fe8:	e005      	b.n	8008ff6 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008fea:	7bfb      	ldrb	r3, [r7, #15]
 8008fec:	3301      	adds	r3, #1
 8008fee:	73fb      	strb	r3, [r7, #15]
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0e5      	beq.n	8008fc2 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d016      	beq.n	800902e <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	4798      	blx	r3
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d109      	bne.n	8009026 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2206      	movs	r2, #6
 8009016:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800901e:	2103      	movs	r1, #3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	4798      	blx	r3
 8009024:	e006      	b.n	8009034 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	220d      	movs	r2, #13
 800902a:	701a      	strb	r2, [r3, #0]
 800902c:	e002      	b.n	8009034 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	220d      	movs	r2, #13
 8009032:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2205      	movs	r2, #5
 8009038:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009048:	2200      	movs	r2, #0
 800904a:	4619      	mov	r1, r3
 800904c:	f001 fc82 	bl	800a954 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009050:	e084      	b.n	800915c <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009058:	2b00      	cmp	r3, #0
 800905a:	d017      	beq.n	800908c <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	4798      	blx	r3
 8009068:	4603      	mov	r3, r0
 800906a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b00      	cmp	r3, #0
 8009072:	d103      	bne.n	800907c <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	220b      	movs	r2, #11
 8009078:	701a      	strb	r2, [r3, #0]
 800907a:	e00a      	b.n	8009092 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800907c:	7bbb      	ldrb	r3, [r7, #14]
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b02      	cmp	r3, #2
 8009082:	d106      	bne.n	8009092 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	220d      	movs	r2, #13
 8009088:	701a      	strb	r2, [r3, #0]
 800908a:	e002      	b.n	8009092 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	220d      	movs	r2, #13
 8009090:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2205      	movs	r2, #5
 8009096:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80090a6:	2200      	movs	r2, #0
 80090a8:	4619      	mov	r1, r3
 80090aa:	f001 fc53 	bl	800a954 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090ae:	e055      	b.n	800915c <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d04f      	beq.n	800915a <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	4798      	blx	r3
      }
      break;
 80090c6:	e048      	b.n	800915a <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7ff fccf 	bl	8008a74 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d009      	beq.n	80090f4 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d005      	beq.n	800910a <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009104:	2105      	movs	r1, #5
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b01      	cmp	r3, #1
 8009114:	d107      	bne.n	8009126 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7ff fda7 	bl	8008c72 <USBH_Start>
 8009124:	e002      	b.n	800912c <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f003 ffa2 	bl	800d070 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009140:	2200      	movs	r2, #0
 8009142:	4619      	mov	r1, r3
 8009144:	f001 fc06 	bl	800a954 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009148:	e008      	b.n	800915c <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800914a:	bf00      	nop
 800914c:	e006      	b.n	800915c <USBH_Process+0x4c8>
      break;
 800914e:	bf00      	nop
 8009150:	e004      	b.n	800915c <USBH_Process+0x4c8>
      break;
 8009152:	bf00      	nop
 8009154:	e002      	b.n	800915c <USBH_Process+0x4c8>
    break;
 8009156:	bf00      	nop
 8009158:	e000      	b.n	800915c <USBH_Process+0x4c8>
      break;
 800915a:	bf00      	nop
  }
  return USBH_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop

08009168 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b088      	sub	sp, #32
 800916c:	af04      	add	r7, sp, #16
 800916e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009170:	2301      	movs	r3, #1
 8009172:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009174:	2301      	movs	r3, #1
 8009176:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	785b      	ldrb	r3, [r3, #1]
 800917c:	2b07      	cmp	r3, #7
 800917e:	f200 8204 	bhi.w	800958a <USBH_HandleEnum+0x422>
 8009182:	a201      	add	r2, pc, #4	@ (adr r2, 8009188 <USBH_HandleEnum+0x20>)
 8009184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009188:	080091a9 	.word	0x080091a9
 800918c:	08009263 	.word	0x08009263
 8009190:	080092cd 	.word	0x080092cd
 8009194:	08009357 	.word	0x08009357
 8009198:	080093c1 	.word	0x080093c1
 800919c:	08009431 	.word	0x08009431
 80091a0:	080094cd 	.word	0x080094cd
 80091a4:	0800954b 	.word	0x0800954b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80091a8:	2108      	movs	r1, #8
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fae6 	bl	800977c <USBH_Get_DevDesc>
 80091b0:	4603      	mov	r3, r0
 80091b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091b4:	7bbb      	ldrb	r3, [r7, #14]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d12e      	bne.n	8009218 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	7919      	ldrb	r1, [r3, #4]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80091de:	9202      	str	r2, [sp, #8]
 80091e0:	2200      	movs	r2, #0
 80091e2:	9201      	str	r2, [sp, #4]
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	4603      	mov	r3, r0
 80091e8:	2280      	movs	r2, #128	@ 0x80
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f001 fa66 	bl	800a6bc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	7959      	ldrb	r1, [r3, #5]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009204:	9202      	str	r2, [sp, #8]
 8009206:	2200      	movs	r2, #0
 8009208:	9201      	str	r2, [sp, #4]
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	4603      	mov	r3, r0
 800920e:	2200      	movs	r2, #0
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f001 fa53 	bl	800a6bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009216:	e1ba      	b.n	800958e <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009218:	7bbb      	ldrb	r3, [r7, #14]
 800921a:	2b03      	cmp	r3, #3
 800921c:	f040 81b7 	bne.w	800958e <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009226:	3301      	adds	r3, #1
 8009228:	b2da      	uxtb	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009236:	2b03      	cmp	r3, #3
 8009238:	d903      	bls.n	8009242 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	220d      	movs	r2, #13
 800923e:	701a      	strb	r2, [r3, #0]
      break;
 8009240:	e1a5      	b.n	800958e <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	795b      	ldrb	r3, [r3, #5]
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 fa87 	bl	800a75c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	791b      	ldrb	r3, [r3, #4]
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f001 fa81 	bl	800a75c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	701a      	strb	r2, [r3, #0]
      break;
 8009260:	e195      	b.n	800958e <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009262:	2112      	movs	r1, #18
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fa89 	bl	800977c <USBH_Get_DevDesc>
 800926a:	4603      	mov	r3, r0
 800926c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d103      	bne.n	800927c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2202      	movs	r2, #2
 8009278:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800927a:	e18a      	b.n	8009592 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	2b03      	cmp	r3, #3
 8009280:	f040 8187 	bne.w	8009592 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800928a:	3301      	adds	r3, #1
 800928c:	b2da      	uxtb	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800929a:	2b03      	cmp	r3, #3
 800929c:	d903      	bls.n	80092a6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	220d      	movs	r2, #13
 80092a2:	701a      	strb	r2, [r3, #0]
      break;
 80092a4:	e175      	b.n	8009592 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	795b      	ldrb	r3, [r3, #5]
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f001 fa55 	bl	800a75c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	791b      	ldrb	r3, [r3, #4]
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f001 fa4f 	bl	800a75c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	701a      	strb	r2, [r3, #0]
      break;
 80092ca:	e162      	b.n	8009592 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80092cc:	2101      	movs	r1, #1
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fb13 	bl	80098fa <USBH_SetAddress>
 80092d4:	4603      	mov	r3, r0
 80092d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d130      	bne.n	8009340 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80092de:	2002      	movs	r0, #2
 80092e0:	f004 f82d 	bl	800d33e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2203      	movs	r2, #3
 80092f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	7919      	ldrb	r1, [r3, #4]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009306:	9202      	str	r2, [sp, #8]
 8009308:	2200      	movs	r2, #0
 800930a:	9201      	str	r2, [sp, #4]
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	4603      	mov	r3, r0
 8009310:	2280      	movs	r2, #128	@ 0x80
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f001 f9d2 	bl	800a6bc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	7959      	ldrb	r1, [r3, #5]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800932c:	9202      	str	r2, [sp, #8]
 800932e:	2200      	movs	r2, #0
 8009330:	9201      	str	r2, [sp, #4]
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	4603      	mov	r3, r0
 8009336:	2200      	movs	r2, #0
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f001 f9bf 	bl	800a6bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800933e:	e12a      	b.n	8009596 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	2b03      	cmp	r3, #3
 8009344:	f040 8127 	bne.w	8009596 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	220d      	movs	r2, #13
 800934c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	705a      	strb	r2, [r3, #1]
      break;
 8009354:	e11f      	b.n	8009596 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009356:	2109      	movs	r1, #9
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fa3b 	bl	80097d4 <USBH_Get_CfgDesc>
 800935e:	4603      	mov	r3, r0
 8009360:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009362:	7bbb      	ldrb	r3, [r7, #14]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d103      	bne.n	8009370 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2204      	movs	r2, #4
 800936c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800936e:	e114      	b.n	800959a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009370:	7bbb      	ldrb	r3, [r7, #14]
 8009372:	2b03      	cmp	r3, #3
 8009374:	f040 8111 	bne.w	800959a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800937e:	3301      	adds	r3, #1
 8009380:	b2da      	uxtb	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800938e:	2b03      	cmp	r3, #3
 8009390:	d903      	bls.n	800939a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	220d      	movs	r2, #13
 8009396:	701a      	strb	r2, [r3, #0]
      break;
 8009398:	e0ff      	b.n	800959a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	795b      	ldrb	r3, [r3, #5]
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f001 f9db 	bl	800a75c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	791b      	ldrb	r3, [r3, #4]
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f001 f9d5 	bl	800a75c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	701a      	strb	r2, [r3, #0]
      break;
 80093be:	e0ec      	b.n	800959a <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fa03 	bl	80097d4 <USBH_Get_CfgDesc>
 80093ce:	4603      	mov	r3, r0
 80093d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093d2:	7bbb      	ldrb	r3, [r7, #14]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d103      	bne.n	80093e0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2205      	movs	r2, #5
 80093dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80093de:	e0de      	b.n	800959e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093e0:	7bbb      	ldrb	r3, [r7, #14]
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	f040 80db 	bne.w	800959e <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80093ee:	3301      	adds	r3, #1
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80093fe:	2b03      	cmp	r3, #3
 8009400:	d903      	bls.n	800940a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	220d      	movs	r2, #13
 8009406:	701a      	strb	r2, [r3, #0]
      break;
 8009408:	e0c9      	b.n	800959e <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	795b      	ldrb	r3, [r3, #5]
 800940e:	4619      	mov	r1, r3
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f001 f9a3 	bl	800a75c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	791b      	ldrb	r3, [r3, #4]
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f001 f99d 	bl	800a75c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	701a      	strb	r2, [r3, #0]
      break;
 800942e:	e0b6      	b.n	800959e <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009436:	2b00      	cmp	r3, #0
 8009438:	d036      	beq.n	80094a8 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009446:	23ff      	movs	r3, #255	@ 0xff
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 f9ed 	bl	8009828 <USBH_Get_StringDesc>
 800944e:	4603      	mov	r3, r0
 8009450:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009452:	7bbb      	ldrb	r3, [r7, #14]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d111      	bne.n	800947c <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2206      	movs	r2, #6
 800945c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2205      	movs	r2, #5
 8009462:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009472:	2200      	movs	r2, #0
 8009474:	4619      	mov	r1, r3
 8009476:	f001 fa6d 	bl	800a954 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800947a:	e092      	b.n	80095a2 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800947c:	7bbb      	ldrb	r3, [r7, #14]
 800947e:	2b03      	cmp	r3, #3
 8009480:	f040 808f 	bne.w	80095a2 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2206      	movs	r2, #6
 8009488:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2205      	movs	r2, #5
 800948e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800949e:	2200      	movs	r2, #0
 80094a0:	4619      	mov	r1, r3
 80094a2:	f001 fa57 	bl	800a954 <osMessagePut>
      break;
 80094a6:	e07c      	b.n	80095a2 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2206      	movs	r2, #6
 80094ac:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2205      	movs	r2, #5
 80094b2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80094c2:	2200      	movs	r2, #0
 80094c4:	4619      	mov	r1, r3
 80094c6:	f001 fa45 	bl	800a954 <osMessagePut>
      break;
 80094ca:	e06a      	b.n	80095a2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d027      	beq.n	8009526 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80094e2:	23ff      	movs	r3, #255	@ 0xff
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f99f 	bl	8009828 <USBH_Get_StringDesc>
 80094ea:	4603      	mov	r3, r0
 80094ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d103      	bne.n	80094fc <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2207      	movs	r2, #7
 80094f8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80094fa:	e054      	b.n	80095a6 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
 80094fe:	2b03      	cmp	r3, #3
 8009500:	d151      	bne.n	80095a6 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2207      	movs	r2, #7
 8009506:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2205      	movs	r2, #5
 800950c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800951c:	2200      	movs	r2, #0
 800951e:	4619      	mov	r1, r3
 8009520:	f001 fa18 	bl	800a954 <osMessagePut>
      break;
 8009524:	e03f      	b.n	80095a6 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2207      	movs	r2, #7
 800952a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2205      	movs	r2, #5
 8009530:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009540:	2200      	movs	r2, #0
 8009542:	4619      	mov	r1, r3
 8009544:	f001 fa06 	bl	800a954 <osMessagePut>
      break;
 8009548:	e02d      	b.n	80095a6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009550:	2b00      	cmp	r3, #0
 8009552:	d017      	beq.n	8009584 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009560:	23ff      	movs	r3, #255	@ 0xff
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f960 	bl	8009828 <USBH_Get_StringDesc>
 8009568:	4603      	mov	r3, r0
 800956a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800956c:	7bbb      	ldrb	r3, [r7, #14]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d102      	bne.n	8009578 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009576:	e018      	b.n	80095aa <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	2b03      	cmp	r3, #3
 800957c:	d115      	bne.n	80095aa <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	73fb      	strb	r3, [r7, #15]
      break;
 8009582:	e012      	b.n	80095aa <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	73fb      	strb	r3, [r7, #15]
      break;
 8009588:	e00f      	b.n	80095aa <USBH_HandleEnum+0x442>

    default:
      break;
 800958a:	bf00      	nop
 800958c:	e00e      	b.n	80095ac <USBH_HandleEnum+0x444>
      break;
 800958e:	bf00      	nop
 8009590:	e00c      	b.n	80095ac <USBH_HandleEnum+0x444>
      break;
 8009592:	bf00      	nop
 8009594:	e00a      	b.n	80095ac <USBH_HandleEnum+0x444>
      break;
 8009596:	bf00      	nop
 8009598:	e008      	b.n	80095ac <USBH_HandleEnum+0x444>
      break;
 800959a:	bf00      	nop
 800959c:	e006      	b.n	80095ac <USBH_HandleEnum+0x444>
      break;
 800959e:	bf00      	nop
 80095a0:	e004      	b.n	80095ac <USBH_HandleEnum+0x444>
      break;
 80095a2:	bf00      	nop
 80095a4:	e002      	b.n	80095ac <USBH_HandleEnum+0x444>
      break;
 80095a6:	bf00      	nop
 80095a8:	e000      	b.n	80095ac <USBH_HandleEnum+0x444>
      break;
 80095aa:	bf00      	nop
  }
  return Status;
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop

080095b8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	683a      	ldr	r2, [r7, #0]
 80095c6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80095ca:	bf00      	nop
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr

080095d6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b082      	sub	sp, #8
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80095e4:	1c5a      	adds	r2, r3, #1
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f804 	bl	80095fa <USBH_HandleSof>
}
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b082      	sub	sp, #8
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b0b      	cmp	r3, #11
 800960a:	d10a      	bne.n	8009622 <USBH_HandleSof+0x28>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009612:	2b00      	cmp	r3, #0
 8009614:	d005      	beq.n	8009622 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800961c:	699b      	ldr	r3, [r3, #24]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	4798      	blx	r3
  }
}
 8009622:	bf00      	nop
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b082      	sub	sp, #8
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800964e:	2200      	movs	r2, #0
 8009650:	4619      	mov	r1, r3
 8009652:	f001 f97f 	bl	800a954 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009656:	bf00      	nop
}
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800965e:	b480      	push	{r7}
 8009660:	b083      	sub	sp, #12
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800966e:	bf00      	nop
}
 8009670:	370c      	adds	r7, #12
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b082      	sub	sp, #8
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80096ae:	2200      	movs	r2, #0
 80096b0:	4619      	mov	r1, r3
 80096b2:	f001 f94f 	bl	800a954 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f003 fce0 	bl	800d0a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	791b      	ldrb	r3, [r3, #4]
 80096ea:	4619      	mov	r1, r3
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f001 f835 	bl	800a75c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	795b      	ldrb	r3, [r3, #5]
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f001 f82f 	bl	800a75c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009712:	2200      	movs	r2, #0
 8009714:	4619      	mov	r1, r3
 8009716:	f001 f91d 	bl	800a954 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8009732:	f107 030c 	add.w	r3, r7, #12
 8009736:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800973a:	4618      	mov	r0, r3
 800973c:	f001 f94a 	bl	800a9d4 <osMessageGet>
    if (event.status == osEventMessage)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2b10      	cmp	r3, #16
 8009744:	d1f2      	bne.n	800972c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7ff faa4 	bl	8008c94 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800974c:	e7ee      	b.n	800972c <USBH_Process_OS+0x8>

0800974e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b082      	sub	sp, #8
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2201      	movs	r2, #1
 800975a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800976a:	2200      	movs	r2, #0
 800976c:	4619      	mov	r1, r3
 800976e:	f001 f8f1 	bl	800a954 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af02      	add	r7, sp, #8
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009788:	887b      	ldrh	r3, [r7, #2]
 800978a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800978e:	d901      	bls.n	8009794 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009790:	2303      	movs	r3, #3
 8009792:	e01b      	b.n	80097cc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800979a:	887b      	ldrh	r3, [r7, #2]
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	4613      	mov	r3, r2
 80097a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80097a4:	2100      	movs	r1, #0
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f872 	bl	8009890 <USBH_GetDescriptor>
 80097ac:	4603      	mov	r3, r0
 80097ae:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d109      	bne.n	80097ca <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80097bc:	887a      	ldrh	r2, [r7, #2]
 80097be:	4619      	mov	r1, r3
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f929 	bl	8009a18 <USBH_ParseDevDesc>
 80097c6:	4603      	mov	r3, r0
 80097c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80097ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b086      	sub	sp, #24
 80097d8:	af02      	add	r7, sp, #8
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	460b      	mov	r3, r1
 80097de:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	331c      	adds	r3, #28
 80097e4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80097e6:	887b      	ldrh	r3, [r7, #2]
 80097e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097ec:	d901      	bls.n	80097f2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80097ee:	2303      	movs	r3, #3
 80097f0:	e016      	b.n	8009820 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80097f2:	887b      	ldrh	r3, [r7, #2]
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097fc:	2100      	movs	r1, #0
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f846 	bl	8009890 <USBH_GetDescriptor>
 8009804:	4603      	mov	r3, r0
 8009806:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009808:	7bfb      	ldrb	r3, [r7, #15]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d107      	bne.n	800981e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800980e:	887b      	ldrh	r3, [r7, #2]
 8009810:	461a      	mov	r2, r3
 8009812:	68b9      	ldr	r1, [r7, #8]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f9af 	bl	8009b78 <USBH_ParseCfgDesc>
 800981a:	4603      	mov	r3, r0
 800981c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800981e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af02      	add	r7, sp, #8
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	607a      	str	r2, [r7, #4]
 8009832:	461a      	mov	r2, r3
 8009834:	460b      	mov	r3, r1
 8009836:	72fb      	strb	r3, [r7, #11]
 8009838:	4613      	mov	r3, r2
 800983a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800983c:	893b      	ldrh	r3, [r7, #8]
 800983e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009842:	d802      	bhi.n	800984a <USBH_Get_StringDesc+0x22>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d101      	bne.n	800984e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800984a:	2303      	movs	r3, #3
 800984c:	e01c      	b.n	8009888 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800984e:	7afb      	ldrb	r3, [r7, #11]
 8009850:	b29b      	uxth	r3, r3
 8009852:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009856:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800985e:	893b      	ldrh	r3, [r7, #8]
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	460b      	mov	r3, r1
 8009864:	2100      	movs	r1, #0
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f000 f812 	bl	8009890 <USBH_GetDescriptor>
 800986c:	4603      	mov	r3, r0
 800986e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009870:	7dfb      	ldrb	r3, [r7, #23]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d107      	bne.n	8009886 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800987c:	893a      	ldrh	r2, [r7, #8]
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fb8d 	bl	8009fa0 <USBH_ParseStringDesc>
  }

  return status;
 8009886:	7dfb      	ldrb	r3, [r7, #23]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	607b      	str	r3, [r7, #4]
 800989a:	460b      	mov	r3, r1
 800989c:	72fb      	strb	r3, [r7, #11]
 800989e:	4613      	mov	r3, r2
 80098a0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	789b      	ldrb	r3, [r3, #2]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d11c      	bne.n	80098e4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80098aa:	7afb      	ldrb	r3, [r7, #11]
 80098ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2206      	movs	r2, #6
 80098ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	893a      	ldrh	r2, [r7, #8]
 80098c0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80098c2:	893b      	ldrh	r3, [r7, #8]
 80098c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80098c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098cc:	d104      	bne.n	80098d8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f240 4209 	movw	r2, #1033	@ 0x409
 80098d4:	829a      	strh	r2, [r3, #20]
 80098d6:	e002      	b.n	80098de <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	8b3a      	ldrh	r2, [r7, #24]
 80098e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80098e4:	8b3b      	ldrh	r3, [r7, #24]
 80098e6:	461a      	mov	r2, r3
 80098e8:	6879      	ldr	r1, [r7, #4]
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 fba5 	bl	800a03a <USBH_CtlReq>
 80098f0:	4603      	mov	r3, r0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b082      	sub	sp, #8
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	460b      	mov	r3, r1
 8009904:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	789b      	ldrb	r3, [r3, #2]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d10f      	bne.n	800992e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2205      	movs	r2, #5
 8009918:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800991a:	78fb      	ldrb	r3, [r7, #3]
 800991c:	b29a      	uxth	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800992e:	2200      	movs	r2, #0
 8009930:	2100      	movs	r1, #0
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fb81 	bl	800a03a <USBH_CtlReq>
 8009938:	4603      	mov	r3, r0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b082      	sub	sp, #8
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	460b      	mov	r3, r1
 800994c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	789b      	ldrb	r3, [r3, #2]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d10e      	bne.n	8009974 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2209      	movs	r2, #9
 8009960:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	887a      	ldrh	r2, [r7, #2]
 8009966:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009974:	2200      	movs	r2, #0
 8009976:	2100      	movs	r1, #0
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fb5e 	bl	800a03a <USBH_CtlReq>
 800997e:	4603      	mov	r3, r0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	460b      	mov	r3, r1
 8009992:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	789b      	ldrb	r3, [r3, #2]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d10f      	bne.n	80099bc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2203      	movs	r2, #3
 80099a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80099a8:	78fb      	ldrb	r3, [r7, #3]
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80099bc:	2200      	movs	r2, #0
 80099be:	2100      	movs	r1, #0
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fb3a 	bl	800a03a <USBH_CtlReq>
 80099c6:	4603      	mov	r3, r0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	460b      	mov	r3, r1
 80099da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	789b      	ldrb	r3, [r3, #2]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d10f      	bne.n	8009a04 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80099f6:	78fb      	ldrb	r3, [r7, #3]
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a04:	2200      	movs	r2, #0
 8009a06:	2100      	movs	r1, #0
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 fb16 	bl	800a03a <USBH_CtlReq>
 8009a0e:	4603      	mov	r3, r0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	4613      	mov	r3, r2
 8009a24:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009a2c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d101      	bne.n	8009a3c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009a38:	2302      	movs	r3, #2
 8009a3a:	e094      	b.n	8009b66 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	781a      	ldrb	r2, [r3, #0]
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	785a      	ldrb	r2, [r3, #1]
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	3302      	adds	r3, #2
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	3303      	adds	r3, #3
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	021b      	lsls	r3, r3, #8
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	791a      	ldrb	r2, [r3, #4]
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	795a      	ldrb	r2, [r3, #5]
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	799a      	ldrb	r2, [r3, #6]
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	79da      	ldrb	r2, [r3, #7]
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d004      	beq.n	8009a9a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d11b      	bne.n	8009ad2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	79db      	ldrb	r3, [r3, #7]
 8009a9e:	2b20      	cmp	r3, #32
 8009aa0:	dc0f      	bgt.n	8009ac2 <USBH_ParseDevDesc+0xaa>
 8009aa2:	2b08      	cmp	r3, #8
 8009aa4:	db0f      	blt.n	8009ac6 <USBH_ParseDevDesc+0xae>
 8009aa6:	3b08      	subs	r3, #8
 8009aa8:	4a32      	ldr	r2, [pc, #200]	@ (8009b74 <USBH_ParseDevDesc+0x15c>)
 8009aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8009aae:	f003 0301 	and.w	r3, r3, #1
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	bf14      	ite	ne
 8009ab6:	2301      	movne	r3, #1
 8009ab8:	2300      	moveq	r3, #0
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d106      	bne.n	8009ace <USBH_ParseDevDesc+0xb6>
 8009ac0:	e001      	b.n	8009ac6 <USBH_ParseDevDesc+0xae>
 8009ac2:	2b40      	cmp	r3, #64	@ 0x40
 8009ac4:	d003      	beq.n	8009ace <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	2208      	movs	r2, #8
 8009aca:	71da      	strb	r2, [r3, #7]
        break;
 8009acc:	e000      	b.n	8009ad0 <USBH_ParseDevDesc+0xb8>
        break;
 8009ace:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009ad0:	e00e      	b.n	8009af0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d107      	bne.n	8009aec <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	79db      	ldrb	r3, [r3, #7]
 8009ae0:	2b08      	cmp	r3, #8
 8009ae2:	d005      	beq.n	8009af0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	2208      	movs	r2, #8
 8009ae8:	71da      	strb	r2, [r3, #7]
 8009aea:	e001      	b.n	8009af0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009aec:	2303      	movs	r3, #3
 8009aee:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009af0:	88fb      	ldrh	r3, [r7, #6]
 8009af2:	2b08      	cmp	r3, #8
 8009af4:	d936      	bls.n	8009b64 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	3308      	adds	r3, #8
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	461a      	mov	r2, r3
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	3309      	adds	r3, #9
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	021b      	lsls	r3, r3, #8
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	330a      	adds	r3, #10
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	330b      	adds	r3, #11
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	021b      	lsls	r3, r3, #8
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	4313      	orrs	r3, r2
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	330c      	adds	r3, #12
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	461a      	mov	r2, r3
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	330d      	adds	r3, #13
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	021b      	lsls	r3, r3, #8
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	7b9a      	ldrb	r2, [r3, #14]
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	7bda      	ldrb	r2, [r3, #15]
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	7c1a      	ldrb	r2, [r3, #16]
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	7c5a      	ldrb	r2, [r3, #17]
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	371c      	adds	r7, #28
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	01000101 	.word	0x01000101

08009b78 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b08c      	sub	sp, #48	@ 0x30
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	4613      	mov	r3, r2
 8009b84:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009b8c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009b94:	2300      	movs	r3, #0
 8009b96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d101      	bne.n	8009baa <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	e0da      	b.n	8009d60 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	2b09      	cmp	r3, #9
 8009bb4:	d002      	beq.n	8009bbc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb8:	2209      	movs	r2, #9
 8009bba:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	781a      	ldrb	r2, [r3, #0]
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	785a      	ldrb	r2, [r3, #1]
 8009bc8:	6a3b      	ldr	r3, [r7, #32]
 8009bca:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	3302      	adds	r3, #2
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	3303      	adds	r3, #3
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	021b      	lsls	r3, r3, #8
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	4313      	orrs	r3, r2
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009be6:	bf28      	it	cs
 8009be8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	6a3b      	ldr	r3, [r7, #32]
 8009bf0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	791a      	ldrb	r2, [r3, #4]
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	795a      	ldrb	r2, [r3, #5]
 8009bfe:	6a3b      	ldr	r3, [r7, #32]
 8009c00:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	799a      	ldrb	r2, [r3, #6]
 8009c06:	6a3b      	ldr	r3, [r7, #32]
 8009c08:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	79da      	ldrb	r2, [r3, #7]
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	7a1a      	ldrb	r2, [r3, #8]
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009c1a:	88fb      	ldrh	r3, [r7, #6]
 8009c1c:	2b09      	cmp	r3, #9
 8009c1e:	f240 809d 	bls.w	8009d5c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009c22:	2309      	movs	r3, #9
 8009c24:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009c26:	2300      	movs	r3, #0
 8009c28:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009c2a:	e081      	b.n	8009d30 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009c2c:	f107 0316 	add.w	r3, r7, #22
 8009c30:	4619      	mov	r1, r3
 8009c32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c34:	f000 f9e7 	bl	800a006 <USBH_GetNextDesc>
 8009c38:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3c:	785b      	ldrb	r3, [r3, #1]
 8009c3e:	2b04      	cmp	r3, #4
 8009c40:	d176      	bne.n	8009d30 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	2b09      	cmp	r3, #9
 8009c48:	d002      	beq.n	8009c50 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4c:	2209      	movs	r2, #9
 8009c4e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c54:	221a      	movs	r2, #26
 8009c56:	fb02 f303 	mul.w	r3, r2, r3
 8009c5a:	3308      	adds	r3, #8
 8009c5c:	6a3a      	ldr	r2, [r7, #32]
 8009c5e:	4413      	add	r3, r2
 8009c60:	3302      	adds	r3, #2
 8009c62:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009c64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c66:	69f8      	ldr	r0, [r7, #28]
 8009c68:	f000 f87e 	bl	8009d68 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009c72:	2300      	movs	r3, #0
 8009c74:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009c76:	e043      	b.n	8009d00 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009c78:	f107 0316 	add.w	r3, r7, #22
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c80:	f000 f9c1 	bl	800a006 <USBH_GetNextDesc>
 8009c84:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c88:	785b      	ldrb	r3, [r3, #1]
 8009c8a:	2b05      	cmp	r3, #5
 8009c8c:	d138      	bne.n	8009d00 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	795b      	ldrb	r3, [r3, #5]
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d113      	bne.n	8009cbe <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d003      	beq.n	8009ca6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	799b      	ldrb	r3, [r3, #6]
 8009ca2:	2b03      	cmp	r3, #3
 8009ca4:	d10b      	bne.n	8009cbe <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	79db      	ldrb	r3, [r3, #7]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10b      	bne.n	8009cc6 <USBH_ParseCfgDesc+0x14e>
 8009cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	2b09      	cmp	r3, #9
 8009cb4:	d007      	beq.n	8009cc6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb8:	2209      	movs	r2, #9
 8009cba:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009cbc:	e003      	b.n	8009cc6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc0:	2207      	movs	r2, #7
 8009cc2:	701a      	strb	r2, [r3, #0]
 8009cc4:	e000      	b.n	8009cc8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009cc6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ccc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009cd0:	3201      	adds	r2, #1
 8009cd2:	00d2      	lsls	r2, r2, #3
 8009cd4:	211a      	movs	r1, #26
 8009cd6:	fb01 f303 	mul.w	r3, r1, r3
 8009cda:	4413      	add	r3, r2
 8009cdc:	3308      	adds	r3, #8
 8009cde:	6a3a      	ldr	r2, [r7, #32]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	3304      	adds	r3, #4
 8009ce4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009ce6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ce8:	69b9      	ldr	r1, [r7, #24]
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 f870 	bl	8009dd0 <USBH_ParseEPDesc>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009cf6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	791b      	ldrb	r3, [r3, #4]
 8009d04:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d204      	bcs.n	8009d16 <USBH_ParseCfgDesc+0x19e>
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	885a      	ldrh	r2, [r3, #2]
 8009d10:	8afb      	ldrh	r3, [r7, #22]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d8b0      	bhi.n	8009c78 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	791b      	ldrb	r3, [r3, #4]
 8009d1a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d201      	bcs.n	8009d26 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009d22:	2303      	movs	r3, #3
 8009d24:	e01c      	b.n	8009d60 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009d26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009d30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d805      	bhi.n	8009d44 <USBH_ParseCfgDesc+0x1cc>
 8009d38:	6a3b      	ldr	r3, [r7, #32]
 8009d3a:	885a      	ldrh	r2, [r3, #2]
 8009d3c:	8afb      	ldrh	r3, [r7, #22]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	f63f af74 	bhi.w	8009c2c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009d44:	6a3b      	ldr	r3, [r7, #32]
 8009d46:	791b      	ldrb	r3, [r3, #4]
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	bf28      	it	cs
 8009d4c:	2302      	movcs	r3, #2
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d201      	bcs.n	8009d5c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e001      	b.n	8009d60 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009d5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3730      	adds	r7, #48	@ 0x30
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	781a      	ldrb	r2, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	785a      	ldrb	r2, [r3, #1]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	789a      	ldrb	r2, [r3, #2]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	78da      	ldrb	r2, [r3, #3]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	3304      	adds	r3, #4
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	bf28      	it	cs
 8009d9c:	2302      	movcs	r3, #2
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	795a      	ldrb	r2, [r3, #5]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	799a      	ldrb	r2, [r3, #6]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	79da      	ldrb	r2, [r3, #7]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	7a1a      	ldrb	r2, [r3, #8]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	721a      	strb	r2, [r3, #8]
}
 8009dc4:	bf00      	nop
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b087      	sub	sp, #28
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	781a      	ldrb	r2, [r3, #0]
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	785a      	ldrb	r2, [r3, #1]
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	789a      	ldrb	r2, [r3, #2]
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	78da      	ldrb	r2, [r3, #3]
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	3304      	adds	r3, #4
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3305      	adds	r3, #5
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	021b      	lsls	r3, r3, #8
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	4313      	orrs	r3, r2
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	799a      	ldrb	r2, [r3, #6]
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	889b      	ldrh	r3, [r3, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d009      	beq.n	8009e3e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e32:	d804      	bhi.n	8009e3e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e3c:	d901      	bls.n	8009e42 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d136      	bne.n	8009eba <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	78db      	ldrb	r3, [r3, #3]
 8009e50:	f003 0303 	and.w	r3, r3, #3
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d108      	bne.n	8009e6a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	889b      	ldrh	r3, [r3, #4]
 8009e5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e60:	f240 8097 	bls.w	8009f92 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009e64:	2303      	movs	r3, #3
 8009e66:	75fb      	strb	r3, [r7, #23]
 8009e68:	e093      	b.n	8009f92 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	78db      	ldrb	r3, [r3, #3]
 8009e6e:	f003 0303 	and.w	r3, r3, #3
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d107      	bne.n	8009e86 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	889b      	ldrh	r3, [r3, #4]
 8009e7a:	2b40      	cmp	r3, #64	@ 0x40
 8009e7c:	f240 8089 	bls.w	8009f92 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009e80:	2303      	movs	r3, #3
 8009e82:	75fb      	strb	r3, [r7, #23]
 8009e84:	e085      	b.n	8009f92 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	78db      	ldrb	r3, [r3, #3]
 8009e8a:	f003 0303 	and.w	r3, r3, #3
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d005      	beq.n	8009e9e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	78db      	ldrb	r3, [r3, #3]
 8009e96:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	d10a      	bne.n	8009eb4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	799b      	ldrb	r3, [r3, #6]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d003      	beq.n	8009eae <USBH_ParseEPDesc+0xde>
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	799b      	ldrb	r3, [r3, #6]
 8009eaa:	2b10      	cmp	r3, #16
 8009eac:	d970      	bls.n	8009f90 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009eb2:	e06d      	b.n	8009f90 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	75fb      	strb	r3, [r7, #23]
 8009eb8:	e06b      	b.n	8009f92 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d13c      	bne.n	8009f3e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	78db      	ldrb	r3, [r3, #3]
 8009ec8:	f003 0303 	and.w	r3, r3, #3
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d005      	beq.n	8009edc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	78db      	ldrb	r3, [r3, #3]
 8009ed4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d106      	bne.n	8009eea <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	889b      	ldrh	r3, [r3, #4]
 8009ee0:	2b40      	cmp	r3, #64	@ 0x40
 8009ee2:	d956      	bls.n	8009f92 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009ee8:	e053      	b.n	8009f92 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	78db      	ldrb	r3, [r3, #3]
 8009eee:	f003 0303 	and.w	r3, r3, #3
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d10e      	bne.n	8009f14 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	799b      	ldrb	r3, [r3, #6]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d007      	beq.n	8009f0e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009f02:	2b10      	cmp	r3, #16
 8009f04:	d803      	bhi.n	8009f0e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009f0a:	2b40      	cmp	r3, #64	@ 0x40
 8009f0c:	d941      	bls.n	8009f92 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	75fb      	strb	r3, [r7, #23]
 8009f12:	e03e      	b.n	8009f92 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	78db      	ldrb	r3, [r3, #3]
 8009f18:	f003 0303 	and.w	r3, r3, #3
 8009f1c:	2b03      	cmp	r3, #3
 8009f1e:	d10b      	bne.n	8009f38 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	799b      	ldrb	r3, [r3, #6]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d004      	beq.n	8009f32 <USBH_ParseEPDesc+0x162>
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	889b      	ldrh	r3, [r3, #4]
 8009f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f30:	d32f      	bcc.n	8009f92 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f32:	2303      	movs	r3, #3
 8009f34:	75fb      	strb	r3, [r7, #23]
 8009f36:	e02c      	b.n	8009f92 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	75fb      	strb	r3, [r7, #23]
 8009f3c:	e029      	b.n	8009f92 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d120      	bne.n	8009f8a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	78db      	ldrb	r3, [r3, #3]
 8009f4c:	f003 0303 	and.w	r3, r3, #3
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d106      	bne.n	8009f62 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	889b      	ldrh	r3, [r3, #4]
 8009f58:	2b08      	cmp	r3, #8
 8009f5a:	d01a      	beq.n	8009f92 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	75fb      	strb	r3, [r7, #23]
 8009f60:	e017      	b.n	8009f92 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	78db      	ldrb	r3, [r3, #3]
 8009f66:	f003 0303 	and.w	r3, r3, #3
 8009f6a:	2b03      	cmp	r3, #3
 8009f6c:	d10a      	bne.n	8009f84 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	799b      	ldrb	r3, [r3, #6]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d003      	beq.n	8009f7e <USBH_ParseEPDesc+0x1ae>
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	889b      	ldrh	r3, [r3, #4]
 8009f7a:	2b08      	cmp	r3, #8
 8009f7c:	d909      	bls.n	8009f92 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	75fb      	strb	r3, [r7, #23]
 8009f82:	e006      	b.n	8009f92 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009f84:	2303      	movs	r3, #3
 8009f86:	75fb      	strb	r3, [r7, #23]
 8009f88:	e003      	b.n	8009f92 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	75fb      	strb	r3, [r7, #23]
 8009f8e:	e000      	b.n	8009f92 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f90:	bf00      	nop
  }

  return status;
 8009f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	371c      	adds	r7, #28
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b087      	sub	sp, #28
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	4613      	mov	r3, r2
 8009fac:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	2b03      	cmp	r3, #3
 8009fb6:	d120      	bne.n	8009ffa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	1e9a      	subs	r2, r3, #2
 8009fbe:	88fb      	ldrh	r3, [r7, #6]
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	bf28      	it	cs
 8009fc4:	4613      	movcs	r3, r2
 8009fc6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	3302      	adds	r3, #2
 8009fcc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009fce:	2300      	movs	r3, #0
 8009fd0:	82fb      	strh	r3, [r7, #22]
 8009fd2:	e00b      	b.n	8009fec <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009fd4:	8afb      	ldrh	r3, [r7, #22]
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	4413      	add	r3, r2
 8009fda:	781a      	ldrb	r2, [r3, #0]
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009fe6:	8afb      	ldrh	r3, [r7, #22]
 8009fe8:	3302      	adds	r3, #2
 8009fea:	82fb      	strh	r3, [r7, #22]
 8009fec:	8afa      	ldrh	r2, [r7, #22]
 8009fee:	8abb      	ldrh	r3, [r7, #20]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d3ef      	bcc.n	8009fd4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	701a      	strb	r2, [r3, #0]
  }
}
 8009ffa:	bf00      	nop
 8009ffc:	371c      	adds	r7, #28
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a006:	b480      	push	{r7}
 800a008:	b085      	sub	sp, #20
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	881b      	ldrh	r3, [r3, #0]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	7812      	ldrb	r2, [r2, #0]
 800a018:	4413      	add	r3, r2
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4413      	add	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a02c:	68fb      	ldr	r3, [r7, #12]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b086      	sub	sp, #24
 800a03e:	af00      	add	r7, sp, #0
 800a040:	60f8      	str	r0, [r7, #12]
 800a042:	60b9      	str	r1, [r7, #8]
 800a044:	4613      	mov	r3, r2
 800a046:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a048:	2301      	movs	r3, #1
 800a04a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	789b      	ldrb	r3, [r3, #2]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d002      	beq.n	800a05a <USBH_CtlReq+0x20>
 800a054:	2b02      	cmp	r3, #2
 800a056:	d01d      	beq.n	800a094 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800a058:	e043      	b.n	800a0e2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	88fa      	ldrh	r2, [r7, #6]
 800a064:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2201      	movs	r2, #1
 800a06a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2202      	movs	r2, #2
 800a070:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a072:	2301      	movs	r3, #1
 800a074:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2203      	movs	r2, #3
 800a07a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a08a:	2200      	movs	r2, #0
 800a08c:	4619      	mov	r1, r3
 800a08e:	f000 fc61 	bl	800a954 <osMessagePut>
      break;
 800a092:	e026      	b.n	800a0e2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f000 f829 	bl	800a0ec <USBH_HandleControl>
 800a09a:	4603      	mov	r3, r0
 800a09c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a09e:	7dfb      	ldrb	r3, [r7, #23]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <USBH_CtlReq+0x70>
 800a0a4:	7dfb      	ldrb	r3, [r7, #23]
 800a0a6:	2b03      	cmp	r3, #3
 800a0a8:	d106      	bne.n	800a0b8 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	761a      	strb	r2, [r3, #24]
 800a0b6:	e005      	b.n	800a0c4 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d102      	bne.n	800a0c4 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2203      	movs	r2, #3
 800a0c8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a0d8:	2200      	movs	r2, #0
 800a0da:	4619      	mov	r1, r3
 800a0dc:	f000 fc3a 	bl	800a954 <osMessagePut>
      break;
 800a0e0:	bf00      	nop
  }
  return status;
 800a0e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3718      	adds	r7, #24
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af02      	add	r7, sp, #8
 800a0f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	7e1b      	ldrb	r3, [r3, #24]
 800a100:	3b01      	subs	r3, #1
 800a102:	2b0a      	cmp	r3, #10
 800a104:	f200 8229 	bhi.w	800a55a <USBH_HandleControl+0x46e>
 800a108:	a201      	add	r2, pc, #4	@ (adr r2, 800a110 <USBH_HandleControl+0x24>)
 800a10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10e:	bf00      	nop
 800a110:	0800a13d 	.word	0x0800a13d
 800a114:	0800a157 	.word	0x0800a157
 800a118:	0800a1f9 	.word	0x0800a1f9
 800a11c:	0800a21f 	.word	0x0800a21f
 800a120:	0800a2ab 	.word	0x0800a2ab
 800a124:	0800a2d5 	.word	0x0800a2d5
 800a128:	0800a397 	.word	0x0800a397
 800a12c:	0800a3b9 	.word	0x0800a3b9
 800a130:	0800a44b 	.word	0x0800a44b
 800a134:	0800a471 	.word	0x0800a471
 800a138:	0800a503 	.word	0x0800a503
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f103 0110 	add.w	r1, r3, #16
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	795b      	ldrb	r3, [r3, #5]
 800a146:	461a      	mov	r2, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 fa17 	bl	800a57c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2202      	movs	r2, #2
 800a152:	761a      	strb	r2, [r3, #24]
      break;
 800a154:	e20c      	b.n	800a570 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	795b      	ldrb	r3, [r3, #5]
 800a15a:	4619      	mov	r1, r3
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f003 f891 	bl	800d284 <USBH_LL_GetURBState>
 800a162:	4603      	mov	r3, r0
 800a164:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a166:	7bbb      	ldrb	r3, [r7, #14]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d12c      	bne.n	800a1c6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	7c1b      	ldrb	r3, [r3, #16]
 800a170:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a174:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	8adb      	ldrh	r3, [r3, #22]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00a      	beq.n	800a194 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a17e:	7b7b      	ldrb	r3, [r7, #13]
 800a180:	2b80      	cmp	r3, #128	@ 0x80
 800a182:	d103      	bne.n	800a18c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2203      	movs	r2, #3
 800a188:	761a      	strb	r2, [r3, #24]
 800a18a:	e00d      	b.n	800a1a8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2205      	movs	r2, #5
 800a190:	761a      	strb	r2, [r3, #24]
 800a192:	e009      	b.n	800a1a8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800a194:	7b7b      	ldrb	r3, [r7, #13]
 800a196:	2b80      	cmp	r3, #128	@ 0x80
 800a198:	d103      	bne.n	800a1a2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2209      	movs	r2, #9
 800a19e:	761a      	strb	r2, [r3, #24]
 800a1a0:	e002      	b.n	800a1a8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2207      	movs	r2, #7
 800a1a6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2203      	movs	r2, #3
 800a1ac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a1bc:	2200      	movs	r2, #0
 800a1be:	4619      	mov	r1, r3
 800a1c0:	f000 fbc8 	bl	800a954 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a1c4:	e1cb      	b.n	800a55e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a1c6:	7bbb      	ldrb	r3, [r7, #14]
 800a1c8:	2b04      	cmp	r3, #4
 800a1ca:	d003      	beq.n	800a1d4 <USBH_HandleControl+0xe8>
 800a1cc:	7bbb      	ldrb	r3, [r7, #14]
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	f040 81c5 	bne.w	800a55e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	220b      	movs	r2, #11
 800a1d8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2203      	movs	r2, #3
 800a1de:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	f000 fbaf 	bl	800a954 <osMessagePut>
      break;
 800a1f6:	e1b2      	b.n	800a55e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6899      	ldr	r1, [r3, #8]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	899a      	ldrh	r2, [r3, #12]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	791b      	ldrb	r3, [r3, #4]
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f9f2 	bl	800a5fa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2204      	movs	r2, #4
 800a21a:	761a      	strb	r2, [r3, #24]
      break;
 800a21c:	e1a8      	b.n	800a570 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	791b      	ldrb	r3, [r3, #4]
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f003 f82d 	bl	800d284 <USBH_LL_GetURBState>
 800a22a:	4603      	mov	r3, r0
 800a22c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a22e:	7bbb      	ldrb	r3, [r7, #14]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d110      	bne.n	800a256 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2209      	movs	r2, #9
 800a238:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2203      	movs	r2, #3
 800a23e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a24e:	2200      	movs	r2, #0
 800a250:	4619      	mov	r1, r3
 800a252:	f000 fb7f 	bl	800a954 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a256:	7bbb      	ldrb	r3, [r7, #14]
 800a258:	2b05      	cmp	r3, #5
 800a25a:	d110      	bne.n	800a27e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a25c:	2303      	movs	r3, #3
 800a25e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2203      	movs	r2, #3
 800a264:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a274:	2200      	movs	r2, #0
 800a276:	4619      	mov	r1, r3
 800a278:	f000 fb6c 	bl	800a954 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a27c:	e171      	b.n	800a562 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800a27e:	7bbb      	ldrb	r3, [r7, #14]
 800a280:	2b04      	cmp	r3, #4
 800a282:	f040 816e 	bne.w	800a562 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	220b      	movs	r2, #11
 800a28a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2203      	movs	r2, #3
 800a290:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	f000 fb56 	bl	800a954 <osMessagePut>
      break;
 800a2a8:	e15b      	b.n	800a562 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6899      	ldr	r1, [r3, #8]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	899a      	ldrh	r2, [r3, #12]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	795b      	ldrb	r3, [r3, #5]
 800a2b6:	2001      	movs	r0, #1
 800a2b8:	9000      	str	r0, [sp, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f978 	bl	800a5b0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2206      	movs	r2, #6
 800a2d0:	761a      	strb	r2, [r3, #24]
      break;
 800a2d2:	e14d      	b.n	800a570 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	795b      	ldrb	r3, [r3, #5]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f002 ffd2 	bl	800d284 <USBH_LL_GetURBState>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a2e4:	7bbb      	ldrb	r3, [r7, #14]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d111      	bne.n	800a30e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2207      	movs	r2, #7
 800a2ee:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2203      	movs	r2, #3
 800a2f4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a304:	2200      	movs	r2, #0
 800a306:	4619      	mov	r1, r3
 800a308:	f000 fb24 	bl	800a954 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a30c:	e12b      	b.n	800a566 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800a30e:	7bbb      	ldrb	r3, [r7, #14]
 800a310:	2b05      	cmp	r3, #5
 800a312:	d113      	bne.n	800a33c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	220c      	movs	r2, #12
 800a318:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a31a:	2303      	movs	r3, #3
 800a31c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2203      	movs	r2, #3
 800a322:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a332:	2200      	movs	r2, #0
 800a334:	4619      	mov	r1, r3
 800a336:	f000 fb0d 	bl	800a954 <osMessagePut>
      break;
 800a33a:	e114      	b.n	800a566 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a33c:	7bbb      	ldrb	r3, [r7, #14]
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d111      	bne.n	800a366 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2205      	movs	r2, #5
 800a346:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2203      	movs	r2, #3
 800a34c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a35c:	2200      	movs	r2, #0
 800a35e:	4619      	mov	r1, r3
 800a360:	f000 faf8 	bl	800a954 <osMessagePut>
      break;
 800a364:	e0ff      	b.n	800a566 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800a366:	7bbb      	ldrb	r3, [r7, #14]
 800a368:	2b04      	cmp	r3, #4
 800a36a:	f040 80fc 	bne.w	800a566 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	220b      	movs	r2, #11
 800a372:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a374:	2302      	movs	r3, #2
 800a376:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2203      	movs	r2, #3
 800a37c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a38c:	2200      	movs	r2, #0
 800a38e:	4619      	mov	r1, r3
 800a390:	f000 fae0 	bl	800a954 <osMessagePut>
      break;
 800a394:	e0e7      	b.n	800a566 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	791b      	ldrb	r3, [r3, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	2100      	movs	r1, #0
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f92b 	bl	800a5fa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2208      	movs	r2, #8
 800a3b4:	761a      	strb	r2, [r3, #24]

      break;
 800a3b6:	e0db      	b.n	800a570 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	791b      	ldrb	r3, [r3, #4]
 800a3bc:	4619      	mov	r1, r3
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f002 ff60 	bl	800d284 <USBH_LL_GetURBState>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a3c8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d113      	bne.n	800a3f6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	220d      	movs	r2, #13
 800a3d2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2203      	movs	r2, #3
 800a3dc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	f000 fab0 	bl	800a954 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a3f4:	e0b9      	b.n	800a56a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800a3f6:	7bbb      	ldrb	r3, [r7, #14]
 800a3f8:	2b04      	cmp	r3, #4
 800a3fa:	d111      	bne.n	800a420 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	220b      	movs	r2, #11
 800a400:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2203      	movs	r2, #3
 800a406:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a416:	2200      	movs	r2, #0
 800a418:	4619      	mov	r1, r3
 800a41a:	f000 fa9b 	bl	800a954 <osMessagePut>
      break;
 800a41e:	e0a4      	b.n	800a56a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800a420:	7bbb      	ldrb	r3, [r7, #14]
 800a422:	2b05      	cmp	r3, #5
 800a424:	f040 80a1 	bne.w	800a56a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800a428:	2303      	movs	r3, #3
 800a42a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2203      	movs	r2, #3
 800a430:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a440:	2200      	movs	r2, #0
 800a442:	4619      	mov	r1, r3
 800a444:	f000 fa86 	bl	800a954 <osMessagePut>
      break;
 800a448:	e08f      	b.n	800a56a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	795b      	ldrb	r3, [r3, #5]
 800a44e:	2201      	movs	r2, #1
 800a450:	9200      	str	r2, [sp, #0]
 800a452:	2200      	movs	r2, #0
 800a454:	2100      	movs	r1, #0
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f8aa 	bl	800a5b0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a462:	b29a      	uxth	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	220a      	movs	r2, #10
 800a46c:	761a      	strb	r2, [r3, #24]
      break;
 800a46e:	e07f      	b.n	800a570 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	795b      	ldrb	r3, [r3, #5]
 800a474:	4619      	mov	r1, r3
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f002 ff04 	bl	800d284 <USBH_LL_GetURBState>
 800a47c:	4603      	mov	r3, r0
 800a47e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a480:	7bbb      	ldrb	r3, [r7, #14]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d113      	bne.n	800a4ae <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	220d      	movs	r2, #13
 800a48e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2203      	movs	r2, #3
 800a494:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	f000 fa54 	bl	800a954 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a4ac:	e05f      	b.n	800a56e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a4ae:	7bbb      	ldrb	r3, [r7, #14]
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d111      	bne.n	800a4d8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2209      	movs	r2, #9
 800a4b8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2203      	movs	r2, #3
 800a4be:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	f000 fa3f 	bl	800a954 <osMessagePut>
      break;
 800a4d6:	e04a      	b.n	800a56e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a4d8:	7bbb      	ldrb	r3, [r7, #14]
 800a4da:	2b04      	cmp	r3, #4
 800a4dc:	d147      	bne.n	800a56e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	220b      	movs	r2, #11
 800a4e2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2203      	movs	r2, #3
 800a4e8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	f000 fa2a 	bl	800a954 <osMessagePut>
      break;
 800a500:	e035      	b.n	800a56e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	7e5b      	ldrb	r3, [r3, #25]
 800a506:	3301      	adds	r3, #1
 800a508:	b2da      	uxtb	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	765a      	strb	r2, [r3, #25]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	7e5b      	ldrb	r3, [r3, #25]
 800a512:	2b02      	cmp	r3, #2
 800a514:	d806      	bhi.n	800a524 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a522:	e025      	b.n	800a570 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a52a:	2106      	movs	r1, #6
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	795b      	ldrb	r3, [r3, #5]
 800a53a:	4619      	mov	r1, r3
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f90d 	bl	800a75c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	791b      	ldrb	r3, [r3, #4]
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 f907 	bl	800a75c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a554:	2302      	movs	r3, #2
 800a556:	73fb      	strb	r3, [r7, #15]
      break;
 800a558:	e00a      	b.n	800a570 <USBH_HandleControl+0x484>

    default:
      break;
 800a55a:	bf00      	nop
 800a55c:	e008      	b.n	800a570 <USBH_HandleControl+0x484>
      break;
 800a55e:	bf00      	nop
 800a560:	e006      	b.n	800a570 <USBH_HandleControl+0x484>
      break;
 800a562:	bf00      	nop
 800a564:	e004      	b.n	800a570 <USBH_HandleControl+0x484>
      break;
 800a566:	bf00      	nop
 800a568:	e002      	b.n	800a570 <USBH_HandleControl+0x484>
      break;
 800a56a:	bf00      	nop
 800a56c:	e000      	b.n	800a570 <USBH_HandleControl+0x484>
      break;
 800a56e:	bf00      	nop
  }

  return status;
 800a570:	7bfb      	ldrb	r3, [r7, #15]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop

0800a57c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b088      	sub	sp, #32
 800a580:	af04      	add	r7, sp, #16
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	4613      	mov	r3, r2
 800a588:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a58a:	79f9      	ldrb	r1, [r7, #7]
 800a58c:	2300      	movs	r3, #0
 800a58e:	9303      	str	r3, [sp, #12]
 800a590:	2308      	movs	r3, #8
 800a592:	9302      	str	r3, [sp, #8]
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	9301      	str	r3, [sp, #4]
 800a598:	2300      	movs	r3, #0
 800a59a:	9300      	str	r3, [sp, #0]
 800a59c:	2300      	movs	r3, #0
 800a59e:	2200      	movs	r2, #0
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f002 fe3e 	bl	800d222 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b088      	sub	sp, #32
 800a5b4:	af04      	add	r7, sp, #16
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	461a      	mov	r2, r3
 800a5be:	460b      	mov	r3, r1
 800a5c0:	80fb      	strh	r3, [r7, #6]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a5d4:	7979      	ldrb	r1, [r7, #5]
 800a5d6:	7e3b      	ldrb	r3, [r7, #24]
 800a5d8:	9303      	str	r3, [sp, #12]
 800a5da:	88fb      	ldrh	r3, [r7, #6]
 800a5dc:	9302      	str	r3, [sp, #8]
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	9301      	str	r3, [sp, #4]
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f002 fe19 	bl	800d222 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b088      	sub	sp, #32
 800a5fe:	af04      	add	r7, sp, #16
 800a600:	60f8      	str	r0, [r7, #12]
 800a602:	60b9      	str	r1, [r7, #8]
 800a604:	4611      	mov	r1, r2
 800a606:	461a      	mov	r2, r3
 800a608:	460b      	mov	r3, r1
 800a60a:	80fb      	strh	r3, [r7, #6]
 800a60c:	4613      	mov	r3, r2
 800a60e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a610:	7979      	ldrb	r1, [r7, #5]
 800a612:	2300      	movs	r3, #0
 800a614:	9303      	str	r3, [sp, #12]
 800a616:	88fb      	ldrh	r3, [r7, #6]
 800a618:	9302      	str	r3, [sp, #8]
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	9301      	str	r3, [sp, #4]
 800a61e:	2301      	movs	r3, #1
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	2300      	movs	r3, #0
 800a624:	2201      	movs	r2, #1
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f002 fdfb 	bl	800d222 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a62c:	2300      	movs	r3, #0

}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b088      	sub	sp, #32
 800a63a:	af04      	add	r7, sp, #16
 800a63c:	60f8      	str	r0, [r7, #12]
 800a63e:	60b9      	str	r1, [r7, #8]
 800a640:	4611      	mov	r1, r2
 800a642:	461a      	mov	r2, r3
 800a644:	460b      	mov	r3, r1
 800a646:	80fb      	strh	r3, [r7, #6]
 800a648:	4613      	mov	r3, r2
 800a64a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a652:	2b00      	cmp	r3, #0
 800a654:	d001      	beq.n	800a65a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a656:	2300      	movs	r3, #0
 800a658:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a65a:	7979      	ldrb	r1, [r7, #5]
 800a65c:	7e3b      	ldrb	r3, [r7, #24]
 800a65e:	9303      	str	r3, [sp, #12]
 800a660:	88fb      	ldrh	r3, [r7, #6]
 800a662:	9302      	str	r3, [sp, #8]
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	9301      	str	r3, [sp, #4]
 800a668:	2301      	movs	r3, #1
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	2302      	movs	r3, #2
 800a66e:	2200      	movs	r2, #0
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f002 fdd6 	bl	800d222 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b088      	sub	sp, #32
 800a684:	af04      	add	r7, sp, #16
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	4611      	mov	r1, r2
 800a68c:	461a      	mov	r2, r3
 800a68e:	460b      	mov	r3, r1
 800a690:	80fb      	strh	r3, [r7, #6]
 800a692:	4613      	mov	r3, r2
 800a694:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a696:	7979      	ldrb	r1, [r7, #5]
 800a698:	2300      	movs	r3, #0
 800a69a:	9303      	str	r3, [sp, #12]
 800a69c:	88fb      	ldrh	r3, [r7, #6]
 800a69e:	9302      	str	r3, [sp, #8]
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	9301      	str	r3, [sp, #4]
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f002 fdb8 	bl	800d222 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af04      	add	r7, sp, #16
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	4608      	mov	r0, r1
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	70fb      	strb	r3, [r7, #3]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	70bb      	strb	r3, [r7, #2]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a6d6:	7878      	ldrb	r0, [r7, #1]
 800a6d8:	78ba      	ldrb	r2, [r7, #2]
 800a6da:	78f9      	ldrb	r1, [r7, #3]
 800a6dc:	8b3b      	ldrh	r3, [r7, #24]
 800a6de:	9302      	str	r3, [sp, #8]
 800a6e0:	7d3b      	ldrb	r3, [r7, #20]
 800a6e2:	9301      	str	r3, [sp, #4]
 800a6e4:	7c3b      	ldrb	r3, [r7, #16]
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f002 fd4b 	bl	800d186 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b082      	sub	sp, #8
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	460b      	mov	r3, r1
 800a704:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a706:	78fb      	ldrb	r3, [r7, #3]
 800a708:	4619      	mov	r1, r3
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f002 fd6a 	bl	800d1e4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b084      	sub	sp, #16
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	460b      	mov	r3, r1
 800a724:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 f836 	bl	800a798 <USBH_GetFreePipe>
 800a72c:	4603      	mov	r3, r0
 800a72e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a730:	89fb      	ldrh	r3, [r7, #14]
 800a732:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a736:	4293      	cmp	r3, r2
 800a738:	d00a      	beq.n	800a750 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a73a:	78fa      	ldrb	r2, [r7, #3]
 800a73c:	89fb      	ldrh	r3, [r7, #14]
 800a73e:	f003 030f 	and.w	r3, r3, #15
 800a742:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a746:	6879      	ldr	r1, [r7, #4]
 800a748:	33e0      	adds	r3, #224	@ 0xe0
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	440b      	add	r3, r1
 800a74e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a750:	89fb      	ldrh	r3, [r7, #14]
 800a752:	b2db      	uxtb	r3, r3
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	460b      	mov	r3, r1
 800a766:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a768:	78fb      	ldrb	r3, [r7, #3]
 800a76a:	2b0f      	cmp	r3, #15
 800a76c:	d80d      	bhi.n	800a78a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a76e:	78fb      	ldrb	r3, [r7, #3]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	33e0      	adds	r3, #224	@ 0xe0
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	685a      	ldr	r2, [r3, #4]
 800a77a:	78fb      	ldrb	r3, [r7, #3]
 800a77c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a780:	6879      	ldr	r1, [r7, #4]
 800a782:	33e0      	adds	r3, #224	@ 0xe0
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	440b      	add	r3, r1
 800a788:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	73fb      	strb	r3, [r7, #15]
 800a7a8:	e00f      	b.n	800a7ca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	33e0      	adds	r3, #224	@ 0xe0
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d102      	bne.n	800a7c4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a7be:	7bfb      	ldrb	r3, [r7, #15]
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	e007      	b.n	800a7d4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a7c4:	7bfb      	ldrb	r3, [r7, #15]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	73fb      	strb	r3, [r7, #15]
 800a7ca:	7bfb      	ldrb	r3, [r7, #15]
 800a7cc:	2b0f      	cmp	r3, #15
 800a7ce:	d9ec      	bls.n	800a7aa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a7d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3714      	adds	r7, #20
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a7ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a7f2:	2b84      	cmp	r3, #132	@ 0x84
 800a7f4:	d005      	beq.n	800a802 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a7f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	3303      	adds	r3, #3
 800a800:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a802:	68fb      	ldr	r3, [r7, #12]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a816:	f3ef 8305 	mrs	r3, IPSR
 800a81a:	607b      	str	r3, [r7, #4]
  return(result);
 800a81c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a81e:	2b00      	cmp	r3, #0
 800a820:	bf14      	ite	ne
 800a822:	2301      	movne	r3, #1
 800a824:	2300      	moveq	r3, #0
 800a826:	b2db      	uxtb	r3, r3
}
 800a828:	4618      	mov	r0, r3
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a838:	f001 f95a 	bl	800baf0 <vTaskStartScheduler>
  
  return osOK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	bd80      	pop	{r7, pc}

0800a842 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a842:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a844:	b089      	sub	sp, #36	@ 0x24
 800a846:	af04      	add	r7, sp, #16
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	695b      	ldr	r3, [r3, #20]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d020      	beq.n	800a896 <osThreadCreate+0x54>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d01c      	beq.n	800a896 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	685c      	ldr	r4, [r3, #4]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	691e      	ldr	r6, [r3, #16]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a86e:	4618      	mov	r0, r3
 800a870:	f7ff ffb6 	bl	800a7e0 <makeFreeRtosPriority>
 800a874:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a87e:	9202      	str	r2, [sp, #8]
 800a880:	9301      	str	r3, [sp, #4]
 800a882:	9100      	str	r1, [sp, #0]
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	4632      	mov	r2, r6
 800a888:	4629      	mov	r1, r5
 800a88a:	4620      	mov	r0, r4
 800a88c:	f000 ff4e 	bl	800b72c <xTaskCreateStatic>
 800a890:	4603      	mov	r3, r0
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	e01c      	b.n	800a8d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	685c      	ldr	r4, [r3, #4]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a8a2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff ff98 	bl	800a7e0 <makeFreeRtosPriority>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	f107 030c 	add.w	r3, r7, #12
 800a8b6:	9301      	str	r3, [sp, #4]
 800a8b8:	9200      	str	r2, [sp, #0]
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	4632      	mov	r2, r6
 800a8be:	4629      	mov	r1, r5
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f000 ff99 	bl	800b7f8 <xTaskCreate>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d001      	beq.n	800a8d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	e000      	b.n	800a8d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3714      	adds	r7, #20
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a8da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b084      	sub	sp, #16
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d001      	beq.n	800a8f0 <osDelay+0x16>
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	e000      	b.n	800a8f2 <osDelay+0x18>
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f001 f8c4 	bl	800ba80 <vTaskDelay>
  
  return osOK;
 800a8f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a902:	b590      	push	{r4, r7, lr}
 800a904:	b085      	sub	sp, #20
 800a906:	af02      	add	r7, sp, #8
 800a908:	6078      	str	r0, [r7, #4]
 800a90a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d011      	beq.n	800a938 <osMessageCreate+0x36>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00d      	beq.n	800a938 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6818      	ldr	r0, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6859      	ldr	r1, [r3, #4]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	689a      	ldr	r2, [r3, #8]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	2400      	movs	r4, #0
 800a92e:	9400      	str	r4, [sp, #0]
 800a930:	f000 f9e4 	bl	800acfc <xQueueGenericCreateStatic>
 800a934:	4603      	mov	r3, r0
 800a936:	e008      	b.n	800a94a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6818      	ldr	r0, [r3, #0]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	4619      	mov	r1, r3
 800a944:	f000 fa61 	bl	800ae0a <xQueueGenericCreate>
 800a948:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd90      	pop	{r4, r7, pc}
	...

0800a954 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b086      	sub	sp, #24
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a960:	2300      	movs	r3, #0
 800a962:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d101      	bne.n	800a972 <osMessagePut+0x1e>
    ticks = 1;
 800a96e:	2301      	movs	r3, #1
 800a970:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a972:	f7ff ff4d 	bl	800a810 <inHandlerMode>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d018      	beq.n	800a9ae <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a97c:	f107 0210 	add.w	r2, r7, #16
 800a980:	f107 0108 	add.w	r1, r7, #8
 800a984:	2300      	movs	r3, #0
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f000 fbac 	bl	800b0e4 <xQueueGenericSendFromISR>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d001      	beq.n	800a996 <osMessagePut+0x42>
      return osErrorOS;
 800a992:	23ff      	movs	r3, #255	@ 0xff
 800a994:	e018      	b.n	800a9c8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d014      	beq.n	800a9c6 <osMessagePut+0x72>
 800a99c:	4b0c      	ldr	r3, [pc, #48]	@ (800a9d0 <osMessagePut+0x7c>)
 800a99e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9a2:	601a      	str	r2, [r3, #0]
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	e00b      	b.n	800a9c6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a9ae:	f107 0108 	add.w	r1, r7, #8
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	697a      	ldr	r2, [r7, #20]
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f000 fa8a 	bl	800aed0 <xQueueGenericSend>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d001      	beq.n	800a9c6 <osMessagePut+0x72>
      return osErrorOS;
 800a9c2:	23ff      	movs	r3, #255	@ 0xff
 800a9c4:	e000      	b.n	800a9c8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3718      	adds	r7, #24
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	e000ed04 	.word	0xe000ed04

0800a9d4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a9d4:	b590      	push	{r4, r7, lr}
 800a9d6:	b08b      	sub	sp, #44	@ 0x2c
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d10a      	bne.n	800aa04 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a9ee:	2380      	movs	r3, #128	@ 0x80
 800a9f0:	617b      	str	r3, [r7, #20]
    return event;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	461c      	mov	r4, r3
 800a9f6:	f107 0314 	add.w	r3, r7, #20
 800a9fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a9fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aa02:	e054      	b.n	800aaae <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800aa04:	2300      	movs	r3, #0
 800aa06:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa12:	d103      	bne.n	800aa1c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800aa14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa18:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa1a:	e009      	b.n	800aa30 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d006      	beq.n	800aa30 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800aa26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d101      	bne.n	800aa30 <osMessageGet+0x5c>
      ticks = 1;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800aa30:	f7ff feee 	bl	800a810 <inHandlerMode>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d01c      	beq.n	800aa74 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800aa3a:	f107 0220 	add.w	r2, r7, #32
 800aa3e:	f107 0314 	add.w	r3, r7, #20
 800aa42:	3304      	adds	r3, #4
 800aa44:	4619      	mov	r1, r3
 800aa46:	68b8      	ldr	r0, [r7, #8]
 800aa48:	f000 fcd8 	bl	800b3fc <xQueueReceiveFromISR>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d102      	bne.n	800aa58 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800aa52:	2310      	movs	r3, #16
 800aa54:	617b      	str	r3, [r7, #20]
 800aa56:	e001      	b.n	800aa5c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d01d      	beq.n	800aa9e <osMessageGet+0xca>
 800aa62:	4b15      	ldr	r3, [pc, #84]	@ (800aab8 <osMessageGet+0xe4>)
 800aa64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa68:	601a      	str	r2, [r3, #0]
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	e014      	b.n	800aa9e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800aa74:	f107 0314 	add.w	r3, r7, #20
 800aa78:	3304      	adds	r3, #4
 800aa7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	68b8      	ldr	r0, [r7, #8]
 800aa80:	f000 fbd4 	bl	800b22c <xQueueReceive>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d102      	bne.n	800aa90 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800aa8a:	2310      	movs	r3, #16
 800aa8c:	617b      	str	r3, [r7, #20]
 800aa8e:	e006      	b.n	800aa9e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800aa90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d101      	bne.n	800aa9a <osMessageGet+0xc6>
 800aa96:	2300      	movs	r3, #0
 800aa98:	e000      	b.n	800aa9c <osMessageGet+0xc8>
 800aa9a:	2340      	movs	r3, #64	@ 0x40
 800aa9c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	461c      	mov	r4, r3
 800aaa2:	f107 0314 	add.w	r3, r7, #20
 800aaa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aaaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	372c      	adds	r7, #44	@ 0x2c
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd90      	pop	{r4, r7, pc}
 800aab6:	bf00      	nop
 800aab8:	e000ed04 	.word	0xe000ed04

0800aabc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f103 0208 	add.w	r2, r3, #8
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aad4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f103 0208 	add.w	r2, r3, #8
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f103 0208 	add.w	r2, r3, #8
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab0a:	bf00      	nop
 800ab0c:	370c      	adds	r7, #12
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab16:	b480      	push	{r7}
 800ab18:	b085      	sub	sp, #20
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
 800ab1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	689a      	ldr	r2, [r3, #8]
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	683a      	ldr	r2, [r7, #0]
 800ab40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	1c5a      	adds	r2, r3, #1
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	601a      	str	r2, [r3, #0]
}
 800ab52:	bf00      	nop
 800ab54:	3714      	adds	r7, #20
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab5e:	b480      	push	{r7}
 800ab60:	b085      	sub	sp, #20
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab74:	d103      	bne.n	800ab7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	60fb      	str	r3, [r7, #12]
 800ab7c:	e00c      	b.n	800ab98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3308      	adds	r3, #8
 800ab82:	60fb      	str	r3, [r7, #12]
 800ab84:	e002      	b.n	800ab8c <vListInsert+0x2e>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	60fb      	str	r3, [r7, #12]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	68ba      	ldr	r2, [r7, #8]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d2f6      	bcs.n	800ab86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	683a      	ldr	r2, [r7, #0]
 800aba6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	1c5a      	adds	r2, r3, #1
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	601a      	str	r2, [r3, #0]
}
 800abc4:	bf00      	nop
 800abc6:	3714      	adds	r7, #20
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800abd0:	b480      	push	{r7}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	6892      	ldr	r2, [r2, #8]
 800abe6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	6852      	ldr	r2, [r2, #4]
 800abf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d103      	bne.n	800ac04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	689a      	ldr	r2, [r3, #8]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	1e5a      	subs	r2, r3, #1
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d10d      	bne.n	800ac54 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ac38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac3c:	b672      	cpsid	i
 800ac3e:	f383 8811 	msr	BASEPRI, r3
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	b662      	cpsie	i
 800ac4c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ac4e:	bf00      	nop
 800ac50:	bf00      	nop
 800ac52:	e7fd      	b.n	800ac50 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ac54:	f001 fdb2 	bl	800c7bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac60:	68f9      	ldr	r1, [r7, #12]
 800ac62:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ac64:	fb01 f303 	mul.w	r3, r1, r3
 800ac68:	441a      	add	r2, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac84:	3b01      	subs	r3, #1
 800ac86:	68f9      	ldr	r1, [r7, #12]
 800ac88:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ac8a:	fb01 f303 	mul.w	r3, r1, r3
 800ac8e:	441a      	add	r2, r3
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	22ff      	movs	r2, #255	@ 0xff
 800ac98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	22ff      	movs	r2, #255	@ 0xff
 800aca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d114      	bne.n	800acd4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d01a      	beq.n	800ace8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	3310      	adds	r3, #16
 800acb6:	4618      	mov	r0, r3
 800acb8:	f001 f996 	bl	800bfe8 <xTaskRemoveFromEventList>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d012      	beq.n	800ace8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800acc2:	4b0d      	ldr	r3, [pc, #52]	@ (800acf8 <xQueueGenericReset+0xd4>)
 800acc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acc8:	601a      	str	r2, [r3, #0]
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	e009      	b.n	800ace8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	3310      	adds	r3, #16
 800acd8:	4618      	mov	r0, r3
 800acda:	f7ff feef 	bl	800aabc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	3324      	adds	r3, #36	@ 0x24
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7ff feea 	bl	800aabc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ace8:	f001 fd9e 	bl	800c828 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800acec:	2301      	movs	r3, #1
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	e000ed04 	.word	0xe000ed04

0800acfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b08e      	sub	sp, #56	@ 0x38
 800ad00:	af02      	add	r7, sp, #8
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
 800ad08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d10d      	bne.n	800ad2c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800ad10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad14:	b672      	cpsid	i
 800ad16:	f383 8811 	msr	BASEPRI, r3
 800ad1a:	f3bf 8f6f 	isb	sy
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	b662      	cpsie	i
 800ad24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ad26:	bf00      	nop
 800ad28:	bf00      	nop
 800ad2a:	e7fd      	b.n	800ad28 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d10d      	bne.n	800ad4e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800ad32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad36:	b672      	cpsid	i
 800ad38:	f383 8811 	msr	BASEPRI, r3
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	f3bf 8f4f 	dsb	sy
 800ad44:	b662      	cpsie	i
 800ad46:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ad48:	bf00      	nop
 800ad4a:	bf00      	nop
 800ad4c:	e7fd      	b.n	800ad4a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d002      	beq.n	800ad5a <xQueueGenericCreateStatic+0x5e>
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d001      	beq.n	800ad5e <xQueueGenericCreateStatic+0x62>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e000      	b.n	800ad60 <xQueueGenericCreateStatic+0x64>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10d      	bne.n	800ad80 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800ad64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad68:	b672      	cpsid	i
 800ad6a:	f383 8811 	msr	BASEPRI, r3
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f3bf 8f4f 	dsb	sy
 800ad76:	b662      	cpsie	i
 800ad78:	623b      	str	r3, [r7, #32]
}
 800ad7a:	bf00      	nop
 800ad7c:	bf00      	nop
 800ad7e:	e7fd      	b.n	800ad7c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d102      	bne.n	800ad8c <xQueueGenericCreateStatic+0x90>
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <xQueueGenericCreateStatic+0x94>
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e000      	b.n	800ad92 <xQueueGenericCreateStatic+0x96>
 800ad90:	2300      	movs	r3, #0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10d      	bne.n	800adb2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800ad96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad9a:	b672      	cpsid	i
 800ad9c:	f383 8811 	msr	BASEPRI, r3
 800ada0:	f3bf 8f6f 	isb	sy
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	b662      	cpsie	i
 800adaa:	61fb      	str	r3, [r7, #28]
}
 800adac:	bf00      	nop
 800adae:	bf00      	nop
 800adb0:	e7fd      	b.n	800adae <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800adb2:	2348      	movs	r3, #72	@ 0x48
 800adb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	2b48      	cmp	r3, #72	@ 0x48
 800adba:	d00d      	beq.n	800add8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc0:	b672      	cpsid	i
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	b662      	cpsie	i
 800add0:	61bb      	str	r3, [r7, #24]
}
 800add2:	bf00      	nop
 800add4:	bf00      	nop
 800add6:	e7fd      	b.n	800add4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800add8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800adde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d00d      	beq.n	800ae00 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ade4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade6:	2201      	movs	r2, #1
 800ade8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800adec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800adf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	4613      	mov	r3, r2
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	68b9      	ldr	r1, [r7, #8]
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	f000 f848 	bl	800ae90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3730      	adds	r7, #48	@ 0x30
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b08a      	sub	sp, #40	@ 0x28
 800ae0e:	af02      	add	r7, sp, #8
 800ae10:	60f8      	str	r0, [r7, #12]
 800ae12:	60b9      	str	r1, [r7, #8]
 800ae14:	4613      	mov	r3, r2
 800ae16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10d      	bne.n	800ae3a <xQueueGenericCreate+0x30>
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae22:	b672      	cpsid	i
 800ae24:	f383 8811 	msr	BASEPRI, r3
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	b662      	cpsie	i
 800ae32:	613b      	str	r3, [r7, #16]
}
 800ae34:	bf00      	nop
 800ae36:	bf00      	nop
 800ae38:	e7fd      	b.n	800ae36 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d102      	bne.n	800ae46 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ae40:	2300      	movs	r3, #0
 800ae42:	61fb      	str	r3, [r7, #28]
 800ae44:	e004      	b.n	800ae50 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	fb02 f303 	mul.w	r3, r2, r3
 800ae4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	3348      	adds	r3, #72	@ 0x48
 800ae54:	4618      	mov	r0, r3
 800ae56:	f001 fddf 	bl	800ca18 <pvPortMalloc>
 800ae5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d011      	beq.n	800ae86 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	3348      	adds	r3, #72	@ 0x48
 800ae6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae74:	79fa      	ldrb	r2, [r7, #7]
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	9300      	str	r3, [sp, #0]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	697a      	ldr	r2, [r7, #20]
 800ae7e:	68b9      	ldr	r1, [r7, #8]
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f000 f805 	bl	800ae90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae86:	69bb      	ldr	r3, [r7, #24]
	}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3720      	adds	r7, #32
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	607a      	str	r2, [r7, #4]
 800ae9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d103      	bne.n	800aeac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	69ba      	ldr	r2, [r7, #24]
 800aea8:	601a      	str	r2, [r3, #0]
 800aeaa:	e002      	b.n	800aeb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aebe:	2101      	movs	r1, #1
 800aec0:	69b8      	ldr	r0, [r7, #24]
 800aec2:	f7ff feaf 	bl	800ac24 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aec6:	bf00      	nop
 800aec8:	3710      	adds	r7, #16
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
	...

0800aed0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b08e      	sub	sp, #56	@ 0x38
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
 800aedc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aede:	2300      	movs	r3, #0
 800aee0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10d      	bne.n	800af08 <xQueueGenericSend+0x38>
	__asm volatile
 800aeec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef0:	b672      	cpsid	i
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	b662      	cpsie	i
 800af00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af02:	bf00      	nop
 800af04:	bf00      	nop
 800af06:	e7fd      	b.n	800af04 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d103      	bne.n	800af16 <xQueueGenericSend+0x46>
 800af0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af12:	2b00      	cmp	r3, #0
 800af14:	d101      	bne.n	800af1a <xQueueGenericSend+0x4a>
 800af16:	2301      	movs	r3, #1
 800af18:	e000      	b.n	800af1c <xQueueGenericSend+0x4c>
 800af1a:	2300      	movs	r3, #0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d10d      	bne.n	800af3c <xQueueGenericSend+0x6c>
	__asm volatile
 800af20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af24:	b672      	cpsid	i
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	b662      	cpsie	i
 800af34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800af36:	bf00      	nop
 800af38:	bf00      	nop
 800af3a:	e7fd      	b.n	800af38 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	2b02      	cmp	r3, #2
 800af40:	d103      	bne.n	800af4a <xQueueGenericSend+0x7a>
 800af42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af46:	2b01      	cmp	r3, #1
 800af48:	d101      	bne.n	800af4e <xQueueGenericSend+0x7e>
 800af4a:	2301      	movs	r3, #1
 800af4c:	e000      	b.n	800af50 <xQueueGenericSend+0x80>
 800af4e:	2300      	movs	r3, #0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10d      	bne.n	800af70 <xQueueGenericSend+0xa0>
	__asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af58:	b672      	cpsid	i
 800af5a:	f383 8811 	msr	BASEPRI, r3
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	f3bf 8f4f 	dsb	sy
 800af66:	b662      	cpsie	i
 800af68:	623b      	str	r3, [r7, #32]
}
 800af6a:	bf00      	nop
 800af6c:	bf00      	nop
 800af6e:	e7fd      	b.n	800af6c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af70:	f001 fa04 	bl	800c37c <xTaskGetSchedulerState>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d102      	bne.n	800af80 <xQueueGenericSend+0xb0>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d101      	bne.n	800af84 <xQueueGenericSend+0xb4>
 800af80:	2301      	movs	r3, #1
 800af82:	e000      	b.n	800af86 <xQueueGenericSend+0xb6>
 800af84:	2300      	movs	r3, #0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10d      	bne.n	800afa6 <xQueueGenericSend+0xd6>
	__asm volatile
 800af8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af8e:	b672      	cpsid	i
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	b662      	cpsie	i
 800af9e:	61fb      	str	r3, [r7, #28]
}
 800afa0:	bf00      	nop
 800afa2:	bf00      	nop
 800afa4:	e7fd      	b.n	800afa2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800afa6:	f001 fc09 	bl	800c7bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d302      	bcc.n	800afbc <xQueueGenericSend+0xec>
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	2b02      	cmp	r3, #2
 800afba:	d129      	bne.n	800b010 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afbc:	683a      	ldr	r2, [r7, #0]
 800afbe:	68b9      	ldr	r1, [r7, #8]
 800afc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800afc2:	f000 faa3 	bl	800b50c <prvCopyDataToQueue>
 800afc6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d010      	beq.n	800aff2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd2:	3324      	adds	r3, #36	@ 0x24
 800afd4:	4618      	mov	r0, r3
 800afd6:	f001 f807 	bl	800bfe8 <xTaskRemoveFromEventList>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d013      	beq.n	800b008 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800afe0:	4b3f      	ldr	r3, [pc, #252]	@ (800b0e0 <xQueueGenericSend+0x210>)
 800afe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afe6:	601a      	str	r2, [r3, #0]
 800afe8:	f3bf 8f4f 	dsb	sy
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	e00a      	b.n	800b008 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d007      	beq.n	800b008 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aff8:	4b39      	ldr	r3, [pc, #228]	@ (800b0e0 <xQueueGenericSend+0x210>)
 800affa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800affe:	601a      	str	r2, [r3, #0]
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b008:	f001 fc0e 	bl	800c828 <vPortExitCritical>
				return pdPASS;
 800b00c:	2301      	movs	r3, #1
 800b00e:	e063      	b.n	800b0d8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d103      	bne.n	800b01e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b016:	f001 fc07 	bl	800c828 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b01a:	2300      	movs	r3, #0
 800b01c:	e05c      	b.n	800b0d8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b01e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b020:	2b00      	cmp	r3, #0
 800b022:	d106      	bne.n	800b032 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b024:	f107 0314 	add.w	r3, r7, #20
 800b028:	4618      	mov	r0, r3
 800b02a:	f001 f843 	bl	800c0b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b02e:	2301      	movs	r3, #1
 800b030:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b032:	f001 fbf9 	bl	800c828 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b036:	f000 fdc1 	bl	800bbbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b03a:	f001 fbbf 	bl	800c7bc <vPortEnterCritical>
 800b03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b040:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b044:	b25b      	sxtb	r3, r3
 800b046:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b04a:	d103      	bne.n	800b054 <xQueueGenericSend+0x184>
 800b04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04e:	2200      	movs	r2, #0
 800b050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b056:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b05a:	b25b      	sxtb	r3, r3
 800b05c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b060:	d103      	bne.n	800b06a <xQueueGenericSend+0x19a>
 800b062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b064:	2200      	movs	r2, #0
 800b066:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b06a:	f001 fbdd 	bl	800c828 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b06e:	1d3a      	adds	r2, r7, #4
 800b070:	f107 0314 	add.w	r3, r7, #20
 800b074:	4611      	mov	r1, r2
 800b076:	4618      	mov	r0, r3
 800b078:	f001 f832 	bl	800c0e0 <xTaskCheckForTimeOut>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d124      	bne.n	800b0cc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b082:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b084:	f000 fb3a 	bl	800b6fc <prvIsQueueFull>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d018      	beq.n	800b0c0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b090:	3310      	adds	r3, #16
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	4611      	mov	r1, r2
 800b096:	4618      	mov	r0, r3
 800b098:	f000 ff7e 	bl	800bf98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b09c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b09e:	f000 fac5 	bl	800b62c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b0a2:	f000 fd99 	bl	800bbd8 <xTaskResumeAll>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f47f af7c 	bne.w	800afa6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800b0ae:	4b0c      	ldr	r3, [pc, #48]	@ (800b0e0 <xQueueGenericSend+0x210>)
 800b0b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0b4:	601a      	str	r2, [r3, #0]
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	e772      	b.n	800afa6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b0c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0c2:	f000 fab3 	bl	800b62c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b0c6:	f000 fd87 	bl	800bbd8 <xTaskResumeAll>
 800b0ca:	e76c      	b.n	800afa6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b0cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0ce:	f000 faad 	bl	800b62c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b0d2:	f000 fd81 	bl	800bbd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b0d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3738      	adds	r7, #56	@ 0x38
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	e000ed04 	.word	0xe000ed04

0800b0e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b08e      	sub	sp, #56	@ 0x38
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
 800b0f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d10d      	bne.n	800b118 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800b0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b100:	b672      	cpsid	i
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	b662      	cpsie	i
 800b110:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b112:	bf00      	nop
 800b114:	bf00      	nop
 800b116:	e7fd      	b.n	800b114 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d103      	bne.n	800b126 <xQueueGenericSendFromISR+0x42>
 800b11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b122:	2b00      	cmp	r3, #0
 800b124:	d101      	bne.n	800b12a <xQueueGenericSendFromISR+0x46>
 800b126:	2301      	movs	r3, #1
 800b128:	e000      	b.n	800b12c <xQueueGenericSendFromISR+0x48>
 800b12a:	2300      	movs	r3, #0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d10d      	bne.n	800b14c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800b130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b134:	b672      	cpsid	i
 800b136:	f383 8811 	msr	BASEPRI, r3
 800b13a:	f3bf 8f6f 	isb	sy
 800b13e:	f3bf 8f4f 	dsb	sy
 800b142:	b662      	cpsie	i
 800b144:	623b      	str	r3, [r7, #32]
}
 800b146:	bf00      	nop
 800b148:	bf00      	nop
 800b14a:	e7fd      	b.n	800b148 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d103      	bne.n	800b15a <xQueueGenericSendFromISR+0x76>
 800b152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b156:	2b01      	cmp	r3, #1
 800b158:	d101      	bne.n	800b15e <xQueueGenericSendFromISR+0x7a>
 800b15a:	2301      	movs	r3, #1
 800b15c:	e000      	b.n	800b160 <xQueueGenericSendFromISR+0x7c>
 800b15e:	2300      	movs	r3, #0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10d      	bne.n	800b180 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800b164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b168:	b672      	cpsid	i
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	b662      	cpsie	i
 800b178:	61fb      	str	r3, [r7, #28]
}
 800b17a:	bf00      	nop
 800b17c:	bf00      	nop
 800b17e:	e7fd      	b.n	800b17c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b180:	f001 fc04 	bl	800c98c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b184:	f3ef 8211 	mrs	r2, BASEPRI
 800b188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b18c:	b672      	cpsid	i
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	b662      	cpsie	i
 800b19c:	61ba      	str	r2, [r7, #24]
 800b19e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b1a0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d302      	bcc.n	800b1b6 <xQueueGenericSendFromISR+0xd2>
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	2b02      	cmp	r3, #2
 800b1b4:	d12c      	bne.n	800b210 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b1bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b1c0:	683a      	ldr	r2, [r7, #0]
 800b1c2:	68b9      	ldr	r1, [r7, #8]
 800b1c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1c6:	f000 f9a1 	bl	800b50c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b1ca:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800b1ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1d2:	d112      	bne.n	800b1fa <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d016      	beq.n	800b20a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1de:	3324      	adds	r3, #36	@ 0x24
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f000 ff01 	bl	800bfe8 <xTaskRemoveFromEventList>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00e      	beq.n	800b20a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00b      	beq.n	800b20a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	601a      	str	r2, [r3, #0]
 800b1f8:	e007      	b.n	800b20a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b1fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b1fe:	3301      	adds	r3, #1
 800b200:	b2db      	uxtb	r3, r3
 800b202:	b25a      	sxtb	r2, r3
 800b204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b206:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b20a:	2301      	movs	r3, #1
 800b20c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800b20e:	e001      	b.n	800b214 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b210:	2300      	movs	r3, #0
 800b212:	637b      	str	r3, [r7, #52]	@ 0x34
 800b214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b216:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b21e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b222:	4618      	mov	r0, r3
 800b224:	3738      	adds	r7, #56	@ 0x38
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
	...

0800b22c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b08c      	sub	sp, #48	@ 0x30
 800b230:	af00      	add	r7, sp, #0
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	60b9      	str	r1, [r7, #8]
 800b236:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b238:	2300      	movs	r3, #0
 800b23a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b242:	2b00      	cmp	r3, #0
 800b244:	d10d      	bne.n	800b262 <xQueueReceive+0x36>
	__asm volatile
 800b246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b24a:	b672      	cpsid	i
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	b662      	cpsie	i
 800b25a:	623b      	str	r3, [r7, #32]
}
 800b25c:	bf00      	nop
 800b25e:	bf00      	nop
 800b260:	e7fd      	b.n	800b25e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d103      	bne.n	800b270 <xQueueReceive+0x44>
 800b268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <xQueueReceive+0x48>
 800b270:	2301      	movs	r3, #1
 800b272:	e000      	b.n	800b276 <xQueueReceive+0x4a>
 800b274:	2300      	movs	r3, #0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10d      	bne.n	800b296 <xQueueReceive+0x6a>
	__asm volatile
 800b27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b27e:	b672      	cpsid	i
 800b280:	f383 8811 	msr	BASEPRI, r3
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	b662      	cpsie	i
 800b28e:	61fb      	str	r3, [r7, #28]
}
 800b290:	bf00      	nop
 800b292:	bf00      	nop
 800b294:	e7fd      	b.n	800b292 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b296:	f001 f871 	bl	800c37c <xTaskGetSchedulerState>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d102      	bne.n	800b2a6 <xQueueReceive+0x7a>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d101      	bne.n	800b2aa <xQueueReceive+0x7e>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e000      	b.n	800b2ac <xQueueReceive+0x80>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d10d      	bne.n	800b2cc <xQueueReceive+0xa0>
	__asm volatile
 800b2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b4:	b672      	cpsid	i
 800b2b6:	f383 8811 	msr	BASEPRI, r3
 800b2ba:	f3bf 8f6f 	isb	sy
 800b2be:	f3bf 8f4f 	dsb	sy
 800b2c2:	b662      	cpsie	i
 800b2c4:	61bb      	str	r3, [r7, #24]
}
 800b2c6:	bf00      	nop
 800b2c8:	bf00      	nop
 800b2ca:	e7fd      	b.n	800b2c8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2cc:	f001 fa76 	bl	800c7bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2d4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d01f      	beq.n	800b31c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b2dc:	68b9      	ldr	r1, [r7, #8]
 800b2de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2e0:	f000 f97e 	bl	800b5e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e6:	1e5a      	subs	r2, r3, #1
 800b2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00f      	beq.n	800b314 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2f6:	3310      	adds	r3, #16
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f000 fe75 	bl	800bfe8 <xTaskRemoveFromEventList>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d007      	beq.n	800b314 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b304:	4b3c      	ldr	r3, [pc, #240]	@ (800b3f8 <xQueueReceive+0x1cc>)
 800b306:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b30a:	601a      	str	r2, [r3, #0]
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b314:	f001 fa88 	bl	800c828 <vPortExitCritical>
				return pdPASS;
 800b318:	2301      	movs	r3, #1
 800b31a:	e069      	b.n	800b3f0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d103      	bne.n	800b32a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b322:	f001 fa81 	bl	800c828 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b326:	2300      	movs	r3, #0
 800b328:	e062      	b.n	800b3f0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d106      	bne.n	800b33e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b330:	f107 0310 	add.w	r3, r7, #16
 800b334:	4618      	mov	r0, r3
 800b336:	f000 febd 	bl	800c0b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b33a:	2301      	movs	r3, #1
 800b33c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b33e:	f001 fa73 	bl	800c828 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b342:	f000 fc3b 	bl	800bbbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b346:	f001 fa39 	bl	800c7bc <vPortEnterCritical>
 800b34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b34c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b350:	b25b      	sxtb	r3, r3
 800b352:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b356:	d103      	bne.n	800b360 <xQueueReceive+0x134>
 800b358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b362:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b366:	b25b      	sxtb	r3, r3
 800b368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b36c:	d103      	bne.n	800b376 <xQueueReceive+0x14a>
 800b36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b370:	2200      	movs	r2, #0
 800b372:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b376:	f001 fa57 	bl	800c828 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b37a:	1d3a      	adds	r2, r7, #4
 800b37c:	f107 0310 	add.w	r3, r7, #16
 800b380:	4611      	mov	r1, r2
 800b382:	4618      	mov	r0, r3
 800b384:	f000 feac 	bl	800c0e0 <xTaskCheckForTimeOut>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d123      	bne.n	800b3d6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b38e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b390:	f000 f99e 	bl	800b6d0 <prvIsQueueEmpty>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d017      	beq.n	800b3ca <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39c:	3324      	adds	r3, #36	@ 0x24
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f000 fdf8 	bl	800bf98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3aa:	f000 f93f 	bl	800b62c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3ae:	f000 fc13 	bl	800bbd8 <xTaskResumeAll>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d189      	bne.n	800b2cc <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800b3b8:	4b0f      	ldr	r3, [pc, #60]	@ (800b3f8 <xQueueReceive+0x1cc>)
 800b3ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3be:	601a      	str	r2, [r3, #0]
 800b3c0:	f3bf 8f4f 	dsb	sy
 800b3c4:	f3bf 8f6f 	isb	sy
 800b3c8:	e780      	b.n	800b2cc <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b3ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3cc:	f000 f92e 	bl	800b62c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b3d0:	f000 fc02 	bl	800bbd8 <xTaskResumeAll>
 800b3d4:	e77a      	b.n	800b2cc <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b3d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3d8:	f000 f928 	bl	800b62c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3dc:	f000 fbfc 	bl	800bbd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3e2:	f000 f975 	bl	800b6d0 <prvIsQueueEmpty>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f43f af6f 	beq.w	800b2cc <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b3ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3730      	adds	r7, #48	@ 0x30
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	e000ed04 	.word	0xe000ed04

0800b3fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b08e      	sub	sp, #56	@ 0x38
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d10d      	bne.n	800b42e <xQueueReceiveFromISR+0x32>
	__asm volatile
 800b412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b416:	b672      	cpsid	i
 800b418:	f383 8811 	msr	BASEPRI, r3
 800b41c:	f3bf 8f6f 	isb	sy
 800b420:	f3bf 8f4f 	dsb	sy
 800b424:	b662      	cpsie	i
 800b426:	623b      	str	r3, [r7, #32]
}
 800b428:	bf00      	nop
 800b42a:	bf00      	nop
 800b42c:	e7fd      	b.n	800b42a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d103      	bne.n	800b43c <xQueueReceiveFromISR+0x40>
 800b434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d101      	bne.n	800b440 <xQueueReceiveFromISR+0x44>
 800b43c:	2301      	movs	r3, #1
 800b43e:	e000      	b.n	800b442 <xQueueReceiveFromISR+0x46>
 800b440:	2300      	movs	r3, #0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d10d      	bne.n	800b462 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800b446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b44a:	b672      	cpsid	i
 800b44c:	f383 8811 	msr	BASEPRI, r3
 800b450:	f3bf 8f6f 	isb	sy
 800b454:	f3bf 8f4f 	dsb	sy
 800b458:	b662      	cpsie	i
 800b45a:	61fb      	str	r3, [r7, #28]
}
 800b45c:	bf00      	nop
 800b45e:	bf00      	nop
 800b460:	e7fd      	b.n	800b45e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b462:	f001 fa93 	bl	800c98c <vPortValidateInterruptPriority>
	__asm volatile
 800b466:	f3ef 8211 	mrs	r2, BASEPRI
 800b46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b46e:	b672      	cpsid	i
 800b470:	f383 8811 	msr	BASEPRI, r3
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	f3bf 8f4f 	dsb	sy
 800b47c:	b662      	cpsie	i
 800b47e:	61ba      	str	r2, [r7, #24]
 800b480:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b482:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b484:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b48a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d02f      	beq.n	800b4f2 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b494:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b49c:	68b9      	ldr	r1, [r7, #8]
 800b49e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4a0:	f000 f89e 	bl	800b5e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a6:	1e5a      	subs	r2, r3, #1
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b4ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b4b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4b4:	d112      	bne.n	800b4dc <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d016      	beq.n	800b4ec <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c0:	3310      	adds	r3, #16
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f000 fd90 	bl	800bfe8 <xTaskRemoveFromEventList>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00e      	beq.n	800b4ec <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00b      	beq.n	800b4ec <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	601a      	str	r2, [r3, #0]
 800b4da:	e007      	b.n	800b4ec <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b4dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	b25a      	sxtb	r2, r3
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4f0:	e001      	b.n	800b4f6 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	f383 8811 	msr	BASEPRI, r3
}
 800b500:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b504:	4618      	mov	r0, r3
 800b506:	3738      	adds	r7, #56	@ 0x38
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b086      	sub	sp, #24
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b518:	2300      	movs	r3, #0
 800b51a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b520:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b526:	2b00      	cmp	r3, #0
 800b528:	d10d      	bne.n	800b546 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d14d      	bne.n	800b5ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	4618      	mov	r0, r3
 800b538:	f000 ff3e 	bl	800c3b8 <xTaskPriorityDisinherit>
 800b53c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2200      	movs	r2, #0
 800b542:	609a      	str	r2, [r3, #8]
 800b544:	e043      	b.n	800b5ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d119      	bne.n	800b580 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6858      	ldr	r0, [r3, #4]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b554:	461a      	mov	r2, r3
 800b556:	68b9      	ldr	r1, [r7, #8]
 800b558:	f002 f846 	bl	800d5e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	685a      	ldr	r2, [r3, #4]
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b564:	441a      	add	r2, r3
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	685a      	ldr	r2, [r3, #4]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	429a      	cmp	r2, r3
 800b574:	d32b      	bcc.n	800b5ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	605a      	str	r2, [r3, #4]
 800b57e:	e026      	b.n	800b5ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	68d8      	ldr	r0, [r3, #12]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b588:	461a      	mov	r2, r3
 800b58a:	68b9      	ldr	r1, [r7, #8]
 800b58c:	f002 f82c 	bl	800d5e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	68da      	ldr	r2, [r3, #12]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b598:	425b      	negs	r3, r3
 800b59a:	441a      	add	r2, r3
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	68da      	ldr	r2, [r3, #12]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d207      	bcs.n	800b5bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	689a      	ldr	r2, [r3, #8]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5b4:	425b      	negs	r3, r3
 800b5b6:	441a      	add	r2, r3
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d105      	bne.n	800b5ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b5d6:	697b      	ldr	r3, [r7, #20]
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3718      	adds	r7, #24
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d018      	beq.n	800b624 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	68da      	ldr	r2, [r3, #12]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5fa:	441a      	add	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	68da      	ldr	r2, [r3, #12]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d303      	bcc.n	800b614 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	68d9      	ldr	r1, [r3, #12]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b61c:	461a      	mov	r2, r3
 800b61e:	6838      	ldr	r0, [r7, #0]
 800b620:	f001 ffe2 	bl	800d5e8 <memcpy>
	}
}
 800b624:	bf00      	nop
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b634:	f001 f8c2 	bl	800c7bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b63e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b640:	e011      	b.n	800b666 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b646:	2b00      	cmp	r3, #0
 800b648:	d012      	beq.n	800b670 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	3324      	adds	r3, #36	@ 0x24
 800b64e:	4618      	mov	r0, r3
 800b650:	f000 fcca 	bl	800bfe8 <xTaskRemoveFromEventList>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d001      	beq.n	800b65e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b65a:	f000 fda9 	bl	800c1b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b65e:	7bfb      	ldrb	r3, [r7, #15]
 800b660:	3b01      	subs	r3, #1
 800b662:	b2db      	uxtb	r3, r3
 800b664:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	dce9      	bgt.n	800b642 <prvUnlockQueue+0x16>
 800b66e:	e000      	b.n	800b672 <prvUnlockQueue+0x46>
					break;
 800b670:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	22ff      	movs	r2, #255	@ 0xff
 800b676:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b67a:	f001 f8d5 	bl	800c828 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b67e:	f001 f89d 	bl	800c7bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b688:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b68a:	e011      	b.n	800b6b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d012      	beq.n	800b6ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3310      	adds	r3, #16
 800b698:	4618      	mov	r0, r3
 800b69a:	f000 fca5 	bl	800bfe8 <xTaskRemoveFromEventList>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d001      	beq.n	800b6a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b6a4:	f000 fd84 	bl	800c1b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b6a8:	7bbb      	ldrb	r3, [r7, #14]
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	dce9      	bgt.n	800b68c <prvUnlockQueue+0x60>
 800b6b8:	e000      	b.n	800b6bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b6ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	22ff      	movs	r2, #255	@ 0xff
 800b6c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b6c4:	f001 f8b0 	bl	800c828 <vPortExitCritical>
}
 800b6c8:	bf00      	nop
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6d8:	f001 f870 	bl	800c7bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d102      	bne.n	800b6ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	60fb      	str	r3, [r7, #12]
 800b6e8:	e001      	b.n	800b6ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6ee:	f001 f89b 	bl	800c828 <vPortExitCritical>

	return xReturn;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b704:	f001 f85a 	bl	800c7bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b710:	429a      	cmp	r2, r3
 800b712:	d102      	bne.n	800b71a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b714:	2301      	movs	r3, #1
 800b716:	60fb      	str	r3, [r7, #12]
 800b718:	e001      	b.n	800b71e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b71a:	2300      	movs	r3, #0
 800b71c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b71e:	f001 f883 	bl	800c828 <vPortExitCritical>

	return xReturn;
 800b722:	68fb      	ldr	r3, [r7, #12]
}
 800b724:	4618      	mov	r0, r3
 800b726:	3710      	adds	r7, #16
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b08e      	sub	sp, #56	@ 0x38
 800b730:	af04      	add	r7, sp, #16
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
 800b738:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b73a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d10d      	bne.n	800b75c <xTaskCreateStatic+0x30>
	__asm volatile
 800b740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b744:	b672      	cpsid	i
 800b746:	f383 8811 	msr	BASEPRI, r3
 800b74a:	f3bf 8f6f 	isb	sy
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	b662      	cpsie	i
 800b754:	623b      	str	r3, [r7, #32]
}
 800b756:	bf00      	nop
 800b758:	bf00      	nop
 800b75a:	e7fd      	b.n	800b758 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10d      	bne.n	800b77e <xTaskCreateStatic+0x52>
	__asm volatile
 800b762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b766:	b672      	cpsid	i
 800b768:	f383 8811 	msr	BASEPRI, r3
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	b662      	cpsie	i
 800b776:	61fb      	str	r3, [r7, #28]
}
 800b778:	bf00      	nop
 800b77a:	bf00      	nop
 800b77c:	e7fd      	b.n	800b77a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b77e:	2358      	movs	r3, #88	@ 0x58
 800b780:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	2b58      	cmp	r3, #88	@ 0x58
 800b786:	d00d      	beq.n	800b7a4 <xTaskCreateStatic+0x78>
	__asm volatile
 800b788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b78c:	b672      	cpsid	i
 800b78e:	f383 8811 	msr	BASEPRI, r3
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	b662      	cpsie	i
 800b79c:	61bb      	str	r3, [r7, #24]
}
 800b79e:	bf00      	nop
 800b7a0:	bf00      	nop
 800b7a2:	e7fd      	b.n	800b7a0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b7a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b7a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d01e      	beq.n	800b7ea <xTaskCreateStatic+0xbe>
 800b7ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d01b      	beq.n	800b7ea <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7b4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7ba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7be:	2202      	movs	r2, #2
 800b7c0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	9303      	str	r3, [sp, #12]
 800b7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ca:	9302      	str	r3, [sp, #8]
 800b7cc:	f107 0314 	add.w	r3, r7, #20
 800b7d0:	9301      	str	r3, [sp, #4]
 800b7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d4:	9300      	str	r3, [sp, #0]
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	68b9      	ldr	r1, [r7, #8]
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f000 f850 	bl	800b882 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b7e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b7e4:	f000 f8e2 	bl	800b9ac <prvAddNewTaskToReadyList>
 800b7e8:	e001      	b.n	800b7ee <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b7ee:	697b      	ldr	r3, [r7, #20]
	}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3728      	adds	r7, #40	@ 0x28
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b08c      	sub	sp, #48	@ 0x30
 800b7fc:	af04      	add	r7, sp, #16
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	603b      	str	r3, [r7, #0]
 800b804:	4613      	mov	r3, r2
 800b806:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b808:	88fb      	ldrh	r3, [r7, #6]
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4618      	mov	r0, r3
 800b80e:	f001 f903 	bl	800ca18 <pvPortMalloc>
 800b812:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d00e      	beq.n	800b838 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b81a:	2058      	movs	r0, #88	@ 0x58
 800b81c:	f001 f8fc 	bl	800ca18 <pvPortMalloc>
 800b820:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d003      	beq.n	800b830 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	697a      	ldr	r2, [r7, #20]
 800b82c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b82e:	e005      	b.n	800b83c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b830:	6978      	ldr	r0, [r7, #20]
 800b832:	f001 f9c3 	bl	800cbbc <vPortFree>
 800b836:	e001      	b.n	800b83c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b838:	2300      	movs	r3, #0
 800b83a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d017      	beq.n	800b872 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	2200      	movs	r2, #0
 800b846:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b84a:	88fa      	ldrh	r2, [r7, #6]
 800b84c:	2300      	movs	r3, #0
 800b84e:	9303      	str	r3, [sp, #12]
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	9302      	str	r3, [sp, #8]
 800b854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b856:	9301      	str	r3, [sp, #4]
 800b858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b85a:	9300      	str	r3, [sp, #0]
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	68b9      	ldr	r1, [r7, #8]
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 f80e 	bl	800b882 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b866:	69f8      	ldr	r0, [r7, #28]
 800b868:	f000 f8a0 	bl	800b9ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b86c:	2301      	movs	r3, #1
 800b86e:	61bb      	str	r3, [r7, #24]
 800b870:	e002      	b.n	800b878 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b876:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b878:	69bb      	ldr	r3, [r7, #24]
	}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3720      	adds	r7, #32
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b088      	sub	sp, #32
 800b886:	af00      	add	r7, sp, #0
 800b888:	60f8      	str	r0, [r7, #12]
 800b88a:	60b9      	str	r1, [r7, #8]
 800b88c:	607a      	str	r2, [r7, #4]
 800b88e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b892:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	461a      	mov	r2, r3
 800b89a:	21a5      	movs	r1, #165	@ 0xa5
 800b89c:	f001 fe60 	bl	800d560 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b8a4:	6879      	ldr	r1, [r7, #4]
 800b8a6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b8aa:	440b      	add	r3, r1
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	4413      	add	r3, r2
 800b8b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	f023 0307 	bic.w	r3, r3, #7
 800b8b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	f003 0307 	and.w	r3, r3, #7
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d00d      	beq.n	800b8e0 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800b8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c8:	b672      	cpsid	i
 800b8ca:	f383 8811 	msr	BASEPRI, r3
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	f3bf 8f4f 	dsb	sy
 800b8d6:	b662      	cpsie	i
 800b8d8:	617b      	str	r3, [r7, #20]
}
 800b8da:	bf00      	nop
 800b8dc:	bf00      	nop
 800b8de:	e7fd      	b.n	800b8dc <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d01f      	beq.n	800b926 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	61fb      	str	r3, [r7, #28]
 800b8ea:	e012      	b.n	800b912 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	7819      	ldrb	r1, [r3, #0]
 800b8f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	3334      	adds	r3, #52	@ 0x34
 800b8fc:	460a      	mov	r2, r1
 800b8fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	4413      	add	r3, r2
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d006      	beq.n	800b91a <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	3301      	adds	r3, #1
 800b910:	61fb      	str	r3, [r7, #28]
 800b912:	69fb      	ldr	r3, [r7, #28]
 800b914:	2b0f      	cmp	r3, #15
 800b916:	d9e9      	bls.n	800b8ec <prvInitialiseNewTask+0x6a>
 800b918:	e000      	b.n	800b91c <prvInitialiseNewTask+0x9a>
			{
				break;
 800b91a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91e:	2200      	movs	r2, #0
 800b920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b924:	e003      	b.n	800b92e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b930:	2b06      	cmp	r3, #6
 800b932:	d901      	bls.n	800b938 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b934:	2306      	movs	r3, #6
 800b936:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b93a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b93c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b940:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b942:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b946:	2200      	movs	r2, #0
 800b948:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b94c:	3304      	adds	r3, #4
 800b94e:	4618      	mov	r0, r3
 800b950:	f7ff f8d4 	bl	800aafc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b956:	3318      	adds	r3, #24
 800b958:	4618      	mov	r0, r3
 800b95a:	f7ff f8cf 	bl	800aafc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b962:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b966:	f1c3 0207 	rsb	r2, r3, #7
 800b96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b96c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b972:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b976:	2200      	movs	r2, #0
 800b978:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97c:	2200      	movs	r2, #0
 800b97e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b982:	2200      	movs	r2, #0
 800b984:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	68f9      	ldr	r1, [r7, #12]
 800b98c:	69b8      	ldr	r0, [r7, #24]
 800b98e:	f000 fe05 	bl	800c59c <pxPortInitialiseStack>
 800b992:	4602      	mov	r2, r0
 800b994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b996:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d002      	beq.n	800b9a4 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9a4:	bf00      	nop
 800b9a6:	3720      	adds	r7, #32
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b9b4:	f000 ff02 	bl	800c7bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b9b8:	4b2a      	ldr	r3, [pc, #168]	@ (800ba64 <prvAddNewTaskToReadyList+0xb8>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	4a29      	ldr	r2, [pc, #164]	@ (800ba64 <prvAddNewTaskToReadyList+0xb8>)
 800b9c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b9c2:	4b29      	ldr	r3, [pc, #164]	@ (800ba68 <prvAddNewTaskToReadyList+0xbc>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d109      	bne.n	800b9de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b9ca:	4a27      	ldr	r2, [pc, #156]	@ (800ba68 <prvAddNewTaskToReadyList+0xbc>)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b9d0:	4b24      	ldr	r3, [pc, #144]	@ (800ba64 <prvAddNewTaskToReadyList+0xb8>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d110      	bne.n	800b9fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b9d8:	f000 fc10 	bl	800c1fc <prvInitialiseTaskLists>
 800b9dc:	e00d      	b.n	800b9fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b9de:	4b23      	ldr	r3, [pc, #140]	@ (800ba6c <prvAddNewTaskToReadyList+0xc0>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d109      	bne.n	800b9fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b9e6:	4b20      	ldr	r3, [pc, #128]	@ (800ba68 <prvAddNewTaskToReadyList+0xbc>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d802      	bhi.n	800b9fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b9f4:	4a1c      	ldr	r2, [pc, #112]	@ (800ba68 <prvAddNewTaskToReadyList+0xbc>)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b9fa:	4b1d      	ldr	r3, [pc, #116]	@ (800ba70 <prvAddNewTaskToReadyList+0xc4>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	4a1b      	ldr	r2, [pc, #108]	@ (800ba70 <prvAddNewTaskToReadyList+0xc4>)
 800ba02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba08:	2201      	movs	r2, #1
 800ba0a:	409a      	lsls	r2, r3
 800ba0c:	4b19      	ldr	r3, [pc, #100]	@ (800ba74 <prvAddNewTaskToReadyList+0xc8>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4313      	orrs	r3, r2
 800ba12:	4a18      	ldr	r2, [pc, #96]	@ (800ba74 <prvAddNewTaskToReadyList+0xc8>)
 800ba14:	6013      	str	r3, [r2, #0]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	4413      	add	r3, r2
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4a15      	ldr	r2, [pc, #84]	@ (800ba78 <prvAddNewTaskToReadyList+0xcc>)
 800ba24:	441a      	add	r2, r3
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	3304      	adds	r3, #4
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	4610      	mov	r0, r2
 800ba2e:	f7ff f872 	bl	800ab16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ba32:	f000 fef9 	bl	800c828 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ba36:	4b0d      	ldr	r3, [pc, #52]	@ (800ba6c <prvAddNewTaskToReadyList+0xc0>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00e      	beq.n	800ba5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ba68 <prvAddNewTaskToReadyList+0xbc>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d207      	bcs.n	800ba5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ba4c:	4b0b      	ldr	r3, [pc, #44]	@ (800ba7c <prvAddNewTaskToReadyList+0xd0>)
 800ba4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba52:	601a      	str	r2, [r3, #0]
 800ba54:	f3bf 8f4f 	dsb	sy
 800ba58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba5c:	bf00      	nop
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	2000078c 	.word	0x2000078c
 800ba68:	2000068c 	.word	0x2000068c
 800ba6c:	20000798 	.word	0x20000798
 800ba70:	200007a8 	.word	0x200007a8
 800ba74:	20000794 	.word	0x20000794
 800ba78:	20000690 	.word	0x20000690
 800ba7c:	e000ed04 	.word	0xe000ed04

0800ba80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d01a      	beq.n	800bac8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ba92:	4b15      	ldr	r3, [pc, #84]	@ (800bae8 <vTaskDelay+0x68>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00d      	beq.n	800bab6 <vTaskDelay+0x36>
	__asm volatile
 800ba9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba9e:	b672      	cpsid	i
 800baa0:	f383 8811 	msr	BASEPRI, r3
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	b662      	cpsie	i
 800baae:	60bb      	str	r3, [r7, #8]
}
 800bab0:	bf00      	nop
 800bab2:	bf00      	nop
 800bab4:	e7fd      	b.n	800bab2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800bab6:	f000 f881 	bl	800bbbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800baba:	2100      	movs	r1, #0
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 fd07 	bl	800c4d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bac2:	f000 f889 	bl	800bbd8 <xTaskResumeAll>
 800bac6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d107      	bne.n	800bade <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800bace:	4b07      	ldr	r3, [pc, #28]	@ (800baec <vTaskDelay+0x6c>)
 800bad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bad4:	601a      	str	r2, [r3, #0]
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bade:	bf00      	nop
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	200007b4 	.word	0x200007b4
 800baec:	e000ed04 	.word	0xe000ed04

0800baf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b08a      	sub	sp, #40	@ 0x28
 800baf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800baf6:	2300      	movs	r3, #0
 800baf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bafa:	2300      	movs	r3, #0
 800bafc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bafe:	463a      	mov	r2, r7
 800bb00:	1d39      	adds	r1, r7, #4
 800bb02:	f107 0308 	add.w	r3, r7, #8
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7f4 fd14 	bl	8000534 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	68ba      	ldr	r2, [r7, #8]
 800bb12:	9202      	str	r2, [sp, #8]
 800bb14:	9301      	str	r3, [sp, #4]
 800bb16:	2300      	movs	r3, #0
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	460a      	mov	r2, r1
 800bb1e:	4921      	ldr	r1, [pc, #132]	@ (800bba4 <vTaskStartScheduler+0xb4>)
 800bb20:	4821      	ldr	r0, [pc, #132]	@ (800bba8 <vTaskStartScheduler+0xb8>)
 800bb22:	f7ff fe03 	bl	800b72c <xTaskCreateStatic>
 800bb26:	4603      	mov	r3, r0
 800bb28:	4a20      	ldr	r2, [pc, #128]	@ (800bbac <vTaskStartScheduler+0xbc>)
 800bb2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bb2c:	4b1f      	ldr	r3, [pc, #124]	@ (800bbac <vTaskStartScheduler+0xbc>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d002      	beq.n	800bb3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bb34:	2301      	movs	r3, #1
 800bb36:	617b      	str	r3, [r7, #20]
 800bb38:	e001      	b.n	800bb3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d118      	bne.n	800bb76 <vTaskStartScheduler+0x86>
	__asm volatile
 800bb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb48:	b672      	cpsid	i
 800bb4a:	f383 8811 	msr	BASEPRI, r3
 800bb4e:	f3bf 8f6f 	isb	sy
 800bb52:	f3bf 8f4f 	dsb	sy
 800bb56:	b662      	cpsie	i
 800bb58:	613b      	str	r3, [r7, #16]
}
 800bb5a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bb5c:	4b14      	ldr	r3, [pc, #80]	@ (800bbb0 <vTaskStartScheduler+0xc0>)
 800bb5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bb64:	4b13      	ldr	r3, [pc, #76]	@ (800bbb4 <vTaskStartScheduler+0xc4>)
 800bb66:	2201      	movs	r2, #1
 800bb68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bb6a:	4b13      	ldr	r3, [pc, #76]	@ (800bbb8 <vTaskStartScheduler+0xc8>)
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bb70:	f000 fda6 	bl	800c6c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bb74:	e011      	b.n	800bb9a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb7c:	d10d      	bne.n	800bb9a <vTaskStartScheduler+0xaa>
	__asm volatile
 800bb7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb82:	b672      	cpsid	i
 800bb84:	f383 8811 	msr	BASEPRI, r3
 800bb88:	f3bf 8f6f 	isb	sy
 800bb8c:	f3bf 8f4f 	dsb	sy
 800bb90:	b662      	cpsie	i
 800bb92:	60fb      	str	r3, [r7, #12]
}
 800bb94:	bf00      	nop
 800bb96:	bf00      	nop
 800bb98:	e7fd      	b.n	800bb96 <vTaskStartScheduler+0xa6>
}
 800bb9a:	bf00      	nop
 800bb9c:	3718      	adds	r7, #24
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	0800d724 	.word	0x0800d724
 800bba8:	0800c1c9 	.word	0x0800c1c9
 800bbac:	200007b0 	.word	0x200007b0
 800bbb0:	200007ac 	.word	0x200007ac
 800bbb4:	20000798 	.word	0x20000798
 800bbb8:	20000790 	.word	0x20000790

0800bbbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bbc0:	4b04      	ldr	r3, [pc, #16]	@ (800bbd4 <vTaskSuspendAll+0x18>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	4a03      	ldr	r2, [pc, #12]	@ (800bbd4 <vTaskSuspendAll+0x18>)
 800bbc8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bbca:	bf00      	nop
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr
 800bbd4:	200007b4 	.word	0x200007b4

0800bbd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bbe6:	4b43      	ldr	r3, [pc, #268]	@ (800bcf4 <xTaskResumeAll+0x11c>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d10d      	bne.n	800bc0a <xTaskResumeAll+0x32>
	__asm volatile
 800bbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbf2:	b672      	cpsid	i
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	b662      	cpsie	i
 800bc02:	603b      	str	r3, [r7, #0]
}
 800bc04:	bf00      	nop
 800bc06:	bf00      	nop
 800bc08:	e7fd      	b.n	800bc06 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc0a:	f000 fdd7 	bl	800c7bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bc0e:	4b39      	ldr	r3, [pc, #228]	@ (800bcf4 <xTaskResumeAll+0x11c>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3b01      	subs	r3, #1
 800bc14:	4a37      	ldr	r2, [pc, #220]	@ (800bcf4 <xTaskResumeAll+0x11c>)
 800bc16:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc18:	4b36      	ldr	r3, [pc, #216]	@ (800bcf4 <xTaskResumeAll+0x11c>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d161      	bne.n	800bce4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc20:	4b35      	ldr	r3, [pc, #212]	@ (800bcf8 <xTaskResumeAll+0x120>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d05d      	beq.n	800bce4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc28:	e02e      	b.n	800bc88 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc2a:	4b34      	ldr	r3, [pc, #208]	@ (800bcfc <xTaskResumeAll+0x124>)
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	3318      	adds	r3, #24
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fe ffca 	bl	800abd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	3304      	adds	r3, #4
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fe ffc5 	bl	800abd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	409a      	lsls	r2, r3
 800bc4e:	4b2c      	ldr	r3, [pc, #176]	@ (800bd00 <xTaskResumeAll+0x128>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4313      	orrs	r3, r2
 800bc54:	4a2a      	ldr	r2, [pc, #168]	@ (800bd00 <xTaskResumeAll+0x128>)
 800bc56:	6013      	str	r3, [r2, #0]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	4413      	add	r3, r2
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	4a27      	ldr	r2, [pc, #156]	@ (800bd04 <xTaskResumeAll+0x12c>)
 800bc66:	441a      	add	r2, r3
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	3304      	adds	r3, #4
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	4610      	mov	r0, r2
 800bc70:	f7fe ff51 	bl	800ab16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc78:	4b23      	ldr	r3, [pc, #140]	@ (800bd08 <xTaskResumeAll+0x130>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d302      	bcc.n	800bc88 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800bc82:	4b22      	ldr	r3, [pc, #136]	@ (800bd0c <xTaskResumeAll+0x134>)
 800bc84:	2201      	movs	r2, #1
 800bc86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc88:	4b1c      	ldr	r3, [pc, #112]	@ (800bcfc <xTaskResumeAll+0x124>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d1cc      	bne.n	800bc2a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bc96:	f000 fb51 	bl	800c33c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bc9a:	4b1d      	ldr	r3, [pc, #116]	@ (800bd10 <xTaskResumeAll+0x138>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d010      	beq.n	800bcc8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bca6:	f000 f837 	bl	800bd18 <xTaskIncrementTick>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d002      	beq.n	800bcb6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800bcb0:	4b16      	ldr	r3, [pc, #88]	@ (800bd0c <xTaskResumeAll+0x134>)
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1f1      	bne.n	800bca6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800bcc2:	4b13      	ldr	r3, [pc, #76]	@ (800bd10 <xTaskResumeAll+0x138>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bcc8:	4b10      	ldr	r3, [pc, #64]	@ (800bd0c <xTaskResumeAll+0x134>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d009      	beq.n	800bce4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bcd4:	4b0f      	ldr	r3, [pc, #60]	@ (800bd14 <xTaskResumeAll+0x13c>)
 800bcd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcda:	601a      	str	r2, [r3, #0]
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bce4:	f000 fda0 	bl	800c828 <vPortExitCritical>

	return xAlreadyYielded;
 800bce8:	68bb      	ldr	r3, [r7, #8]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	200007b4 	.word	0x200007b4
 800bcf8:	2000078c 	.word	0x2000078c
 800bcfc:	2000074c 	.word	0x2000074c
 800bd00:	20000794 	.word	0x20000794
 800bd04:	20000690 	.word	0x20000690
 800bd08:	2000068c 	.word	0x2000068c
 800bd0c:	200007a0 	.word	0x200007a0
 800bd10:	2000079c 	.word	0x2000079c
 800bd14:	e000ed04 	.word	0xe000ed04

0800bd18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b086      	sub	sp, #24
 800bd1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd22:	4b50      	ldr	r3, [pc, #320]	@ (800be64 <xTaskIncrementTick+0x14c>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f040 808b 	bne.w	800be42 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bd2c:	4b4e      	ldr	r3, [pc, #312]	@ (800be68 <xTaskIncrementTick+0x150>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	3301      	adds	r3, #1
 800bd32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bd34:	4a4c      	ldr	r2, [pc, #304]	@ (800be68 <xTaskIncrementTick+0x150>)
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d123      	bne.n	800bd88 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800bd40:	4b4a      	ldr	r3, [pc, #296]	@ (800be6c <xTaskIncrementTick+0x154>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00d      	beq.n	800bd66 <xTaskIncrementTick+0x4e>
	__asm volatile
 800bd4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd4e:	b672      	cpsid	i
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	b662      	cpsie	i
 800bd5e:	603b      	str	r3, [r7, #0]
}
 800bd60:	bf00      	nop
 800bd62:	bf00      	nop
 800bd64:	e7fd      	b.n	800bd62 <xTaskIncrementTick+0x4a>
 800bd66:	4b41      	ldr	r3, [pc, #260]	@ (800be6c <xTaskIncrementTick+0x154>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	60fb      	str	r3, [r7, #12]
 800bd6c:	4b40      	ldr	r3, [pc, #256]	@ (800be70 <xTaskIncrementTick+0x158>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a3e      	ldr	r2, [pc, #248]	@ (800be6c <xTaskIncrementTick+0x154>)
 800bd72:	6013      	str	r3, [r2, #0]
 800bd74:	4a3e      	ldr	r2, [pc, #248]	@ (800be70 <xTaskIncrementTick+0x158>)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	6013      	str	r3, [r2, #0]
 800bd7a:	4b3e      	ldr	r3, [pc, #248]	@ (800be74 <xTaskIncrementTick+0x15c>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	4a3c      	ldr	r2, [pc, #240]	@ (800be74 <xTaskIncrementTick+0x15c>)
 800bd82:	6013      	str	r3, [r2, #0]
 800bd84:	f000 fada 	bl	800c33c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bd88:	4b3b      	ldr	r3, [pc, #236]	@ (800be78 <xTaskIncrementTick+0x160>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	693a      	ldr	r2, [r7, #16]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d348      	bcc.n	800be24 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd92:	4b36      	ldr	r3, [pc, #216]	@ (800be6c <xTaskIncrementTick+0x154>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d104      	bne.n	800bda6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd9c:	4b36      	ldr	r3, [pc, #216]	@ (800be78 <xTaskIncrementTick+0x160>)
 800bd9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bda2:	601a      	str	r2, [r3, #0]
					break;
 800bda4:	e03e      	b.n	800be24 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bda6:	4b31      	ldr	r3, [pc, #196]	@ (800be6c <xTaskIncrementTick+0x154>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bdb6:	693a      	ldr	r2, [r7, #16]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d203      	bcs.n	800bdc6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bdbe:	4a2e      	ldr	r2, [pc, #184]	@ (800be78 <xTaskIncrementTick+0x160>)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bdc4:	e02e      	b.n	800be24 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	3304      	adds	r3, #4
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fe ff00 	bl	800abd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d004      	beq.n	800bde2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	3318      	adds	r3, #24
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fe fef7 	bl	800abd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde6:	2201      	movs	r2, #1
 800bde8:	409a      	lsls	r2, r3
 800bdea:	4b24      	ldr	r3, [pc, #144]	@ (800be7c <xTaskIncrementTick+0x164>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	4a22      	ldr	r2, [pc, #136]	@ (800be7c <xTaskIncrementTick+0x164>)
 800bdf2:	6013      	str	r3, [r2, #0]
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	4413      	add	r3, r2
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	4a1f      	ldr	r2, [pc, #124]	@ (800be80 <xTaskIncrementTick+0x168>)
 800be02:	441a      	add	r2, r3
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	3304      	adds	r3, #4
 800be08:	4619      	mov	r1, r3
 800be0a:	4610      	mov	r0, r2
 800be0c:	f7fe fe83 	bl	800ab16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be14:	4b1b      	ldr	r3, [pc, #108]	@ (800be84 <xTaskIncrementTick+0x16c>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d3b9      	bcc.n	800bd92 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800be1e:	2301      	movs	r3, #1
 800be20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be22:	e7b6      	b.n	800bd92 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be24:	4b17      	ldr	r3, [pc, #92]	@ (800be84 <xTaskIncrementTick+0x16c>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be2a:	4915      	ldr	r1, [pc, #84]	@ (800be80 <xTaskIncrementTick+0x168>)
 800be2c:	4613      	mov	r3, r2
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	4413      	add	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	440b      	add	r3, r1
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d907      	bls.n	800be4c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800be3c:	2301      	movs	r3, #1
 800be3e:	617b      	str	r3, [r7, #20]
 800be40:	e004      	b.n	800be4c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800be42:	4b11      	ldr	r3, [pc, #68]	@ (800be88 <xTaskIncrementTick+0x170>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	3301      	adds	r3, #1
 800be48:	4a0f      	ldr	r2, [pc, #60]	@ (800be88 <xTaskIncrementTick+0x170>)
 800be4a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800be4c:	4b0f      	ldr	r3, [pc, #60]	@ (800be8c <xTaskIncrementTick+0x174>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d001      	beq.n	800be58 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800be54:	2301      	movs	r3, #1
 800be56:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800be58:	697b      	ldr	r3, [r7, #20]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3718      	adds	r7, #24
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	200007b4 	.word	0x200007b4
 800be68:	20000790 	.word	0x20000790
 800be6c:	20000744 	.word	0x20000744
 800be70:	20000748 	.word	0x20000748
 800be74:	200007a4 	.word	0x200007a4
 800be78:	200007ac 	.word	0x200007ac
 800be7c:	20000794 	.word	0x20000794
 800be80:	20000690 	.word	0x20000690
 800be84:	2000068c 	.word	0x2000068c
 800be88:	2000079c 	.word	0x2000079c
 800be8c:	200007a0 	.word	0x200007a0

0800be90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b088      	sub	sp, #32
 800be94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be96:	4b3b      	ldr	r3, [pc, #236]	@ (800bf84 <vTaskSwitchContext+0xf4>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d003      	beq.n	800bea6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be9e:	4b3a      	ldr	r3, [pc, #232]	@ (800bf88 <vTaskSwitchContext+0xf8>)
 800bea0:	2201      	movs	r2, #1
 800bea2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bea4:	e069      	b.n	800bf7a <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 800bea6:	4b38      	ldr	r3, [pc, #224]	@ (800bf88 <vTaskSwitchContext+0xf8>)
 800bea8:	2200      	movs	r2, #0
 800beaa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800beac:	4b37      	ldr	r3, [pc, #220]	@ (800bf8c <vTaskSwitchContext+0xfc>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beb2:	61fb      	str	r3, [r7, #28]
 800beb4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800beb8:	61bb      	str	r3, [r7, #24]
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	69ba      	ldr	r2, [r7, #24]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d111      	bne.n	800bee8 <vTaskSwitchContext+0x58>
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	3304      	adds	r3, #4
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	69ba      	ldr	r2, [r7, #24]
 800becc:	429a      	cmp	r2, r3
 800bece:	d10b      	bne.n	800bee8 <vTaskSwitchContext+0x58>
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	3308      	adds	r3, #8
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	69ba      	ldr	r2, [r7, #24]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d105      	bne.n	800bee8 <vTaskSwitchContext+0x58>
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	330c      	adds	r3, #12
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	69ba      	ldr	r2, [r7, #24]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d008      	beq.n	800befa <vTaskSwitchContext+0x6a>
 800bee8:	4b28      	ldr	r3, [pc, #160]	@ (800bf8c <vTaskSwitchContext+0xfc>)
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	4b27      	ldr	r3, [pc, #156]	@ (800bf8c <vTaskSwitchContext+0xfc>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	3334      	adds	r3, #52	@ 0x34
 800bef2:	4619      	mov	r1, r3
 800bef4:	4610      	mov	r0, r2
 800bef6:	f7f4 fb0a 	bl	800050e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800befa:	4b25      	ldr	r3, [pc, #148]	@ (800bf90 <vTaskSwitchContext+0x100>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	fab3 f383 	clz	r3, r3
 800bf06:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bf08:	7afb      	ldrb	r3, [r7, #11]
 800bf0a:	f1c3 031f 	rsb	r3, r3, #31
 800bf0e:	617b      	str	r3, [r7, #20]
 800bf10:	4920      	ldr	r1, [pc, #128]	@ (800bf94 <vTaskSwitchContext+0x104>)
 800bf12:	697a      	ldr	r2, [r7, #20]
 800bf14:	4613      	mov	r3, r2
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	4413      	add	r3, r2
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	440b      	add	r3, r1
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d10d      	bne.n	800bf40 <vTaskSwitchContext+0xb0>
	__asm volatile
 800bf24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf28:	b672      	cpsid	i
 800bf2a:	f383 8811 	msr	BASEPRI, r3
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	f3bf 8f4f 	dsb	sy
 800bf36:	b662      	cpsie	i
 800bf38:	607b      	str	r3, [r7, #4]
}
 800bf3a:	bf00      	nop
 800bf3c:	bf00      	nop
 800bf3e:	e7fd      	b.n	800bf3c <vTaskSwitchContext+0xac>
 800bf40:	697a      	ldr	r2, [r7, #20]
 800bf42:	4613      	mov	r3, r2
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4413      	add	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	4a12      	ldr	r2, [pc, #72]	@ (800bf94 <vTaskSwitchContext+0x104>)
 800bf4c:	4413      	add	r3, r2
 800bf4e:	613b      	str	r3, [r7, #16]
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	685a      	ldr	r2, [r3, #4]
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	605a      	str	r2, [r3, #4]
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	685a      	ldr	r2, [r3, #4]
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	3308      	adds	r3, #8
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d104      	bne.n	800bf70 <vTaskSwitchContext+0xe0>
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	685a      	ldr	r2, [r3, #4]
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	605a      	str	r2, [r3, #4]
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	68db      	ldr	r3, [r3, #12]
 800bf76:	4a05      	ldr	r2, [pc, #20]	@ (800bf8c <vTaskSwitchContext+0xfc>)
 800bf78:	6013      	str	r3, [r2, #0]
}
 800bf7a:	bf00      	nop
 800bf7c:	3720      	adds	r7, #32
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	200007b4 	.word	0x200007b4
 800bf88:	200007a0 	.word	0x200007a0
 800bf8c:	2000068c 	.word	0x2000068c
 800bf90:	20000794 	.word	0x20000794
 800bf94:	20000690 	.word	0x20000690

0800bf98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10d      	bne.n	800bfc4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800bfa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfac:	b672      	cpsid	i
 800bfae:	f383 8811 	msr	BASEPRI, r3
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	b662      	cpsie	i
 800bfbc:	60fb      	str	r3, [r7, #12]
}
 800bfbe:	bf00      	nop
 800bfc0:	bf00      	nop
 800bfc2:	e7fd      	b.n	800bfc0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bfc4:	4b07      	ldr	r3, [pc, #28]	@ (800bfe4 <vTaskPlaceOnEventList+0x4c>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	3318      	adds	r3, #24
 800bfca:	4619      	mov	r1, r3
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f7fe fdc6 	bl	800ab5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bfd2:	2101      	movs	r1, #1
 800bfd4:	6838      	ldr	r0, [r7, #0]
 800bfd6:	f000 fa7b 	bl	800c4d0 <prvAddCurrentTaskToDelayedList>
}
 800bfda:	bf00      	nop
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	2000068c 	.word	0x2000068c

0800bfe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b086      	sub	sp, #24
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d10d      	bne.n	800c01a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c002:	b672      	cpsid	i
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	b662      	cpsie	i
 800c012:	60fb      	str	r3, [r7, #12]
}
 800c014:	bf00      	nop
 800c016:	bf00      	nop
 800c018:	e7fd      	b.n	800c016 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	3318      	adds	r3, #24
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fe fdd6 	bl	800abd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c024:	4b1d      	ldr	r3, [pc, #116]	@ (800c09c <xTaskRemoveFromEventList+0xb4>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d11c      	bne.n	800c066 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	3304      	adds	r3, #4
 800c030:	4618      	mov	r0, r3
 800c032:	f7fe fdcd 	bl	800abd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c03a:	2201      	movs	r2, #1
 800c03c:	409a      	lsls	r2, r3
 800c03e:	4b18      	ldr	r3, [pc, #96]	@ (800c0a0 <xTaskRemoveFromEventList+0xb8>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4313      	orrs	r3, r2
 800c044:	4a16      	ldr	r2, [pc, #88]	@ (800c0a0 <xTaskRemoveFromEventList+0xb8>)
 800c046:	6013      	str	r3, [r2, #0]
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c04c:	4613      	mov	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	4413      	add	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	4a13      	ldr	r2, [pc, #76]	@ (800c0a4 <xTaskRemoveFromEventList+0xbc>)
 800c056:	441a      	add	r2, r3
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	3304      	adds	r3, #4
 800c05c:	4619      	mov	r1, r3
 800c05e:	4610      	mov	r0, r2
 800c060:	f7fe fd59 	bl	800ab16 <vListInsertEnd>
 800c064:	e005      	b.n	800c072 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	3318      	adds	r3, #24
 800c06a:	4619      	mov	r1, r3
 800c06c:	480e      	ldr	r0, [pc, #56]	@ (800c0a8 <xTaskRemoveFromEventList+0xc0>)
 800c06e:	f7fe fd52 	bl	800ab16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c076:	4b0d      	ldr	r3, [pc, #52]	@ (800c0ac <xTaskRemoveFromEventList+0xc4>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d905      	bls.n	800c08c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c080:	2301      	movs	r3, #1
 800c082:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c084:	4b0a      	ldr	r3, [pc, #40]	@ (800c0b0 <xTaskRemoveFromEventList+0xc8>)
 800c086:	2201      	movs	r2, #1
 800c088:	601a      	str	r2, [r3, #0]
 800c08a:	e001      	b.n	800c090 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c08c:	2300      	movs	r3, #0
 800c08e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c090:	697b      	ldr	r3, [r7, #20]
}
 800c092:	4618      	mov	r0, r3
 800c094:	3718      	adds	r7, #24
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	200007b4 	.word	0x200007b4
 800c0a0:	20000794 	.word	0x20000794
 800c0a4:	20000690 	.word	0x20000690
 800c0a8:	2000074c 	.word	0x2000074c
 800c0ac:	2000068c 	.word	0x2000068c
 800c0b0:	200007a0 	.word	0x200007a0

0800c0b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c0bc:	4b06      	ldr	r3, [pc, #24]	@ (800c0d8 <vTaskInternalSetTimeOutState+0x24>)
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c0c4:	4b05      	ldr	r3, [pc, #20]	@ (800c0dc <vTaskInternalSetTimeOutState+0x28>)
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	605a      	str	r2, [r3, #4]
}
 800c0cc:	bf00      	nop
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr
 800c0d8:	200007a4 	.word	0x200007a4
 800c0dc:	20000790 	.word	0x20000790

0800c0e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b088      	sub	sp, #32
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d10d      	bne.n	800c10c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f4:	b672      	cpsid	i
 800c0f6:	f383 8811 	msr	BASEPRI, r3
 800c0fa:	f3bf 8f6f 	isb	sy
 800c0fe:	f3bf 8f4f 	dsb	sy
 800c102:	b662      	cpsie	i
 800c104:	613b      	str	r3, [r7, #16]
}
 800c106:	bf00      	nop
 800c108:	bf00      	nop
 800c10a:	e7fd      	b.n	800c108 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10d      	bne.n	800c12e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800c112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c116:	b672      	cpsid	i
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	b662      	cpsie	i
 800c126:	60fb      	str	r3, [r7, #12]
}
 800c128:	bf00      	nop
 800c12a:	bf00      	nop
 800c12c:	e7fd      	b.n	800c12a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800c12e:	f000 fb45 	bl	800c7bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c132:	4b1d      	ldr	r3, [pc, #116]	@ (800c1a8 <xTaskCheckForTimeOut+0xc8>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	69ba      	ldr	r2, [r7, #24]
 800c13e:	1ad3      	subs	r3, r2, r3
 800c140:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c14a:	d102      	bne.n	800c152 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c14c:	2300      	movs	r3, #0
 800c14e:	61fb      	str	r3, [r7, #28]
 800c150:	e023      	b.n	800c19a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	4b15      	ldr	r3, [pc, #84]	@ (800c1ac <xTaskCheckForTimeOut+0xcc>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d007      	beq.n	800c16e <xTaskCheckForTimeOut+0x8e>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	69ba      	ldr	r2, [r7, #24]
 800c164:	429a      	cmp	r2, r3
 800c166:	d302      	bcc.n	800c16e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c168:	2301      	movs	r3, #1
 800c16a:	61fb      	str	r3, [r7, #28]
 800c16c:	e015      	b.n	800c19a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	697a      	ldr	r2, [r7, #20]
 800c174:	429a      	cmp	r2, r3
 800c176:	d20b      	bcs.n	800c190 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	1ad2      	subs	r2, r2, r3
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f7ff ff95 	bl	800c0b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c18a:	2300      	movs	r3, #0
 800c18c:	61fb      	str	r3, [r7, #28]
 800c18e:	e004      	b.n	800c19a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	2200      	movs	r2, #0
 800c194:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c196:	2301      	movs	r3, #1
 800c198:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c19a:	f000 fb45 	bl	800c828 <vPortExitCritical>

	return xReturn;
 800c19e:	69fb      	ldr	r3, [r7, #28]
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3720      	adds	r7, #32
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	20000790 	.word	0x20000790
 800c1ac:	200007a4 	.word	0x200007a4

0800c1b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c1b4:	4b03      	ldr	r3, [pc, #12]	@ (800c1c4 <vTaskMissedYield+0x14>)
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	601a      	str	r2, [r3, #0]
}
 800c1ba:	bf00      	nop
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr
 800c1c4:	200007a0 	.word	0x200007a0

0800c1c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c1d0:	f000 f854 	bl	800c27c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c1d4:	4b07      	ldr	r3, [pc, #28]	@ (800c1f4 <prvIdleTask+0x2c>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d907      	bls.n	800c1ec <prvIdleTask+0x24>
			{
				taskYIELD();
 800c1dc:	4b06      	ldr	r3, [pc, #24]	@ (800c1f8 <prvIdleTask+0x30>)
 800c1de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1e2:	601a      	str	r2, [r3, #0]
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c1ec:	f7f4 f988 	bl	8000500 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c1f0:	e7ee      	b.n	800c1d0 <prvIdleTask+0x8>
 800c1f2:	bf00      	nop
 800c1f4:	20000690 	.word	0x20000690
 800c1f8:	e000ed04 	.word	0xe000ed04

0800c1fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c202:	2300      	movs	r3, #0
 800c204:	607b      	str	r3, [r7, #4]
 800c206:	e00c      	b.n	800c222 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	4613      	mov	r3, r2
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	4413      	add	r3, r2
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	4a12      	ldr	r2, [pc, #72]	@ (800c25c <prvInitialiseTaskLists+0x60>)
 800c214:	4413      	add	r3, r2
 800c216:	4618      	mov	r0, r3
 800c218:	f7fe fc50 	bl	800aabc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	3301      	adds	r3, #1
 800c220:	607b      	str	r3, [r7, #4]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2b06      	cmp	r3, #6
 800c226:	d9ef      	bls.n	800c208 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c228:	480d      	ldr	r0, [pc, #52]	@ (800c260 <prvInitialiseTaskLists+0x64>)
 800c22a:	f7fe fc47 	bl	800aabc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c22e:	480d      	ldr	r0, [pc, #52]	@ (800c264 <prvInitialiseTaskLists+0x68>)
 800c230:	f7fe fc44 	bl	800aabc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c234:	480c      	ldr	r0, [pc, #48]	@ (800c268 <prvInitialiseTaskLists+0x6c>)
 800c236:	f7fe fc41 	bl	800aabc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c23a:	480c      	ldr	r0, [pc, #48]	@ (800c26c <prvInitialiseTaskLists+0x70>)
 800c23c:	f7fe fc3e 	bl	800aabc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c240:	480b      	ldr	r0, [pc, #44]	@ (800c270 <prvInitialiseTaskLists+0x74>)
 800c242:	f7fe fc3b 	bl	800aabc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c246:	4b0b      	ldr	r3, [pc, #44]	@ (800c274 <prvInitialiseTaskLists+0x78>)
 800c248:	4a05      	ldr	r2, [pc, #20]	@ (800c260 <prvInitialiseTaskLists+0x64>)
 800c24a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c24c:	4b0a      	ldr	r3, [pc, #40]	@ (800c278 <prvInitialiseTaskLists+0x7c>)
 800c24e:	4a05      	ldr	r2, [pc, #20]	@ (800c264 <prvInitialiseTaskLists+0x68>)
 800c250:	601a      	str	r2, [r3, #0]
}
 800c252:	bf00      	nop
 800c254:	3708      	adds	r7, #8
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	20000690 	.word	0x20000690
 800c260:	2000071c 	.word	0x2000071c
 800c264:	20000730 	.word	0x20000730
 800c268:	2000074c 	.word	0x2000074c
 800c26c:	20000760 	.word	0x20000760
 800c270:	20000778 	.word	0x20000778
 800c274:	20000744 	.word	0x20000744
 800c278:	20000748 	.word	0x20000748

0800c27c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c282:	e019      	b.n	800c2b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c284:	f000 fa9a 	bl	800c7bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c288:	4b10      	ldr	r3, [pc, #64]	@ (800c2cc <prvCheckTasksWaitingTermination+0x50>)
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	68db      	ldr	r3, [r3, #12]
 800c28e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	3304      	adds	r3, #4
 800c294:	4618      	mov	r0, r3
 800c296:	f7fe fc9b 	bl	800abd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c29a:	4b0d      	ldr	r3, [pc, #52]	@ (800c2d0 <prvCheckTasksWaitingTermination+0x54>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	4a0b      	ldr	r2, [pc, #44]	@ (800c2d0 <prvCheckTasksWaitingTermination+0x54>)
 800c2a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c2a4:	4b0b      	ldr	r3, [pc, #44]	@ (800c2d4 <prvCheckTasksWaitingTermination+0x58>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	4a0a      	ldr	r2, [pc, #40]	@ (800c2d4 <prvCheckTasksWaitingTermination+0x58>)
 800c2ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c2ae:	f000 fabb 	bl	800c828 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 f810 	bl	800c2d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2b8:	4b06      	ldr	r3, [pc, #24]	@ (800c2d4 <prvCheckTasksWaitingTermination+0x58>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d1e1      	bne.n	800c284 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c2c0:	bf00      	nop
 800c2c2:	bf00      	nop
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	20000760 	.word	0x20000760
 800c2d0:	2000078c 	.word	0x2000078c
 800c2d4:	20000774 	.word	0x20000774

0800c2d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d108      	bne.n	800c2fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f000 fc64 	bl	800cbbc <vPortFree>
				vPortFree( pxTCB );
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 fc61 	bl	800cbbc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c2fa:	e01b      	b.n	800c334 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c302:	2b01      	cmp	r3, #1
 800c304:	d103      	bne.n	800c30e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fc58 	bl	800cbbc <vPortFree>
	}
 800c30c:	e012      	b.n	800c334 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c314:	2b02      	cmp	r3, #2
 800c316:	d00d      	beq.n	800c334 <prvDeleteTCB+0x5c>
	__asm volatile
 800c318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c31c:	b672      	cpsid	i
 800c31e:	f383 8811 	msr	BASEPRI, r3
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	f3bf 8f4f 	dsb	sy
 800c32a:	b662      	cpsie	i
 800c32c:	60fb      	str	r3, [r7, #12]
}
 800c32e:	bf00      	nop
 800c330:	bf00      	nop
 800c332:	e7fd      	b.n	800c330 <prvDeleteTCB+0x58>
	}
 800c334:	bf00      	nop
 800c336:	3710      	adds	r7, #16
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c342:	4b0c      	ldr	r3, [pc, #48]	@ (800c374 <prvResetNextTaskUnblockTime+0x38>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d104      	bne.n	800c356 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c34c:	4b0a      	ldr	r3, [pc, #40]	@ (800c378 <prvResetNextTaskUnblockTime+0x3c>)
 800c34e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c352:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c354:	e008      	b.n	800c368 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c356:	4b07      	ldr	r3, [pc, #28]	@ (800c374 <prvResetNextTaskUnblockTime+0x38>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	68db      	ldr	r3, [r3, #12]
 800c35e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	4a04      	ldr	r2, [pc, #16]	@ (800c378 <prvResetNextTaskUnblockTime+0x3c>)
 800c366:	6013      	str	r3, [r2, #0]
}
 800c368:	bf00      	nop
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr
 800c374:	20000744 	.word	0x20000744
 800c378:	200007ac 	.word	0x200007ac

0800c37c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c382:	4b0b      	ldr	r3, [pc, #44]	@ (800c3b0 <xTaskGetSchedulerState+0x34>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d102      	bne.n	800c390 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c38a:	2301      	movs	r3, #1
 800c38c:	607b      	str	r3, [r7, #4]
 800c38e:	e008      	b.n	800c3a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c390:	4b08      	ldr	r3, [pc, #32]	@ (800c3b4 <xTaskGetSchedulerState+0x38>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d102      	bne.n	800c39e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c398:	2302      	movs	r3, #2
 800c39a:	607b      	str	r3, [r7, #4]
 800c39c:	e001      	b.n	800c3a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c3a2:	687b      	ldr	r3, [r7, #4]
	}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	20000798 	.word	0x20000798
 800c3b4:	200007b4 	.word	0x200007b4

0800c3b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d074      	beq.n	800c4b8 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c3ce:	4b3d      	ldr	r3, [pc, #244]	@ (800c4c4 <xTaskPriorityDisinherit+0x10c>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	693a      	ldr	r2, [r7, #16]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d00d      	beq.n	800c3f4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800c3d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3dc:	b672      	cpsid	i
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	b662      	cpsie	i
 800c3ec:	60fb      	str	r3, [r7, #12]
}
 800c3ee:	bf00      	nop
 800c3f0:	bf00      	nop
 800c3f2:	e7fd      	b.n	800c3f0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d10d      	bne.n	800c418 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800c3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c400:	b672      	cpsid	i
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	b662      	cpsie	i
 800c410:	60bb      	str	r3, [r7, #8]
}
 800c412:	bf00      	nop
 800c414:	bf00      	nop
 800c416:	e7fd      	b.n	800c414 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c41c:	1e5a      	subs	r2, r3, #1
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d044      	beq.n	800c4b8 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c432:	2b00      	cmp	r3, #0
 800c434:	d140      	bne.n	800c4b8 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	3304      	adds	r3, #4
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fe fbc8 	bl	800abd0 <uxListRemove>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d115      	bne.n	800c472 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c44a:	491f      	ldr	r1, [pc, #124]	@ (800c4c8 <xTaskPriorityDisinherit+0x110>)
 800c44c:	4613      	mov	r3, r2
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	4413      	add	r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	440b      	add	r3, r1
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10a      	bne.n	800c472 <xTaskPriorityDisinherit+0xba>
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c460:	2201      	movs	r2, #1
 800c462:	fa02 f303 	lsl.w	r3, r2, r3
 800c466:	43da      	mvns	r2, r3
 800c468:	4b18      	ldr	r3, [pc, #96]	@ (800c4cc <xTaskPriorityDisinherit+0x114>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4013      	ands	r3, r2
 800c46e:	4a17      	ldr	r2, [pc, #92]	@ (800c4cc <xTaskPriorityDisinherit+0x114>)
 800c470:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c47e:	f1c3 0207 	rsb	r2, r3, #7
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c48a:	2201      	movs	r2, #1
 800c48c:	409a      	lsls	r2, r3
 800c48e:	4b0f      	ldr	r3, [pc, #60]	@ (800c4cc <xTaskPriorityDisinherit+0x114>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4313      	orrs	r3, r2
 800c494:	4a0d      	ldr	r2, [pc, #52]	@ (800c4cc <xTaskPriorityDisinherit+0x114>)
 800c496:	6013      	str	r3, [r2, #0]
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c49c:	4613      	mov	r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	4413      	add	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	4a08      	ldr	r2, [pc, #32]	@ (800c4c8 <xTaskPriorityDisinherit+0x110>)
 800c4a6:	441a      	add	r2, r3
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	3304      	adds	r3, #4
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	f7fe fb31 	bl	800ab16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c4b8:	697b      	ldr	r3, [r7, #20]
	}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3718      	adds	r7, #24
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	2000068c 	.word	0x2000068c
 800c4c8:	20000690 	.word	0x20000690
 800c4cc:	20000794 	.word	0x20000794

0800c4d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c4da:	4b29      	ldr	r3, [pc, #164]	@ (800c580 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4e0:	4b28      	ldr	r3, [pc, #160]	@ (800c584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fe fb72 	bl	800abd0 <uxListRemove>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d10b      	bne.n	800c50a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c4f2:	4b24      	ldr	r3, [pc, #144]	@ (800c584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c4fe:	43da      	mvns	r2, r3
 800c500:	4b21      	ldr	r3, [pc, #132]	@ (800c588 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4013      	ands	r3, r2
 800c506:	4a20      	ldr	r2, [pc, #128]	@ (800c588 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c508:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c510:	d10a      	bne.n	800c528 <prvAddCurrentTaskToDelayedList+0x58>
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d007      	beq.n	800c528 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c518:	4b1a      	ldr	r3, [pc, #104]	@ (800c584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	3304      	adds	r3, #4
 800c51e:	4619      	mov	r1, r3
 800c520:	481a      	ldr	r0, [pc, #104]	@ (800c58c <prvAddCurrentTaskToDelayedList+0xbc>)
 800c522:	f7fe faf8 	bl	800ab16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c526:	e026      	b.n	800c576 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4413      	add	r3, r2
 800c52e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c530:	4b14      	ldr	r3, [pc, #80]	@ (800c584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c538:	68ba      	ldr	r2, [r7, #8]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d209      	bcs.n	800c554 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c540:	4b13      	ldr	r3, [pc, #76]	@ (800c590 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	4b0f      	ldr	r3, [pc, #60]	@ (800c584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	3304      	adds	r3, #4
 800c54a:	4619      	mov	r1, r3
 800c54c:	4610      	mov	r0, r2
 800c54e:	f7fe fb06 	bl	800ab5e <vListInsert>
}
 800c552:	e010      	b.n	800c576 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c554:	4b0f      	ldr	r3, [pc, #60]	@ (800c594 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	4b0a      	ldr	r3, [pc, #40]	@ (800c584 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	3304      	adds	r3, #4
 800c55e:	4619      	mov	r1, r3
 800c560:	4610      	mov	r0, r2
 800c562:	f7fe fafc 	bl	800ab5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c566:	4b0c      	ldr	r3, [pc, #48]	@ (800c598 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68ba      	ldr	r2, [r7, #8]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d202      	bcs.n	800c576 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c570:	4a09      	ldr	r2, [pc, #36]	@ (800c598 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	6013      	str	r3, [r2, #0]
}
 800c576:	bf00      	nop
 800c578:	3710      	adds	r7, #16
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	20000790 	.word	0x20000790
 800c584:	2000068c 	.word	0x2000068c
 800c588:	20000794 	.word	0x20000794
 800c58c:	20000778 	.word	0x20000778
 800c590:	20000748 	.word	0x20000748
 800c594:	20000744 	.word	0x20000744
 800c598:	200007ac 	.word	0x200007ac

0800c59c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c59c:	b480      	push	{r7}
 800c59e:	b085      	sub	sp, #20
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	3b04      	subs	r3, #4
 800c5ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c5b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	3b04      	subs	r3, #4
 800c5ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	f023 0201 	bic.w	r2, r3, #1
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	3b04      	subs	r3, #4
 800c5ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c5cc:	4a0c      	ldr	r2, [pc, #48]	@ (800c600 <pxPortInitialiseStack+0x64>)
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	3b14      	subs	r3, #20
 800c5d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	3b04      	subs	r3, #4
 800c5e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f06f 0202 	mvn.w	r2, #2
 800c5ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	3b20      	subs	r3, #32
 800c5f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr
 800c600:	0800c605 	.word	0x0800c605

0800c604 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c60a:	2300      	movs	r3, #0
 800c60c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c60e:	4b15      	ldr	r3, [pc, #84]	@ (800c664 <prvTaskExitError+0x60>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c616:	d00d      	beq.n	800c634 <prvTaskExitError+0x30>
	__asm volatile
 800c618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61c:	b672      	cpsid	i
 800c61e:	f383 8811 	msr	BASEPRI, r3
 800c622:	f3bf 8f6f 	isb	sy
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	b662      	cpsie	i
 800c62c:	60fb      	str	r3, [r7, #12]
}
 800c62e:	bf00      	nop
 800c630:	bf00      	nop
 800c632:	e7fd      	b.n	800c630 <prvTaskExitError+0x2c>
	__asm volatile
 800c634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c638:	b672      	cpsid	i
 800c63a:	f383 8811 	msr	BASEPRI, r3
 800c63e:	f3bf 8f6f 	isb	sy
 800c642:	f3bf 8f4f 	dsb	sy
 800c646:	b662      	cpsie	i
 800c648:	60bb      	str	r3, [r7, #8]
}
 800c64a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c64c:	bf00      	nop
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d0fc      	beq.n	800c64e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c654:	bf00      	nop
 800c656:	bf00      	nop
 800c658:	3714      	adds	r7, #20
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop
 800c664:	20000038 	.word	0x20000038
	...

0800c670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c670:	4b07      	ldr	r3, [pc, #28]	@ (800c690 <pxCurrentTCBConst2>)
 800c672:	6819      	ldr	r1, [r3, #0]
 800c674:	6808      	ldr	r0, [r1, #0]
 800c676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c67a:	f380 8809 	msr	PSP, r0
 800c67e:	f3bf 8f6f 	isb	sy
 800c682:	f04f 0000 	mov.w	r0, #0
 800c686:	f380 8811 	msr	BASEPRI, r0
 800c68a:	4770      	bx	lr
 800c68c:	f3af 8000 	nop.w

0800c690 <pxCurrentTCBConst2>:
 800c690:	2000068c 	.word	0x2000068c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c694:	bf00      	nop
 800c696:	bf00      	nop

0800c698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c698:	4808      	ldr	r0, [pc, #32]	@ (800c6bc <prvPortStartFirstTask+0x24>)
 800c69a:	6800      	ldr	r0, [r0, #0]
 800c69c:	6800      	ldr	r0, [r0, #0]
 800c69e:	f380 8808 	msr	MSP, r0
 800c6a2:	f04f 0000 	mov.w	r0, #0
 800c6a6:	f380 8814 	msr	CONTROL, r0
 800c6aa:	b662      	cpsie	i
 800c6ac:	b661      	cpsie	f
 800c6ae:	f3bf 8f4f 	dsb	sy
 800c6b2:	f3bf 8f6f 	isb	sy
 800c6b6:	df00      	svc	0
 800c6b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c6ba:	bf00      	nop
 800c6bc:	e000ed08 	.word	0xe000ed08

0800c6c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c6c6:	4b37      	ldr	r3, [pc, #220]	@ (800c7a4 <xPortStartScheduler+0xe4>)
 800c6c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	22ff      	movs	r2, #255	@ 0xff
 800c6d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c6e0:	78fb      	ldrb	r3, [r7, #3]
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	4b2f      	ldr	r3, [pc, #188]	@ (800c7a8 <xPortStartScheduler+0xe8>)
 800c6ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c6ee:	4b2f      	ldr	r3, [pc, #188]	@ (800c7ac <xPortStartScheduler+0xec>)
 800c6f0:	2207      	movs	r2, #7
 800c6f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6f4:	e009      	b.n	800c70a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c6f6:	4b2d      	ldr	r3, [pc, #180]	@ (800c7ac <xPortStartScheduler+0xec>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	4a2b      	ldr	r2, [pc, #172]	@ (800c7ac <xPortStartScheduler+0xec>)
 800c6fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c700:	78fb      	ldrb	r3, [r7, #3]
 800c702:	b2db      	uxtb	r3, r3
 800c704:	005b      	lsls	r3, r3, #1
 800c706:	b2db      	uxtb	r3, r3
 800c708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c70a:	78fb      	ldrb	r3, [r7, #3]
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c712:	2b80      	cmp	r3, #128	@ 0x80
 800c714:	d0ef      	beq.n	800c6f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c716:	4b25      	ldr	r3, [pc, #148]	@ (800c7ac <xPortStartScheduler+0xec>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f1c3 0307 	rsb	r3, r3, #7
 800c71e:	2b04      	cmp	r3, #4
 800c720:	d00d      	beq.n	800c73e <xPortStartScheduler+0x7e>
	__asm volatile
 800c722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c726:	b672      	cpsid	i
 800c728:	f383 8811 	msr	BASEPRI, r3
 800c72c:	f3bf 8f6f 	isb	sy
 800c730:	f3bf 8f4f 	dsb	sy
 800c734:	b662      	cpsie	i
 800c736:	60bb      	str	r3, [r7, #8]
}
 800c738:	bf00      	nop
 800c73a:	bf00      	nop
 800c73c:	e7fd      	b.n	800c73a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c73e:	4b1b      	ldr	r3, [pc, #108]	@ (800c7ac <xPortStartScheduler+0xec>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	021b      	lsls	r3, r3, #8
 800c744:	4a19      	ldr	r2, [pc, #100]	@ (800c7ac <xPortStartScheduler+0xec>)
 800c746:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c748:	4b18      	ldr	r3, [pc, #96]	@ (800c7ac <xPortStartScheduler+0xec>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c750:	4a16      	ldr	r2, [pc, #88]	@ (800c7ac <xPortStartScheduler+0xec>)
 800c752:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	b2da      	uxtb	r2, r3
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c75c:	4b14      	ldr	r3, [pc, #80]	@ (800c7b0 <xPortStartScheduler+0xf0>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a13      	ldr	r2, [pc, #76]	@ (800c7b0 <xPortStartScheduler+0xf0>)
 800c762:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c766:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c768:	4b11      	ldr	r3, [pc, #68]	@ (800c7b0 <xPortStartScheduler+0xf0>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a10      	ldr	r2, [pc, #64]	@ (800c7b0 <xPortStartScheduler+0xf0>)
 800c76e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c772:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c774:	f000 f8dc 	bl	800c930 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c778:	4b0e      	ldr	r3, [pc, #56]	@ (800c7b4 <xPortStartScheduler+0xf4>)
 800c77a:	2200      	movs	r2, #0
 800c77c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c77e:	f000 f8fb 	bl	800c978 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c782:	4b0d      	ldr	r3, [pc, #52]	@ (800c7b8 <xPortStartScheduler+0xf8>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a0c      	ldr	r2, [pc, #48]	@ (800c7b8 <xPortStartScheduler+0xf8>)
 800c788:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c78c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c78e:	f7ff ff83 	bl	800c698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c792:	f7ff fb7d 	bl	800be90 <vTaskSwitchContext>
	prvTaskExitError();
 800c796:	f7ff ff35 	bl	800c604 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c79a:	2300      	movs	r3, #0
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3710      	adds	r7, #16
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	e000e400 	.word	0xe000e400
 800c7a8:	200007b8 	.word	0x200007b8
 800c7ac:	200007bc 	.word	0x200007bc
 800c7b0:	e000ed20 	.word	0xe000ed20
 800c7b4:	20000038 	.word	0x20000038
 800c7b8:	e000ef34 	.word	0xe000ef34

0800c7bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c6:	b672      	cpsid	i
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	b662      	cpsie	i
 800c7d6:	607b      	str	r3, [r7, #4]
}
 800c7d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c7da:	4b11      	ldr	r3, [pc, #68]	@ (800c820 <vPortEnterCritical+0x64>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	3301      	adds	r3, #1
 800c7e0:	4a0f      	ldr	r2, [pc, #60]	@ (800c820 <vPortEnterCritical+0x64>)
 800c7e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c7e4:	4b0e      	ldr	r3, [pc, #56]	@ (800c820 <vPortEnterCritical+0x64>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d112      	bne.n	800c812 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c7ec:	4b0d      	ldr	r3, [pc, #52]	@ (800c824 <vPortEnterCritical+0x68>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d00d      	beq.n	800c812 <vPortEnterCritical+0x56>
	__asm volatile
 800c7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7fa:	b672      	cpsid	i
 800c7fc:	f383 8811 	msr	BASEPRI, r3
 800c800:	f3bf 8f6f 	isb	sy
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	b662      	cpsie	i
 800c80a:	603b      	str	r3, [r7, #0]
}
 800c80c:	bf00      	nop
 800c80e:	bf00      	nop
 800c810:	e7fd      	b.n	800c80e <vPortEnterCritical+0x52>
	}
}
 800c812:	bf00      	nop
 800c814:	370c      	adds	r7, #12
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop
 800c820:	20000038 	.word	0x20000038
 800c824:	e000ed04 	.word	0xe000ed04

0800c828 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c82e:	4b13      	ldr	r3, [pc, #76]	@ (800c87c <vPortExitCritical+0x54>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d10d      	bne.n	800c852 <vPortExitCritical+0x2a>
	__asm volatile
 800c836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c83a:	b672      	cpsid	i
 800c83c:	f383 8811 	msr	BASEPRI, r3
 800c840:	f3bf 8f6f 	isb	sy
 800c844:	f3bf 8f4f 	dsb	sy
 800c848:	b662      	cpsie	i
 800c84a:	607b      	str	r3, [r7, #4]
}
 800c84c:	bf00      	nop
 800c84e:	bf00      	nop
 800c850:	e7fd      	b.n	800c84e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c852:	4b0a      	ldr	r3, [pc, #40]	@ (800c87c <vPortExitCritical+0x54>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	3b01      	subs	r3, #1
 800c858:	4a08      	ldr	r2, [pc, #32]	@ (800c87c <vPortExitCritical+0x54>)
 800c85a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c85c:	4b07      	ldr	r3, [pc, #28]	@ (800c87c <vPortExitCritical+0x54>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d105      	bne.n	800c870 <vPortExitCritical+0x48>
 800c864:	2300      	movs	r3, #0
 800c866:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	f383 8811 	msr	BASEPRI, r3
}
 800c86e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c870:	bf00      	nop
 800c872:	370c      	adds	r7, #12
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr
 800c87c:	20000038 	.word	0x20000038

0800c880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c880:	f3ef 8009 	mrs	r0, PSP
 800c884:	f3bf 8f6f 	isb	sy
 800c888:	4b15      	ldr	r3, [pc, #84]	@ (800c8e0 <pxCurrentTCBConst>)
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	f01e 0f10 	tst.w	lr, #16
 800c890:	bf08      	it	eq
 800c892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c89a:	6010      	str	r0, [r2, #0]
 800c89c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c8a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c8a4:	b672      	cpsid	i
 800c8a6:	f380 8811 	msr	BASEPRI, r0
 800c8aa:	f3bf 8f4f 	dsb	sy
 800c8ae:	f3bf 8f6f 	isb	sy
 800c8b2:	b662      	cpsie	i
 800c8b4:	f7ff faec 	bl	800be90 <vTaskSwitchContext>
 800c8b8:	f04f 0000 	mov.w	r0, #0
 800c8bc:	f380 8811 	msr	BASEPRI, r0
 800c8c0:	bc09      	pop	{r0, r3}
 800c8c2:	6819      	ldr	r1, [r3, #0]
 800c8c4:	6808      	ldr	r0, [r1, #0]
 800c8c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ca:	f01e 0f10 	tst.w	lr, #16
 800c8ce:	bf08      	it	eq
 800c8d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c8d4:	f380 8809 	msr	PSP, r0
 800c8d8:	f3bf 8f6f 	isb	sy
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop

0800c8e0 <pxCurrentTCBConst>:
 800c8e0:	2000068c 	.word	0x2000068c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c8e4:	bf00      	nop
 800c8e6:	bf00      	nop

0800c8e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f2:	b672      	cpsid	i
 800c8f4:	f383 8811 	msr	BASEPRI, r3
 800c8f8:	f3bf 8f6f 	isb	sy
 800c8fc:	f3bf 8f4f 	dsb	sy
 800c900:	b662      	cpsie	i
 800c902:	607b      	str	r3, [r7, #4]
}
 800c904:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c906:	f7ff fa07 	bl	800bd18 <xTaskIncrementTick>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d003      	beq.n	800c918 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c910:	4b06      	ldr	r3, [pc, #24]	@ (800c92c <SysTick_Handler+0x44>)
 800c912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c916:	601a      	str	r2, [r3, #0]
 800c918:	2300      	movs	r3, #0
 800c91a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	f383 8811 	msr	BASEPRI, r3
}
 800c922:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c924:	bf00      	nop
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	e000ed04 	.word	0xe000ed04

0800c930 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c930:	b480      	push	{r7}
 800c932:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c934:	4b0b      	ldr	r3, [pc, #44]	@ (800c964 <vPortSetupTimerInterrupt+0x34>)
 800c936:	2200      	movs	r2, #0
 800c938:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c93a:	4b0b      	ldr	r3, [pc, #44]	@ (800c968 <vPortSetupTimerInterrupt+0x38>)
 800c93c:	2200      	movs	r2, #0
 800c93e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c940:	4b0a      	ldr	r3, [pc, #40]	@ (800c96c <vPortSetupTimerInterrupt+0x3c>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a0a      	ldr	r2, [pc, #40]	@ (800c970 <vPortSetupTimerInterrupt+0x40>)
 800c946:	fba2 2303 	umull	r2, r3, r2, r3
 800c94a:	099b      	lsrs	r3, r3, #6
 800c94c:	4a09      	ldr	r2, [pc, #36]	@ (800c974 <vPortSetupTimerInterrupt+0x44>)
 800c94e:	3b01      	subs	r3, #1
 800c950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c952:	4b04      	ldr	r3, [pc, #16]	@ (800c964 <vPortSetupTimerInterrupt+0x34>)
 800c954:	2207      	movs	r2, #7
 800c956:	601a      	str	r2, [r3, #0]
}
 800c958:	bf00      	nop
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr
 800c962:	bf00      	nop
 800c964:	e000e010 	.word	0xe000e010
 800c968:	e000e018 	.word	0xe000e018
 800c96c:	20000000 	.word	0x20000000
 800c970:	10624dd3 	.word	0x10624dd3
 800c974:	e000e014 	.word	0xe000e014

0800c978 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c978:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c988 <vPortEnableVFP+0x10>
 800c97c:	6801      	ldr	r1, [r0, #0]
 800c97e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c982:	6001      	str	r1, [r0, #0]
 800c984:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c986:	bf00      	nop
 800c988:	e000ed88 	.word	0xe000ed88

0800c98c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c992:	f3ef 8305 	mrs	r3, IPSR
 800c996:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2b0f      	cmp	r3, #15
 800c99c:	d917      	bls.n	800c9ce <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c99e:	4a1a      	ldr	r2, [pc, #104]	@ (800ca08 <vPortValidateInterruptPriority+0x7c>)
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	4413      	add	r3, r2
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c9a8:	4b18      	ldr	r3, [pc, #96]	@ (800ca0c <vPortValidateInterruptPriority+0x80>)
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	7afa      	ldrb	r2, [r7, #11]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d20d      	bcs.n	800c9ce <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800c9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b6:	b672      	cpsid	i
 800c9b8:	f383 8811 	msr	BASEPRI, r3
 800c9bc:	f3bf 8f6f 	isb	sy
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	b662      	cpsie	i
 800c9c6:	607b      	str	r3, [r7, #4]
}
 800c9c8:	bf00      	nop
 800c9ca:	bf00      	nop
 800c9cc:	e7fd      	b.n	800c9ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c9ce:	4b10      	ldr	r3, [pc, #64]	@ (800ca10 <vPortValidateInterruptPriority+0x84>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c9d6:	4b0f      	ldr	r3, [pc, #60]	@ (800ca14 <vPortValidateInterruptPriority+0x88>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d90d      	bls.n	800c9fa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800c9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9e2:	b672      	cpsid	i
 800c9e4:	f383 8811 	msr	BASEPRI, r3
 800c9e8:	f3bf 8f6f 	isb	sy
 800c9ec:	f3bf 8f4f 	dsb	sy
 800c9f0:	b662      	cpsie	i
 800c9f2:	603b      	str	r3, [r7, #0]
}
 800c9f4:	bf00      	nop
 800c9f6:	bf00      	nop
 800c9f8:	e7fd      	b.n	800c9f6 <vPortValidateInterruptPriority+0x6a>
	}
 800c9fa:	bf00      	nop
 800c9fc:	3714      	adds	r7, #20
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop
 800ca08:	e000e3f0 	.word	0xe000e3f0
 800ca0c:	200007b8 	.word	0x200007b8
 800ca10:	e000ed0c 	.word	0xe000ed0c
 800ca14:	200007bc 	.word	0x200007bc

0800ca18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b08a      	sub	sp, #40	@ 0x28
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca20:	2300      	movs	r3, #0
 800ca22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca24:	f7ff f8ca 	bl	800bbbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca28:	4b5f      	ldr	r3, [pc, #380]	@ (800cba8 <pvPortMalloc+0x190>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d101      	bne.n	800ca34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca30:	f000 f924 	bl	800cc7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca34:	4b5d      	ldr	r3, [pc, #372]	@ (800cbac <pvPortMalloc+0x194>)
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	4013      	ands	r3, r2
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f040 8094 	bne.w	800cb6a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d020      	beq.n	800ca8a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800ca48:	2208      	movs	r2, #8
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	4413      	add	r3, r2
 800ca4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f003 0307 	and.w	r3, r3, #7
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d017      	beq.n	800ca8a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f023 0307 	bic.w	r3, r3, #7
 800ca60:	3308      	adds	r3, #8
 800ca62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f003 0307 	and.w	r3, r3, #7
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00d      	beq.n	800ca8a <pvPortMalloc+0x72>
	__asm volatile
 800ca6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca72:	b672      	cpsid	i
 800ca74:	f383 8811 	msr	BASEPRI, r3
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	b662      	cpsie	i
 800ca82:	617b      	str	r3, [r7, #20]
}
 800ca84:	bf00      	nop
 800ca86:	bf00      	nop
 800ca88:	e7fd      	b.n	800ca86 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d06c      	beq.n	800cb6a <pvPortMalloc+0x152>
 800ca90:	4b47      	ldr	r3, [pc, #284]	@ (800cbb0 <pvPortMalloc+0x198>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d867      	bhi.n	800cb6a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ca9a:	4b46      	ldr	r3, [pc, #280]	@ (800cbb4 <pvPortMalloc+0x19c>)
 800ca9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ca9e:	4b45      	ldr	r3, [pc, #276]	@ (800cbb4 <pvPortMalloc+0x19c>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800caa4:	e004      	b.n	800cab0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800caa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800caaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d903      	bls.n	800cac2 <pvPortMalloc+0xaa>
 800caba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d1f1      	bne.n	800caa6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cac2:	4b39      	ldr	r3, [pc, #228]	@ (800cba8 <pvPortMalloc+0x190>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cac8:	429a      	cmp	r2, r3
 800caca:	d04e      	beq.n	800cb6a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cacc:	6a3b      	ldr	r3, [r7, #32]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2208      	movs	r2, #8
 800cad2:	4413      	add	r3, r2
 800cad4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	6a3b      	ldr	r3, [r7, #32]
 800cadc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae0:	685a      	ldr	r2, [r3, #4]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	1ad2      	subs	r2, r2, r3
 800cae6:	2308      	movs	r3, #8
 800cae8:	005b      	lsls	r3, r3, #1
 800caea:	429a      	cmp	r2, r3
 800caec:	d922      	bls.n	800cb34 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800caee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	4413      	add	r3, r2
 800caf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	f003 0307 	and.w	r3, r3, #7
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00d      	beq.n	800cb1c <pvPortMalloc+0x104>
	__asm volatile
 800cb00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb04:	b672      	cpsid	i
 800cb06:	f383 8811 	msr	BASEPRI, r3
 800cb0a:	f3bf 8f6f 	isb	sy
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	b662      	cpsie	i
 800cb14:	613b      	str	r3, [r7, #16]
}
 800cb16:	bf00      	nop
 800cb18:	bf00      	nop
 800cb1a:	e7fd      	b.n	800cb18 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1e:	685a      	ldr	r2, [r3, #4]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	1ad2      	subs	r2, r2, r3
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb2e:	69b8      	ldr	r0, [r7, #24]
 800cb30:	f000 f906 	bl	800cd40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb34:	4b1e      	ldr	r3, [pc, #120]	@ (800cbb0 <pvPortMalloc+0x198>)
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	1ad3      	subs	r3, r2, r3
 800cb3e:	4a1c      	ldr	r2, [pc, #112]	@ (800cbb0 <pvPortMalloc+0x198>)
 800cb40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb42:	4b1b      	ldr	r3, [pc, #108]	@ (800cbb0 <pvPortMalloc+0x198>)
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	4b1c      	ldr	r3, [pc, #112]	@ (800cbb8 <pvPortMalloc+0x1a0>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d203      	bcs.n	800cb56 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb4e:	4b18      	ldr	r3, [pc, #96]	@ (800cbb0 <pvPortMalloc+0x198>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4a19      	ldr	r2, [pc, #100]	@ (800cbb8 <pvPortMalloc+0x1a0>)
 800cb54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb58:	685a      	ldr	r2, [r3, #4]
 800cb5a:	4b14      	ldr	r3, [pc, #80]	@ (800cbac <pvPortMalloc+0x194>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	431a      	orrs	r2, r3
 800cb60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb66:	2200      	movs	r2, #0
 800cb68:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb6a:	f7ff f835 	bl	800bbd8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800cb6e:	69fb      	ldr	r3, [r7, #28]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d101      	bne.n	800cb78 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800cb74:	f7f3 fcd6 	bl	8000524 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	f003 0307 	and.w	r3, r3, #7
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00d      	beq.n	800cb9e <pvPortMalloc+0x186>
	__asm volatile
 800cb82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb86:	b672      	cpsid	i
 800cb88:	f383 8811 	msr	BASEPRI, r3
 800cb8c:	f3bf 8f6f 	isb	sy
 800cb90:	f3bf 8f4f 	dsb	sy
 800cb94:	b662      	cpsie	i
 800cb96:	60fb      	str	r3, [r7, #12]
}
 800cb98:	bf00      	nop
 800cb9a:	bf00      	nop
 800cb9c:	e7fd      	b.n	800cb9a <pvPortMalloc+0x182>
	return pvReturn;
 800cb9e:	69fb      	ldr	r3, [r7, #28]
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3728      	adds	r7, #40	@ 0x28
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	200087c8 	.word	0x200087c8
 800cbac:	200087d4 	.word	0x200087d4
 800cbb0:	200087cc 	.word	0x200087cc
 800cbb4:	200087c0 	.word	0x200087c0
 800cbb8:	200087d0 	.word	0x200087d0

0800cbbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b086      	sub	sp, #24
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d04e      	beq.n	800cc6c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cbce:	2308      	movs	r3, #8
 800cbd0:	425b      	negs	r3, r3
 800cbd2:	697a      	ldr	r2, [r7, #20]
 800cbd4:	4413      	add	r3, r2
 800cbd6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	685a      	ldr	r2, [r3, #4]
 800cbe0:	4b24      	ldr	r3, [pc, #144]	@ (800cc74 <vPortFree+0xb8>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4013      	ands	r3, r2
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d10d      	bne.n	800cc06 <vPortFree+0x4a>
	__asm volatile
 800cbea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbee:	b672      	cpsid	i
 800cbf0:	f383 8811 	msr	BASEPRI, r3
 800cbf4:	f3bf 8f6f 	isb	sy
 800cbf8:	f3bf 8f4f 	dsb	sy
 800cbfc:	b662      	cpsie	i
 800cbfe:	60fb      	str	r3, [r7, #12]
}
 800cc00:	bf00      	nop
 800cc02:	bf00      	nop
 800cc04:	e7fd      	b.n	800cc02 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d00d      	beq.n	800cc2a <vPortFree+0x6e>
	__asm volatile
 800cc0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc12:	b672      	cpsid	i
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	b662      	cpsie	i
 800cc22:	60bb      	str	r3, [r7, #8]
}
 800cc24:	bf00      	nop
 800cc26:	bf00      	nop
 800cc28:	e7fd      	b.n	800cc26 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	685a      	ldr	r2, [r3, #4]
 800cc2e:	4b11      	ldr	r3, [pc, #68]	@ (800cc74 <vPortFree+0xb8>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4013      	ands	r3, r2
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d019      	beq.n	800cc6c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d115      	bne.n	800cc6c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	685a      	ldr	r2, [r3, #4]
 800cc44:	4b0b      	ldr	r3, [pc, #44]	@ (800cc74 <vPortFree+0xb8>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	43db      	mvns	r3, r3
 800cc4a:	401a      	ands	r2, r3
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc50:	f7fe ffb4 	bl	800bbbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	685a      	ldr	r2, [r3, #4]
 800cc58:	4b07      	ldr	r3, [pc, #28]	@ (800cc78 <vPortFree+0xbc>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	4a06      	ldr	r2, [pc, #24]	@ (800cc78 <vPortFree+0xbc>)
 800cc60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc62:	6938      	ldr	r0, [r7, #16]
 800cc64:	f000 f86c 	bl	800cd40 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cc68:	f7fe ffb6 	bl	800bbd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc6c:	bf00      	nop
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	200087d4 	.word	0x200087d4
 800cc78:	200087cc 	.word	0x200087cc

0800cc7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cc88:	4b27      	ldr	r3, [pc, #156]	@ (800cd28 <prvHeapInit+0xac>)
 800cc8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f003 0307 	and.w	r3, r3, #7
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d00c      	beq.n	800ccb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	3307      	adds	r3, #7
 800cc9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f023 0307 	bic.w	r3, r3, #7
 800cca2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cca4:	68ba      	ldr	r2, [r7, #8]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	1ad3      	subs	r3, r2, r3
 800ccaa:	4a1f      	ldr	r2, [pc, #124]	@ (800cd28 <prvHeapInit+0xac>)
 800ccac:	4413      	add	r3, r2
 800ccae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ccb4:	4a1d      	ldr	r2, [pc, #116]	@ (800cd2c <prvHeapInit+0xb0>)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ccba:	4b1c      	ldr	r3, [pc, #112]	@ (800cd2c <prvHeapInit+0xb0>)
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	68ba      	ldr	r2, [r7, #8]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ccc8:	2208      	movs	r2, #8
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	1a9b      	subs	r3, r3, r2
 800ccce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f023 0307 	bic.w	r3, r3, #7
 800ccd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	4a15      	ldr	r2, [pc, #84]	@ (800cd30 <prvHeapInit+0xb4>)
 800ccdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ccde:	4b14      	ldr	r3, [pc, #80]	@ (800cd30 <prvHeapInit+0xb4>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2200      	movs	r2, #0
 800cce4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cce6:	4b12      	ldr	r3, [pc, #72]	@ (800cd30 <prvHeapInit+0xb4>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2200      	movs	r2, #0
 800ccec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	68fa      	ldr	r2, [r7, #12]
 800ccf6:	1ad2      	subs	r2, r2, r3
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ccfc:	4b0c      	ldr	r3, [pc, #48]	@ (800cd30 <prvHeapInit+0xb4>)
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	4a0a      	ldr	r2, [pc, #40]	@ (800cd34 <prvHeapInit+0xb8>)
 800cd0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	4a09      	ldr	r2, [pc, #36]	@ (800cd38 <prvHeapInit+0xbc>)
 800cd12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd14:	4b09      	ldr	r3, [pc, #36]	@ (800cd3c <prvHeapInit+0xc0>)
 800cd16:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cd1a:	601a      	str	r2, [r3, #0]
}
 800cd1c:	bf00      	nop
 800cd1e:	3714      	adds	r7, #20
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr
 800cd28:	200007c0 	.word	0x200007c0
 800cd2c:	200087c0 	.word	0x200087c0
 800cd30:	200087c8 	.word	0x200087c8
 800cd34:	200087d0 	.word	0x200087d0
 800cd38:	200087cc 	.word	0x200087cc
 800cd3c:	200087d4 	.word	0x200087d4

0800cd40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd40:	b480      	push	{r7}
 800cd42:	b085      	sub	sp, #20
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd48:	4b28      	ldr	r3, [pc, #160]	@ (800cdec <prvInsertBlockIntoFreeList+0xac>)
 800cd4a:	60fb      	str	r3, [r7, #12]
 800cd4c:	e002      	b.n	800cd54 <prvInsertBlockIntoFreeList+0x14>
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	60fb      	str	r3, [r7, #12]
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d8f7      	bhi.n	800cd4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	4413      	add	r3, r2
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d108      	bne.n	800cd82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	685a      	ldr	r2, [r3, #4]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	441a      	add	r2, r3
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	68ba      	ldr	r2, [r7, #8]
 800cd8c:	441a      	add	r2, r3
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d118      	bne.n	800cdc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681a      	ldr	r2, [r3, #0]
 800cd9a:	4b15      	ldr	r3, [pc, #84]	@ (800cdf0 <prvInsertBlockIntoFreeList+0xb0>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d00d      	beq.n	800cdbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	685a      	ldr	r2, [r3, #4]
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	441a      	add	r2, r3
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	601a      	str	r2, [r3, #0]
 800cdbc:	e008      	b.n	800cdd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cdbe:	4b0c      	ldr	r3, [pc, #48]	@ (800cdf0 <prvInsertBlockIntoFreeList+0xb0>)
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	601a      	str	r2, [r3, #0]
 800cdc6:	e003      	b.n	800cdd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cdd0:	68fa      	ldr	r2, [r7, #12]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d002      	beq.n	800cdde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdde:	bf00      	nop
 800cde0:	3714      	adds	r7, #20
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr
 800cdea:	bf00      	nop
 800cdec:	200087c0 	.word	0x200087c0
 800cdf0:	200087c8 	.word	0x200087c8

0800cdf4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	490e      	ldr	r1, [pc, #56]	@ (800ce34 <MX_USB_HOST_Init+0x40>)
 800cdfc:	480e      	ldr	r0, [pc, #56]	@ (800ce38 <MX_USB_HOST_Init+0x44>)
 800cdfe:	f7fb fdd7 	bl	80089b0 <USBH_Init>
 800ce02:	4603      	mov	r3, r0
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d001      	beq.n	800ce0c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ce08:	f7f3 fc90 	bl	800072c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ce0c:	490b      	ldr	r1, [pc, #44]	@ (800ce3c <MX_USB_HOST_Init+0x48>)
 800ce0e:	480a      	ldr	r0, [pc, #40]	@ (800ce38 <MX_USB_HOST_Init+0x44>)
 800ce10:	f7fb fea3 	bl	8008b5a <USBH_RegisterClass>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d001      	beq.n	800ce1e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ce1a:	f7f3 fc87 	bl	800072c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ce1e:	4806      	ldr	r0, [pc, #24]	@ (800ce38 <MX_USB_HOST_Init+0x44>)
 800ce20:	f7fb ff27 	bl	8008c72 <USBH_Start>
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d001      	beq.n	800ce2e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ce2a:	f7f3 fc7f 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ce2e:	bf00      	nop
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	0800ce41 	.word	0x0800ce41
 800ce38:	200087d8 	.word	0x200087d8
 800ce3c:	20000018 	.word	0x20000018

0800ce40 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	460b      	mov	r3, r1
 800ce4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ce4c:	78fb      	ldrb	r3, [r7, #3]
 800ce4e:	3b01      	subs	r3, #1
 800ce50:	2b04      	cmp	r3, #4
 800ce52:	d819      	bhi.n	800ce88 <USBH_UserProcess+0x48>
 800ce54:	a201      	add	r2, pc, #4	@ (adr r2, 800ce5c <USBH_UserProcess+0x1c>)
 800ce56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce5a:	bf00      	nop
 800ce5c:	0800ce89 	.word	0x0800ce89
 800ce60:	0800ce79 	.word	0x0800ce79
 800ce64:	0800ce89 	.word	0x0800ce89
 800ce68:	0800ce81 	.word	0x0800ce81
 800ce6c:	0800ce71 	.word	0x0800ce71
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ce70:	4b09      	ldr	r3, [pc, #36]	@ (800ce98 <USBH_UserProcess+0x58>)
 800ce72:	2203      	movs	r2, #3
 800ce74:	701a      	strb	r2, [r3, #0]
  break;
 800ce76:	e008      	b.n	800ce8a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ce78:	4b07      	ldr	r3, [pc, #28]	@ (800ce98 <USBH_UserProcess+0x58>)
 800ce7a:	2202      	movs	r2, #2
 800ce7c:	701a      	strb	r2, [r3, #0]
  break;
 800ce7e:	e004      	b.n	800ce8a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ce80:	4b05      	ldr	r3, [pc, #20]	@ (800ce98 <USBH_UserProcess+0x58>)
 800ce82:	2201      	movs	r2, #1
 800ce84:	701a      	strb	r2, [r3, #0]
  break;
 800ce86:	e000      	b.n	800ce8a <USBH_UserProcess+0x4a>

  default:
  break;
 800ce88:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ce8a:	bf00      	nop
 800ce8c:	370c      	adds	r7, #12
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	20008bbc 	.word	0x20008bbc

0800ce9c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b08a      	sub	sp, #40	@ 0x28
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cea4:	f107 0314 	add.w	r3, r7, #20
 800cea8:	2200      	movs	r2, #0
 800ceaa:	601a      	str	r2, [r3, #0]
 800ceac:	605a      	str	r2, [r3, #4]
 800ceae:	609a      	str	r2, [r3, #8]
 800ceb0:	60da      	str	r2, [r3, #12]
 800ceb2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cebc:	d13c      	bne.n	800cf38 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cebe:	4b20      	ldr	r3, [pc, #128]	@ (800cf40 <HAL_HCD_MspInit+0xa4>)
 800cec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cec2:	4a1f      	ldr	r2, [pc, #124]	@ (800cf40 <HAL_HCD_MspInit+0xa4>)
 800cec4:	f043 0301 	orr.w	r3, r3, #1
 800cec8:	6313      	str	r3, [r2, #48]	@ 0x30
 800ceca:	4b1d      	ldr	r3, [pc, #116]	@ (800cf40 <HAL_HCD_MspInit+0xa4>)
 800cecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cece:	f003 0301 	and.w	r3, r3, #1
 800ced2:	613b      	str	r3, [r7, #16]
 800ced4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800ced6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800ceda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cedc:	2302      	movs	r3, #2
 800cede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cee0:	2300      	movs	r3, #0
 800cee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cee4:	2303      	movs	r3, #3
 800cee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cee8:	230a      	movs	r3, #10
 800ceea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ceec:	f107 0314 	add.w	r3, r7, #20
 800cef0:	4619      	mov	r1, r3
 800cef2:	4814      	ldr	r0, [pc, #80]	@ (800cf44 <HAL_HCD_MspInit+0xa8>)
 800cef4:	f7f5 fc92 	bl	800281c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cef8:	4b11      	ldr	r3, [pc, #68]	@ (800cf40 <HAL_HCD_MspInit+0xa4>)
 800cefa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cefc:	4a10      	ldr	r2, [pc, #64]	@ (800cf40 <HAL_HCD_MspInit+0xa4>)
 800cefe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf02:	6353      	str	r3, [r2, #52]	@ 0x34
 800cf04:	4b0e      	ldr	r3, [pc, #56]	@ (800cf40 <HAL_HCD_MspInit+0xa4>)
 800cf06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf0c:	60fb      	str	r3, [r7, #12]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	4b0b      	ldr	r3, [pc, #44]	@ (800cf40 <HAL_HCD_MspInit+0xa4>)
 800cf12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf14:	4a0a      	ldr	r2, [pc, #40]	@ (800cf40 <HAL_HCD_MspInit+0xa4>)
 800cf16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cf1a:	6453      	str	r3, [r2, #68]	@ 0x44
 800cf1c:	4b08      	ldr	r3, [pc, #32]	@ (800cf40 <HAL_HCD_MspInit+0xa4>)
 800cf1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cf24:	60bb      	str	r3, [r7, #8]
 800cf26:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800cf28:	2200      	movs	r2, #0
 800cf2a:	2105      	movs	r1, #5
 800cf2c:	2043      	movs	r0, #67	@ 0x43
 800cf2e:	f7f4 fef1 	bl	8001d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cf32:	2043      	movs	r0, #67	@ 0x43
 800cf34:	f7f4 ff0a 	bl	8001d4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cf38:	bf00      	nop
 800cf3a:	3728      	adds	r7, #40	@ 0x28
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}
 800cf40:	40023800 	.word	0x40023800
 800cf44:	40020000 	.word	0x40020000

0800cf48 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fc fb3d 	bl	80095d6 <USBH_LL_IncTimer>
}
 800cf5c:	bf00      	nop
 800cf5e:	3708      	adds	r7, #8
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fc fb81 	bl	800967a <USBH_LL_Connect>
}
 800cf78:	bf00      	nop
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7fc fb96 	bl	80096c0 <USBH_LL_Disconnect>
}
 800cf94:	bf00      	nop
 800cf96:	3708      	adds	r7, #8
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	70fb      	strb	r3, [r7, #3]
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fc fbcb 	bl	800974e <USBH_LL_NotifyURBChange>
#endif
}
 800cfb8:	bf00      	nop
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7fc fb2b 	bl	800962a <USBH_LL_PortEnabled>
}
 800cfd4:	bf00      	nop
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7fc fb37 	bl	800965e <USBH_LL_PortDisabled>
}
 800cff0:	bf00      	nop
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d006:	2b01      	cmp	r3, #1
 800d008:	d12a      	bne.n	800d060 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d00a:	4a18      	ldr	r2, [pc, #96]	@ (800d06c <USBH_LL_Init+0x74>)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	4a15      	ldr	r2, [pc, #84]	@ (800d06c <USBH_LL_Init+0x74>)
 800d016:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d01a:	4b14      	ldr	r3, [pc, #80]	@ (800d06c <USBH_LL_Init+0x74>)
 800d01c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d020:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d022:	4b12      	ldr	r3, [pc, #72]	@ (800d06c <USBH_LL_Init+0x74>)
 800d024:	2208      	movs	r2, #8
 800d026:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d028:	4b10      	ldr	r3, [pc, #64]	@ (800d06c <USBH_LL_Init+0x74>)
 800d02a:	2201      	movs	r2, #1
 800d02c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d02e:	4b0f      	ldr	r3, [pc, #60]	@ (800d06c <USBH_LL_Init+0x74>)
 800d030:	2200      	movs	r2, #0
 800d032:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d034:	4b0d      	ldr	r3, [pc, #52]	@ (800d06c <USBH_LL_Init+0x74>)
 800d036:	2202      	movs	r2, #2
 800d038:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d03a:	4b0c      	ldr	r3, [pc, #48]	@ (800d06c <USBH_LL_Init+0x74>)
 800d03c:	2200      	movs	r2, #0
 800d03e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d040:	480a      	ldr	r0, [pc, #40]	@ (800d06c <USBH_LL_Init+0x74>)
 800d042:	f7f5 fdb0 	bl	8002ba6 <HAL_HCD_Init>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d001      	beq.n	800d050 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d04c:	f7f3 fb6e 	bl	800072c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d050:	4806      	ldr	r0, [pc, #24]	@ (800d06c <USBH_LL_Init+0x74>)
 800d052:	f7f6 fa11 	bl	8003478 <HAL_HCD_GetCurrentFrame>
 800d056:	4603      	mov	r3, r0
 800d058:	4619      	mov	r1, r3
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f7fc faac 	bl	80095b8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d060:	2300      	movs	r3, #0
}
 800d062:	4618      	mov	r0, r3
 800d064:	3708      	adds	r7, #8
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	20008bc0 	.word	0x20008bc0

0800d070 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d078:	2300      	movs	r3, #0
 800d07a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d07c:	2300      	movs	r3, #0
 800d07e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d086:	4618      	mov	r0, r3
 800d088:	f7f6 f97e 	bl	8003388 <HAL_HCD_Start>
 800d08c:	4603      	mov	r3, r0
 800d08e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d090:	7bfb      	ldrb	r3, [r7, #15]
 800d092:	4618      	mov	r0, r3
 800d094:	f000 f95e 	bl	800d354 <USBH_Get_USB_Status>
 800d098:	4603      	mov	r3, r0
 800d09a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d09c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b084      	sub	sp, #16
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7f6 f986 	bl	80033ce <HAL_HCD_Stop>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d0c6:	7bfb      	ldrb	r3, [r7, #15]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f000 f943 	bl	800d354 <USBH_Get_USB_Status>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3710      	adds	r7, #16
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7f6 f9d0 	bl	8003494 <HAL_HCD_GetCurrentSpeed>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b02      	cmp	r3, #2
 800d0f8:	d00c      	beq.n	800d114 <USBH_LL_GetSpeed+0x38>
 800d0fa:	2b02      	cmp	r3, #2
 800d0fc:	d80d      	bhi.n	800d11a <USBH_LL_GetSpeed+0x3e>
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d002      	beq.n	800d108 <USBH_LL_GetSpeed+0x2c>
 800d102:	2b01      	cmp	r3, #1
 800d104:	d003      	beq.n	800d10e <USBH_LL_GetSpeed+0x32>
 800d106:	e008      	b.n	800d11a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d108:	2300      	movs	r3, #0
 800d10a:	73fb      	strb	r3, [r7, #15]
    break;
 800d10c:	e008      	b.n	800d120 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d10e:	2301      	movs	r3, #1
 800d110:	73fb      	strb	r3, [r7, #15]
    break;
 800d112:	e005      	b.n	800d120 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d114:	2302      	movs	r3, #2
 800d116:	73fb      	strb	r3, [r7, #15]
    break;
 800d118:	e002      	b.n	800d120 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d11a:	2301      	movs	r3, #1
 800d11c:	73fb      	strb	r3, [r7, #15]
    break;
 800d11e:	bf00      	nop
  }
  return  speed;
 800d120:	7bfb      	ldrb	r3, [r7, #15]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b084      	sub	sp, #16
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d132:	2300      	movs	r3, #0
 800d134:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d136:	2300      	movs	r3, #0
 800d138:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d140:	4618      	mov	r0, r3
 800d142:	f7f6 f961 	bl	8003408 <HAL_HCD_ResetPort>
 800d146:	4603      	mov	r3, r0
 800d148:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d14a:	7bfb      	ldrb	r3, [r7, #15]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f000 f901 	bl	800d354 <USBH_Get_USB_Status>
 800d152:	4603      	mov	r3, r0
 800d154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d156:	7bbb      	ldrb	r3, [r7, #14]
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3710      	adds	r7, #16
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	460b      	mov	r3, r1
 800d16a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d172:	78fa      	ldrb	r2, [r7, #3]
 800d174:	4611      	mov	r1, r2
 800d176:	4618      	mov	r0, r3
 800d178:	f7f6 f969 	bl	800344e <HAL_HCD_HC_GetXferCount>
 800d17c:	4603      	mov	r3, r0
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3708      	adds	r7, #8
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d186:	b590      	push	{r4, r7, lr}
 800d188:	b089      	sub	sp, #36	@ 0x24
 800d18a:	af04      	add	r7, sp, #16
 800d18c:	6078      	str	r0, [r7, #4]
 800d18e:	4608      	mov	r0, r1
 800d190:	4611      	mov	r1, r2
 800d192:	461a      	mov	r2, r3
 800d194:	4603      	mov	r3, r0
 800d196:	70fb      	strb	r3, [r7, #3]
 800d198:	460b      	mov	r3, r1
 800d19a:	70bb      	strb	r3, [r7, #2]
 800d19c:	4613      	mov	r3, r2
 800d19e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d1ae:	787c      	ldrb	r4, [r7, #1]
 800d1b0:	78ba      	ldrb	r2, [r7, #2]
 800d1b2:	78f9      	ldrb	r1, [r7, #3]
 800d1b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d1b6:	9302      	str	r3, [sp, #8]
 800d1b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d1bc:	9301      	str	r3, [sp, #4]
 800d1be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d1c2:	9300      	str	r3, [sp, #0]
 800d1c4:	4623      	mov	r3, r4
 800d1c6:	f7f5 fd55 	bl	8002c74 <HAL_HCD_HC_Init>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d1ce:	7bfb      	ldrb	r3, [r7, #15]
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f000 f8bf 	bl	800d354 <USBH_Get_USB_Status>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1da:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3714      	adds	r7, #20
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd90      	pop	{r4, r7, pc}

0800d1e4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d1fe:	78fa      	ldrb	r2, [r7, #3]
 800d200:	4611      	mov	r1, r2
 800d202:	4618      	mov	r0, r3
 800d204:	f7f5 fdee 	bl	8002de4 <HAL_HCD_HC_Halt>
 800d208:	4603      	mov	r3, r0
 800d20a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d20c:	7bfb      	ldrb	r3, [r7, #15]
 800d20e:	4618      	mov	r0, r3
 800d210:	f000 f8a0 	bl	800d354 <USBH_Get_USB_Status>
 800d214:	4603      	mov	r3, r0
 800d216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d218:	7bbb      	ldrb	r3, [r7, #14]
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}

0800d222 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d222:	b590      	push	{r4, r7, lr}
 800d224:	b089      	sub	sp, #36	@ 0x24
 800d226:	af04      	add	r7, sp, #16
 800d228:	6078      	str	r0, [r7, #4]
 800d22a:	4608      	mov	r0, r1
 800d22c:	4611      	mov	r1, r2
 800d22e:	461a      	mov	r2, r3
 800d230:	4603      	mov	r3, r0
 800d232:	70fb      	strb	r3, [r7, #3]
 800d234:	460b      	mov	r3, r1
 800d236:	70bb      	strb	r3, [r7, #2]
 800d238:	4613      	mov	r3, r2
 800d23a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d23c:	2300      	movs	r3, #0
 800d23e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d240:	2300      	movs	r3, #0
 800d242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d24a:	787c      	ldrb	r4, [r7, #1]
 800d24c:	78ba      	ldrb	r2, [r7, #2]
 800d24e:	78f9      	ldrb	r1, [r7, #3]
 800d250:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d254:	9303      	str	r3, [sp, #12]
 800d256:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d258:	9302      	str	r3, [sp, #8]
 800d25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d25c:	9301      	str	r3, [sp, #4]
 800d25e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d262:	9300      	str	r3, [sp, #0]
 800d264:	4623      	mov	r3, r4
 800d266:	f7f5 fde1 	bl	8002e2c <HAL_HCD_HC_SubmitRequest>
 800d26a:	4603      	mov	r3, r0
 800d26c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d26e:	7bfb      	ldrb	r3, [r7, #15]
 800d270:	4618      	mov	r0, r3
 800d272:	f000 f86f 	bl	800d354 <USBH_Get_USB_Status>
 800d276:	4603      	mov	r3, r0
 800d278:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d27a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3714      	adds	r7, #20
 800d280:	46bd      	mov	sp, r7
 800d282:	bd90      	pop	{r4, r7, pc}

0800d284 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	460b      	mov	r3, r1
 800d28e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d296:	78fa      	ldrb	r2, [r7, #3]
 800d298:	4611      	mov	r1, r2
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7f6 f8c2 	bl	8003424 <HAL_HCD_HC_GetURBState>
 800d2a0:	4603      	mov	r3, r0
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3708      	adds	r7, #8
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b082      	sub	sp, #8
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d103      	bne.n	800d2c8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d2c0:	78fb      	ldrb	r3, [r7, #3]
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f000 f872 	bl	800d3ac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d2c8:	20c8      	movs	r0, #200	@ 0xc8
 800d2ca:	f7f4 fc47 	bl	8001b5c <HAL_Delay>
  return USBH_OK;
 800d2ce:	2300      	movs	r3, #0
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3708      	adds	r7, #8
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b085      	sub	sp, #20
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	70fb      	strb	r3, [r7, #3]
 800d2e4:	4613      	mov	r3, r2
 800d2e6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d2ee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d2f0:	78fa      	ldrb	r2, [r7, #3]
 800d2f2:	68f9      	ldr	r1, [r7, #12]
 800d2f4:	4613      	mov	r3, r2
 800d2f6:	011b      	lsls	r3, r3, #4
 800d2f8:	1a9b      	subs	r3, r3, r2
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	440b      	add	r3, r1
 800d2fe:	3317      	adds	r3, #23
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00a      	beq.n	800d31c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d306:	78fa      	ldrb	r2, [r7, #3]
 800d308:	68f9      	ldr	r1, [r7, #12]
 800d30a:	4613      	mov	r3, r2
 800d30c:	011b      	lsls	r3, r3, #4
 800d30e:	1a9b      	subs	r3, r3, r2
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	440b      	add	r3, r1
 800d314:	333c      	adds	r3, #60	@ 0x3c
 800d316:	78ba      	ldrb	r2, [r7, #2]
 800d318:	701a      	strb	r2, [r3, #0]
 800d31a:	e009      	b.n	800d330 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d31c:	78fa      	ldrb	r2, [r7, #3]
 800d31e:	68f9      	ldr	r1, [r7, #12]
 800d320:	4613      	mov	r3, r2
 800d322:	011b      	lsls	r3, r3, #4
 800d324:	1a9b      	subs	r3, r3, r2
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	440b      	add	r3, r1
 800d32a:	333d      	adds	r3, #61	@ 0x3d
 800d32c:	78ba      	ldrb	r2, [r7, #2]
 800d32e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d330:	2300      	movs	r3, #0
}
 800d332:	4618      	mov	r0, r3
 800d334:	3714      	adds	r7, #20
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr

0800d33e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b082      	sub	sp, #8
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f7f4 fc08 	bl	8001b5c <HAL_Delay>
}
 800d34c:	bf00      	nop
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d354:	b480      	push	{r7}
 800d356:	b085      	sub	sp, #20
 800d358:	af00      	add	r7, sp, #0
 800d35a:	4603      	mov	r3, r0
 800d35c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d35e:	2300      	movs	r3, #0
 800d360:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d362:	79fb      	ldrb	r3, [r7, #7]
 800d364:	2b03      	cmp	r3, #3
 800d366:	d817      	bhi.n	800d398 <USBH_Get_USB_Status+0x44>
 800d368:	a201      	add	r2, pc, #4	@ (adr r2, 800d370 <USBH_Get_USB_Status+0x1c>)
 800d36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d36e:	bf00      	nop
 800d370:	0800d381 	.word	0x0800d381
 800d374:	0800d387 	.word	0x0800d387
 800d378:	0800d38d 	.word	0x0800d38d
 800d37c:	0800d393 	.word	0x0800d393
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d380:	2300      	movs	r3, #0
 800d382:	73fb      	strb	r3, [r7, #15]
    break;
 800d384:	e00b      	b.n	800d39e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d386:	2302      	movs	r3, #2
 800d388:	73fb      	strb	r3, [r7, #15]
    break;
 800d38a:	e008      	b.n	800d39e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d38c:	2301      	movs	r3, #1
 800d38e:	73fb      	strb	r3, [r7, #15]
    break;
 800d390:	e005      	b.n	800d39e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d392:	2302      	movs	r3, #2
 800d394:	73fb      	strb	r3, [r7, #15]
    break;
 800d396:	e002      	b.n	800d39e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d398:	2302      	movs	r3, #2
 800d39a:	73fb      	strb	r3, [r7, #15]
    break;
 800d39c:	bf00      	nop
  }
  return usb_status;
 800d39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3714      	adds	r7, #20
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d3b6:	79fb      	ldrb	r3, [r7, #7]
 800d3b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d3ba:	79fb      	ldrb	r3, [r7, #7]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d102      	bne.n	800d3c6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	73fb      	strb	r3, [r7, #15]
 800d3c4:	e001      	b.n	800d3ca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 800d3ca:	7bfb      	ldrb	r3, [r7, #15]
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	2120      	movs	r1, #32
 800d3d0:	4803      	ldr	r0, [pc, #12]	@ (800d3e0 <MX_DriverVbusFS+0x34>)
 800d3d2:	f7f5 fbcf 	bl	8002b74 <HAL_GPIO_WritePin>
}
 800d3d6:	bf00      	nop
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	40020c00 	.word	0x40020c00

0800d3e4 <malloc>:
 800d3e4:	4b02      	ldr	r3, [pc, #8]	@ (800d3f0 <malloc+0xc>)
 800d3e6:	4601      	mov	r1, r0
 800d3e8:	6818      	ldr	r0, [r3, #0]
 800d3ea:	f000 b82d 	b.w	800d448 <_malloc_r>
 800d3ee:	bf00      	nop
 800d3f0:	2000003c 	.word	0x2000003c

0800d3f4 <free>:
 800d3f4:	4b02      	ldr	r3, [pc, #8]	@ (800d400 <free+0xc>)
 800d3f6:	4601      	mov	r1, r0
 800d3f8:	6818      	ldr	r0, [r3, #0]
 800d3fa:	f000 b903 	b.w	800d604 <_free_r>
 800d3fe:	bf00      	nop
 800d400:	2000003c 	.word	0x2000003c

0800d404 <sbrk_aligned>:
 800d404:	b570      	push	{r4, r5, r6, lr}
 800d406:	4e0f      	ldr	r6, [pc, #60]	@ (800d444 <sbrk_aligned+0x40>)
 800d408:	460c      	mov	r4, r1
 800d40a:	6831      	ldr	r1, [r6, #0]
 800d40c:	4605      	mov	r5, r0
 800d40e:	b911      	cbnz	r1, 800d416 <sbrk_aligned+0x12>
 800d410:	f000 f8ae 	bl	800d570 <_sbrk_r>
 800d414:	6030      	str	r0, [r6, #0]
 800d416:	4621      	mov	r1, r4
 800d418:	4628      	mov	r0, r5
 800d41a:	f000 f8a9 	bl	800d570 <_sbrk_r>
 800d41e:	1c43      	adds	r3, r0, #1
 800d420:	d103      	bne.n	800d42a <sbrk_aligned+0x26>
 800d422:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d426:	4620      	mov	r0, r4
 800d428:	bd70      	pop	{r4, r5, r6, pc}
 800d42a:	1cc4      	adds	r4, r0, #3
 800d42c:	f024 0403 	bic.w	r4, r4, #3
 800d430:	42a0      	cmp	r0, r4
 800d432:	d0f8      	beq.n	800d426 <sbrk_aligned+0x22>
 800d434:	1a21      	subs	r1, r4, r0
 800d436:	4628      	mov	r0, r5
 800d438:	f000 f89a 	bl	800d570 <_sbrk_r>
 800d43c:	3001      	adds	r0, #1
 800d43e:	d1f2      	bne.n	800d426 <sbrk_aligned+0x22>
 800d440:	e7ef      	b.n	800d422 <sbrk_aligned+0x1e>
 800d442:	bf00      	nop
 800d444:	20008fa0 	.word	0x20008fa0

0800d448 <_malloc_r>:
 800d448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d44c:	1ccd      	adds	r5, r1, #3
 800d44e:	f025 0503 	bic.w	r5, r5, #3
 800d452:	3508      	adds	r5, #8
 800d454:	2d0c      	cmp	r5, #12
 800d456:	bf38      	it	cc
 800d458:	250c      	movcc	r5, #12
 800d45a:	2d00      	cmp	r5, #0
 800d45c:	4606      	mov	r6, r0
 800d45e:	db01      	blt.n	800d464 <_malloc_r+0x1c>
 800d460:	42a9      	cmp	r1, r5
 800d462:	d904      	bls.n	800d46e <_malloc_r+0x26>
 800d464:	230c      	movs	r3, #12
 800d466:	6033      	str	r3, [r6, #0]
 800d468:	2000      	movs	r0, #0
 800d46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d46e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d544 <_malloc_r+0xfc>
 800d472:	f000 f869 	bl	800d548 <__malloc_lock>
 800d476:	f8d8 3000 	ldr.w	r3, [r8]
 800d47a:	461c      	mov	r4, r3
 800d47c:	bb44      	cbnz	r4, 800d4d0 <_malloc_r+0x88>
 800d47e:	4629      	mov	r1, r5
 800d480:	4630      	mov	r0, r6
 800d482:	f7ff ffbf 	bl	800d404 <sbrk_aligned>
 800d486:	1c43      	adds	r3, r0, #1
 800d488:	4604      	mov	r4, r0
 800d48a:	d158      	bne.n	800d53e <_malloc_r+0xf6>
 800d48c:	f8d8 4000 	ldr.w	r4, [r8]
 800d490:	4627      	mov	r7, r4
 800d492:	2f00      	cmp	r7, #0
 800d494:	d143      	bne.n	800d51e <_malloc_r+0xd6>
 800d496:	2c00      	cmp	r4, #0
 800d498:	d04b      	beq.n	800d532 <_malloc_r+0xea>
 800d49a:	6823      	ldr	r3, [r4, #0]
 800d49c:	4639      	mov	r1, r7
 800d49e:	4630      	mov	r0, r6
 800d4a0:	eb04 0903 	add.w	r9, r4, r3
 800d4a4:	f000 f864 	bl	800d570 <_sbrk_r>
 800d4a8:	4581      	cmp	r9, r0
 800d4aa:	d142      	bne.n	800d532 <_malloc_r+0xea>
 800d4ac:	6821      	ldr	r1, [r4, #0]
 800d4ae:	1a6d      	subs	r5, r5, r1
 800d4b0:	4629      	mov	r1, r5
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	f7ff ffa6 	bl	800d404 <sbrk_aligned>
 800d4b8:	3001      	adds	r0, #1
 800d4ba:	d03a      	beq.n	800d532 <_malloc_r+0xea>
 800d4bc:	6823      	ldr	r3, [r4, #0]
 800d4be:	442b      	add	r3, r5
 800d4c0:	6023      	str	r3, [r4, #0]
 800d4c2:	f8d8 3000 	ldr.w	r3, [r8]
 800d4c6:	685a      	ldr	r2, [r3, #4]
 800d4c8:	bb62      	cbnz	r2, 800d524 <_malloc_r+0xdc>
 800d4ca:	f8c8 7000 	str.w	r7, [r8]
 800d4ce:	e00f      	b.n	800d4f0 <_malloc_r+0xa8>
 800d4d0:	6822      	ldr	r2, [r4, #0]
 800d4d2:	1b52      	subs	r2, r2, r5
 800d4d4:	d420      	bmi.n	800d518 <_malloc_r+0xd0>
 800d4d6:	2a0b      	cmp	r2, #11
 800d4d8:	d917      	bls.n	800d50a <_malloc_r+0xc2>
 800d4da:	1961      	adds	r1, r4, r5
 800d4dc:	42a3      	cmp	r3, r4
 800d4de:	6025      	str	r5, [r4, #0]
 800d4e0:	bf18      	it	ne
 800d4e2:	6059      	strne	r1, [r3, #4]
 800d4e4:	6863      	ldr	r3, [r4, #4]
 800d4e6:	bf08      	it	eq
 800d4e8:	f8c8 1000 	streq.w	r1, [r8]
 800d4ec:	5162      	str	r2, [r4, r5]
 800d4ee:	604b      	str	r3, [r1, #4]
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	f000 f82f 	bl	800d554 <__malloc_unlock>
 800d4f6:	f104 000b 	add.w	r0, r4, #11
 800d4fa:	1d23      	adds	r3, r4, #4
 800d4fc:	f020 0007 	bic.w	r0, r0, #7
 800d500:	1ac2      	subs	r2, r0, r3
 800d502:	bf1c      	itt	ne
 800d504:	1a1b      	subne	r3, r3, r0
 800d506:	50a3      	strne	r3, [r4, r2]
 800d508:	e7af      	b.n	800d46a <_malloc_r+0x22>
 800d50a:	6862      	ldr	r2, [r4, #4]
 800d50c:	42a3      	cmp	r3, r4
 800d50e:	bf0c      	ite	eq
 800d510:	f8c8 2000 	streq.w	r2, [r8]
 800d514:	605a      	strne	r2, [r3, #4]
 800d516:	e7eb      	b.n	800d4f0 <_malloc_r+0xa8>
 800d518:	4623      	mov	r3, r4
 800d51a:	6864      	ldr	r4, [r4, #4]
 800d51c:	e7ae      	b.n	800d47c <_malloc_r+0x34>
 800d51e:	463c      	mov	r4, r7
 800d520:	687f      	ldr	r7, [r7, #4]
 800d522:	e7b6      	b.n	800d492 <_malloc_r+0x4a>
 800d524:	461a      	mov	r2, r3
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	42a3      	cmp	r3, r4
 800d52a:	d1fb      	bne.n	800d524 <_malloc_r+0xdc>
 800d52c:	2300      	movs	r3, #0
 800d52e:	6053      	str	r3, [r2, #4]
 800d530:	e7de      	b.n	800d4f0 <_malloc_r+0xa8>
 800d532:	230c      	movs	r3, #12
 800d534:	6033      	str	r3, [r6, #0]
 800d536:	4630      	mov	r0, r6
 800d538:	f000 f80c 	bl	800d554 <__malloc_unlock>
 800d53c:	e794      	b.n	800d468 <_malloc_r+0x20>
 800d53e:	6005      	str	r5, [r0, #0]
 800d540:	e7d6      	b.n	800d4f0 <_malloc_r+0xa8>
 800d542:	bf00      	nop
 800d544:	20008fa4 	.word	0x20008fa4

0800d548 <__malloc_lock>:
 800d548:	4801      	ldr	r0, [pc, #4]	@ (800d550 <__malloc_lock+0x8>)
 800d54a:	f000 b84b 	b.w	800d5e4 <__retarget_lock_acquire_recursive>
 800d54e:	bf00      	nop
 800d550:	200090e4 	.word	0x200090e4

0800d554 <__malloc_unlock>:
 800d554:	4801      	ldr	r0, [pc, #4]	@ (800d55c <__malloc_unlock+0x8>)
 800d556:	f000 b846 	b.w	800d5e6 <__retarget_lock_release_recursive>
 800d55a:	bf00      	nop
 800d55c:	200090e4 	.word	0x200090e4

0800d560 <memset>:
 800d560:	4402      	add	r2, r0
 800d562:	4603      	mov	r3, r0
 800d564:	4293      	cmp	r3, r2
 800d566:	d100      	bne.n	800d56a <memset+0xa>
 800d568:	4770      	bx	lr
 800d56a:	f803 1b01 	strb.w	r1, [r3], #1
 800d56e:	e7f9      	b.n	800d564 <memset+0x4>

0800d570 <_sbrk_r>:
 800d570:	b538      	push	{r3, r4, r5, lr}
 800d572:	4d06      	ldr	r5, [pc, #24]	@ (800d58c <_sbrk_r+0x1c>)
 800d574:	2300      	movs	r3, #0
 800d576:	4604      	mov	r4, r0
 800d578:	4608      	mov	r0, r1
 800d57a:	602b      	str	r3, [r5, #0]
 800d57c:	f7f3 fbb8 	bl	8000cf0 <_sbrk>
 800d580:	1c43      	adds	r3, r0, #1
 800d582:	d102      	bne.n	800d58a <_sbrk_r+0x1a>
 800d584:	682b      	ldr	r3, [r5, #0]
 800d586:	b103      	cbz	r3, 800d58a <_sbrk_r+0x1a>
 800d588:	6023      	str	r3, [r4, #0]
 800d58a:	bd38      	pop	{r3, r4, r5, pc}
 800d58c:	200090e0 	.word	0x200090e0

0800d590 <__errno>:
 800d590:	4b01      	ldr	r3, [pc, #4]	@ (800d598 <__errno+0x8>)
 800d592:	6818      	ldr	r0, [r3, #0]
 800d594:	4770      	bx	lr
 800d596:	bf00      	nop
 800d598:	2000003c 	.word	0x2000003c

0800d59c <__libc_init_array>:
 800d59c:	b570      	push	{r4, r5, r6, lr}
 800d59e:	4d0d      	ldr	r5, [pc, #52]	@ (800d5d4 <__libc_init_array+0x38>)
 800d5a0:	4c0d      	ldr	r4, [pc, #52]	@ (800d5d8 <__libc_init_array+0x3c>)
 800d5a2:	1b64      	subs	r4, r4, r5
 800d5a4:	10a4      	asrs	r4, r4, #2
 800d5a6:	2600      	movs	r6, #0
 800d5a8:	42a6      	cmp	r6, r4
 800d5aa:	d109      	bne.n	800d5c0 <__libc_init_array+0x24>
 800d5ac:	4d0b      	ldr	r5, [pc, #44]	@ (800d5dc <__libc_init_array+0x40>)
 800d5ae:	4c0c      	ldr	r4, [pc, #48]	@ (800d5e0 <__libc_init_array+0x44>)
 800d5b0:	f000 f872 	bl	800d698 <_init>
 800d5b4:	1b64      	subs	r4, r4, r5
 800d5b6:	10a4      	asrs	r4, r4, #2
 800d5b8:	2600      	movs	r6, #0
 800d5ba:	42a6      	cmp	r6, r4
 800d5bc:	d105      	bne.n	800d5ca <__libc_init_array+0x2e>
 800d5be:	bd70      	pop	{r4, r5, r6, pc}
 800d5c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5c4:	4798      	blx	r3
 800d5c6:	3601      	adds	r6, #1
 800d5c8:	e7ee      	b.n	800d5a8 <__libc_init_array+0xc>
 800d5ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5ce:	4798      	blx	r3
 800d5d0:	3601      	adds	r6, #1
 800d5d2:	e7f2      	b.n	800d5ba <__libc_init_array+0x1e>
 800d5d4:	0800f20c 	.word	0x0800f20c
 800d5d8:	0800f20c 	.word	0x0800f20c
 800d5dc:	0800f20c 	.word	0x0800f20c
 800d5e0:	0800f210 	.word	0x0800f210

0800d5e4 <__retarget_lock_acquire_recursive>:
 800d5e4:	4770      	bx	lr

0800d5e6 <__retarget_lock_release_recursive>:
 800d5e6:	4770      	bx	lr

0800d5e8 <memcpy>:
 800d5e8:	440a      	add	r2, r1
 800d5ea:	4291      	cmp	r1, r2
 800d5ec:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d5f0:	d100      	bne.n	800d5f4 <memcpy+0xc>
 800d5f2:	4770      	bx	lr
 800d5f4:	b510      	push	{r4, lr}
 800d5f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5fe:	4291      	cmp	r1, r2
 800d600:	d1f9      	bne.n	800d5f6 <memcpy+0xe>
 800d602:	bd10      	pop	{r4, pc}

0800d604 <_free_r>:
 800d604:	b538      	push	{r3, r4, r5, lr}
 800d606:	4605      	mov	r5, r0
 800d608:	2900      	cmp	r1, #0
 800d60a:	d041      	beq.n	800d690 <_free_r+0x8c>
 800d60c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d610:	1f0c      	subs	r4, r1, #4
 800d612:	2b00      	cmp	r3, #0
 800d614:	bfb8      	it	lt
 800d616:	18e4      	addlt	r4, r4, r3
 800d618:	f7ff ff96 	bl	800d548 <__malloc_lock>
 800d61c:	4a1d      	ldr	r2, [pc, #116]	@ (800d694 <_free_r+0x90>)
 800d61e:	6813      	ldr	r3, [r2, #0]
 800d620:	b933      	cbnz	r3, 800d630 <_free_r+0x2c>
 800d622:	6063      	str	r3, [r4, #4]
 800d624:	6014      	str	r4, [r2, #0]
 800d626:	4628      	mov	r0, r5
 800d628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d62c:	f7ff bf92 	b.w	800d554 <__malloc_unlock>
 800d630:	42a3      	cmp	r3, r4
 800d632:	d908      	bls.n	800d646 <_free_r+0x42>
 800d634:	6820      	ldr	r0, [r4, #0]
 800d636:	1821      	adds	r1, r4, r0
 800d638:	428b      	cmp	r3, r1
 800d63a:	bf01      	itttt	eq
 800d63c:	6819      	ldreq	r1, [r3, #0]
 800d63e:	685b      	ldreq	r3, [r3, #4]
 800d640:	1809      	addeq	r1, r1, r0
 800d642:	6021      	streq	r1, [r4, #0]
 800d644:	e7ed      	b.n	800d622 <_free_r+0x1e>
 800d646:	461a      	mov	r2, r3
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	b10b      	cbz	r3, 800d650 <_free_r+0x4c>
 800d64c:	42a3      	cmp	r3, r4
 800d64e:	d9fa      	bls.n	800d646 <_free_r+0x42>
 800d650:	6811      	ldr	r1, [r2, #0]
 800d652:	1850      	adds	r0, r2, r1
 800d654:	42a0      	cmp	r0, r4
 800d656:	d10b      	bne.n	800d670 <_free_r+0x6c>
 800d658:	6820      	ldr	r0, [r4, #0]
 800d65a:	4401      	add	r1, r0
 800d65c:	1850      	adds	r0, r2, r1
 800d65e:	4283      	cmp	r3, r0
 800d660:	6011      	str	r1, [r2, #0]
 800d662:	d1e0      	bne.n	800d626 <_free_r+0x22>
 800d664:	6818      	ldr	r0, [r3, #0]
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	6053      	str	r3, [r2, #4]
 800d66a:	4408      	add	r0, r1
 800d66c:	6010      	str	r0, [r2, #0]
 800d66e:	e7da      	b.n	800d626 <_free_r+0x22>
 800d670:	d902      	bls.n	800d678 <_free_r+0x74>
 800d672:	230c      	movs	r3, #12
 800d674:	602b      	str	r3, [r5, #0]
 800d676:	e7d6      	b.n	800d626 <_free_r+0x22>
 800d678:	6820      	ldr	r0, [r4, #0]
 800d67a:	1821      	adds	r1, r4, r0
 800d67c:	428b      	cmp	r3, r1
 800d67e:	bf04      	itt	eq
 800d680:	6819      	ldreq	r1, [r3, #0]
 800d682:	685b      	ldreq	r3, [r3, #4]
 800d684:	6063      	str	r3, [r4, #4]
 800d686:	bf04      	itt	eq
 800d688:	1809      	addeq	r1, r1, r0
 800d68a:	6021      	streq	r1, [r4, #0]
 800d68c:	6054      	str	r4, [r2, #4]
 800d68e:	e7ca      	b.n	800d626 <_free_r+0x22>
 800d690:	bd38      	pop	{r3, r4, r5, pc}
 800d692:	bf00      	nop
 800d694:	20008fa4 	.word	0x20008fa4

0800d698 <_init>:
 800d698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69a:	bf00      	nop
 800d69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d69e:	bc08      	pop	{r3}
 800d6a0:	469e      	mov	lr, r3
 800d6a2:	4770      	bx	lr

0800d6a4 <_fini>:
 800d6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6a6:	bf00      	nop
 800d6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6aa:	bc08      	pop	{r3}
 800d6ac:	469e      	mov	lr, r3
 800d6ae:	4770      	bx	lr
