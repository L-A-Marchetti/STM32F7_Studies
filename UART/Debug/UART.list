
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e10  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020a0  08009fe0  08009fe0  0000afe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c080  0800c080  0000e02c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c080  0800c080  0000d080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c088  0800c088  0000e02c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c088  0800c088  0000d088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c08c  0800c08c  0000d08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  0800c090  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a3c  2000002c  0800c0bc  0000e02c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  0800c0bc  0000ea68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e02c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c702  00000000  00000000  0000e05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053c6  00000000  00000000  0003a75e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d8  00000000  00000000  0003fb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001971  00000000  00000000  00041c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030e11  00000000  00000000  00043571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029564  00000000  00000000  00074382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00127016  00000000  00000000  0009d8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c48fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bd8  00000000  00000000  001c4940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001cd518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000002c 	.word	0x2000002c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009fc8 	.word	0x08009fc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000030 	.word	0x20000030
 800020c:	08009fc8 	.word	0x08009fc8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <debug_log>:

#include "debug.h"

uint16_t debug_row = 0;

void debug_log(uint8_t new_page, const char *message, uint8_t error) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	6039      	str	r1, [r7, #0]
 800050a:	71fb      	strb	r3, [r7, #7]
 800050c:	4613      	mov	r3, r2
 800050e:	71bb      	strb	r3, [r7, #6]
	BSP_LCD_SetFont(DEBUG_FONT);
 8000510:	4817      	ldr	r0, [pc, #92]	@ (8000570 <debug_log+0x70>)
 8000512:	f001 f821 	bl	8001558 <BSP_LCD_SetFont>
	if (new_page != 0)
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00a      	beq.n	8000532 <debug_log+0x32>
	{
		 BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800051c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000520:	f001 f800 	bl	8001524 <BSP_LCD_SetBackColor>
		 BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000524:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000528:	f001 f830 	bl	800158c <BSP_LCD_Clear>
		 debug_row = 0;
 800052c:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <debug_log+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	801a      	strh	r2, [r3, #0]
	}
	if (error != 0)
 8000532:	79bb      	ldrb	r3, [r7, #6]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d003      	beq.n	8000540 <debug_log+0x40>
	{
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000538:	480f      	ldr	r0, [pc, #60]	@ (8000578 <debug_log+0x78>)
 800053a:	f000 ffdb 	bl	80014f4 <BSP_LCD_SetTextColor>
 800053e:	e003      	b.n	8000548 <debug_log+0x48>
	}
	else
	{
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000540:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000544:	f000 ffd6 	bl	80014f4 <BSP_LCD_SetTextColor>
	}
	BSP_LCD_DisplayStringAt(0, DEBUG_FONT_SIZE * debug_row++, (uint8_t*)message, LEFT_MODE);
 8000548:	4b0a      	ldr	r3, [pc, #40]	@ (8000574 <debug_log+0x74>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	1c5a      	adds	r2, r3, #1
 800054e:	b291      	uxth	r1, r2
 8000550:	4a08      	ldr	r2, [pc, #32]	@ (8000574 <debug_log+0x74>)
 8000552:	8011      	strh	r1, [r2, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	0052      	lsls	r2, r2, #1
 8000558:	4413      	add	r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	b299      	uxth	r1, r3
 800055e:	2303      	movs	r3, #3
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	2000      	movs	r0, #0
 8000564:	f001 f87e 	bl	8001664 <BSP_LCD_DisplayStringAt>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000014 	.word	0x20000014
 8000574:	20000048 	.word	0x20000048
 8000578:	ffff0000 	.word	0xffff0000

0800057c <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <HAL_UART_RxCpltCallback>:
uint8_t rx_buffer[RX_BUFFER_SIZE];
volatile uint16_t rx_index = 0;
uint8_t received_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000610 <HAL_UART_RxCpltCallback+0x7c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d12f      	bne.n	8000606 <HAL_UART_RxCpltCallback+0x72>
    {
        if (rx_index < RX_BUFFER_SIZE - 1)
 80005a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <HAL_UART_RxCpltCallback+0x80>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	2bfe      	cmp	r3, #254	@ 0xfe
 80005ae:	d825      	bhi.n	80005fc <HAL_UART_RxCpltCallback+0x68>
        {
            rx_buffer[rx_index++] = received_data;
 80005b0:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <HAL_UART_RxCpltCallback+0x80>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	1c5a      	adds	r2, r3, #1
 80005b8:	b291      	uxth	r1, r2
 80005ba:	4a16      	ldr	r2, [pc, #88]	@ (8000614 <HAL_UART_RxCpltCallback+0x80>)
 80005bc:	8011      	strh	r1, [r2, #0]
 80005be:	461a      	mov	r2, r3
 80005c0:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <HAL_UART_RxCpltCallback+0x84>)
 80005c2:	7819      	ldrb	r1, [r3, #0]
 80005c4:	4b15      	ldr	r3, [pc, #84]	@ (800061c <HAL_UART_RxCpltCallback+0x88>)
 80005c6:	5499      	strb	r1, [r3, r2]

            if (received_data == '\n' || received_data == '\r' || rx_index == RX_BUFFER_SIZE - 1)
 80005c8:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <HAL_UART_RxCpltCallback+0x84>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b0a      	cmp	r3, #10
 80005ce:	d008      	beq.n	80005e2 <HAL_UART_RxCpltCallback+0x4e>
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <HAL_UART_RxCpltCallback+0x84>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b0d      	cmp	r3, #13
 80005d6:	d004      	beq.n	80005e2 <HAL_UART_RxCpltCallback+0x4e>
 80005d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <HAL_UART_RxCpltCallback+0x80>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	2bff      	cmp	r3, #255	@ 0xff
 80005e0:	d10c      	bne.n	80005fc <HAL_UART_RxCpltCallback+0x68>
            {
                rx_buffer[rx_index-1] = '\0';
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <HAL_UART_RxCpltCallback+0x80>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	3b01      	subs	r3, #1
 80005ea:	4a0c      	ldr	r2, [pc, #48]	@ (800061c <HAL_UART_RxCpltCallback+0x88>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	54d1      	strb	r1, [r2, r3]
                process_stream((char*)rx_buffer);
 80005f0:	480a      	ldr	r0, [pc, #40]	@ (800061c <HAL_UART_RxCpltCallback+0x88>)
 80005f2:	f000 fdd1 	bl	8001198 <process_stream>
                //debug_log(0, (char*)rx_buffer, 0);
                rx_index = 0;
 80005f6:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <HAL_UART_RxCpltCallback+0x80>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	801a      	strh	r2, [r3, #0]
            }
        }

        HAL_UART_Receive_IT(&huart1, &received_data, 1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	4906      	ldr	r1, [pc, #24]	@ (8000618 <HAL_UART_RxCpltCallback+0x84>)
 8000600:	4807      	ldr	r0, [pc, #28]	@ (8000620 <HAL_UART_RxCpltCallback+0x8c>)
 8000602:	f006 fc07 	bl	8006e14 <HAL_UART_Receive_IT>
    }
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40011000 	.word	0x40011000
 8000614:	200002bc 	.word	0x200002bc
 8000618:	200002be 	.word	0x200002be
 800061c:	200001bc 	.word	0x200001bc
 8000620:	20000134 	.word	0x20000134

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f001 fd56 	bl	80020d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f81e 	bl	800066c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000630:	f000 f88e 	bl	8000750 <PeriphCommonClock_Config>
  MX_USART6_UART_Init();
  MX_FATFS_Init();
  */
  //MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000634:	f000 fe56 	bl	80012e4 <BSP_LCD_Init>
  /* Initialize the LCD Layers */
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FB_START_ADDRESS);
 8000638:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800063c:	2001      	movs	r0, #1
 800063e:	f000 fee9 	bl	8001414 <BSP_LCD_LayerDefaultInit>
  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8000642:	2001      	movs	r0, #1
 8000644:	f000 ff46 	bl	80014d4 <BSP_LCD_SelectLayer>
  debug_log(1, "LCD Initialized", 0);
 8000648:	2200      	movs	r2, #0
 800064a:	4907      	ldr	r1, [pc, #28]	@ (8000668 <main+0x44>)
 800064c:	2001      	movs	r0, #1
 800064e:	f7ff ff57 	bl	8000500 <debug_log>
  init_board_state();
 8000652:	f000 fde1 	bl	8001218 <init_board_state>
  MX_USART1_UART_Init();
 8000656:	f000 f8ad 	bl	80007b4 <MX_USART1_UART_Init>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800065a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800065e:	f000 ff95 	bl	800158c <BSP_LCD_Clear>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000662:	bf00      	nop
 8000664:	e7fd      	b.n	8000662 <main+0x3e>
 8000666:	bf00      	nop
 8000668:	08009fe0 	.word	0x08009fe0

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	@ 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	@ 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f009 fc34 	bl	8009ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000690:	f004 ff0c 	bl	80054ac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	4b2c      	ldr	r3, [pc, #176]	@ (8000748 <SystemClock_Config+0xdc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemClock_Config+0xdc>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a0:	4b29      	ldr	r3, [pc, #164]	@ (8000748 <SystemClock_Config+0xdc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	4b27      	ldr	r3, [pc, #156]	@ (800074c <SystemClock_Config+0xe0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a26      	ldr	r2, [pc, #152]	@ (800074c <SystemClock_Config+0xe0>)
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b24      	ldr	r3, [pc, #144]	@ (800074c <SystemClock_Config+0xe0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006c4:	2309      	movs	r3, #9
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006ce:	2301      	movs	r3, #1
 80006d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006dc:	2319      	movs	r3, #25
 80006de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80006e0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80006e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006ea:	2309      	movs	r3, #9
 80006ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	4618      	mov	r0, r3
 80006f4:	f004 ff3a 	bl	800556c <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006fe:	f000 f8af 	bl	8000860 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000702:	f004 fee3 	bl	80054cc <HAL_PWREx_EnableOverDrive>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800070c:	f000 f8a8 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2106      	movs	r1, #6
 800072e:	4618      	mov	r0, r3
 8000730:	f005 f9c0 	bl	8005ab4 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800073a:	f000 f891 	bl	8000860 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	@ 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b0a2      	sub	sp, #136	@ 0x88
 8000754:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2284      	movs	r2, #132	@ 0x84
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f009 fbc3 	bl	8009ee8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <PeriphCommonClock_Config+0x60>)
 8000764:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000766:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800076a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800076c:	2305      	movs	r3, #5
 800076e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000774:	2303      	movs	r3, #3
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000778:	2301      	movs	r3, #1
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800077c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000780:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000782:	2300      	movs	r3, #0
 8000784:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000786:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800078a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800078e:	2300      	movs	r3, #0
 8000790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4618      	mov	r0, r3
 8000798:	f005 fba4 	bl	8005ee4 <HAL_RCCEx_PeriphCLKConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80007a2:	f000 f85d 	bl	8000860 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3788      	adds	r7, #136	@ 0x88
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	00b00008 	.word	0x00b00008

080007b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	@ (800082c <MX_USART1_UART_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f6:	480c      	ldr	r0, [pc, #48]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007f8:	f006 fabe 	bl	8006d78 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d006      	beq.n	8000810 <MX_USART1_UART_Init+0x5c>
  {
	debug_log(0, "USART/UART Initialization error", 1);
 8000802:	2201      	movs	r2, #1
 8000804:	490a      	ldr	r1, [pc, #40]	@ (8000830 <MX_USART1_UART_Init+0x7c>)
 8000806:	2000      	movs	r0, #0
 8000808:	f7ff fe7a 	bl	8000500 <debug_log>
    Error_Handler();
 800080c:	f000 f828 	bl	8000860 <Error_Handler>
  }
  debug_log(0, "USART/UART Initialized", 0);
 8000810:	2200      	movs	r2, #0
 8000812:	4908      	ldr	r1, [pc, #32]	@ (8000834 <MX_USART1_UART_Init+0x80>)
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff fe73 	bl	8000500 <debug_log>

  HAL_UART_Receive_IT(&huart1, &received_data, 1);
 800081a:	2201      	movs	r2, #1
 800081c:	4906      	ldr	r1, [pc, #24]	@ (8000838 <MX_USART1_UART_Init+0x84>)
 800081e:	4802      	ldr	r0, [pc, #8]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 8000820:	f006 faf8 	bl	8006e14 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000134 	.word	0x20000134
 800082c:	40011000 	.word	0x40011000
 8000830:	08009ff0 	.word	0x08009ff0
 8000834:	0800a010 	.word	0x0800a010
 8000838:	200002be 	.word	0x200002be

0800083c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a04      	ldr	r2, [pc, #16]	@ (800085c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d101      	bne.n	8000852 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800084e:	f001 fc51 	bl	80020f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40001000 	.word	0x40001000

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <Error_Handler+0x8>

0800086c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000876:	4a10      	ldr	r2, [pc, #64]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	@ 0x40
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088e:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000894:	6453      	str	r3, [r2, #68]	@ 0x44
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	f06f 0001 	mvn.w	r0, #1
 80008aa:	f001 fd1f 	bl	80022ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000900 <HAL_DMA2D_MspInit+0x44>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d113      	bne.n	80008f6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80008ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <HAL_DMA2D_MspInit+0x48>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000904 <HAL_DMA2D_MspInit+0x48>)
 80008d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b0a      	ldr	r3, [pc, #40]	@ (8000904 <HAL_DMA2D_MspInit+0x48>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2105      	movs	r1, #5
 80008ea:	205a      	movs	r0, #90	@ 0x5a
 80008ec:	f001 fcfe 	bl	80022ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80008f0:	205a      	movs	r0, #90	@ 0x5a
 80008f2:	f001 fd17 	bl	8002324 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	4002b000 	.word	0x4002b000
 8000904:	40023800 	.word	0x40023800

08000908 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08e      	sub	sp, #56	@ 0x38
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a55      	ldr	r2, [pc, #340]	@ (8000a7c <HAL_LTDC_MspInit+0x174>)
 8000926:	4293      	cmp	r3, r2
 8000928:	f040 80a3 	bne.w	8000a72 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800092c:	4b54      	ldr	r3, [pc, #336]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 800092e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000930:	4a53      	ldr	r2, [pc, #332]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 8000932:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000936:	6453      	str	r3, [r2, #68]	@ 0x44
 8000938:	4b51      	ldr	r3, [pc, #324]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 800093a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000940:	623b      	str	r3, [r7, #32]
 8000942:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000944:	4b4e      	ldr	r3, [pc, #312]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 8000946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000948:	4a4d      	ldr	r2, [pc, #308]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000950:	4b4b      	ldr	r3, [pc, #300]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000954:	f003 0310 	and.w	r3, r3, #16
 8000958:	61fb      	str	r3, [r7, #28]
 800095a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800095c:	4b48      	ldr	r3, [pc, #288]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000960:	4a47      	ldr	r2, [pc, #284]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 8000962:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000966:	6313      	str	r3, [r2, #48]	@ 0x30
 8000968:	4b45      	ldr	r3, [pc, #276]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000974:	4b42      	ldr	r3, [pc, #264]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000978:	4a41      	ldr	r2, [pc, #260]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 800097a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800097e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000980:	4b3f      	ldr	r3, [pc, #252]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800098c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000990:	4a3b      	ldr	r2, [pc, #236]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 8000992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000996:	6313      	str	r3, [r2, #48]	@ 0x30
 8000998:	4b39      	ldr	r3, [pc, #228]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80009a4:	4b36      	ldr	r3, [pc, #216]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a8:	4a35      	ldr	r2, [pc, #212]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 80009aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b0:	4b33      	ldr	r3, [pc, #204]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80009bc:	2310      	movs	r3, #16
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009cc:	230e      	movs	r3, #14
 80009ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	482b      	ldr	r0, [pc, #172]	@ (8000a84 <HAL_LTDC_MspInit+0x17c>)
 80009d8:	f002 fa9e 	bl	8002f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80009dc:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009ee:	230e      	movs	r3, #14
 80009f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f6:	4619      	mov	r1, r3
 80009f8:	4823      	ldr	r0, [pc, #140]	@ (8000a88 <HAL_LTDC_MspInit+0x180>)
 80009fa:	f002 fa8d 	bl	8002f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80009fe:	23f7      	movs	r3, #247	@ 0xf7
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a0e:	230e      	movs	r3, #14
 8000a10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a16:	4619      	mov	r1, r3
 8000a18:	481c      	ldr	r0, [pc, #112]	@ (8000a8c <HAL_LTDC_MspInit+0x184>)
 8000a1a:	f002 fa7d 	bl	8002f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a30:	2309      	movs	r3, #9
 8000a32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4815      	ldr	r0, [pc, #84]	@ (8000a90 <HAL_LTDC_MspInit+0x188>)
 8000a3c:	f002 fa6c 	bl	8002f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000a40:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a52:	230e      	movs	r3, #14
 8000a54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <HAL_LTDC_MspInit+0x18c>)
 8000a5e:	f002 fa5b 	bl	8002f18 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2105      	movs	r1, #5
 8000a66:	2058      	movs	r0, #88	@ 0x58
 8000a68:	f001 fc40 	bl	80022ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000a6c:	2058      	movs	r0, #88	@ 0x58
 8000a6e:	f001 fc59 	bl	8002324 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8000a72:	bf00      	nop
 8000a74:	3738      	adds	r7, #56	@ 0x38
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40016800 	.word	0x40016800
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40022400 	.word	0x40022400
 8000a8c:	40022800 	.word	0x40022800
 8000a90:	40021800 	.word	0x40021800
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	@ 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a2e      	ldr	r2, [pc, #184]	@ (8000b60 <HAL_TIM_Base_MspInit+0xc8>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d10c      	bne.n	8000ac4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aaa:	4b2e      	ldr	r3, [pc, #184]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	4a2d      	ldr	r2, [pc, #180]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000ac2:	e046      	b.n	8000b52 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000acc:	d10c      	bne.n	8000ae8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ace:	4b25      	ldr	r3, [pc, #148]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	4a24      	ldr	r2, [pc, #144]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ada:	4b22      	ldr	r3, [pc, #136]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	61bb      	str	r3, [r7, #24]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
}
 8000ae6:	e034      	b.n	8000b52 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a1e      	ldr	r2, [pc, #120]	@ (8000b68 <HAL_TIM_Base_MspInit+0xd0>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d10c      	bne.n	8000b0c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
}
 8000b0a:	e022      	b.n	8000b52 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a16      	ldr	r2, [pc, #88]	@ (8000b6c <HAL_TIM_Base_MspInit+0xd4>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d10c      	bne.n	8000b30 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000b16:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	4a12      	ldr	r2, [pc, #72]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
}
 8000b2e:	e010      	b.n	8000b52 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0e      	ldr	r2, [pc, #56]	@ (8000b70 <HAL_TIM_Base_MspInit+0xd8>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d10b      	bne.n	8000b52 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3e:	4a09      	ldr	r2, [pc, #36]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b46:	4b07      	ldr	r3, [pc, #28]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
}
 8000b52:	bf00      	nop
 8000b54:	3724      	adds	r7, #36	@ 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40010000 	.word	0x40010000
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40000400 	.word	0x40000400
 8000b6c:	40000c00 	.word	0x40000c00
 8000b70:	40010400 	.word	0x40010400

08000b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b0ae      	sub	sp, #184	@ 0xb8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b8c:	f107 0320 	add.w	r3, r7, #32
 8000b90:	2284      	movs	r2, #132	@ 0x84
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f009 f9a7 	bl	8009ee8 <memset>
  if(huart->Instance==USART1)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a57      	ldr	r2, [pc, #348]	@ (8000cfc <HAL_UART_MspInit+0x188>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d165      	bne.n	8000c70 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ba4:	2340      	movs	r3, #64	@ 0x40
 8000ba6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bac:	f107 0320 	add.w	r3, r7, #32
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f005 f997 	bl	8005ee4 <HAL_RCCEx_PeriphCLKConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bbc:	f7ff fe50 	bl	8000860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bc0:	4b4f      	ldr	r3, [pc, #316]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc4:	4a4e      	ldr	r2, [pc, #312]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bcc:	4b4c      	ldr	r3, [pc, #304]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd0:	f003 0310 	and.w	r3, r3, #16
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd8:	4b49      	ldr	r3, [pc, #292]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bdc:	4a48      	ldr	r2, [pc, #288]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000bde:	f043 0302 	orr.w	r3, r3, #2
 8000be2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be4:	4b46      	ldr	r3, [pc, #280]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
 8000bee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b43      	ldr	r3, [pc, #268]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf4:	4a42      	ldr	r2, [pc, #264]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfc:	4b40      	ldr	r3, [pc, #256]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c08:	2380      	movs	r3, #128	@ 0x80
 8000c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c20:	2307      	movs	r3, #7
 8000c22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4835      	ldr	r0, [pc, #212]	@ (8000d04 <HAL_UART_MspInit+0x190>)
 8000c2e:	f002 f973 	bl	8002f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c56:	4619      	mov	r1, r3
 8000c58:	482b      	ldr	r0, [pc, #172]	@ (8000d08 <HAL_UART_MspInit+0x194>)
 8000c5a:	f002 f95d 	bl	8002f18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2105      	movs	r1, #5
 8000c62:	2025      	movs	r0, #37	@ 0x25
 8000c64:	f001 fb42 	bl	80022ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c68:	2025      	movs	r0, #37	@ 0x25
 8000c6a:	f001 fb5b 	bl	8002324 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000c6e:	e040      	b.n	8000cf2 <HAL_UART_MspInit+0x17e>
  else if(huart->Instance==USART6)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a25      	ldr	r2, [pc, #148]	@ (8000d0c <HAL_UART_MspInit+0x198>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d13b      	bne.n	8000cf2 <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000c7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c7e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c80:	2300      	movs	r3, #0
 8000c82:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c84:	f107 0320 	add.w	r3, r7, #32
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f005 f92b 	bl	8005ee4 <HAL_RCCEx_PeriphCLKConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8000c94:	f7ff fde4 	bl	8000860 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000c98:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9c:	4a18      	ldr	r2, [pc, #96]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000c9e:	f043 0320 	orr.w	r3, r3, #32
 8000ca2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca4:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca8:	f003 0320 	and.w	r3, r3, #32
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	4a12      	ldr	r2, [pc, #72]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbc:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cc8:	23c0      	movs	r3, #192	@ 0xc0
 8000cca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cea:	4619      	mov	r1, r3
 8000cec:	4808      	ldr	r0, [pc, #32]	@ (8000d10 <HAL_UART_MspInit+0x19c>)
 8000cee:	f002 f913 	bl	8002f18 <HAL_GPIO_Init>
}
 8000cf2:	bf00      	nop
 8000cf4:	37b8      	adds	r7, #184	@ 0xb8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40011000 	.word	0x40011000
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020400 	.word	0x40020400
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	40011400 	.word	0x40011400
 8000d10:	40020800 	.word	0x40020800

08000d14 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000d28:	4b3a      	ldr	r3, [pc, #232]	@ (8000e14 <HAL_FMC_MspInit+0x100>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d16d      	bne.n	8000e0c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000d30:	4b38      	ldr	r3, [pc, #224]	@ (8000e14 <HAL_FMC_MspInit+0x100>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d36:	4b38      	ldr	r3, [pc, #224]	@ (8000e18 <HAL_FMC_MspInit+0x104>)
 8000d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d3a:	4a37      	ldr	r2, [pc, #220]	@ (8000e18 <HAL_FMC_MspInit+0x104>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d42:	4b35      	ldr	r3, [pc, #212]	@ (8000e18 <HAL_FMC_MspInit+0x104>)
 8000d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000d4e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000d52:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d60:	230c      	movs	r3, #12
 8000d62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4619      	mov	r1, r3
 8000d68:	482c      	ldr	r0, [pc, #176]	@ (8000e1c <HAL_FMC_MspInit+0x108>)
 8000d6a:	f002 f8d5 	bl	8002f18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000d6e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000d72:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d80:	230c      	movs	r3, #12
 8000d82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4825      	ldr	r0, [pc, #148]	@ (8000e20 <HAL_FMC_MspInit+0x10c>)
 8000d8a:	f002 f8c5 	bl	8002f18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000d8e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000d92:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000da0:	230c      	movs	r3, #12
 8000da2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	481e      	ldr	r0, [pc, #120]	@ (8000e24 <HAL_FMC_MspInit+0x110>)
 8000daa:	f002 f8b5 	bl	8002f18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000dae:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000db2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4817      	ldr	r0, [pc, #92]	@ (8000e28 <HAL_FMC_MspInit+0x114>)
 8000dca:	f002 f8a5 	bl	8002f18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000dce:	2328      	movs	r3, #40	@ 0x28
 8000dd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dde:	230c      	movs	r3, #12
 8000de0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	4619      	mov	r1, r3
 8000de6:	4811      	ldr	r0, [pc, #68]	@ (8000e2c <HAL_FMC_MspInit+0x118>)
 8000de8:	f002 f896 	bl	8002f18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000dec:	2308      	movs	r3, #8
 8000dee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dfc:	230c      	movs	r3, #12
 8000dfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	4619      	mov	r1, r3
 8000e04:	480a      	ldr	r0, [pc, #40]	@ (8000e30 <HAL_FMC_MspInit+0x11c>)
 8000e06:	f002 f887 	bl	8002f18 <HAL_GPIO_Init>
 8000e0a:	e000      	b.n	8000e0e <HAL_FMC_MspInit+0xfa>
    return;
 8000e0c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200002c0 	.word	0x200002c0
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40021800 	.word	0x40021800
 8000e24:	40020c00 	.word	0x40020c00
 8000e28:	40021400 	.word	0x40021400
 8000e2c:	40021c00 	.word	0x40021c00
 8000e30:	40020800 	.word	0x40020800

08000e34 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000e3c:	f7ff ff6a 	bl	8000d14 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08e      	sub	sp, #56	@ 0x38
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e58:	4b33      	ldr	r3, [pc, #204]	@ (8000f28 <HAL_InitTick+0xe0>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	4a32      	ldr	r2, [pc, #200]	@ (8000f28 <HAL_InitTick+0xe0>)
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e64:	4b30      	ldr	r3, [pc, #192]	@ (8000f28 <HAL_InitTick+0xe0>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e70:	f107 0210 	add.w	r2, r7, #16
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f005 f800 	bl	8005e80 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e80:	6a3b      	ldr	r3, [r7, #32]
 8000e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d103      	bne.n	8000e92 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e8a:	f004 ffd1 	bl	8005e30 <HAL_RCC_GetPCLK1Freq>
 8000e8e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e90:	e004      	b.n	8000e9c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e92:	f004 ffcd 	bl	8005e30 <HAL_RCC_GetPCLK1Freq>
 8000e96:	4603      	mov	r3, r0
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e9e:	4a23      	ldr	r2, [pc, #140]	@ (8000f2c <HAL_InitTick+0xe4>)
 8000ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea4:	0c9b      	lsrs	r3, r3, #18
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000eac:	4a21      	ldr	r2, [pc, #132]	@ (8000f34 <HAL_InitTick+0xec>)
 8000eae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000eb2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000eb6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ebc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ed0:	4817      	ldr	r0, [pc, #92]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000ed2:	f005 fc88 	bl	80067e6 <HAL_TIM_Base_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000edc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d11b      	bne.n	8000f1c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ee4:	4812      	ldr	r0, [pc, #72]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000ee6:	f005 fcd5 	bl	8006894 <HAL_TIM_Base_Start_IT>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ef0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d111      	bne.n	8000f1c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ef8:	2036      	movs	r0, #54	@ 0x36
 8000efa:	f001 fa13 	bl	8002324 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d808      	bhi.n	8000f16 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	2036      	movs	r0, #54	@ 0x36
 8000f0a:	f001 f9ef 	bl	80022ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <HAL_InitTick+0xf0>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	e002      	b.n	8000f1c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3738      	adds	r7, #56	@ 0x38
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	431bde83 	.word	0x431bde83
 8000f30:	200002c4 	.word	0x200002c4
 8000f34:	40001000 	.word	0x40001000
 8000f38:	20000020 	.word	0x20000020

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <NMI_Handler+0x4>

08000f44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <MemManage_Handler+0x4>

08000f54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart1);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <USART1_IRQHandler+0x10>)
 8000f7a:	f005 ff8f 	bl	8006e9c <HAL_UART_IRQHandler>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000134 	.word	0x20000134

08000f88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f8c:	4802      	ldr	r0, [pc, #8]	@ (8000f98 <TIM6_DAC_IRQHandler+0x10>)
 8000f8e:	f005 fcf9 	bl	8006984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200002c4 	.word	0x200002c4

08000f9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fa0:	4802      	ldr	r0, [pc, #8]	@ (8000fac <OTG_FS_IRQHandler+0x10>)
 8000fa2:	f002 f97e 	bl	80032a2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000688 	.word	0x20000688

08000fb0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <LTDC_IRQHandler+0x10>)
 8000fb6:	f003 ffd1 	bl	8004f5c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000008c 	.word	0x2000008c

08000fc4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <DMA2D_IRQHandler+0x10>)
 8000fca:	f001 fd67 	bl	8002a9c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000004c 	.word	0x2000004c

08000fd8 <draw_board>:
int x_center = (480 / 2) - (4 * 24);
int y_center = (272 / 2) - (4 * 24);

static char previous_board[BOARD_SIZE][BOARD_SIZE];

void draw_board(const char piece, int row, int col) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	73fb      	strb	r3, [r7, #15]
	if (previous_board[row][col] == piece) return;
 8000fe6:	4a40      	ldr	r2, [pc, #256]	@ (80010e8 <draw_board+0x110>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	441a      	add	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d072      	beq.n	80010e0 <draw_board+0x108>
    BSP_LCD_SetFont(PIECE_FONT);
 8000ffa:	483c      	ldr	r0, [pc, #240]	@ (80010ec <draw_board+0x114>)
 8000ffc:	f000 faac 	bl	8001558 <BSP_LCD_SetFont>

    // Définir la taille des cases
    const int SQUARE_SIZE = PIECE_FONT_SIZE;
 8001000:	2318      	movs	r3, #24
 8001002:	61bb      	str	r3, [r7, #24]

    // Déterminer la couleur de la case
    uint32_t square_color = ((row + col) % 2 == 0) ? LCD_COLOR_LIGHTGRAY : LCD_COLOR_BROWN;
 8001004:	68ba      	ldr	r2, [r7, #8]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <draw_board+0x3e>
 8001012:	4b37      	ldr	r3, [pc, #220]	@ (80010f0 <draw_board+0x118>)
 8001014:	e000      	b.n	8001018 <draw_board+0x40>
 8001016:	4b37      	ldr	r3, [pc, #220]	@ (80010f4 <draw_board+0x11c>)
 8001018:	617b      	str	r3, [r7, #20]

    // Dessiner le carré de la case
    BSP_LCD_SetBackColor(square_color);
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f000 fa82 	bl	8001524 <BSP_LCD_SetBackColor>
    BSP_LCD_FillRect(col * SQUARE_SIZE + x_center, row * SQUARE_SIZE + y_center, SQUARE_SIZE, SQUARE_SIZE);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	b29a      	uxth	r2, r3
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	b29b      	uxth	r3, r3
 8001028:	fb12 f303 	smulbb	r3, r2, r3
 800102c:	b29a      	uxth	r2, r3
 800102e:	4b32      	ldr	r3, [pc, #200]	@ (80010f8 <draw_board+0x120>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	b29b      	uxth	r3, r3
 8001034:	4413      	add	r3, r2
 8001036:	b298      	uxth	r0, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	b29a      	uxth	r2, r3
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	b29b      	uxth	r3, r3
 8001040:	fb12 f303 	smulbb	r3, r2, r3
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <draw_board+0x124>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	4413      	add	r3, r2
 800104e:	b299      	uxth	r1, r3
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	b29a      	uxth	r2, r3
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	b29b      	uxth	r3, r3
 8001058:	f000 fc14 	bl	8001884 <BSP_LCD_FillRect>

    // Déterminer la couleur de la pièce
    char display_piece = piece;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	77fb      	strb	r3, [r7, #31]
    if (islower(piece)) {
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	4618      	mov	r0, r3
 8001064:	f008 ff2a 	bl	8009ebc <islower>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00a      	beq.n	8001084 <draw_board+0xac>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800106e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001072:	f000 fa3f 	bl	80014f4 <BSP_LCD_SetTextColor>
        display_piece = toupper(piece);
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	4618      	mov	r0, r3
 800107a:	f008 ff2b 	bl	8009ed4 <toupper>
 800107e:	4603      	mov	r3, r0
 8001080:	77fb      	strb	r3, [r7, #31]
 8001082:	e003      	b.n	800108c <draw_board+0xb4>
    } else {
        BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001084:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001088:	f000 fa34 	bl	80014f4 <BSP_LCD_SetTextColor>
    }

    // Afficher la pièce
    char piece_str[2] = {display_piece, '\0'};
 800108c:	7ffb      	ldrb	r3, [r7, #31]
 800108e:	743b      	strb	r3, [r7, #16]
 8001090:	2300      	movs	r3, #0
 8001092:	747b      	strb	r3, [r7, #17]
    BSP_LCD_DisplayStringAt(col * SQUARE_SIZE + x_center, row * SQUARE_SIZE + y_center, (uint8_t*)piece_str, LEFT_MODE);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	b29a      	uxth	r2, r3
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	b29b      	uxth	r3, r3
 800109c:	fb12 f303 	smulbb	r3, r2, r3
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <draw_board+0x120>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4413      	add	r3, r2
 80010aa:	b298      	uxth	r0, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	fb12 f303 	smulbb	r3, r2, r3
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <draw_board+0x124>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4413      	add	r3, r2
 80010c2:	b299      	uxth	r1, r3
 80010c4:	f107 0210 	add.w	r2, r7, #16
 80010c8:	2303      	movs	r3, #3
 80010ca:	f000 facb 	bl	8001664 <BSP_LCD_DisplayStringAt>
    previous_board[row][col] = piece;
 80010ce:	4a06      	ldr	r2, [pc, #24]	@ (80010e8 <draw_board+0x110>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	441a      	add	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	e000      	b.n	80010e2 <draw_board+0x10a>
	if (previous_board[row][col] == piece) return;
 80010e0:	bf00      	nop
}
 80010e2:	3720      	adds	r7, #32
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000310 	.word	0x20000310
 80010ec:	2000000c 	.word	0x2000000c
 80010f0:	ffd3d3d3 	.word	0xffd3d3d3
 80010f4:	ffa52a2a 	.word	0xffa52a2a
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000004 	.word	0x20000004

08001100 <parse_fen>:



void parse_fen(const char* fen) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    int row = 0, col = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]

    while (*fen && *fen != ' ') {
 8001110:	e035      	b.n	800117e <parse_fen+0x7e>
        if (*fen == '/') {
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b2f      	cmp	r3, #47	@ 0x2f
 8001118:	d105      	bne.n	8001126 <parse_fen+0x26>
            row++;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3301      	adds	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
            col = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	e028      	b.n	8001178 <parse_fen+0x78>
        } else if (*fen >= '1' && *fen <= '8') {
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b30      	cmp	r3, #48	@ 0x30
 800112c:	d91a      	bls.n	8001164 <parse_fen+0x64>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b38      	cmp	r3, #56	@ 0x38
 8001134:	d816      	bhi.n	8001164 <parse_fen+0x64>
            int empty_squares = *fen - '0';
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	3b30      	subs	r3, #48	@ 0x30
 800113c:	60bb      	str	r3, [r7, #8]
            for (int i = 0; i < empty_squares; i++) {
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	e00a      	b.n	800115a <parse_fen+0x5a>
                draw_board(' ', row, col);
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	6979      	ldr	r1, [r7, #20]
 8001148:	2020      	movs	r0, #32
 800114a:	f7ff ff45 	bl	8000fd8 <draw_board>
                col++;
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	3301      	adds	r3, #1
 8001152:	613b      	str	r3, [r7, #16]
            for (int i = 0; i < empty_squares; i++) {
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3301      	adds	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	429a      	cmp	r2, r3
 8001160:	dbf0      	blt.n	8001144 <parse_fen+0x44>
        } else if (*fen >= '1' && *fen <= '8') {
 8001162:	e009      	b.n	8001178 <parse_fen+0x78>
            }
        } else {
            draw_board(*fen, row, col);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	6979      	ldr	r1, [r7, #20]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff33 	bl	8000fd8 <draw_board>
            col++;
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	3301      	adds	r3, #1
 8001176:	613b      	str	r3, [r7, #16]
        }
        fen++;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3301      	adds	r3, #1
 800117c:	607b      	str	r3, [r7, #4]
    while (*fen && *fen != ' ') {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <parse_fen+0x8e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b20      	cmp	r3, #32
 800118c:	d1c1      	bne.n	8001112 <parse_fen+0x12>
    }
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <process_stream>:


void process_stream(const char* buffer) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b0a6      	sub	sp, #152	@ 0x98
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	const char* fen_start = strstr(buffer, "\"fen\":\"");
 80011a0:	491c      	ldr	r1, [pc, #112]	@ (8001214 <process_stream+0x7c>)
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f008 fec8 	bl	8009f38 <strstr>
 80011a8:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	if (fen_start) {
 80011ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d02b      	beq.n	800120c <process_stream+0x74>
	    fen_start += 7; // Sauter "fen":"
 80011b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80011b8:	3307      	adds	r3, #7
 80011ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	    const char* fen_end = strchr(fen_start, '"');
 80011be:	2122      	movs	r1, #34	@ 0x22
 80011c0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80011c4:	f008 fe98 	bl	8009ef8 <strchr>
 80011c8:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	    if (fen_end) {
 80011cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d01b      	beq.n	800120c <process_stream+0x74>
	        char fen[128];
	        int fen_length = fen_end - fen_start;
 80011d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80011d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	        strncpy(fen, fen_start, fen_length);
 80011e2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 80011ee:	4618      	mov	r0, r3
 80011f0:	f008 fe8f 	bl	8009f12 <strncpy>
	        fen[fen_length] = '\0';
 80011f4:	f107 020c 	add.w	r2, r7, #12
 80011f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011fc:	4413      	add	r3, r2
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
	        //debug_log(0, (char*)fen, 0);
	        parse_fen(fen);
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff7a 	bl	8001100 <parse_fen>
	    }
	}
}
 800120c:	bf00      	nop
 800120e:	3798      	adds	r7, #152	@ 0x98
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	0800a028 	.word	0x0800a028

08001218 <init_board_state>:

void init_board_state() {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
    for (int i = 0; i < BOARD_SIZE; i++) {
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	e018      	b.n	8001256 <init_board_state+0x3e>
        for (int j = 0; j < BOARD_SIZE; j++) {
 8001224:	2300      	movs	r3, #0
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	e00f      	b.n	800124a <init_board_state+0x32>
            previous_board[i][j] = ' ';
 800122a:	4a0f      	ldr	r2, [pc, #60]	@ (8001268 <init_board_state+0x50>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	441a      	add	r2, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	4413      	add	r3, r2
 8001236:	2220      	movs	r2, #32
 8001238:	701a      	strb	r2, [r3, #0]
            draw_board('!', i, j);
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	2021      	movs	r0, #33	@ 0x21
 8001240:	f7ff feca 	bl	8000fd8 <draw_board>
        for (int j = 0; j < BOARD_SIZE; j++) {
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2b07      	cmp	r3, #7
 800124e:	ddec      	ble.n	800122a <init_board_state+0x12>
    for (int i = 0; i < BOARD_SIZE; i++) {
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3301      	adds	r3, #1
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b07      	cmp	r3, #7
 800125a:	dde3      	ble.n	8001224 <init_board_state+0xc>
        }
    }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000310 	.word	0x20000310

0800126c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <SystemInit+0x20>)
 8001272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001276:	4a05      	ldr	r2, [pc, #20]	@ (800128c <SystemInit+0x20>)
 8001278:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800127c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001290:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001294:	f7ff ffea 	bl	800126c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800129a:	490d      	ldr	r1, [pc, #52]	@ (80012d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800129c:	4a0d      	ldr	r2, [pc, #52]	@ (80012d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b0:	4c0a      	ldr	r4, [pc, #40]	@ (80012dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012be:	f008 fe51 	bl	8009f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c2:	f7ff f9af 	bl	8000624 <main>
  bx  lr    
 80012c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80012cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80012d4:	0800c090 	.word	0x0800c090
  ldr r2, =_sbss
 80012d8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80012dc:	20000a68 	.word	0x20000a68

080012e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC_IRQHandler>
	...

080012e4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80012e8:	4b31      	ldr	r3, [pc, #196]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 80012ea:	2228      	movs	r2, #40	@ 0x28
 80012ec:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80012ee:	4b30      	ldr	r3, [pc, #192]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 80012f0:	2209      	movs	r2, #9
 80012f2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80012f4:	4b2e      	ldr	r3, [pc, #184]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 80012f6:	2235      	movs	r2, #53	@ 0x35
 80012f8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80012fa:	4b2d      	ldr	r3, [pc, #180]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 80012fc:	220b      	movs	r2, #11
 80012fe:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001300:	4b2b      	ldr	r3, [pc, #172]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 8001302:	f240 121b 	movw	r2, #283	@ 0x11b
 8001306:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001308:	4b29      	ldr	r3, [pc, #164]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 800130a:	f240 2215 	movw	r2, #533	@ 0x215
 800130e:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8001310:	4b27      	ldr	r3, [pc, #156]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 8001312:	f240 121d 	movw	r2, #285	@ 0x11d
 8001316:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001318:	4b25      	ldr	r3, [pc, #148]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 800131a:	f240 2235 	movw	r2, #565	@ 0x235
 800131e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001320:	2100      	movs	r1, #0
 8001322:	4823      	ldr	r0, [pc, #140]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 8001324:	f000 fc02 	bl	8001b2c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001328:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 800132a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800132e:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001330:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 8001332:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8001336:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001338:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8001340:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001348:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001350:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 8001352:	2200      	movs	r2, #0
 8001354:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001356:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 800136a:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <BSP_LCD_Init+0xd0>)
 800136c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800136e:	4810      	ldr	r0, [pc, #64]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 8001370:	f003 fef4 	bl	800515c <HAL_LTDC_GetState>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d103      	bne.n	8001382 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800137a:	2100      	movs	r1, #0
 800137c:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 800137e:	f000 fafb 	bl	8001978 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8001382:	480b      	ldr	r0, [pc, #44]	@ (80013b0 <BSP_LCD_Init+0xcc>)
 8001384:	f003 fd1a 	bl	8004dbc <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001388:	2201      	movs	r2, #1
 800138a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800138e:	480a      	ldr	r0, [pc, #40]	@ (80013b8 <BSP_LCD_Init+0xd4>)
 8001390:	f001 ff6e 	bl	8003270 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	2108      	movs	r1, #8
 8001398:	4808      	ldr	r0, [pc, #32]	@ (80013bc <BSP_LCD_Init+0xd8>)
 800139a:	f001 ff69 	bl	8003270 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800139e:	f000 fce5 	bl	8001d6c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80013a2:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <BSP_LCD_Init+0xdc>)
 80013a4:	f000 f8d8 	bl	8001558 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000350 	.word	0x20000350
 80013b4:	40016800 	.word	0x40016800
 80013b8:	40022000 	.word	0x40022000
 80013bc:	40022800 	.word	0x40022800
 80013c0:	2000000c 	.word	0x2000000c

080013c4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <BSP_LCD_GetXSize+0x20>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a06      	ldr	r2, [pc, #24]	@ (80013e8 <BSP_LCD_GetXSize+0x24>)
 80013ce:	2134      	movs	r1, #52	@ 0x34
 80013d0:	fb01 f303 	mul.w	r3, r1, r3
 80013d4:	4413      	add	r3, r2
 80013d6:	3360      	adds	r3, #96	@ 0x60
 80013d8:	681b      	ldr	r3, [r3, #0]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	20000438 	.word	0x20000438
 80013e8:	20000350 	.word	0x20000350

080013ec <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <BSP_LCD_GetYSize+0x20>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a06      	ldr	r2, [pc, #24]	@ (8001410 <BSP_LCD_GetYSize+0x24>)
 80013f6:	2134      	movs	r1, #52	@ 0x34
 80013f8:	fb01 f303 	mul.w	r3, r1, r3
 80013fc:	4413      	add	r3, r2
 80013fe:	3364      	adds	r3, #100	@ 0x64
 8001400:	681b      	ldr	r3, [r3, #0]
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	20000438 	.word	0x20000438
 8001410:	20000350 	.word	0x20000350

08001414 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001414:	b580      	push	{r7, lr}
 8001416:	b090      	sub	sp, #64	@ 0x40
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001424:	f7ff ffce 	bl	80013c4 <BSP_LCD_GetXSize>
 8001428:	4603      	mov	r3, r0
 800142a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001430:	f7ff ffdc 	bl	80013ec <BSP_LCD_GetYSize>
 8001434:	4603      	mov	r3, r0
 8001436:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8001440:	23ff      	movs	r3, #255	@ 0xff
 8001442:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800145a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001460:	2307      	movs	r3, #7
 8001462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001464:	f7ff ffae 	bl	80013c4 <BSP_LCD_GetXSize>
 8001468:	4603      	mov	r3, r0
 800146a:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800146c:	f7ff ffbe 	bl	80013ec <BSP_LCD_GetYSize>
 8001470:	4603      	mov	r3, r0
 8001472:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001474:	88fa      	ldrh	r2, [r7, #6]
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	4619      	mov	r1, r3
 800147c:	4812      	ldr	r0, [pc, #72]	@ (80014c8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800147e:	f003 fe2f 	bl	80050e0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001482:	88fa      	ldrh	r2, [r7, #6]
 8001484:	4911      	ldr	r1, [pc, #68]	@ (80014cc <BSP_LCD_LayerDefaultInit+0xb8>)
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	3304      	adds	r3, #4
 8001492:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001496:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001498:	88fa      	ldrh	r2, [r7, #6]
 800149a:	490c      	ldr	r1, [pc, #48]	@ (80014cc <BSP_LCD_LayerDefaultInit+0xb8>)
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	3308      	adds	r3, #8
 80014a8:	4a09      	ldr	r2, [pc, #36]	@ (80014d0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80014aa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80014ac:	88fa      	ldrh	r2, [r7, #6]
 80014ae:	4907      	ldr	r1, [pc, #28]	@ (80014cc <BSP_LCD_LayerDefaultInit+0xb8>)
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80014be:	601a      	str	r2, [r3, #0]
}
 80014c0:	bf00      	nop
 80014c2:	3740      	adds	r7, #64	@ 0x40
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000350 	.word	0x20000350
 80014cc:	2000043c 	.word	0x2000043c
 80014d0:	2000000c 	.word	0x2000000c

080014d4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80014dc:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <BSP_LCD_SelectLayer+0x1c>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
} 
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000438 	.word	0x20000438

080014f4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80014fc:	4b07      	ldr	r3, [pc, #28]	@ (800151c <BSP_LCD_SetTextColor+0x28>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4907      	ldr	r1, [pc, #28]	@ (8001520 <BSP_LCD_SetTextColor+0x2c>)
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	601a      	str	r2, [r3, #0]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	20000438 	.word	0x20000438
 8001520:	2000043c 	.word	0x2000043c

08001524 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800152c:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <BSP_LCD_SetBackColor+0x2c>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4908      	ldr	r1, [pc, #32]	@ (8001554 <BSP_LCD_SetBackColor+0x30>)
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	3304      	adds	r3, #4
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	601a      	str	r2, [r3, #0]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000438 	.word	0x20000438
 8001554:	2000043c 	.word	0x2000043c

08001558 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001560:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <BSP_LCD_SetFont+0x2c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4908      	ldr	r1, [pc, #32]	@ (8001588 <BSP_LCD_SetFont+0x30>)
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	3308      	adds	r3, #8
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	601a      	str	r2, [r3, #0]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000438 	.word	0x20000438
 8001588:	2000043c 	.word	0x2000043c

0800158c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	b085      	sub	sp, #20
 8001590:	af02      	add	r7, sp, #8
 8001592:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <BSP_LCD_Clear+0x48>)
 8001596:	681c      	ldr	r4, [r3, #0]
 8001598:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <BSP_LCD_Clear+0x48>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0e      	ldr	r2, [pc, #56]	@ (80015d8 <BSP_LCD_Clear+0x4c>)
 800159e:	2134      	movs	r1, #52	@ 0x34
 80015a0:	fb01 f303 	mul.w	r3, r1, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	335c      	adds	r3, #92	@ 0x5c
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	461e      	mov	r6, r3
 80015ac:	f7ff ff0a 	bl	80013c4 <BSP_LCD_GetXSize>
 80015b0:	4605      	mov	r5, r0
 80015b2:	f7ff ff1b 	bl	80013ec <BSP_LCD_GetYSize>
 80015b6:	4602      	mov	r2, r0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	2300      	movs	r3, #0
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	4613      	mov	r3, r2
 80015c2:	462a      	mov	r2, r5
 80015c4:	4631      	mov	r1, r6
 80015c6:	4620      	mov	r0, r4
 80015c8:	f000 fb84 	bl	8001cd4 <LL_FillBuffer>
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d4:	20000438 	.word	0x20000438
 80015d8:	20000350 	.word	0x20000350

080015dc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	80fb      	strh	r3, [r7, #6]
 80015e6:	460b      	mov	r3, r1
 80015e8:	80bb      	strh	r3, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015ee:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <BSP_LCD_DisplayChar+0x80>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	491b      	ldr	r1, [pc, #108]	@ (8001660 <BSP_LCD_DisplayChar+0x84>)
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	3308      	adds	r3, #8
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6819      	ldr	r1, [r3, #0]
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800160a:	4b14      	ldr	r3, [pc, #80]	@ (800165c <BSP_LCD_DisplayChar+0x80>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4c14      	ldr	r4, [pc, #80]	@ (8001660 <BSP_LCD_DisplayChar+0x84>)
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4423      	add	r3, r4
 800161a:	3308      	adds	r3, #8
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001620:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001624:	4b0d      	ldr	r3, [pc, #52]	@ (800165c <BSP_LCD_DisplayChar+0x80>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4c0d      	ldr	r4, [pc, #52]	@ (8001660 <BSP_LCD_DisplayChar+0x84>)
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4423      	add	r3, r4
 8001634:	3308      	adds	r3, #8
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	889b      	ldrh	r3, [r3, #4]
 800163a:	3307      	adds	r3, #7
 800163c:	2b00      	cmp	r3, #0
 800163e:	da00      	bge.n	8001642 <BSP_LCD_DisplayChar+0x66>
 8001640:	3307      	adds	r3, #7
 8001642:	10db      	asrs	r3, r3, #3
 8001644:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001648:	18ca      	adds	r2, r1, r3
 800164a:	88b9      	ldrh	r1, [r7, #4]
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fa88 	bl	8001b64 <DrawChar>
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}
 800165c:	20000438 	.word	0x20000438
 8001660:	2000043c 	.word	0x2000043c

08001664 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001664:	b5b0      	push	{r4, r5, r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	60ba      	str	r2, [r7, #8]
 800166c:	461a      	mov	r2, r3
 800166e:	4603      	mov	r3, r0
 8001670:	81fb      	strh	r3, [r7, #14]
 8001672:	460b      	mov	r3, r1
 8001674:	81bb      	strh	r3, [r7, #12]
 8001676:	4613      	mov	r3, r2
 8001678:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800167a:	2301      	movs	r3, #1
 800167c:	83fb      	strh	r3, [r7, #30]
 800167e:	2300      	movs	r3, #0
 8001680:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800168e:	e002      	b.n	8001696 <BSP_LCD_DisplayStringAt+0x32>
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	3301      	adds	r3, #1
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	617a      	str	r2, [r7, #20]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f6      	bne.n	8001690 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80016a2:	f7ff fe8f 	bl	80013c4 <BSP_LCD_GetXSize>
 80016a6:	4601      	mov	r1, r0
 80016a8:	4b50      	ldr	r3, [pc, #320]	@ (80017ec <BSP_LCD_DisplayStringAt+0x188>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4850      	ldr	r0, [pc, #320]	@ (80017f0 <BSP_LCD_DisplayStringAt+0x18c>)
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4403      	add	r3, r0
 80016b8:	3308      	adds	r3, #8
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	889b      	ldrh	r3, [r3, #4]
 80016be:	fbb1 f3f3 	udiv	r3, r1, r3
 80016c2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d01c      	beq.n	8001704 <BSP_LCD_DisplayStringAt+0xa0>
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	dc33      	bgt.n	8001736 <BSP_LCD_DisplayStringAt+0xd2>
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d002      	beq.n	80016d8 <BSP_LCD_DisplayStringAt+0x74>
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d019      	beq.n	800170a <BSP_LCD_DisplayStringAt+0xa6>
 80016d6:	e02e      	b.n	8001736 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	1ad1      	subs	r1, r2, r3
 80016de:	4b43      	ldr	r3, [pc, #268]	@ (80017ec <BSP_LCD_DisplayStringAt+0x188>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4843      	ldr	r0, [pc, #268]	@ (80017f0 <BSP_LCD_DisplayStringAt+0x18c>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4403      	add	r3, r0
 80016ee:	3308      	adds	r3, #8
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	889b      	ldrh	r3, [r3, #4]
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	89fb      	ldrh	r3, [r7, #14]
 80016fe:	4413      	add	r3, r2
 8001700:	83fb      	strh	r3, [r7, #30]
      break;
 8001702:	e01b      	b.n	800173c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8001704:	89fb      	ldrh	r3, [r7, #14]
 8001706:	83fb      	strh	r3, [r7, #30]
      break;
 8001708:	e018      	b.n	800173c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	b299      	uxth	r1, r3
 8001712:	4b36      	ldr	r3, [pc, #216]	@ (80017ec <BSP_LCD_DisplayStringAt+0x188>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4836      	ldr	r0, [pc, #216]	@ (80017f0 <BSP_LCD_DisplayStringAt+0x18c>)
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4403      	add	r3, r0
 8001722:	3308      	adds	r3, #8
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	889b      	ldrh	r3, [r3, #4]
 8001728:	fb11 f303 	smulbb	r3, r1, r3
 800172c:	b29a      	uxth	r2, r3
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	83fb      	strh	r3, [r7, #30]
      break;
 8001734:	e002      	b.n	800173c <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8001736:	89fb      	ldrh	r3, [r7, #14]
 8001738:	83fb      	strh	r3, [r7, #30]
      break;
 800173a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800173c:	8bfb      	ldrh	r3, [r7, #30]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <BSP_LCD_DisplayStringAt+0xe6>
 8001742:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001746:	2b00      	cmp	r3, #0
 8001748:	da1d      	bge.n	8001786 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800174a:	2301      	movs	r3, #1
 800174c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800174e:	e01a      	b.n	8001786 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	781a      	ldrb	r2, [r3, #0]
 8001754:	89b9      	ldrh	r1, [r7, #12]
 8001756:	8bfb      	ldrh	r3, [r7, #30]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff3f 	bl	80015dc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800175e:	4b23      	ldr	r3, [pc, #140]	@ (80017ec <BSP_LCD_DisplayStringAt+0x188>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4923      	ldr	r1, [pc, #140]	@ (80017f0 <BSP_LCD_DisplayStringAt+0x18c>)
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	3308      	adds	r3, #8
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	889a      	ldrh	r2, [r3, #4]
 8001774:	8bfb      	ldrh	r3, [r7, #30]
 8001776:	4413      	add	r3, r2
 8001778:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	3301      	adds	r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
    i++;
 8001780:	8bbb      	ldrh	r3, [r7, #28]
 8001782:	3301      	adds	r3, #1
 8001784:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	bf14      	ite	ne
 800178e:	2301      	movne	r3, #1
 8001790:	2300      	moveq	r3, #0
 8001792:	b2dc      	uxtb	r4, r3
 8001794:	f7ff fe16 	bl	80013c4 <BSP_LCD_GetXSize>
 8001798:	8bb9      	ldrh	r1, [r7, #28]
 800179a:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <BSP_LCD_DisplayStringAt+0x188>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4d14      	ldr	r5, [pc, #80]	@ (80017f0 <BSP_LCD_DisplayStringAt+0x18c>)
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	442b      	add	r3, r5
 80017aa:	3308      	adds	r3, #8
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	889b      	ldrh	r3, [r3, #4]
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	1ac3      	subs	r3, r0, r3
 80017b6:	b299      	uxth	r1, r3
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <BSP_LCD_DisplayStringAt+0x188>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	480c      	ldr	r0, [pc, #48]	@ (80017f0 <BSP_LCD_DisplayStringAt+0x18c>)
 80017be:	4613      	mov	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4403      	add	r3, r0
 80017c8:	3308      	adds	r3, #8
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	889b      	ldrh	r3, [r3, #4]
 80017ce:	4299      	cmp	r1, r3
 80017d0:	bf2c      	ite	cs
 80017d2:	2301      	movcs	r3, #1
 80017d4:	2300      	movcc	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	4023      	ands	r3, r4
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1b7      	bne.n	8001750 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3720      	adds	r7, #32
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000438 	.word	0x20000438
 80017f0:	2000043c 	.word	0x2000043c

080017f4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80017f4:	b5b0      	push	{r4, r5, r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	603a      	str	r2, [r7, #0]
 80017fe:	80fb      	strh	r3, [r7, #6]
 8001800:	460b      	mov	r3, r1
 8001802:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001804:	4b1d      	ldr	r3, [pc, #116]	@ (800187c <BSP_LCD_DrawPixel+0x88>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1d      	ldr	r2, [pc, #116]	@ (8001880 <BSP_LCD_DrawPixel+0x8c>)
 800180a:	2134      	movs	r1, #52	@ 0x34
 800180c:	fb01 f303 	mul.w	r3, r1, r3
 8001810:	4413      	add	r3, r2
 8001812:	3348      	adds	r3, #72	@ 0x48
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d116      	bne.n	8001848 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800181a:	4b18      	ldr	r3, [pc, #96]	@ (800187c <BSP_LCD_DrawPixel+0x88>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a18      	ldr	r2, [pc, #96]	@ (8001880 <BSP_LCD_DrawPixel+0x8c>)
 8001820:	2134      	movs	r1, #52	@ 0x34
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	4413      	add	r3, r2
 8001828:	335c      	adds	r3, #92	@ 0x5c
 800182a:	681c      	ldr	r4, [r3, #0]
 800182c:	88bd      	ldrh	r5, [r7, #4]
 800182e:	f7ff fdc9 	bl	80013c4 <BSP_LCD_GetXSize>
 8001832:	4603      	mov	r3, r0
 8001834:	fb03 f205 	mul.w	r2, r3, r5
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	4413      	add	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4423      	add	r3, r4
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	b292      	uxth	r2, r2
 8001844:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8001846:	e015      	b.n	8001874 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <BSP_LCD_DrawPixel+0x88>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0c      	ldr	r2, [pc, #48]	@ (8001880 <BSP_LCD_DrawPixel+0x8c>)
 800184e:	2134      	movs	r1, #52	@ 0x34
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	4413      	add	r3, r2
 8001856:	335c      	adds	r3, #92	@ 0x5c
 8001858:	681c      	ldr	r4, [r3, #0]
 800185a:	88bd      	ldrh	r5, [r7, #4]
 800185c:	f7ff fdb2 	bl	80013c4 <BSP_LCD_GetXSize>
 8001860:	4603      	mov	r3, r0
 8001862:	fb03 f205 	mul.w	r2, r3, r5
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	4413      	add	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4423      	add	r3, r4
 800186e:	461a      	mov	r2, r3
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	6013      	str	r3, [r2, #0]
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bdb0      	pop	{r4, r5, r7, pc}
 800187c:	20000438 	.word	0x20000438
 8001880:	20000350 	.word	0x20000350

08001884 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af02      	add	r7, sp, #8
 800188c:	4604      	mov	r4, r0
 800188e:	4608      	mov	r0, r1
 8001890:	4611      	mov	r1, r2
 8001892:	461a      	mov	r2, r3
 8001894:	4623      	mov	r3, r4
 8001896:	80fb      	strh	r3, [r7, #6]
 8001898:	4603      	mov	r3, r0
 800189a:	80bb      	strh	r3, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
 80018a0:	4613      	mov	r3, r2
 80018a2:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80018a8:	4b30      	ldr	r3, [pc, #192]	@ (800196c <BSP_LCD_FillRect+0xe8>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4930      	ldr	r1, [pc, #192]	@ (8001970 <BSP_LCD_FillRect+0xec>)
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fe1a 	bl	80014f4 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80018c0:	4b2a      	ldr	r3, [pc, #168]	@ (800196c <BSP_LCD_FillRect+0xe8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001974 <BSP_LCD_FillRect+0xf0>)
 80018c6:	2134      	movs	r1, #52	@ 0x34
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	3348      	adds	r3, #72	@ 0x48
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d114      	bne.n	8001900 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80018d6:	4b25      	ldr	r3, [pc, #148]	@ (800196c <BSP_LCD_FillRect+0xe8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a26      	ldr	r2, [pc, #152]	@ (8001974 <BSP_LCD_FillRect+0xf0>)
 80018dc:	2134      	movs	r1, #52	@ 0x34
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	335c      	adds	r3, #92	@ 0x5c
 80018e6:	681c      	ldr	r4, [r3, #0]
 80018e8:	f7ff fd6c 	bl	80013c4 <BSP_LCD_GetXSize>
 80018ec:	4602      	mov	r2, r0
 80018ee:	88bb      	ldrh	r3, [r7, #4]
 80018f0:	fb03 f202 	mul.w	r2, r3, r2
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	4413      	add	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4423      	add	r3, r4
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	e013      	b.n	8001928 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001900:	4b1a      	ldr	r3, [pc, #104]	@ (800196c <BSP_LCD_FillRect+0xe8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a1b      	ldr	r2, [pc, #108]	@ (8001974 <BSP_LCD_FillRect+0xf0>)
 8001906:	2134      	movs	r1, #52	@ 0x34
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	4413      	add	r3, r2
 800190e:	335c      	adds	r3, #92	@ 0x5c
 8001910:	681c      	ldr	r4, [r3, #0]
 8001912:	f7ff fd57 	bl	80013c4 <BSP_LCD_GetXSize>
 8001916:	4602      	mov	r2, r0
 8001918:	88bb      	ldrh	r3, [r7, #4]
 800191a:	fb03 f202 	mul.w	r2, r3, r2
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	4413      	add	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4423      	add	r3, r4
 8001926:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001928:	4b10      	ldr	r3, [pc, #64]	@ (800196c <BSP_LCD_FillRect+0xe8>)
 800192a:	681c      	ldr	r4, [r3, #0]
 800192c:	68fd      	ldr	r5, [r7, #12]
 800192e:	887e      	ldrh	r6, [r7, #2]
 8001930:	f8b7 8000 	ldrh.w	r8, [r7]
 8001934:	f7ff fd46 	bl	80013c4 <BSP_LCD_GetXSize>
 8001938:	4602      	mov	r2, r0
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	1ad1      	subs	r1, r2, r3
 800193e:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <BSP_LCD_FillRect+0xe8>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	480b      	ldr	r0, [pc, #44]	@ (8001970 <BSP_LCD_FillRect+0xec>)
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4403      	add	r3, r0
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	9100      	str	r1, [sp, #0]
 8001954:	4643      	mov	r3, r8
 8001956:	4632      	mov	r2, r6
 8001958:	4629      	mov	r1, r5
 800195a:	4620      	mov	r0, r4
 800195c:	f000 f9ba 	bl	8001cd4 <LL_FillBuffer>
}
 8001960:	bf00      	nop
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800196a:	bf00      	nop
 800196c:	20000438 	.word	0x20000438
 8001970:	2000043c 	.word	0x2000043c
 8001974:	20000350 	.word	0x20000350

08001978 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b090      	sub	sp, #64	@ 0x40
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001982:	4b64      	ldr	r3, [pc, #400]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	4a63      	ldr	r2, [pc, #396]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 8001988:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800198c:	6453      	str	r3, [r2, #68]	@ 0x44
 800198e:	4b61      	ldr	r3, [pc, #388]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001996:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800199a:	4b5e      	ldr	r3, [pc, #376]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a5d      	ldr	r2, [pc, #372]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 80019a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019b2:	4b58      	ldr	r3, [pc, #352]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	4a57      	ldr	r2, [pc, #348]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 80019b8:	f043 0310 	orr.w	r3, r3, #16
 80019bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019be:	4b55      	ldr	r3, [pc, #340]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	623b      	str	r3, [r7, #32]
 80019c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ca:	4b52      	ldr	r3, [pc, #328]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	4a51      	ldr	r2, [pc, #324]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 80019d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80019e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a4b      	ldr	r2, [pc, #300]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b49      	ldr	r3, [pc, #292]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f6:	61bb      	str	r3, [r7, #24]
 80019f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80019fa:	4b46      	ldr	r3, [pc, #280]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	4a45      	ldr	r2, [pc, #276]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 8001a00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a06:	4b43      	ldr	r3, [pc, #268]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001a12:	4b40      	ldr	r3, [pc, #256]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	4a3f      	ldr	r2, [pc, #252]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 8001a18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8001a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a39      	ldr	r2, [pc, #228]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b37      	ldr	r3, [pc, #220]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001a42:	4b34      	ldr	r3, [pc, #208]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a33      	ldr	r2, [pc, #204]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 8001a48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b31      	ldr	r3, [pc, #196]	@ (8001b14 <BSP_LCD_MspInit+0x19c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8001a5a:	2310      	movs	r3, #16
 8001a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001a66:	2302      	movs	r3, #2
 8001a68:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001a6a:	230e      	movs	r3, #14
 8001a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001a6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a72:	4619      	mov	r1, r3
 8001a74:	4828      	ldr	r0, [pc, #160]	@ (8001b18 <BSP_LCD_MspInit+0x1a0>)
 8001a76:	f001 fa4f 	bl	8002f18 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001a7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001a84:	2309      	movs	r3, #9
 8001a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001a88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4823      	ldr	r0, [pc, #140]	@ (8001b1c <BSP_LCD_MspInit+0x1a4>)
 8001a90:	f001 fa42 	bl	8002f18 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8001a94:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001a9e:	230e      	movs	r3, #14
 8001aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001aa2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	481d      	ldr	r0, [pc, #116]	@ (8001b20 <BSP_LCD_MspInit+0x1a8>)
 8001aaa:	f001 fa35 	bl	8002f18 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001aae:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001ab8:	230e      	movs	r3, #14
 8001aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001abc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4818      	ldr	r0, [pc, #96]	@ (8001b24 <BSP_LCD_MspInit+0x1ac>)
 8001ac4:	f001 fa28 	bl	8002f18 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001ac8:	23f7      	movs	r3, #247	@ 0xf7
 8001aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001ad0:	230e      	movs	r3, #14
 8001ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001ad4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4813      	ldr	r0, [pc, #76]	@ (8001b28 <BSP_LCD_MspInit+0x1b0>)
 8001adc:	f001 fa1c 	bl	8002f18 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001aea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aee:	4619      	mov	r1, r3
 8001af0:	480b      	ldr	r0, [pc, #44]	@ (8001b20 <BSP_LCD_MspInit+0x1a8>)
 8001af2:	f001 fa11 	bl	8002f18 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001af6:	2308      	movs	r3, #8
 8001af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001afe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b02:	4619      	mov	r1, r3
 8001b04:	4808      	ldr	r0, [pc, #32]	@ (8001b28 <BSP_LCD_MspInit+0x1b0>)
 8001b06:	f001 fa07 	bl	8002f18 <HAL_GPIO_Init>
}
 8001b0a:	bf00      	nop
 8001b0c:	3740      	adds	r7, #64	@ 0x40
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40021800 	.word	0x40021800
 8001b20:	40022000 	.word	0x40022000
 8001b24:	40022400 	.word	0x40022400
 8001b28:	40022800 	.word	0x40022800

08001b2c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <BSP_LCD_ClockConfig+0x34>)
 8001b38:	2208      	movs	r2, #8
 8001b3a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <BSP_LCD_ClockConfig+0x34>)
 8001b3e:	22c0      	movs	r2, #192	@ 0xc0
 8001b40:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8001b42:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <BSP_LCD_ClockConfig+0x34>)
 8001b44:	2205      	movs	r2, #5
 8001b46:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <BSP_LCD_ClockConfig+0x34>)
 8001b4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001b50:	4803      	ldr	r0, [pc, #12]	@ (8001b60 <BSP_LCD_ClockConfig+0x34>)
 8001b52:	f004 f9c7 	bl	8005ee4 <HAL_RCCEx_PeriphCLKConfig>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000454 	.word	0x20000454

08001b64 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	603a      	str	r2, [r7, #0]
 8001b6e:	80fb      	strh	r3, [r7, #6]
 8001b70:	460b      	mov	r3, r1
 8001b72:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8001b7c:	4b53      	ldr	r3, [pc, #332]	@ (8001ccc <DrawChar+0x168>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4953      	ldr	r1, [pc, #332]	@ (8001cd0 <DrawChar+0x16c>)
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	88db      	ldrh	r3, [r3, #6]
 8001b92:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001b94:	4b4d      	ldr	r3, [pc, #308]	@ (8001ccc <DrawChar+0x168>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	494d      	ldr	r1, [pc, #308]	@ (8001cd0 <DrawChar+0x16c>)
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3308      	adds	r3, #8
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	889b      	ldrh	r3, [r3, #4]
 8001baa:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8001bac:	8a3b      	ldrh	r3, [r7, #16]
 8001bae:	3307      	adds	r3, #7
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	da00      	bge.n	8001bb6 <DrawChar+0x52>
 8001bb4:	3307      	adds	r3, #7
 8001bb6:	10db      	asrs	r3, r3, #3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	8a3b      	ldrh	r3, [r7, #16]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	e076      	b.n	8001cba <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001bcc:	8a3b      	ldrh	r3, [r7, #16]
 8001bce:	3307      	adds	r3, #7
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	da00      	bge.n	8001bd6 <DrawChar+0x72>
 8001bd4:	3307      	adds	r3, #7
 8001bd6:	10db      	asrs	r3, r3, #3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8001be6:	8a3b      	ldrh	r3, [r7, #16]
 8001be8:	3307      	adds	r3, #7
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da00      	bge.n	8001bf0 <DrawChar+0x8c>
 8001bee:	3307      	adds	r3, #7
 8001bf0:	10db      	asrs	r3, r3, #3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d002      	beq.n	8001bfc <DrawChar+0x98>
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d004      	beq.n	8001c04 <DrawChar+0xa0>
 8001bfa:	e00c      	b.n	8001c16 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	617b      	str	r3, [r7, #20]
      break;
 8001c02:	e016      	b.n	8001c32 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	3201      	adds	r2, #1
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]
      break;
 8001c14:	e00d      	b.n	8001c32 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	041a      	lsls	r2, r3, #16
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	4313      	orrs	r3, r2
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	3202      	adds	r2, #2
 8001c2a:	7812      	ldrb	r2, [r2, #0]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	617b      	str	r3, [r7, #20]
      break;
 8001c30:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	e036      	b.n	8001ca6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001c38:	8a3a      	ldrh	r2, [r7, #16]
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	1ad2      	subs	r2, r2, r3
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	4413      	add	r3, r2
 8001c42:	3b01      	subs	r3, #1
 8001c44:	2201      	movs	r2, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d012      	beq.n	8001c7a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	b298      	uxth	r0, r3
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <DrawChar+0x168>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	491b      	ldr	r1, [pc, #108]	@ (8001cd0 <DrawChar+0x16c>)
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	88bb      	ldrh	r3, [r7, #4]
 8001c72:	4619      	mov	r1, r3
 8001c74:	f7ff fdbe 	bl	80017f4 <BSP_LCD_DrawPixel>
 8001c78:	e012      	b.n	8001ca0 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	4413      	add	r3, r2
 8001c82:	b298      	uxth	r0, r3
 8001c84:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <DrawChar+0x168>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4911      	ldr	r1, [pc, #68]	@ (8001cd0 <DrawChar+0x16c>)
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	3304      	adds	r3, #4
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	88bb      	ldrh	r3, [r7, #4]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f7ff fdaa 	bl	80017f4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	8a3b      	ldrh	r3, [r7, #16]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d3c4      	bcc.n	8001c38 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8001cae:	88bb      	ldrh	r3, [r7, #4]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	8a7b      	ldrh	r3, [r7, #18]
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d384      	bcc.n	8001bcc <DrawChar+0x68>
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	bf00      	nop
 8001cc6:	3720      	adds	r7, #32
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000438 	.word	0x20000438
 8001cd0:	2000043c 	.word	0x2000043c

08001cd4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af02      	add	r7, sp, #8
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d5c <LL_FillBuffer+0x88>)
 8001ce4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ce8:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001cea:	4b1d      	ldr	r3, [pc, #116]	@ (8001d60 <LL_FillBuffer+0x8c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1d      	ldr	r2, [pc, #116]	@ (8001d64 <LL_FillBuffer+0x90>)
 8001cf0:	2134      	movs	r1, #52	@ 0x34
 8001cf2:	fb01 f303 	mul.w	r3, r1, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3348      	adds	r3, #72	@ 0x48
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d103      	bne.n	8001d08 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8001d00:	4b16      	ldr	r3, [pc, #88]	@ (8001d5c <LL_FillBuffer+0x88>)
 8001d02:	2202      	movs	r2, #2
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	e002      	b.n	8001d0e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001d08:	4b14      	ldr	r3, [pc, #80]	@ (8001d5c <LL_FillBuffer+0x88>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001d0e:	4a13      	ldr	r2, [pc, #76]	@ (8001d5c <LL_FillBuffer+0x88>)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8001d14:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <LL_FillBuffer+0x88>)
 8001d16:	4a14      	ldr	r2, [pc, #80]	@ (8001d68 <LL_FillBuffer+0x94>)
 8001d18:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001d1a:	4810      	ldr	r0, [pc, #64]	@ (8001d5c <LL_FillBuffer+0x88>)
 8001d1c:	f000 fd60 	bl	80027e0 <HAL_DMA2D_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d115      	bne.n	8001d52 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001d26:	68f9      	ldr	r1, [r7, #12]
 8001d28:	480c      	ldr	r0, [pc, #48]	@ (8001d5c <LL_FillBuffer+0x88>)
 8001d2a:	f000 ffc7 	bl	8002cbc <HAL_DMA2D_ConfigLayer>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10e      	bne.n	8001d52 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69f9      	ldr	r1, [r7, #28]
 8001d3e:	4807      	ldr	r0, [pc, #28]	@ (8001d5c <LL_FillBuffer+0x88>)
 8001d40:	f000 fd98 	bl	8002874 <HAL_DMA2D_Start>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d103      	bne.n	8001d52 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001d4a:	210a      	movs	r1, #10
 8001d4c:	4803      	ldr	r0, [pc, #12]	@ (8001d5c <LL_FillBuffer+0x88>)
 8001d4e:	f000 fdbc 	bl	80028ca <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200003f8 	.word	0x200003f8
 8001d60:	20000438 	.word	0x20000438
 8001d64:	20000350 	.word	0x20000350
 8001d68:	4002b000 	.word	0x4002b000

08001d6c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001d70:	4b29      	ldr	r3, [pc, #164]	@ (8001e18 <BSP_SDRAM_Init+0xac>)
 8001d72:	4a2a      	ldr	r2, [pc, #168]	@ (8001e1c <BSP_SDRAM_Init+0xb0>)
 8001d74:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8001d76:	4b2a      	ldr	r3, [pc, #168]	@ (8001e20 <BSP_SDRAM_Init+0xb4>)
 8001d78:	2202      	movs	r2, #2
 8001d7a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001d7c:	4b28      	ldr	r3, [pc, #160]	@ (8001e20 <BSP_SDRAM_Init+0xb4>)
 8001d7e:	2207      	movs	r2, #7
 8001d80:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8001d82:	4b27      	ldr	r3, [pc, #156]	@ (8001e20 <BSP_SDRAM_Init+0xb4>)
 8001d84:	2204      	movs	r2, #4
 8001d86:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001d88:	4b25      	ldr	r3, [pc, #148]	@ (8001e20 <BSP_SDRAM_Init+0xb4>)
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8001d8e:	4b24      	ldr	r3, [pc, #144]	@ (8001e20 <BSP_SDRAM_Init+0xb4>)
 8001d90:	2202      	movs	r2, #2
 8001d92:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001d94:	4b22      	ldr	r3, [pc, #136]	@ (8001e20 <BSP_SDRAM_Init+0xb4>)
 8001d96:	2202      	movs	r2, #2
 8001d98:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001d9a:	4b21      	ldr	r3, [pc, #132]	@ (8001e20 <BSP_SDRAM_Init+0xb4>)
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001da0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <BSP_SDRAM_Init+0xac>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001da6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e18 <BSP_SDRAM_Init+0xac>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001dac:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <BSP_SDRAM_Init+0xac>)
 8001dae:	2204      	movs	r2, #4
 8001db0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001db2:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <BSP_SDRAM_Init+0xac>)
 8001db4:	2210      	movs	r2, #16
 8001db6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001db8:	4b17      	ldr	r3, [pc, #92]	@ (8001e18 <BSP_SDRAM_Init+0xac>)
 8001dba:	2240      	movs	r2, #64	@ 0x40
 8001dbc:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001dbe:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <BSP_SDRAM_Init+0xac>)
 8001dc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dc4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001dc6:	4b14      	ldr	r3, [pc, #80]	@ (8001e18 <BSP_SDRAM_Init+0xac>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001dcc:	4b12      	ldr	r3, [pc, #72]	@ (8001e18 <BSP_SDRAM_Init+0xac>)
 8001dce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001dd2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001dd4:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <BSP_SDRAM_Init+0xac>)
 8001dd6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dda:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e18 <BSP_SDRAM_Init+0xac>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001de2:	2100      	movs	r1, #0
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <BSP_SDRAM_Init+0xac>)
 8001de6:	f000 f87f 	bl	8001ee8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001dea:	490d      	ldr	r1, [pc, #52]	@ (8001e20 <BSP_SDRAM_Init+0xb4>)
 8001dec:	480a      	ldr	r0, [pc, #40]	@ (8001e18 <BSP_SDRAM_Init+0xac>)
 8001dee:	f004 fc69 	bl	80066c4 <HAL_SDRAM_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <BSP_SDRAM_Init+0xb8>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
 8001dfe:	e002      	b.n	8001e06 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001e00:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <BSP_SDRAM_Init+0xb8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001e06:	f240 6003 	movw	r0, #1539	@ 0x603
 8001e0a:	f000 f80d 	bl	8001e28 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001e0e:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <BSP_SDRAM_Init+0xb8>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200004d8 	.word	0x200004d8
 8001e1c:	a0000140 	.word	0xa0000140
 8001e20:	2000050c 	.word	0x2000050c
 8001e24:	2000001c 	.word	0x2000001c

08001e28 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001e34:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001e3a:	4b29      	ldr	r3, [pc, #164]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001e3c:	2210      	movs	r2, #16
 8001e3e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001e40:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001e46:	4b26      	ldr	r3, [pc, #152]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001e4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e50:	4923      	ldr	r1, [pc, #140]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001e52:	4824      	ldr	r0, [pc, #144]	@ (8001ee4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001e54:	f004 fc6a 	bl	800672c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f000 f96b 	bl	8002134 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001e5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001e60:	2202      	movs	r2, #2
 8001e62:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001e64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001e66:	2210      	movs	r2, #16
 8001e68:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001e76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e7a:	4919      	ldr	r1, [pc, #100]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001e7c:	4819      	ldr	r0, [pc, #100]	@ (8001ee4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001e7e:	f004 fc55 	bl	800672c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001e82:	4b17      	ldr	r3, [pc, #92]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001e84:	2203      	movs	r2, #3
 8001e86:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001e88:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001e8a:	2210      	movs	r2, #16
 8001e8c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001e8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001e90:	2208      	movs	r2, #8
 8001e92:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001e94:	4b12      	ldr	r3, [pc, #72]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001e9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e9e:	4910      	ldr	r1, [pc, #64]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ea0:	4810      	ldr	r0, [pc, #64]	@ (8001ee4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001ea2:	f004 fc43 	bl	800672c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001ea6:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001eaa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001eae:	2204      	movs	r2, #4
 8001eb0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001eb4:	2210      	movs	r2, #16
 8001eb6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001eb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4a07      	ldr	r2, [pc, #28]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ec2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001ec4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ec8:	4905      	ldr	r1, [pc, #20]	@ (8001ee0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001eca:	4806      	ldr	r0, [pc, #24]	@ (8001ee4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001ecc:	f004 fc2e 	bl	800672c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4804      	ldr	r0, [pc, #16]	@ (8001ee4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001ed4:	f004 fc5f 	bl	8006796 <HAL_SDRAM_ProgramRefreshRate>
}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000528 	.word	0x20000528
 8001ee4:	200004d8 	.word	0x200004d8

08001ee8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b090      	sub	sp, #64	@ 0x40
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ef2:	4b70      	ldr	r3, [pc, #448]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef6:	4a6f      	ldr	r2, [pc, #444]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6393      	str	r3, [r2, #56]	@ 0x38
 8001efe:	4b6d      	ldr	r3, [pc, #436]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001f0a:	4b6a      	ldr	r3, [pc, #424]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	4a69      	ldr	r2, [pc, #420]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f16:	4b67      	ldr	r3, [pc, #412]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f22:	4b64      	ldr	r3, [pc, #400]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	4a63      	ldr	r2, [pc, #396]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2e:	4b61      	ldr	r3, [pc, #388]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	623b      	str	r3, [r7, #32]
 8001f38:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	4b5e      	ldr	r3, [pc, #376]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	4a5d      	ldr	r2, [pc, #372]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f46:	4b5b      	ldr	r3, [pc, #364]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f52:	4b58      	ldr	r3, [pc, #352]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	4a57      	ldr	r2, [pc, #348]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f58:	f043 0310 	orr.w	r3, r3, #16
 8001f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5e:	4b55      	ldr	r3, [pc, #340]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f6a:	4b52      	ldr	r3, [pc, #328]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	4a51      	ldr	r2, [pc, #324]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f70:	f043 0320 	orr.w	r3, r3, #32
 8001f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f76:	4b4f      	ldr	r3, [pc, #316]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f003 0320 	and.w	r3, r3, #32
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f82:	4b4c      	ldr	r3, [pc, #304]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	4a4b      	ldr	r2, [pc, #300]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8e:	4b49      	ldr	r3, [pc, #292]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f9a:	4b46      	ldr	r3, [pc, #280]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	4a45      	ldr	r2, [pc, #276]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa6:	4b43      	ldr	r3, [pc, #268]	@ (80020b4 <BSP_SDRAM_MspInit+0x1cc>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001fbe:	230c      	movs	r3, #12
 8001fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001fc2:	2308      	movs	r3, #8
 8001fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001fc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fca:	4619      	mov	r1, r3
 8001fcc:	483a      	ldr	r0, [pc, #232]	@ (80020b8 <BSP_SDRAM_MspInit+0x1d0>)
 8001fce:	f000 ffa3 	bl	8002f18 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001fd2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001fd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4837      	ldr	r0, [pc, #220]	@ (80020bc <BSP_SDRAM_MspInit+0x1d4>)
 8001fe0:	f000 ff9a 	bl	8002f18 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001fe4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001fea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4833      	ldr	r0, [pc, #204]	@ (80020c0 <BSP_SDRAM_MspInit+0x1d8>)
 8001ff2:	f000 ff91 	bl	8002f18 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001ff6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001ffc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002000:	4619      	mov	r1, r3
 8002002:	4830      	ldr	r0, [pc, #192]	@ (80020c4 <BSP_SDRAM_MspInit+0x1dc>)
 8002004:	f000 ff88 	bl	8002f18 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002008:	f248 1333 	movw	r3, #33075	@ 0x8133
 800200c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800200e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002012:	4619      	mov	r1, r3
 8002014:	482c      	ldr	r0, [pc, #176]	@ (80020c8 <BSP_SDRAM_MspInit+0x1e0>)
 8002016:	f000 ff7f 	bl	8002f18 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800201a:	2328      	movs	r3, #40	@ 0x28
 800201c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800201e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002022:	4619      	mov	r1, r3
 8002024:	4829      	ldr	r0, [pc, #164]	@ (80020cc <BSP_SDRAM_MspInit+0x1e4>)
 8002026:	f000 ff77 	bl	8002f18 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800202a:	4b29      	ldr	r3, [pc, #164]	@ (80020d0 <BSP_SDRAM_MspInit+0x1e8>)
 800202c:	2200      	movs	r2, #0
 800202e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002030:	4b27      	ldr	r3, [pc, #156]	@ (80020d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002032:	2280      	movs	r2, #128	@ 0x80
 8002034:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002036:	4b26      	ldr	r3, [pc, #152]	@ (80020d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002038:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800203c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800203e:	4b24      	ldr	r3, [pc, #144]	@ (80020d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002040:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002044:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002046:	4b22      	ldr	r3, [pc, #136]	@ (80020d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002048:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800204c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800204e:	4b20      	ldr	r3, [pc, #128]	@ (80020d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002050:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002054:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002056:	4b1e      	ldr	r3, [pc, #120]	@ (80020d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002058:	2200      	movs	r2, #0
 800205a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800205c:	4b1c      	ldr	r3, [pc, #112]	@ (80020d0 <BSP_SDRAM_MspInit+0x1e8>)
 800205e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002062:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002064:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002066:	2200      	movs	r2, #0
 8002068:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800206a:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <BSP_SDRAM_MspInit+0x1e8>)
 800206c:	2203      	movs	r2, #3
 800206e:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002070:	4b17      	ldr	r3, [pc, #92]	@ (80020d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002072:	2200      	movs	r2, #0
 8002074:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002076:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002078:	2200      	movs	r2, #0
 800207a:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800207c:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <BSP_SDRAM_MspInit+0x1e8>)
 800207e:	4a15      	ldr	r2, [pc, #84]	@ (80020d4 <BSP_SDRAM_MspInit+0x1ec>)
 8002080:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002086:	631a      	str	r2, [r3, #48]	@ 0x30
 8002088:	4a11      	ldr	r2, [pc, #68]	@ (80020d0 <BSP_SDRAM_MspInit+0x1e8>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800208e:	4810      	ldr	r0, [pc, #64]	@ (80020d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002090:	f000 fa04 	bl	800249c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002094:	480e      	ldr	r0, [pc, #56]	@ (80020d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002096:	f000 f953 	bl	8002340 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	210f      	movs	r1, #15
 800209e:	2038      	movs	r0, #56	@ 0x38
 80020a0:	f000 f924 	bl	80022ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80020a4:	2038      	movs	r0, #56	@ 0x38
 80020a6:	f000 f93d 	bl	8002324 <HAL_NVIC_EnableIRQ>
}
 80020aa:	bf00      	nop
 80020ac:	3740      	adds	r7, #64	@ 0x40
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020800 	.word	0x40020800
 80020bc:	40020c00 	.word	0x40020c00
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40021400 	.word	0x40021400
 80020c8:	40021800 	.word	0x40021800
 80020cc:	40021c00 	.word	0x40021c00
 80020d0:	20000538 	.word	0x20000538
 80020d4:	40026410 	.word	0x40026410

080020d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020dc:	2003      	movs	r0, #3
 80020de:	f000 f8fa 	bl	80022d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7fe feb0 	bl	8000e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e8:	f7fe fbc0 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f8:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_IncTick+0x20>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <HAL_IncTick+0x24>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4413      	add	r3, r2
 8002104:	4a04      	ldr	r2, [pc, #16]	@ (8002118 <HAL_IncTick+0x24>)
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000024 	.word	0x20000024
 8002118:	20000598 	.word	0x20000598

0800211c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b03      	ldr	r3, [pc, #12]	@ (8002130 <HAL_GetTick+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000598 	.word	0x20000598

08002134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800213c:	f7ff ffee 	bl	800211c <HAL_GetTick>
 8002140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800214c:	d005      	beq.n	800215a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214e:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <HAL_Delay+0x44>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800215a:	bf00      	nop
 800215c:	f7ff ffde 	bl	800211c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	429a      	cmp	r2, r3
 800216a:	d8f7      	bhi.n	800215c <HAL_Delay+0x28>
  {
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000024 	.word	0x20000024

0800217c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <__NVIC_SetPriorityGrouping+0x40>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002198:	4013      	ands	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021a4:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021aa:	4a04      	ldr	r2, [pc, #16]	@ (80021bc <__NVIC_SetPriorityGrouping+0x40>)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	60d3      	str	r3, [r2, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00
 80021c0:	05fa0000 	.word	0x05fa0000

080021c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c8:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <__NVIC_GetPriorityGrouping+0x18>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0307 	and.w	r3, r3, #7
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	db0b      	blt.n	800220a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4907      	ldr	r1, [pc, #28]	@ (8002218 <__NVIC_EnableIRQ+0x38>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2001      	movs	r0, #1
 8002202:	fa00 f202 	lsl.w	r2, r0, r2
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000e100 	.word	0xe000e100

0800221c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db0a      	blt.n	8002246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	490c      	ldr	r1, [pc, #48]	@ (8002268 <__NVIC_SetPriority+0x4c>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	440b      	add	r3, r1
 8002240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002244:	e00a      	b.n	800225c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4908      	ldr	r1, [pc, #32]	@ (800226c <__NVIC_SetPriority+0x50>)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	3b04      	subs	r3, #4
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	440b      	add	r3, r1
 800225a:	761a      	strb	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	@ 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f1c3 0307 	rsb	r3, r3, #7
 800228a:	2b04      	cmp	r3, #4
 800228c:	bf28      	it	cs
 800228e:	2304      	movcs	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3304      	adds	r3, #4
 8002296:	2b06      	cmp	r3, #6
 8002298:	d902      	bls.n	80022a0 <NVIC_EncodePriority+0x30>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3b03      	subs	r3, #3
 800229e:	e000      	b.n	80022a2 <NVIC_EncodePriority+0x32>
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	401a      	ands	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	4313      	orrs	r3, r2
         );
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	@ 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ff4c 	bl	800217c <__NVIC_SetPriorityGrouping>
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022fe:	f7ff ff61 	bl	80021c4 <__NVIC_GetPriorityGrouping>
 8002302:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	68b9      	ldr	r1, [r7, #8]
 8002308:	6978      	ldr	r0, [r7, #20]
 800230a:	f7ff ffb1 	bl	8002270 <NVIC_EncodePriority>
 800230e:	4602      	mov	r2, r0
 8002310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002314:	4611      	mov	r1, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff ff80 	bl	800221c <__NVIC_SetPriority>
}
 800231c:	bf00      	nop
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff ff54 	bl	80021e0 <__NVIC_EnableIRQ>
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800234c:	f7ff fee6 	bl	800211c <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e099      	b.n	8002490 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0201 	bic.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800237c:	e00f      	b.n	800239e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800237e:	f7ff fecd 	bl	800211c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b05      	cmp	r3, #5
 800238a:	d908      	bls.n	800239e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2220      	movs	r2, #32
 8002390:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2203      	movs	r2, #3
 8002396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e078      	b.n	8002490 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1e8      	bne.n	800237e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	4b38      	ldr	r3, [pc, #224]	@ (8002498 <HAL_DMA_Init+0x158>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d107      	bne.n	8002408 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002400:	4313      	orrs	r3, r2
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4313      	orrs	r3, r2
 8002406:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f023 0307 	bic.w	r3, r3, #7
 800241e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242e:	2b04      	cmp	r3, #4
 8002430:	d117      	bne.n	8002462 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00e      	beq.n	8002462 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f94f 	bl	80026e8 <DMA_CheckFifoParam>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2240      	movs	r2, #64	@ 0x40
 8002454:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800245e:	2301      	movs	r3, #1
 8002460:	e016      	b.n	8002490 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f906 	bl	800267c <DMA_CalcBaseAndBitshift>
 8002470:	4603      	mov	r3, r0
 8002472:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002478:	223f      	movs	r2, #63	@ 0x3f
 800247a:	409a      	lsls	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	f010803f 	.word	0xf010803f

0800249c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e050      	b.n	8002550 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d101      	bne.n	80024be <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80024ba:	2302      	movs	r3, #2
 80024bc:	e048      	b.n	8002550 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0201 	bic.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2200      	movs	r2, #0
 80024dc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2221      	movs	r2, #33	@ 0x21
 80024fc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f8bc 	bl	800267c <DMA_CalcBaseAndBitshift>
 8002504:	4603      	mov	r3, r0
 8002506:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250c:	223f      	movs	r2, #63	@ 0x3f
 800250e:	409a      	lsls	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002564:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002566:	f7ff fdd9 	bl	800211c <HAL_GetTick>
 800256a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d008      	beq.n	800258a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2280      	movs	r2, #128	@ 0x80
 800257c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e052      	b.n	8002630 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0216 	bic.w	r2, r2, #22
 8002598:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <HAL_DMA_Abort+0x62>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d007      	beq.n	80025ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0208 	bic.w	r2, r2, #8
 80025c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0201 	bic.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025da:	e013      	b.n	8002604 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025dc:	f7ff fd9e 	bl	800211c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d90c      	bls.n	8002604 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2220      	movs	r2, #32
 80025ee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2203      	movs	r2, #3
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e015      	b.n	8002630 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1e4      	bne.n	80025dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002616:	223f      	movs	r2, #63	@ 0x3f
 8002618:	409a      	lsls	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d004      	beq.n	8002656 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2280      	movs	r2, #128	@ 0x80
 8002650:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e00c      	b.n	8002670 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2205      	movs	r2, #5
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0201 	bic.w	r2, r2, #1
 800266c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	3b10      	subs	r3, #16
 800268c:	4a13      	ldr	r2, [pc, #76]	@ (80026dc <DMA_CalcBaseAndBitshift+0x60>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002696:	4a12      	ldr	r2, [pc, #72]	@ (80026e0 <DMA_CalcBaseAndBitshift+0x64>)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4413      	add	r3, r2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d908      	bls.n	80026bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	4b0c      	ldr	r3, [pc, #48]	@ (80026e4 <DMA_CalcBaseAndBitshift+0x68>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	1d1a      	adds	r2, r3, #4
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80026ba:	e006      	b.n	80026ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b08      	ldr	r3, [pc, #32]	@ (80026e4 <DMA_CalcBaseAndBitshift+0x68>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	aaaaaaab 	.word	0xaaaaaaab
 80026e0:	0800bf74 	.word	0x0800bf74
 80026e4:	fffffc00 	.word	0xfffffc00

080026e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d11f      	bne.n	8002742 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d856      	bhi.n	80027b6 <DMA_CheckFifoParam+0xce>
 8002708:	a201      	add	r2, pc, #4	@ (adr r2, 8002710 <DMA_CheckFifoParam+0x28>)
 800270a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270e:	bf00      	nop
 8002710:	08002721 	.word	0x08002721
 8002714:	08002733 	.word	0x08002733
 8002718:	08002721 	.word	0x08002721
 800271c:	080027b7 	.word	0x080027b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002724:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d046      	beq.n	80027ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002730:	e043      	b.n	80027ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002736:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800273a:	d140      	bne.n	80027be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002740:	e03d      	b.n	80027be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800274a:	d121      	bne.n	8002790 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b03      	cmp	r3, #3
 8002750:	d837      	bhi.n	80027c2 <DMA_CheckFifoParam+0xda>
 8002752:	a201      	add	r2, pc, #4	@ (adr r2, 8002758 <DMA_CheckFifoParam+0x70>)
 8002754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002758:	08002769 	.word	0x08002769
 800275c:	0800276f 	.word	0x0800276f
 8002760:	08002769 	.word	0x08002769
 8002764:	08002781 	.word	0x08002781
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
      break;
 800276c:	e030      	b.n	80027d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002772:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d025      	beq.n	80027c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800277e:	e022      	b.n	80027c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002784:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002788:	d11f      	bne.n	80027ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800278e:	e01c      	b.n	80027ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d903      	bls.n	800279e <DMA_CheckFifoParam+0xb6>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b03      	cmp	r3, #3
 800279a:	d003      	beq.n	80027a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800279c:	e018      	b.n	80027d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
      break;
 80027a2:	e015      	b.n	80027d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00e      	beq.n	80027ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
      break;
 80027b4:	e00b      	b.n	80027ce <DMA_CheckFifoParam+0xe6>
      break;
 80027b6:	bf00      	nop
 80027b8:	e00a      	b.n	80027d0 <DMA_CheckFifoParam+0xe8>
      break;
 80027ba:	bf00      	nop
 80027bc:	e008      	b.n	80027d0 <DMA_CheckFifoParam+0xe8>
      break;
 80027be:	bf00      	nop
 80027c0:	e006      	b.n	80027d0 <DMA_CheckFifoParam+0xe8>
      break;
 80027c2:	bf00      	nop
 80027c4:	e004      	b.n	80027d0 <DMA_CheckFifoParam+0xe8>
      break;
 80027c6:	bf00      	nop
 80027c8:	e002      	b.n	80027d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80027ca:	bf00      	nop
 80027cc:	e000      	b.n	80027d0 <DMA_CheckFifoParam+0xe8>
      break;
 80027ce:	bf00      	nop
    }
  } 
  
  return status; 
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop

080027e0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e039      	b.n	8002866 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe f858 	bl	80008bc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002830:	f023 0107 	bic.w	r1, r3, #7
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002846:	4b0a      	ldr	r3, [pc, #40]	@ (8002870 <HAL_DMA2D_Init+0x90>)
 8002848:	4013      	ands	r3, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68d1      	ldr	r1, [r2, #12]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	430b      	orrs	r3, r1
 8002854:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	ffffc000 	.word	0xffffc000

08002874 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_DMA2D_Start+0x1c>
 800288c:	2302      	movs	r3, #2
 800288e:	e018      	b.n	80028c2 <HAL_DMA2D_Start+0x4e>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fa98 	bl	8002de0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b086      	sub	sp, #24
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d056      	beq.n	8002994 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80028e6:	f7ff fc19 	bl	800211c <HAL_GetTick>
 80028ea:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80028ec:	e04b      	b.n	8002986 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d023      	beq.n	8002948 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	d005      	beq.n	8002916 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290e:	f043 0202 	orr.w	r2, r3, #2
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002924:	f043 0201 	orr.w	r2, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2221      	movs	r2, #33	@ 0x21
 8002932:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2204      	movs	r2, #4
 8002938:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0a5      	b.n	8002a94 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800294e:	d01a      	beq.n	8002986 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002950:	f7ff fbe4 	bl	800211c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d302      	bcc.n	8002966 <HAL_DMA2D_PollForTransfer+0x9c>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10f      	bne.n	8002986 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800296a:	f043 0220 	orr.w	r2, r3, #32
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2203      	movs	r2, #3
 8002976:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e086      	b.n	8002a94 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ac      	beq.n	80028ee <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d061      	beq.n	8002a7a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80029b6:	f7ff fbb1 	bl	800211c <HAL_GetTick>
 80029ba:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80029bc:	e056      	b.n	8002a6c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d02e      	beq.n	8002a2e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029de:	f043 0204 	orr.w	r2, r3, #4
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f4:	f043 0202 	orr.w	r2, r3, #2
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0a:	f043 0201 	orr.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2229      	movs	r2, #41	@ 0x29
 8002a18:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e032      	b.n	8002a94 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a34:	d01a      	beq.n	8002a6c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a36:	f7ff fb71 	bl	800211c <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d302      	bcc.n	8002a4c <HAL_DMA2D_PollForTransfer+0x182>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10f      	bne.n	8002a6c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a50:	f043 0220 	orr.w	r2, r3, #32
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e013      	b.n	8002a94 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0a1      	beq.n	80029be <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2212      	movs	r2, #18
 8002a80:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d026      	beq.n	8002b0c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d021      	beq.n	8002b0c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ad6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002adc:	f043 0201 	orr.w	r2, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2204      	movs	r2, #4
 8002af0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d026      	beq.n	8002b64 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d021      	beq.n	8002b64 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b2e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2220      	movs	r2, #32
 8002b36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3c:	f043 0202 	orr.w	r2, r3, #2
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2204      	movs	r2, #4
 8002b48:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d026      	beq.n	8002bbc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d021      	beq.n	8002bbc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b86:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b94:	f043 0204 	orr.w	r2, r3, #4
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d013      	beq.n	8002bee <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00e      	beq.n	8002bee <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bde:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2204      	movs	r2, #4
 8002be6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f853 	bl	8002c94 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d024      	beq.n	8002c42 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d01f      	beq.n	8002c42 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c10:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2202      	movs	r2, #2
 8002c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01f      	beq.n	8002c8c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01a      	beq.n	8002c8c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c64:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2210      	movs	r2, #16
 8002c6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f80e 	bl	8002ca8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_DMA2D_ConfigLayer+0x20>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e079      	b.n	8002dd0 <HAL_DMA2D_ConfigLayer+0x114>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	3318      	adds	r3, #24
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	041b      	lsls	r3, r3, #16
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002d06:	4b35      	ldr	r3, [pc, #212]	@ (8002ddc <HAL_DMA2D_ConfigLayer+0x120>)
 8002d08:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b0a      	cmp	r3, #10
 8002d10:	d003      	beq.n	8002d1a <HAL_DMA2D_ConfigLayer+0x5e>
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b09      	cmp	r3, #9
 8002d18:	d107      	bne.n	8002d2a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	e005      	b.n	8002d36 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	061b      	lsls	r3, r3, #24
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d120      	bne.n	8002d7e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	ea02 0103 	and.w	r1, r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b0a      	cmp	r3, #10
 8002d64:	d003      	beq.n	8002d6e <HAL_DMA2D_ConfigLayer+0xb2>
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b09      	cmp	r3, #9
 8002d6c:	d127      	bne.n	8002dbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002d7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d7c:	e01f      	b.n	8002dbe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	ea02 0103 	and.w	r1, r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b0a      	cmp	r3, #10
 8002da6:	d003      	beq.n	8002db0 <HAL_DMA2D_ConfigLayer+0xf4>
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b09      	cmp	r3, #9
 8002dae:	d106      	bne.n	8002dbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002dbc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	371c      	adds	r7, #28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	ff03000f 	.word	0xff03000f

08002de0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b08b      	sub	sp, #44	@ 0x2c
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df4:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	041a      	lsls	r2, r3, #16
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e18:	d174      	bne.n	8002f04 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002e20:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002e28:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002e30:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d108      	bne.n	8002e52 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	431a      	orrs	r2, r3
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e50:	e053      	b.n	8002efa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d106      	bne.n	8002e68 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e66:	e048      	b.n	8002efa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d111      	bne.n	8002e94 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	0cdb      	lsrs	r3, r3, #19
 8002e74:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	0a9b      	lsrs	r3, r3, #10
 8002e7a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	08db      	lsrs	r3, r3, #3
 8002e80:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	02db      	lsls	r3, r3, #11
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e92:	e032      	b.n	8002efa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d117      	bne.n	8002ecc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	0fdb      	lsrs	r3, r3, #31
 8002ea0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	0cdb      	lsrs	r3, r3, #19
 8002ea6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	0adb      	lsrs	r3, r3, #11
 8002eac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	08db      	lsrs	r3, r3, #3
 8002eb2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	029b      	lsls	r3, r3, #10
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	03db      	lsls	r3, r3, #15
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eca:	e016      	b.n	8002efa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	0f1b      	lsrs	r3, r3, #28
 8002ed0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	0d1b      	lsrs	r3, r3, #20
 8002ed6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	0b1b      	lsrs	r3, r3, #12
 8002edc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	011a      	lsls	r2, r3, #4
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	431a      	orrs	r2, r3
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	031b      	lsls	r3, r3, #12
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f00:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002f02:	e003      	b.n	8002f0c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	60da      	str	r2, [r3, #12]
}
 8002f0c:	bf00      	nop
 8002f0e:	372c      	adds	r7, #44	@ 0x2c
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b089      	sub	sp, #36	@ 0x24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	e175      	b.n	8003224 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f38:	2201      	movs	r2, #1
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	f040 8164 	bne.w	800321e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d005      	beq.n	8002f6e <HAL_GPIO_Init+0x56>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d130      	bne.n	8002fd0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	2203      	movs	r2, #3
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 0201 	and.w	r2, r3, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d017      	beq.n	800300c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d123      	bne.n	8003060 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	08da      	lsrs	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3208      	adds	r2, #8
 8003020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	220f      	movs	r2, #15
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	08da      	lsrs	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3208      	adds	r2, #8
 800305a:	69b9      	ldr	r1, [r7, #24]
 800305c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0203 	and.w	r2, r3, #3
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80be 	beq.w	800321e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a2:	4b66      	ldr	r3, [pc, #408]	@ (800323c <HAL_GPIO_Init+0x324>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	4a65      	ldr	r2, [pc, #404]	@ (800323c <HAL_GPIO_Init+0x324>)
 80030a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ae:	4b63      	ldr	r3, [pc, #396]	@ (800323c <HAL_GPIO_Init+0x324>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030ba:	4a61      	ldr	r2, [pc, #388]	@ (8003240 <HAL_GPIO_Init+0x328>)
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	3302      	adds	r3, #2
 80030c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	220f      	movs	r2, #15
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4013      	ands	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a58      	ldr	r2, [pc, #352]	@ (8003244 <HAL_GPIO_Init+0x32c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d037      	beq.n	8003156 <HAL_GPIO_Init+0x23e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a57      	ldr	r2, [pc, #348]	@ (8003248 <HAL_GPIO_Init+0x330>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d031      	beq.n	8003152 <HAL_GPIO_Init+0x23a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a56      	ldr	r2, [pc, #344]	@ (800324c <HAL_GPIO_Init+0x334>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d02b      	beq.n	800314e <HAL_GPIO_Init+0x236>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a55      	ldr	r2, [pc, #340]	@ (8003250 <HAL_GPIO_Init+0x338>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d025      	beq.n	800314a <HAL_GPIO_Init+0x232>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a54      	ldr	r2, [pc, #336]	@ (8003254 <HAL_GPIO_Init+0x33c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01f      	beq.n	8003146 <HAL_GPIO_Init+0x22e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a53      	ldr	r2, [pc, #332]	@ (8003258 <HAL_GPIO_Init+0x340>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d019      	beq.n	8003142 <HAL_GPIO_Init+0x22a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a52      	ldr	r2, [pc, #328]	@ (800325c <HAL_GPIO_Init+0x344>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <HAL_GPIO_Init+0x226>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a51      	ldr	r2, [pc, #324]	@ (8003260 <HAL_GPIO_Init+0x348>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00d      	beq.n	800313a <HAL_GPIO_Init+0x222>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a50      	ldr	r2, [pc, #320]	@ (8003264 <HAL_GPIO_Init+0x34c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d007      	beq.n	8003136 <HAL_GPIO_Init+0x21e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4f      	ldr	r2, [pc, #316]	@ (8003268 <HAL_GPIO_Init+0x350>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d101      	bne.n	8003132 <HAL_GPIO_Init+0x21a>
 800312e:	2309      	movs	r3, #9
 8003130:	e012      	b.n	8003158 <HAL_GPIO_Init+0x240>
 8003132:	230a      	movs	r3, #10
 8003134:	e010      	b.n	8003158 <HAL_GPIO_Init+0x240>
 8003136:	2308      	movs	r3, #8
 8003138:	e00e      	b.n	8003158 <HAL_GPIO_Init+0x240>
 800313a:	2307      	movs	r3, #7
 800313c:	e00c      	b.n	8003158 <HAL_GPIO_Init+0x240>
 800313e:	2306      	movs	r3, #6
 8003140:	e00a      	b.n	8003158 <HAL_GPIO_Init+0x240>
 8003142:	2305      	movs	r3, #5
 8003144:	e008      	b.n	8003158 <HAL_GPIO_Init+0x240>
 8003146:	2304      	movs	r3, #4
 8003148:	e006      	b.n	8003158 <HAL_GPIO_Init+0x240>
 800314a:	2303      	movs	r3, #3
 800314c:	e004      	b.n	8003158 <HAL_GPIO_Init+0x240>
 800314e:	2302      	movs	r3, #2
 8003150:	e002      	b.n	8003158 <HAL_GPIO_Init+0x240>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_GPIO_Init+0x240>
 8003156:	2300      	movs	r3, #0
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	f002 0203 	and.w	r2, r2, #3
 800315e:	0092      	lsls	r2, r2, #2
 8003160:	4093      	lsls	r3, r2
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003168:	4935      	ldr	r1, [pc, #212]	@ (8003240 <HAL_GPIO_Init+0x328>)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	089b      	lsrs	r3, r3, #2
 800316e:	3302      	adds	r3, #2
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003176:	4b3d      	ldr	r3, [pc, #244]	@ (800326c <HAL_GPIO_Init+0x354>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800319a:	4a34      	ldr	r2, [pc, #208]	@ (800326c <HAL_GPIO_Init+0x354>)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031a0:	4b32      	ldr	r3, [pc, #200]	@ (800326c <HAL_GPIO_Init+0x354>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031c4:	4a29      	ldr	r2, [pc, #164]	@ (800326c <HAL_GPIO_Init+0x354>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ca:	4b28      	ldr	r3, [pc, #160]	@ (800326c <HAL_GPIO_Init+0x354>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ee:	4a1f      	ldr	r2, [pc, #124]	@ (800326c <HAL_GPIO_Init+0x354>)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031f4:	4b1d      	ldr	r3, [pc, #116]	@ (800326c <HAL_GPIO_Init+0x354>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003218:	4a14      	ldr	r2, [pc, #80]	@ (800326c <HAL_GPIO_Init+0x354>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3301      	adds	r3, #1
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b0f      	cmp	r3, #15
 8003228:	f67f ae86 	bls.w	8002f38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3724      	adds	r7, #36	@ 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800
 8003240:	40013800 	.word	0x40013800
 8003244:	40020000 	.word	0x40020000
 8003248:	40020400 	.word	0x40020400
 800324c:	40020800 	.word	0x40020800
 8003250:	40020c00 	.word	0x40020c00
 8003254:	40021000 	.word	0x40021000
 8003258:	40021400 	.word	0x40021400
 800325c:	40021800 	.word	0x40021800
 8003260:	40021c00 	.word	0x40021c00
 8003264:	40022000 	.word	0x40022000
 8003268:	40022400 	.word	0x40022400
 800326c:	40013c00 	.word	0x40013c00

08003270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	807b      	strh	r3, [r7, #2]
 800327c:	4613      	mov	r3, r2
 800327e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003280:	787b      	ldrb	r3, [r7, #1]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003286:	887a      	ldrh	r2, [r7, #2]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800328c:	e003      	b.n	8003296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800328e:	887b      	ldrh	r3, [r7, #2]
 8003290:	041a      	lsls	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	619a      	str	r2, [r3, #24]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b086      	sub	sp, #24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f005 f9cd 	bl	8008658 <USB_GetMode>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	f040 80fb 	bne.w	80034bc <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f005 f990 	bl	80085f0 <USB_ReadInterrupts>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80f1 	beq.w	80034ba <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f005 f987 	bl	80085f0 <USB_ReadInterrupts>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032ec:	d104      	bne.n	80032f8 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80032f6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f005 f977 	bl	80085f0 <USB_ReadInterrupts>
 8003302:	4603      	mov	r3, r0
 8003304:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003308:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800330c:	d104      	bne.n	8003318 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003316:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f005 f967 	bl	80085f0 <USB_ReadInterrupts>
 8003322:	4603      	mov	r3, r0
 8003324:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003328:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800332c:	d104      	bne.n	8003338 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003336:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f005 f957 	bl	80085f0 <USB_ReadInterrupts>
 8003342:	4603      	mov	r3, r0
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b02      	cmp	r3, #2
 800334a:	d103      	bne.n	8003354 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2202      	movs	r2, #2
 8003352:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f005 f949 	bl	80085f0 <USB_ReadInterrupts>
 800335e:	4603      	mov	r3, r0
 8003360:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003368:	d120      	bne.n	80033ac <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003372:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d113      	bne.n	80033ac <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003384:	2110      	movs	r1, #16
 8003386:	6938      	ldr	r0, [r7, #16]
 8003388:	f005 f87a 	bl	8008480 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800338c:	6938      	ldr	r0, [r7, #16]
 800338e:	f005 f8a9 	bl	80084e4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	7a5b      	ldrb	r3, [r3, #9]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d105      	bne.n	80033a6 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2101      	movs	r1, #1
 80033a0:	4618      	mov	r0, r3
 80033a2:	f005 f967 	bl	8008674 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f006 fd04 	bl	8009db4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f005 f91d 	bl	80085f0 <USB_ReadInterrupts>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033c0:	d102      	bne.n	80033c8 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f001 fc87 	bl	8004cd6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f005 f90f 	bl	80085f0 <USB_ReadInterrupts>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d106      	bne.n	80033ea <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f006 fccd 	bl	8009d7c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2208      	movs	r2, #8
 80033e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f005 f8fe 	bl	80085f0 <USB_ReadInterrupts>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033fe:	d139      	bne.n	8003474 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f005 f972 	bl	80086ee <USB_HC_ReadInterrupt>
 800340a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	e025      	b.n	800345e <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	fa22 f303 	lsr.w	r3, r2, r3
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d018      	beq.n	8003458 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4413      	add	r3, r2
 800342e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003438:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800343c:	d106      	bne.n	800344c <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	4619      	mov	r1, r3
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f859 	bl	80034fc <HCD_HC_IN_IRQHandler>
 800344a:	e005      	b.n	8003458 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	4619      	mov	r1, r3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 febb 	bl	80041ce <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	3301      	adds	r3, #1
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	795b      	ldrb	r3, [r3, #5]
 8003462:	461a      	mov	r2, r3
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	4293      	cmp	r3, r2
 8003468:	d3d3      	bcc.n	8003412 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003472:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f005 f8b9 	bl	80085f0 <USB_ReadInterrupts>
 800347e:	4603      	mov	r3, r0
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b10      	cmp	r3, #16
 8003486:	d101      	bne.n	800348c <HAL_HCD_IRQHandler+0x1ea>
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <HAL_HCD_IRQHandler+0x1ec>
 800348c:	2300      	movs	r3, #0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d014      	beq.n	80034bc <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699a      	ldr	r2, [r3, #24]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0210 	bic.w	r2, r2, #16
 80034a0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f001 fb38 	bl	8004b18 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0210 	orr.w	r2, r2, #16
 80034b6:	619a      	str	r2, [r3, #24]
 80034b8:	e000      	b.n	80034bc <HAL_HCD_IRQHandler+0x21a>
      return;
 80034ba:	bf00      	nop
    }
  }
}
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_HCD_Stop+0x16>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e00d      	b.n	80034f4 <HAL_HCD_Stop+0x32>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f005 fa33 	bl	8008950 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f005 f87b 	bl	8008616 <USB_ReadChInterrupts>
 8003520:	4603      	mov	r3, r0
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b04      	cmp	r3, #4
 8003528:	d11a      	bne.n	8003560 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800352a:	78fb      	ldrb	r3, [r7, #3]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4413      	add	r3, r2
 8003532:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003536:	461a      	mov	r2, r3
 8003538:	2304      	movs	r3, #4
 800353a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800353c:	78fa      	ldrb	r2, [r7, #3]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	334d      	adds	r3, #77	@ 0x4d
 800354c:	2207      	movs	r2, #7
 800354e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	78fa      	ldrb	r2, [r7, #3]
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f005 f8d9 	bl	8008710 <USB_HC_Halt>
 800355e:	e09e      	b.n	800369e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	4611      	mov	r1, r2
 8003568:	4618      	mov	r0, r3
 800356a:	f005 f854 	bl	8008616 <USB_ReadChInterrupts>
 800356e:	4603      	mov	r3, r0
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003578:	d11b      	bne.n	80035b2 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003586:	461a      	mov	r2, r3
 8003588:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800358c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	334d      	adds	r3, #77	@ 0x4d
 800359e:	2208      	movs	r2, #8
 80035a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	4611      	mov	r1, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f005 f8b0 	bl	8008710 <USB_HC_Halt>
 80035b0:	e075      	b.n	800369e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f005 f82b 	bl	8008616 <USB_ReadChInterrupts>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d11a      	bne.n	8003600 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035d6:	461a      	mov	r2, r3
 80035d8:	2308      	movs	r3, #8
 80035da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	334d      	adds	r3, #77	@ 0x4d
 80035ec:	2206      	movs	r2, #6
 80035ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	4611      	mov	r1, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f005 f889 	bl	8008710 <USB_HC_Halt>
 80035fe:	e04e      	b.n	800369e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f005 f804 	bl	8008616 <USB_ReadChInterrupts>
 800360e:	4603      	mov	r3, r0
 8003610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003614:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003618:	d11b      	bne.n	8003652 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4413      	add	r3, r2
 8003622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003626:	461a      	mov	r2, r3
 8003628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800362c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	334d      	adds	r3, #77	@ 0x4d
 800363e:	2209      	movs	r2, #9
 8003640:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	4611      	mov	r1, r2
 800364a:	4618      	mov	r0, r3
 800364c:	f005 f860 	bl	8008710 <USB_HC_Halt>
 8003650:	e025      	b.n	800369e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	78fa      	ldrb	r2, [r7, #3]
 8003658:	4611      	mov	r1, r2
 800365a:	4618      	mov	r0, r3
 800365c:	f004 ffdb 	bl	8008616 <USB_ReadChInterrupts>
 8003660:	4603      	mov	r3, r0
 8003662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003666:	2b80      	cmp	r3, #128	@ 0x80
 8003668:	d119      	bne.n	800369e <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4413      	add	r3, r2
 8003672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003676:	461a      	mov	r2, r3
 8003678:	2380      	movs	r3, #128	@ 0x80
 800367a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	334d      	adds	r3, #77	@ 0x4d
 800368c:	2207      	movs	r2, #7
 800368e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	4611      	mov	r1, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f005 f839 	bl	8008710 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	4611      	mov	r1, r2
 80036a6:	4618      	mov	r0, r3
 80036a8:	f004 ffb5 	bl	8008616 <USB_ReadChInterrupts>
 80036ac:	4603      	mov	r3, r0
 80036ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036b6:	d112      	bne.n	80036de <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	4611      	mov	r1, r2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f005 f825 	bl	8008710 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036d2:	461a      	mov	r2, r3
 80036d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036d8:	6093      	str	r3, [r2, #8]
 80036da:	f000 bd75 	b.w	80041c8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	78fa      	ldrb	r2, [r7, #3]
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f004 ff95 	bl	8008616 <USB_ReadChInterrupts>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	f040 8128 	bne.w	8003948 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003704:	461a      	mov	r2, r3
 8003706:	2320      	movs	r3, #32
 8003708:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	331b      	adds	r3, #27
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d119      	bne.n	8003754 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	331b      	adds	r3, #27
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4413      	add	r3, r2
 800373c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	0151      	lsls	r1, r2, #5
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	440a      	add	r2, r1
 800374a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800374e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003752:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	799b      	ldrb	r3, [r3, #6]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01b      	beq.n	8003794 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	3330      	adds	r3, #48	@ 0x30
 800376c:	6819      	ldr	r1, [r3, #0]
 800376e:	78fb      	ldrb	r3, [r7, #3]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4413      	add	r3, r2
 8003776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	1ac9      	subs	r1, r1, r3
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4403      	add	r3, r0
 8003790:	3338      	adds	r3, #56	@ 0x38
 8003792:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	334d      	adds	r3, #77	@ 0x4d
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	3344      	adds	r3, #68	@ 0x44
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037c8:	461a      	mov	r2, r3
 80037ca:	2301      	movs	r3, #1
 80037cc:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	3326      	adds	r3, #38	@ 0x26
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	3326      	adds	r3, #38	@ 0x26
 80037f4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d110      	bne.n	800381c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	4611      	mov	r1, r2
 8003802:	4618      	mov	r0, r3
 8003804:	f004 ff84 	bl	8008710 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4413      	add	r3, r2
 8003810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003814:	461a      	mov	r2, r3
 8003816:	2310      	movs	r3, #16
 8003818:	6093      	str	r3, [r2, #8]
 800381a:	e03d      	b.n	8003898 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	3326      	adds	r3, #38	@ 0x26
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d00a      	beq.n	8003848 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	3326      	adds	r3, #38	@ 0x26
 8003842:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003844:	2b01      	cmp	r3, #1
 8003846:	d127      	bne.n	8003898 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4413      	add	r3, r2
 8003850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	78fa      	ldrb	r2, [r7, #3]
 8003858:	0151      	lsls	r1, r2, #5
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	440a      	add	r2, r1
 800385e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003862:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003866:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	334c      	adds	r3, #76	@ 0x4c
 8003878:	2201      	movs	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800387c:	78fa      	ldrb	r2, [r7, #3]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	1a9b      	subs	r3, r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	334c      	adds	r3, #76	@ 0x4c
 800388c:	781a      	ldrb	r2, [r3, #0]
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	4619      	mov	r1, r3
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f006 fa9c 	bl	8009dd0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	799b      	ldrb	r3, [r3, #6]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d13b      	bne.n	8003918 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	3338      	adds	r3, #56	@ 0x38
 80038b0:	6819      	ldr	r1, [r3, #0]
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4403      	add	r3, r0
 80038c0:	3328      	adds	r3, #40	@ 0x28
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	440b      	add	r3, r1
 80038c6:	1e59      	subs	r1, r3, #1
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4403      	add	r3, r0
 80038d6:	3328      	adds	r3, #40	@ 0x28
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	fbb1 f3f3 	udiv	r3, r1, r3
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 8470 	beq.w	80041c8 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	333c      	adds	r3, #60	@ 0x3c
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	78fa      	ldrb	r2, [r7, #3]
 80038fc:	f083 0301 	eor.w	r3, r3, #1
 8003900:	b2d8      	uxtb	r0, r3
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	333c      	adds	r3, #60	@ 0x3c
 8003910:	4602      	mov	r2, r0
 8003912:	701a      	strb	r2, [r3, #0]
 8003914:	f000 bc58 	b.w	80041c8 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	333c      	adds	r3, #60	@ 0x3c
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	78fa      	ldrb	r2, [r7, #3]
 800392c:	f083 0301 	eor.w	r3, r3, #1
 8003930:	b2d8      	uxtb	r0, r3
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	333c      	adds	r3, #60	@ 0x3c
 8003940:	4602      	mov	r2, r0
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	f000 bc40 	b.w	80041c8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f004 fe60 	bl	8008616 <USB_ReadChInterrupts>
 8003956:	4603      	mov	r3, r0
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b20      	cmp	r3, #32
 800395e:	d131      	bne.n	80039c4 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4413      	add	r3, r2
 8003968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800396c:	461a      	mov	r2, r3
 800396e:	2320      	movs	r3, #32
 8003970:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003972:	78fa      	ldrb	r2, [r7, #3]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	331a      	adds	r3, #26
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b01      	cmp	r3, #1
 8003986:	f040 841f 	bne.w	80041c8 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	1a9b      	subs	r3, r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	331b      	adds	r3, #27
 800399a:	2201      	movs	r2, #1
 800399c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800399e:	78fa      	ldrb	r2, [r7, #3]
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	334d      	adds	r3, #77	@ 0x4d
 80039ae:	2203      	movs	r2, #3
 80039b0:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	78fa      	ldrb	r2, [r7, #3]
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f004 fea8 	bl	8008710 <USB_HC_Halt>
 80039c0:	f000 bc02 	b.w	80041c8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f004 fe22 	bl	8008616 <USB_ReadChInterrupts>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b02      	cmp	r3, #2
 80039da:	f040 8305 	bne.w	8003fe8 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ea:	461a      	mov	r2, r3
 80039ec:	2302      	movs	r3, #2
 80039ee:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	334d      	adds	r3, #77	@ 0x4d
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d114      	bne.n	8003a30 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	1a9b      	subs	r3, r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	334d      	adds	r3, #77	@ 0x4d
 8003a16:	2202      	movs	r2, #2
 8003a18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	334c      	adds	r3, #76	@ 0x4c
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	e2cc      	b.n	8003fca <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	334d      	adds	r3, #77	@ 0x4d
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b06      	cmp	r3, #6
 8003a44:	d114      	bne.n	8003a70 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	334d      	adds	r3, #77	@ 0x4d
 8003a56:	2202      	movs	r2, #2
 8003a58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	334c      	adds	r3, #76	@ 0x4c
 8003a6a:	2205      	movs	r2, #5
 8003a6c:	701a      	strb	r2, [r3, #0]
 8003a6e:	e2ac      	b.n	8003fca <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	334d      	adds	r3, #77	@ 0x4d
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b07      	cmp	r3, #7
 8003a84:	d00b      	beq.n	8003a9e <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003a86:	78fa      	ldrb	r2, [r7, #3]
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	1a9b      	subs	r3, r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	334d      	adds	r3, #77	@ 0x4d
 8003a96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a98:	2b09      	cmp	r3, #9
 8003a9a:	f040 80a6 	bne.w	8003bea <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	334d      	adds	r3, #77	@ 0x4d
 8003aae:	2202      	movs	r2, #2
 8003ab0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	3344      	adds	r3, #68	@ 0x44
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	1c59      	adds	r1, r3, #1
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4403      	add	r3, r0
 8003ad2:	3344      	adds	r3, #68	@ 0x44
 8003ad4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	3344      	adds	r3, #68	@ 0x44
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d943      	bls.n	8003b74 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	3344      	adds	r3, #68	@ 0x44
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	331a      	adds	r3, #26
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d123      	bne.n	8003b5e <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003b16:	78fa      	ldrb	r2, [r7, #3]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	1a9b      	subs	r3, r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	331b      	adds	r3, #27
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003b2a:	78fa      	ldrb	r2, [r7, #3]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	331c      	adds	r3, #28
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	0151      	lsls	r1, r2, #5
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	440a      	add	r2, r1
 8003b54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b5c:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	334c      	adds	r3, #76	@ 0x4c
 8003b6e:	2204      	movs	r2, #4
 8003b70:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b72:	e229      	b.n	8003fc8 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b74:	78fa      	ldrb	r2, [r7, #3]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	334c      	adds	r3, #76	@ 0x4c
 8003b84:	2202      	movs	r2, #2
 8003b86:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	3326      	adds	r3, #38	@ 0x26
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00b      	beq.n	8003bb6 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	3326      	adds	r3, #38	@ 0x26
 8003bae:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	f040 8209 	bne.w	8003fc8 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bcc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bd4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be2:	461a      	mov	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003be8:	e1ee      	b.n	8003fc8 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	334d      	adds	r3, #77	@ 0x4d
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	f040 80c8 	bne.w	8003d92 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	334d      	adds	r3, #77	@ 0x4d
 8003c12:	2202      	movs	r2, #2
 8003c14:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c16:	78fa      	ldrb	r2, [r7, #3]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	331b      	adds	r3, #27
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	f040 81ce 	bne.w	8003fca <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003c2e:	78fa      	ldrb	r2, [r7, #3]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	3326      	adds	r3, #38	@ 0x26
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d16b      	bne.n	8003d1c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	3348      	adds	r3, #72	@ 0x48
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	1c59      	adds	r1, r3, #1
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4403      	add	r3, r0
 8003c64:	3348      	adds	r3, #72	@ 0x48
 8003c66:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	3348      	adds	r3, #72	@ 0x48
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d943      	bls.n	8003d06 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3348      	adds	r3, #72	@ 0x48
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	331b      	adds	r3, #27
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003ca6:	78fa      	ldrb	r2, [r7, #3]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3344      	adds	r3, #68	@ 0x44
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d809      	bhi.n	8003cd0 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	331c      	adds	r3, #28
 8003ccc:	2201      	movs	r2, #1
 8003cce:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	78fa      	ldrb	r2, [r7, #3]
 8003ce0:	0151      	lsls	r1, r2, #5
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	440a      	add	r2, r1
 8003ce6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003cea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cee:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	334c      	adds	r3, #76	@ 0x4c
 8003d00:	2204      	movs	r2, #4
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	e014      	b.n	8003d30 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d06:	78fa      	ldrb	r2, [r7, #3]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	334c      	adds	r3, #76	@ 0x4c
 8003d16:	2202      	movs	r2, #2
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	e009      	b.n	8003d30 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	334c      	adds	r3, #76	@ 0x4c
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	3326      	adds	r3, #38	@ 0x26
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00b      	beq.n	8003d5e <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d46:	78fa      	ldrb	r2, [r7, #3]
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	1a9b      	subs	r3, r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	440b      	add	r3, r1
 8003d54:	3326      	adds	r3, #38	@ 0x26
 8003d56:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	f040 8136 	bne.w	8003fca <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d74:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d7c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	e11b      	b.n	8003fca <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	334d      	adds	r3, #77	@ 0x4d
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	f040 8081 	bne.w	8003eac <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	334d      	adds	r3, #77	@ 0x4d
 8003dba:	2202      	movs	r2, #2
 8003dbc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	331b      	adds	r3, #27
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	f040 80fa 	bne.w	8003fca <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	334c      	adds	r3, #76	@ 0x4c
 8003de6:	2202      	movs	r2, #2
 8003de8:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	0151      	lsls	r1, r2, #5
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	440a      	add	r2, r1
 8003e00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e08:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	78fa      	ldrb	r2, [r7, #3]
 8003e1a:	0151      	lsls	r1, r2, #5
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	440a      	add	r2, r1
 8003e20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e28:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003e2a:	78fb      	ldrb	r3, [r7, #3]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	0151      	lsls	r1, r2, #5
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	440a      	add	r2, r1
 8003e40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e44:	f023 0320 	bic.w	r3, r3, #32
 8003e48:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e4a:	78fa      	ldrb	r2, [r7, #3]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	3326      	adds	r3, #38	@ 0x26
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00b      	beq.n	8003e78 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	3326      	adds	r3, #38	@ 0x26
 8003e70:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	f040 80a9 	bne.w	8003fca <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e8e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e96:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	e08e      	b.n	8003fca <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	334d      	adds	r3, #77	@ 0x4d
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d143      	bne.n	8003f4a <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	334d      	adds	r3, #77	@ 0x4d
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ed6:	78fa      	ldrb	r2, [r7, #3]
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	334c      	adds	r3, #76	@ 0x4c
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	3326      	adds	r3, #38	@ 0x26
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f00:	78fa      	ldrb	r2, [r7, #3]
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	3326      	adds	r3, #38	@ 0x26
 8003f10:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d159      	bne.n	8003fca <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f2c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f34:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f36:	78fb      	ldrb	r3, [r7, #3]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f42:	461a      	mov	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	e03f      	b.n	8003fca <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003f4a:	78fa      	ldrb	r2, [r7, #3]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	334d      	adds	r3, #77	@ 0x4d
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d126      	bne.n	8003fae <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f60:	78fa      	ldrb	r2, [r7, #3]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	334d      	adds	r3, #77	@ 0x4d
 8003f70:	2202      	movs	r2, #2
 8003f72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f74:	78fa      	ldrb	r2, [r7, #3]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	3344      	adds	r3, #68	@ 0x44
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	1c59      	adds	r1, r3, #1
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4403      	add	r3, r0
 8003f94:	3344      	adds	r3, #68	@ 0x44
 8003f96:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	334c      	adds	r3, #76	@ 0x4c
 8003fa8:	2204      	movs	r2, #4
 8003faa:	701a      	strb	r2, [r3, #0]
 8003fac:	e00d      	b.n	8003fca <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	334d      	adds	r3, #77	@ 0x4d
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	f000 8100 	beq.w	80041c6 <HCD_HC_IN_IRQHandler+0xcca>
 8003fc6:	e000      	b.n	8003fca <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fc8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003fca:	78fa      	ldrb	r2, [r7, #3]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	334c      	adds	r3, #76	@ 0x4c
 8003fda:	781a      	ldrb	r2, [r3, #0]
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	4619      	mov	r1, r3
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f005 fef5 	bl	8009dd0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003fe6:	e0ef      	b.n	80041c8 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	78fa      	ldrb	r2, [r7, #3]
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f004 fb10 	bl	8008616 <USB_ReadChInterrupts>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffc:	2b40      	cmp	r3, #64	@ 0x40
 8003ffe:	d12f      	bne.n	8004060 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4413      	add	r3, r2
 8004008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800400c:	461a      	mov	r2, r3
 800400e:	2340      	movs	r3, #64	@ 0x40
 8004010:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	334d      	adds	r3, #77	@ 0x4d
 8004022:	2205      	movs	r2, #5
 8004024:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	331a      	adds	r3, #26
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d109      	bne.n	8004050 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	3344      	adds	r3, #68	@ 0x44
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	78fa      	ldrb	r2, [r7, #3]
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f004 fb59 	bl	8008710 <USB_HC_Halt>
 800405e:	e0b3      	b.n	80041c8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	4611      	mov	r1, r2
 8004068:	4618      	mov	r0, r3
 800406a:	f004 fad4 	bl	8008616 <USB_ReadChInterrupts>
 800406e:	4603      	mov	r3, r0
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b10      	cmp	r3, #16
 8004076:	f040 80a7 	bne.w	80041c8 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	3326      	adds	r3, #38	@ 0x26
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b03      	cmp	r3, #3
 800408e:	d11b      	bne.n	80040c8 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004090:	78fa      	ldrb	r2, [r7, #3]
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	3344      	adds	r3, #68	@ 0x44
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80040a4:	78fa      	ldrb	r2, [r7, #3]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	334d      	adds	r3, #77	@ 0x4d
 80040b4:	2204      	movs	r2, #4
 80040b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	78fa      	ldrb	r2, [r7, #3]
 80040be:	4611      	mov	r1, r2
 80040c0:	4618      	mov	r0, r3
 80040c2:	f004 fb25 	bl	8008710 <USB_HC_Halt>
 80040c6:	e03f      	b.n	8004148 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040c8:	78fa      	ldrb	r2, [r7, #3]
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	3326      	adds	r3, #38	@ 0x26
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	3326      	adds	r3, #38	@ 0x26
 80040ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d129      	bne.n	8004148 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80040f4:	78fa      	ldrb	r2, [r7, #3]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	3344      	adds	r3, #68	@ 0x44
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	799b      	ldrb	r3, [r3, #6]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HCD_HC_IN_IRQHandler+0xc2a>
 8004110:	78fa      	ldrb	r2, [r7, #3]
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	1a9b      	subs	r3, r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	331b      	adds	r3, #27
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d110      	bne.n	8004148 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	334d      	adds	r3, #77	@ 0x4d
 8004136:	2204      	movs	r2, #4
 8004138:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	4611      	mov	r1, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f004 fae4 	bl	8008710 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	331b      	adds	r3, #27
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d129      	bne.n	80041b2 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800415e:	78fa      	ldrb	r2, [r7, #3]
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	331b      	adds	r3, #27
 800416e:	2200      	movs	r2, #0
 8004170:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4413      	add	r3, r2
 800417a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	0151      	lsls	r1, r2, #5
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	440a      	add	r2, r1
 8004188:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800418c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004190:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4413      	add	r3, r2
 800419a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	0151      	lsls	r1, r2, #5
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	440a      	add	r2, r1
 80041a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041ac:	f043 0320 	orr.w	r3, r3, #32
 80041b0:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041be:	461a      	mov	r2, r3
 80041c0:	2310      	movs	r3, #16
 80041c2:	6093      	str	r3, [r2, #8]
 80041c4:	e000      	b.n	80041c8 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80041c6:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b086      	sub	sp, #24
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	460b      	mov	r3, r1
 80041d8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f004 fa12 	bl	8008616 <USB_ReadChInterrupts>
 80041f2:	4603      	mov	r3, r0
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d11b      	bne.n	8004234 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4413      	add	r3, r2
 8004204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004208:	461a      	mov	r2, r3
 800420a:	2304      	movs	r3, #4
 800420c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	334d      	adds	r3, #77	@ 0x4d
 800421e:	2207      	movs	r2, #7
 8004220:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	78fa      	ldrb	r2, [r7, #3]
 8004228:	4611      	mov	r1, r2
 800422a:	4618      	mov	r0, r3
 800422c:	f004 fa70 	bl	8008710 <USB_HC_Halt>
 8004230:	f000 bc6f 	b.w	8004b12 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	78fa      	ldrb	r2, [r7, #3]
 800423a:	4611      	mov	r1, r2
 800423c:	4618      	mov	r0, r3
 800423e:	f004 f9ea 	bl	8008616 <USB_ReadChInterrupts>
 8004242:	4603      	mov	r3, r0
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b20      	cmp	r3, #32
 800424a:	f040 8082 	bne.w	8004352 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4413      	add	r3, r2
 8004256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800425a:	461a      	mov	r2, r3
 800425c:	2320      	movs	r3, #32
 800425e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	3319      	adds	r3, #25
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d124      	bne.n	80042c0 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	440b      	add	r3, r1
 8004284:	3319      	adds	r3, #25
 8004286:	2200      	movs	r2, #0
 8004288:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800428a:	78fa      	ldrb	r2, [r7, #3]
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	334c      	adds	r3, #76	@ 0x4c
 800429a:	2202      	movs	r2, #2
 800429c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	334d      	adds	r3, #77	@ 0x4d
 80042ae:	2203      	movs	r2, #3
 80042b0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	78fa      	ldrb	r2, [r7, #3]
 80042b8:	4611      	mov	r1, r2
 80042ba:	4618      	mov	r0, r3
 80042bc:	f004 fa28 	bl	8008710 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80042c0:	78fa      	ldrb	r2, [r7, #3]
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	1a9b      	subs	r3, r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	331a      	adds	r3, #26
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	f040 841d 	bne.w	8004b12 <HCD_HC_OUT_IRQHandler+0x944>
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	331b      	adds	r3, #27
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f040 8411 	bne.w	8004b12 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80042f0:	78fa      	ldrb	r2, [r7, #3]
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	4613      	mov	r3, r2
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	3326      	adds	r3, #38	@ 0x26
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d009      	beq.n	800431a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004306:	78fa      	ldrb	r2, [r7, #3]
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	1a9b      	subs	r3, r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	331b      	adds	r3, #27
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800431a:	78fa      	ldrb	r2, [r7, #3]
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	334d      	adds	r3, #77	@ 0x4d
 800432a:	2203      	movs	r2, #3
 800432c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	78fa      	ldrb	r2, [r7, #3]
 8004334:	4611      	mov	r1, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f004 f9ea 	bl	8008710 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800433c:	78fa      	ldrb	r2, [r7, #3]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	3344      	adds	r3, #68	@ 0x44
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	e3df      	b.n	8004b12 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	78fa      	ldrb	r2, [r7, #3]
 8004358:	4611      	mov	r1, r2
 800435a:	4618      	mov	r0, r3
 800435c:	f004 f95b 	bl	8008616 <USB_ReadChInterrupts>
 8004360:	4603      	mov	r3, r0
 8004362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004366:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800436a:	d111      	bne.n	8004390 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4413      	add	r3, r2
 8004374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004378:	461a      	mov	r2, r3
 800437a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800437e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f004 f9c1 	bl	8008710 <USB_HC_Halt>
 800438e:	e3c0      	b.n	8004b12 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	4611      	mov	r1, r2
 8004398:	4618      	mov	r0, r3
 800439a:	f004 f93c 	bl	8008616 <USB_ReadChInterrupts>
 800439e:	4603      	mov	r3, r0
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d168      	bne.n	800447a <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80043a8:	78fa      	ldrb	r2, [r7, #3]
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	1a9b      	subs	r3, r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	3344      	adds	r3, #68	@ 0x44
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	78fa      	ldrb	r2, [r7, #3]
 80043c2:	4611      	mov	r1, r2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f004 f926 	bl	8008616 <USB_ReadChInterrupts>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d0:	2b40      	cmp	r3, #64	@ 0x40
 80043d2:	d112      	bne.n	80043fa <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	3319      	adds	r3, #25
 80043e4:	2201      	movs	r2, #1
 80043e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043f4:	461a      	mov	r2, r3
 80043f6:	2340      	movs	r3, #64	@ 0x40
 80043f8:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80043fa:	78fa      	ldrb	r2, [r7, #3]
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	331b      	adds	r3, #27
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d019      	beq.n	8004444 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004410:	78fa      	ldrb	r2, [r7, #3]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	331b      	adds	r3, #27
 8004420:	2200      	movs	r2, #0
 8004422:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4413      	add	r3, r2
 800442c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	0151      	lsls	r1, r2, #5
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	440a      	add	r2, r1
 800443a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800443e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004442:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4413      	add	r3, r2
 800444c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004450:	461a      	mov	r2, r3
 8004452:	2301      	movs	r3, #1
 8004454:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004456:	78fa      	ldrb	r2, [r7, #3]
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	1a9b      	subs	r3, r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	334d      	adds	r3, #77	@ 0x4d
 8004466:	2201      	movs	r2, #1
 8004468:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	78fa      	ldrb	r2, [r7, #3]
 8004470:	4611      	mov	r1, r2
 8004472:	4618      	mov	r0, r3
 8004474:	f004 f94c 	bl	8008710 <USB_HC_Halt>
 8004478:	e34b      	b.n	8004b12 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	4611      	mov	r1, r2
 8004482:	4618      	mov	r0, r3
 8004484:	f004 f8c7 	bl	8008616 <USB_ReadChInterrupts>
 8004488:	4603      	mov	r3, r0
 800448a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448e:	2b40      	cmp	r3, #64	@ 0x40
 8004490:	d139      	bne.n	8004506 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	334d      	adds	r3, #77	@ 0x4d
 80044a2:	2205      	movs	r2, #5
 80044a4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	331a      	adds	r3, #26
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	3319      	adds	r3, #25
 80044cc:	2201      	movs	r2, #1
 80044ce:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	3344      	adds	r3, #68	@ 0x44
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	78fa      	ldrb	r2, [r7, #3]
 80044ea:	4611      	mov	r1, r2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f004 f90f 	bl	8008710 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044fe:	461a      	mov	r2, r3
 8004500:	2340      	movs	r3, #64	@ 0x40
 8004502:	6093      	str	r3, [r2, #8]
 8004504:	e305      	b.n	8004b12 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	4611      	mov	r1, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f004 f881 	bl	8008616 <USB_ReadChInterrupts>
 8004514:	4603      	mov	r3, r0
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b08      	cmp	r3, #8
 800451c:	d11a      	bne.n	8004554 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4413      	add	r3, r2
 8004526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800452a:	461a      	mov	r2, r3
 800452c:	2308      	movs	r3, #8
 800452e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004530:	78fa      	ldrb	r2, [r7, #3]
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	4613      	mov	r3, r2
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	1a9b      	subs	r3, r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	334d      	adds	r3, #77	@ 0x4d
 8004540:	2206      	movs	r2, #6
 8004542:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	4611      	mov	r1, r2
 800454c:	4618      	mov	r0, r3
 800454e:	f004 f8df 	bl	8008710 <USB_HC_Halt>
 8004552:	e2de      	b.n	8004b12 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	78fa      	ldrb	r2, [r7, #3]
 800455a:	4611      	mov	r1, r2
 800455c:	4618      	mov	r0, r3
 800455e:	f004 f85a 	bl	8008616 <USB_ReadChInterrupts>
 8004562:	4603      	mov	r3, r0
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	2b10      	cmp	r3, #16
 800456a:	d144      	bne.n	80045f6 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	3344      	adds	r3, #68	@ 0x44
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	334d      	adds	r3, #77	@ 0x4d
 8004590:	2204      	movs	r2, #4
 8004592:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004594:	78fa      	ldrb	r2, [r7, #3]
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	3319      	adds	r3, #25
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d114      	bne.n	80045d4 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	3318      	adds	r3, #24
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d109      	bne.n	80045d4 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	3319      	adds	r3, #25
 80045d0:	2201      	movs	r2, #1
 80045d2:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	78fa      	ldrb	r2, [r7, #3]
 80045da:	4611      	mov	r1, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	f004 f897 	bl	8008710 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80045e2:	78fb      	ldrb	r3, [r7, #3]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045ee:	461a      	mov	r2, r3
 80045f0:	2310      	movs	r3, #16
 80045f2:	6093      	str	r3, [r2, #8]
 80045f4:	e28d      	b.n	8004b12 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f004 f809 	bl	8008616 <USB_ReadChInterrupts>
 8004604:	4603      	mov	r3, r0
 8004606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800460a:	2b80      	cmp	r3, #128	@ 0x80
 800460c:	d169      	bne.n	80046e2 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	799b      	ldrb	r3, [r3, #6]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d111      	bne.n	800463a <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004616:	78fa      	ldrb	r2, [r7, #3]
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	1a9b      	subs	r3, r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	440b      	add	r3, r1
 8004624:	334d      	adds	r3, #77	@ 0x4d
 8004626:	2207      	movs	r2, #7
 8004628:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	78fa      	ldrb	r2, [r7, #3]
 8004630:	4611      	mov	r1, r2
 8004632:	4618      	mov	r0, r3
 8004634:	f004 f86c 	bl	8008710 <USB_HC_Halt>
 8004638:	e049      	b.n	80046ce <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	3344      	adds	r3, #68	@ 0x44
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	1c59      	adds	r1, r3, #1
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4403      	add	r3, r0
 800465a:	3344      	adds	r3, #68	@ 0x44
 800465c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800465e:	78fa      	ldrb	r2, [r7, #3]
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	1a9b      	subs	r3, r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	3344      	adds	r3, #68	@ 0x44
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b02      	cmp	r3, #2
 8004672:	d922      	bls.n	80046ba <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004674:	78fa      	ldrb	r2, [r7, #3]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	3344      	adds	r3, #68	@ 0x44
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	334c      	adds	r3, #76	@ 0x4c
 8004698:	2204      	movs	r2, #4
 800469a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800469c:	78fa      	ldrb	r2, [r7, #3]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	334c      	adds	r3, #76	@ 0x4c
 80046ac:	781a      	ldrb	r2, [r3, #0]
 80046ae:	78fb      	ldrb	r3, [r7, #3]
 80046b0:	4619      	mov	r1, r3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f005 fb8c 	bl	8009dd0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80046b8:	e009      	b.n	80046ce <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046ba:	78fa      	ldrb	r2, [r7, #3]
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	334c      	adds	r3, #76	@ 0x4c
 80046ca:	2202      	movs	r2, #2
 80046cc:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80046ce:	78fb      	ldrb	r3, [r7, #3]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046da:	461a      	mov	r2, r3
 80046dc:	2380      	movs	r3, #128	@ 0x80
 80046de:	6093      	str	r3, [r2, #8]
 80046e0:	e217      	b.n	8004b12 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	78fa      	ldrb	r2, [r7, #3]
 80046e8:	4611      	mov	r1, r2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f003 ff93 	bl	8008616 <USB_ReadChInterrupts>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046fa:	d11b      	bne.n	8004734 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80046fc:	78fa      	ldrb	r2, [r7, #3]
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	4613      	mov	r3, r2
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	334d      	adds	r3, #77	@ 0x4d
 800470c:	2209      	movs	r2, #9
 800470e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	4611      	mov	r1, r2
 8004718:	4618      	mov	r0, r3
 800471a:	f003 fff9 	bl	8008710 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4413      	add	r3, r2
 8004726:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800472a:	461a      	mov	r2, r3
 800472c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004730:	6093      	str	r3, [r2, #8]
 8004732:	e1ee      	b.n	8004b12 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	4611      	mov	r1, r2
 800473c:	4618      	mov	r0, r3
 800473e:	f003 ff6a 	bl	8008616 <USB_ReadChInterrupts>
 8004742:	4603      	mov	r3, r0
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b02      	cmp	r3, #2
 800474a:	f040 81df 	bne.w	8004b0c <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4413      	add	r3, r2
 8004756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800475a:	461a      	mov	r2, r3
 800475c:	2302      	movs	r3, #2
 800475e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004760:	78fa      	ldrb	r2, [r7, #3]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	334d      	adds	r3, #77	@ 0x4d
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b01      	cmp	r3, #1
 8004774:	f040 8093 	bne.w	800489e <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	334d      	adds	r3, #77	@ 0x4d
 8004788:	2202      	movs	r2, #2
 800478a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800478c:	78fa      	ldrb	r2, [r7, #3]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	334c      	adds	r3, #76	@ 0x4c
 800479c:	2201      	movs	r2, #1
 800479e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	1a9b      	subs	r3, r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	3326      	adds	r3, #38	@ 0x26
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d00b      	beq.n	80047ce <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	3326      	adds	r3, #38	@ 0x26
 80047c6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	f040 8190 	bne.w	8004aee <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	799b      	ldrb	r3, [r3, #6]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d115      	bne.n	8004802 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80047d6:	78fa      	ldrb	r2, [r7, #3]
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	333d      	adds	r3, #61	@ 0x3d
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	78fa      	ldrb	r2, [r7, #3]
 80047ea:	f083 0301 	eor.w	r3, r3, #1
 80047ee:	b2d8      	uxtb	r0, r3
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	333d      	adds	r3, #61	@ 0x3d
 80047fe:	4602      	mov	r2, r0
 8004800:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	799b      	ldrb	r3, [r3, #6]
 8004806:	2b01      	cmp	r3, #1
 8004808:	f040 8171 	bne.w	8004aee <HCD_HC_OUT_IRQHandler+0x920>
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	3334      	adds	r3, #52	@ 0x34
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 8165 	beq.w	8004aee <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004824:	78fa      	ldrb	r2, [r7, #3]
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	3334      	adds	r3, #52	@ 0x34
 8004834:	6819      	ldr	r1, [r3, #0]
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	1a9b      	subs	r3, r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4403      	add	r3, r0
 8004844:	3328      	adds	r3, #40	@ 0x28
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	440b      	add	r3, r1
 800484a:	1e59      	subs	r1, r3, #1
 800484c:	78fa      	ldrb	r2, [r7, #3]
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4403      	add	r3, r0
 800485a:	3328      	adds	r3, #40	@ 0x28
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004862:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 813f 	beq.w	8004aee <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004870:	78fa      	ldrb	r2, [r7, #3]
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	4613      	mov	r3, r2
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	333d      	adds	r3, #61	@ 0x3d
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	78fa      	ldrb	r2, [r7, #3]
 8004884:	f083 0301 	eor.w	r3, r3, #1
 8004888:	b2d8      	uxtb	r0, r3
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	333d      	adds	r3, #61	@ 0x3d
 8004898:	4602      	mov	r2, r0
 800489a:	701a      	strb	r2, [r3, #0]
 800489c:	e127      	b.n	8004aee <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800489e:	78fa      	ldrb	r2, [r7, #3]
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	1a9b      	subs	r3, r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	334d      	adds	r3, #77	@ 0x4d
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d120      	bne.n	80048f6 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048b4:	78fa      	ldrb	r2, [r7, #3]
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	4613      	mov	r3, r2
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	334d      	adds	r3, #77	@ 0x4d
 80048c4:	2202      	movs	r2, #2
 80048c6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80048c8:	78fa      	ldrb	r2, [r7, #3]
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	4613      	mov	r3, r2
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	1a9b      	subs	r3, r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	331b      	adds	r3, #27
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	f040 8107 	bne.w	8004aee <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048e0:	78fa      	ldrb	r2, [r7, #3]
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	4613      	mov	r3, r2
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	334c      	adds	r3, #76	@ 0x4c
 80048f0:	2202      	movs	r2, #2
 80048f2:	701a      	strb	r2, [r3, #0]
 80048f4:	e0fb      	b.n	8004aee <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80048f6:	78fa      	ldrb	r2, [r7, #3]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	334d      	adds	r3, #77	@ 0x4d
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b04      	cmp	r3, #4
 800490a:	d13a      	bne.n	8004982 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800490c:	78fa      	ldrb	r2, [r7, #3]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	334d      	adds	r3, #77	@ 0x4d
 800491c:	2202      	movs	r2, #2
 800491e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004920:	78fa      	ldrb	r2, [r7, #3]
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	1a9b      	subs	r3, r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	440b      	add	r3, r1
 800492e:	334c      	adds	r3, #76	@ 0x4c
 8004930:	2202      	movs	r2, #2
 8004932:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	331b      	adds	r3, #27
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b01      	cmp	r3, #1
 8004948:	f040 80d1 	bne.w	8004aee <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800494c:	78fa      	ldrb	r2, [r7, #3]
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	331b      	adds	r3, #27
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4413      	add	r3, r2
 8004968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	78fa      	ldrb	r2, [r7, #3]
 8004970:	0151      	lsls	r1, r2, #5
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	440a      	add	r2, r1
 8004976:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800497a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800497e:	6053      	str	r3, [r2, #4]
 8004980:	e0b5      	b.n	8004aee <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	334d      	adds	r3, #77	@ 0x4d
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	2b05      	cmp	r3, #5
 8004996:	d114      	bne.n	80049c2 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004998:	78fa      	ldrb	r2, [r7, #3]
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	4613      	mov	r3, r2
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	334d      	adds	r3, #77	@ 0x4d
 80049a8:	2202      	movs	r2, #2
 80049aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80049ac:	78fa      	ldrb	r2, [r7, #3]
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	4613      	mov	r3, r2
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	334c      	adds	r3, #76	@ 0x4c
 80049bc:	2202      	movs	r2, #2
 80049be:	701a      	strb	r2, [r3, #0]
 80049c0:	e095      	b.n	8004aee <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80049c2:	78fa      	ldrb	r2, [r7, #3]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	334d      	adds	r3, #77	@ 0x4d
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b06      	cmp	r3, #6
 80049d6:	d114      	bne.n	8004a02 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049d8:	78fa      	ldrb	r2, [r7, #3]
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	4613      	mov	r3, r2
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	334d      	adds	r3, #77	@ 0x4d
 80049e8:	2202      	movs	r2, #2
 80049ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80049ec:	78fa      	ldrb	r2, [r7, #3]
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	4613      	mov	r3, r2
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	334c      	adds	r3, #76	@ 0x4c
 80049fc:	2205      	movs	r2, #5
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	e075      	b.n	8004aee <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	334d      	adds	r3, #77	@ 0x4d
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b07      	cmp	r3, #7
 8004a16:	d00a      	beq.n	8004a2e <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004a18:	78fa      	ldrb	r2, [r7, #3]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	334d      	adds	r3, #77	@ 0x4d
 8004a28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a2a:	2b09      	cmp	r3, #9
 8004a2c:	d170      	bne.n	8004b10 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	334d      	adds	r3, #77	@ 0x4d
 8004a3e:	2202      	movs	r2, #2
 8004a40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	3344      	adds	r3, #68	@ 0x44
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	1c59      	adds	r1, r3, #1
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4403      	add	r3, r0
 8004a62:	3344      	adds	r3, #68	@ 0x44
 8004a64:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a66:	78fa      	ldrb	r2, [r7, #3]
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	1a9b      	subs	r3, r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	440b      	add	r3, r1
 8004a74:	3344      	adds	r3, #68	@ 0x44
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d914      	bls.n	8004aa6 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004a7c:	78fa      	ldrb	r2, [r7, #3]
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	3344      	adds	r3, #68	@ 0x44
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a90:	78fa      	ldrb	r2, [r7, #3]
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	4613      	mov	r3, r2
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	334c      	adds	r3, #76	@ 0x4c
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004aa4:	e022      	b.n	8004aec <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	1a9b      	subs	r3, r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	334c      	adds	r3, #76	@ 0x4c
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ad0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ad8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004aec:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004aee:	78fa      	ldrb	r2, [r7, #3]
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	334c      	adds	r3, #76	@ 0x4c
 8004afe:	781a      	ldrb	r2, [r3, #0]
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	4619      	mov	r1, r3
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f005 f963 	bl	8009dd0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b0a:	e002      	b.n	8004b12 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004b0c:	bf00      	nop
 8004b0e:	e000      	b.n	8004b12 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004b10:	bf00      	nop
  }
}
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	@ 0x28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	0c5b      	lsrs	r3, r3, #17
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	091b      	lsrs	r3, r3, #4
 8004b48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b4c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d004      	beq.n	8004b5e <HCD_RXQLVL_IRQHandler+0x46>
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b05      	cmp	r3, #5
 8004b58:	f000 80b6 	beq.w	8004cc8 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004b5c:	e0b7      	b.n	8004cce <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 80b3 	beq.w	8004ccc <HCD_RXQLVL_IRQHandler+0x1b4>
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	440b      	add	r3, r1
 8004b74:	332c      	adds	r3, #44	@ 0x2c
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 80a7 	beq.w	8004ccc <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4613      	mov	r3, r2
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	1a9b      	subs	r3, r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	3338      	adds	r3, #56	@ 0x38
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	18d1      	adds	r1, r2, r3
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	1a9b      	subs	r3, r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4403      	add	r3, r0
 8004ba2:	3334      	adds	r3, #52	@ 0x34
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4299      	cmp	r1, r3
 8004ba8:	f200 8083 	bhi.w	8004cb2 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	332c      	adds	r3, #44	@ 0x2c
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	b292      	uxth	r2, r2
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	f003 fcba 	bl	8008540 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	1a9b      	subs	r3, r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	332c      	adds	r3, #44	@ 0x2c
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	18d1      	adds	r1, r2, r3
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	4613      	mov	r3, r2
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4403      	add	r3, r0
 8004bf0:	332c      	adds	r3, #44	@ 0x2c
 8004bf2:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	3338      	adds	r3, #56	@ 0x38
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	18d1      	adds	r1, r2, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4403      	add	r3, r0
 8004c18:	3338      	adds	r3, #56	@ 0x38
 8004c1a:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	0cdb      	lsrs	r3, r3, #19
 8004c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c30:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4613      	mov	r3, r2
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	440b      	add	r3, r1
 8004c40:	3328      	adds	r3, #40	@ 0x28
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d13f      	bne.n	8004ccc <HCD_RXQLVL_IRQHandler+0x1b4>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d03c      	beq.n	8004ccc <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c68:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c70:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c7e:	461a      	mov	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	1a9b      	subs	r3, r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	333c      	adds	r3, #60	@ 0x3c
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	f083 0301 	eor.w	r3, r3, #1
 8004c9a:	b2d8      	uxtb	r0, r3
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	1a9b      	subs	r3, r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	440b      	add	r3, r1
 8004caa:	333c      	adds	r3, #60	@ 0x3c
 8004cac:	4602      	mov	r2, r0
 8004cae:	701a      	strb	r2, [r3, #0]
      break;
 8004cb0:	e00c      	b.n	8004ccc <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	1a9b      	subs	r3, r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	334c      	adds	r3, #76	@ 0x4c
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	701a      	strb	r2, [r3, #0]
      break;
 8004cc6:	e001      	b.n	8004ccc <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004cc8:	bf00      	nop
 8004cca:	e000      	b.n	8004cce <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004ccc:	bf00      	nop
  }
}
 8004cce:	bf00      	nop
 8004cd0:	3728      	adds	r7, #40	@ 0x28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b086      	sub	sp, #24
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004d02:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d10b      	bne.n	8004d26 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d102      	bne.n	8004d1e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f005 f83d 	bl	8009d98 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f043 0302 	orr.w	r3, r3, #2
 8004d24:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d132      	bne.n	8004d96 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f043 0308 	orr.w	r3, r3, #8
 8004d36:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d126      	bne.n	8004d90 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	7a5b      	ldrb	r3, [r3, #9]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d113      	bne.n	8004d72 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004d50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d54:	d106      	bne.n	8004d64 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2102      	movs	r1, #2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f003 fc89 	bl	8008674 <USB_InitFSLSPClkSel>
 8004d62:	e011      	b.n	8004d88 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2101      	movs	r1, #1
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f003 fc82 	bl	8008674 <USB_InitFSLSPClkSel>
 8004d70:	e00a      	b.n	8004d88 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	79db      	ldrb	r3, [r3, #7]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d106      	bne.n	8004d88 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d80:	461a      	mov	r2, r3
 8004d82:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004d86:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f005 f833 	bl	8009df4 <HAL_HCD_PortEnabled_Callback>
 8004d8e:	e002      	b.n	8004d96 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f005 f83d 	bl	8009e10 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d103      	bne.n	8004da8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f043 0320 	orr.w	r3, r3, #32
 8004da6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004dae:	461a      	mov	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	6013      	str	r3, [r2, #0]
}
 8004db4:	bf00      	nop
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e0bf      	b.n	8004f4e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7fb fd90 	bl	8000908 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004dfe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6999      	ldr	r1, [r3, #24]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e14:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6899      	ldr	r1, [r3, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8004f58 <HAL_LTDC_Init+0x19c>)
 8004e30:	400b      	ands	r3, r1
 8004e32:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	041b      	lsls	r3, r3, #16
 8004e3a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6899      	ldr	r1, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68d9      	ldr	r1, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f58 <HAL_LTDC_Init+0x19c>)
 8004e5e:	400b      	ands	r3, r1
 8004e60:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	041b      	lsls	r3, r3, #16
 8004e68:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68d9      	ldr	r1, [r3, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a1a      	ldr	r2, [r3, #32]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6919      	ldr	r1, [r3, #16]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4b33      	ldr	r3, [pc, #204]	@ (8004f58 <HAL_LTDC_Init+0x19c>)
 8004e8c:	400b      	ands	r3, r1
 8004e8e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e94:	041b      	lsls	r3, r3, #16
 8004e96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6919      	ldr	r1, [r3, #16]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6959      	ldr	r1, [r3, #20]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	4b27      	ldr	r3, [pc, #156]	@ (8004f58 <HAL_LTDC_Init+0x19c>)
 8004eba:	400b      	ands	r3, r1
 8004ebc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	041b      	lsls	r3, r3, #16
 8004ec4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6959      	ldr	r1, [r3, #20]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004eec:	041b      	lsls	r3, r3, #16
 8004eee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004efe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0206 	orr.w	r2, r2, #6
 8004f2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	f000f800 	.word	0xf000f800

08004f5c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f72:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d023      	beq.n	8004fc6 <HAL_LTDC_IRQHandler+0x6a>
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01e      	beq.n	8004fc6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0204 	bic.w	r2, r2, #4
 8004f96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2204      	movs	r2, #4
 8004f9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004fa6:	f043 0201 	orr.w	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2204      	movs	r2, #4
 8004fb4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f86f 	bl	80050a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d023      	beq.n	8005018 <HAL_LTDC_IRQHandler+0xbc>
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d01e      	beq.n	8005018 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0202 	bic.w	r2, r2, #2
 8004fe8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ff8:	f043 0202 	orr.w	r2, r3, #2
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2204      	movs	r2, #4
 8005006:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f846 	bl	80050a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01b      	beq.n	800505a <HAL_LTDC_IRQHandler+0xfe>
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d016      	beq.n	800505a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2201      	movs	r2, #1
 8005042:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f82f 	bl	80050b8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01b      	beq.n	800509c <HAL_LTDC_IRQHandler+0x140>
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d016      	beq.n	800509c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0208 	bic.w	r2, r2, #8
 800507c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2208      	movs	r2, #8
 8005084:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f818 	bl	80050cc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80050e0:	b5b0      	push	{r4, r5, r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_LTDC_ConfigLayer+0x1a>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e02c      	b.n	8005154 <HAL_LTDC_ConfigLayer+0x74>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2202      	movs	r2, #2
 8005106:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2134      	movs	r1, #52	@ 0x34
 8005110:	fb01 f303 	mul.w	r3, r1, r3
 8005114:	4413      	add	r3, r2
 8005116:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	4614      	mov	r4, r2
 800511e:	461d      	mov	r5, r3
 8005120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800512a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f81f 	bl	8005178 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2201      	movs	r2, #1
 8005140:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bdb0      	pop	{r4, r5, r7, pc}

0800515c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800516a:	b2db      	uxtb	r3, r3
}
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005178:	b480      	push	{r7}
 800517a:	b089      	sub	sp, #36	@ 0x24
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	0c1b      	lsrs	r3, r3, #16
 8005190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005194:	4413      	add	r3, r2
 8005196:	041b      	lsls	r3, r3, #16
 8005198:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	01db      	lsls	r3, r3, #7
 80051a4:	4413      	add	r3, r2
 80051a6:	3384      	adds	r3, #132	@ 0x84
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	4611      	mov	r1, r2
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	01d2      	lsls	r2, r2, #7
 80051b4:	440a      	add	r2, r1
 80051b6:	3284      	adds	r2, #132	@ 0x84
 80051b8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80051bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	0c1b      	lsrs	r3, r3, #16
 80051ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051ce:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80051d0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4619      	mov	r1, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	01db      	lsls	r3, r3, #7
 80051dc:	440b      	add	r3, r1
 80051de:	3384      	adds	r3, #132	@ 0x84
 80051e0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051f6:	4413      	add	r3, r2
 80051f8:	041b      	lsls	r3, r3, #16
 80051fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	461a      	mov	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	01db      	lsls	r3, r3, #7
 8005206:	4413      	add	r3, r2
 8005208:	3384      	adds	r3, #132	@ 0x84
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	6812      	ldr	r2, [r2, #0]
 8005210:	4611      	mov	r1, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	01d2      	lsls	r2, r2, #7
 8005216:	440a      	add	r2, r1
 8005218:	3284      	adds	r2, #132	@ 0x84
 800521a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800521e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800522e:	4413      	add	r3, r2
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4619      	mov	r1, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	01db      	lsls	r3, r3, #7
 800523c:	440b      	add	r3, r1
 800523e:	3384      	adds	r3, #132	@ 0x84
 8005240:	4619      	mov	r1, r3
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	4313      	orrs	r3, r2
 8005246:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	01db      	lsls	r3, r3, #7
 8005252:	4413      	add	r3, r2
 8005254:	3384      	adds	r3, #132	@ 0x84
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	6812      	ldr	r2, [r2, #0]
 800525c:	4611      	mov	r1, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	01d2      	lsls	r2, r2, #7
 8005262:	440a      	add	r2, r1
 8005264:	3284      	adds	r2, #132	@ 0x84
 8005266:	f023 0307 	bic.w	r3, r3, #7
 800526a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	461a      	mov	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	01db      	lsls	r3, r3, #7
 8005276:	4413      	add	r3, r2
 8005278:	3384      	adds	r3, #132	@ 0x84
 800527a:	461a      	mov	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005292:	041b      	lsls	r3, r3, #16
 8005294:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	061b      	lsls	r3, r3, #24
 800529c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	01db      	lsls	r3, r3, #7
 80052a8:	4413      	add	r3, r2
 80052aa:	3384      	adds	r3, #132	@ 0x84
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	01db      	lsls	r3, r3, #7
 80052b8:	4413      	add	r3, r2
 80052ba:	3384      	adds	r3, #132	@ 0x84
 80052bc:	461a      	mov	r2, r3
 80052be:	2300      	movs	r3, #0
 80052c0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80052c8:	461a      	mov	r2, r3
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	431a      	orrs	r2, r3
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	431a      	orrs	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4619      	mov	r1, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	01db      	lsls	r3, r3, #7
 80052dc:	440b      	add	r3, r1
 80052de:	3384      	adds	r3, #132	@ 0x84
 80052e0:	4619      	mov	r1, r3
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	461a      	mov	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	01db      	lsls	r3, r3, #7
 80052f2:	4413      	add	r3, r2
 80052f4:	3384      	adds	r3, #132	@ 0x84
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	4611      	mov	r1, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	01d2      	lsls	r2, r2, #7
 8005302:	440a      	add	r2, r1
 8005304:	3284      	adds	r2, #132	@ 0x84
 8005306:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800530a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	01db      	lsls	r3, r3, #7
 8005316:	4413      	add	r3, r2
 8005318:	3384      	adds	r3, #132	@ 0x84
 800531a:	461a      	mov	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	01db      	lsls	r3, r3, #7
 800532c:	4413      	add	r3, r2
 800532e:	3384      	adds	r3, #132	@ 0x84
 8005330:	69da      	ldr	r2, [r3, #28]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4619      	mov	r1, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	01db      	lsls	r3, r3, #7
 800533c:	440b      	add	r3, r1
 800533e:	3384      	adds	r3, #132	@ 0x84
 8005340:	4619      	mov	r1, r3
 8005342:	4b58      	ldr	r3, [pc, #352]	@ (80054a4 <LTDC_SetConfig+0x32c>)
 8005344:	4013      	ands	r3, r2
 8005346:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	68f9      	ldr	r1, [r7, #12]
 8005352:	6809      	ldr	r1, [r1, #0]
 8005354:	4608      	mov	r0, r1
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	01c9      	lsls	r1, r1, #7
 800535a:	4401      	add	r1, r0
 800535c:	3184      	adds	r1, #132	@ 0x84
 800535e:	4313      	orrs	r3, r2
 8005360:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	01db      	lsls	r3, r3, #7
 800536c:	4413      	add	r3, r2
 800536e:	3384      	adds	r3, #132	@ 0x84
 8005370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	01db      	lsls	r3, r3, #7
 800537c:	4413      	add	r3, r2
 800537e:	3384      	adds	r3, #132	@ 0x84
 8005380:	461a      	mov	r2, r3
 8005382:	2300      	movs	r3, #0
 8005384:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	01db      	lsls	r3, r3, #7
 8005390:	4413      	add	r3, r2
 8005392:	3384      	adds	r3, #132	@ 0x84
 8005394:	461a      	mov	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d102      	bne.n	80053aa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80053a4:	2304      	movs	r3, #4
 80053a6:	61fb      	str	r3, [r7, #28]
 80053a8:	e01b      	b.n	80053e2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d102      	bne.n	80053b8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80053b2:	2303      	movs	r3, #3
 80053b4:	61fb      	str	r3, [r7, #28]
 80053b6:	e014      	b.n	80053e2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d00b      	beq.n	80053d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d007      	beq.n	80053d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d003      	beq.n	80053d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80053d4:	2b07      	cmp	r3, #7
 80053d6:	d102      	bne.n	80053de <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80053d8:	2302      	movs	r3, #2
 80053da:	61fb      	str	r3, [r7, #28]
 80053dc:	e001      	b.n	80053e2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80053de:	2301      	movs	r3, #1
 80053e0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	01db      	lsls	r3, r3, #7
 80053ec:	4413      	add	r3, r2
 80053ee:	3384      	adds	r3, #132	@ 0x84
 80053f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	4611      	mov	r1, r2
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	01d2      	lsls	r2, r2, #7
 80053fc:	440a      	add	r2, r1
 80053fe:	3284      	adds	r2, #132	@ 0x84
 8005400:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005404:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540a:	69fa      	ldr	r2, [r7, #28]
 800540c:	fb02 f303 	mul.w	r3, r2, r3
 8005410:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	6859      	ldr	r1, [r3, #4]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	1acb      	subs	r3, r1, r3
 800541c:	69f9      	ldr	r1, [r7, #28]
 800541e:	fb01 f303 	mul.w	r3, r1, r3
 8005422:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005424:	68f9      	ldr	r1, [r7, #12]
 8005426:	6809      	ldr	r1, [r1, #0]
 8005428:	4608      	mov	r0, r1
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	01c9      	lsls	r1, r1, #7
 800542e:	4401      	add	r1, r0
 8005430:	3184      	adds	r1, #132	@ 0x84
 8005432:	4313      	orrs	r3, r2
 8005434:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	01db      	lsls	r3, r3, #7
 8005440:	4413      	add	r3, r2
 8005442:	3384      	adds	r3, #132	@ 0x84
 8005444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4619      	mov	r1, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	01db      	lsls	r3, r3, #7
 8005450:	440b      	add	r3, r1
 8005452:	3384      	adds	r3, #132	@ 0x84
 8005454:	4619      	mov	r1, r3
 8005456:	4b14      	ldr	r3, [pc, #80]	@ (80054a8 <LTDC_SetConfig+0x330>)
 8005458:	4013      	ands	r3, r2
 800545a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	461a      	mov	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	01db      	lsls	r3, r3, #7
 8005466:	4413      	add	r3, r2
 8005468:	3384      	adds	r3, #132	@ 0x84
 800546a:	461a      	mov	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005470:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	01db      	lsls	r3, r3, #7
 800547c:	4413      	add	r3, r2
 800547e:	3384      	adds	r3, #132	@ 0x84
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	4611      	mov	r1, r2
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	01d2      	lsls	r2, r2, #7
 800548c:	440a      	add	r2, r1
 800548e:	3284      	adds	r2, #132	@ 0x84
 8005490:	f043 0301 	orr.w	r3, r3, #1
 8005494:	6013      	str	r3, [r2, #0]
}
 8005496:	bf00      	nop
 8005498:	3724      	adds	r7, #36	@ 0x24
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	fffff8f8 	.word	0xfffff8f8
 80054a8:	fffff800 	.word	0xfffff800

080054ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054b0:	4b05      	ldr	r3, [pc, #20]	@ (80054c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a04      	ldr	r2, [pc, #16]	@ (80054c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054ba:	6013      	str	r3, [r2, #0]
}
 80054bc:	bf00      	nop
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	40007000 	.word	0x40007000

080054cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80054d6:	4b23      	ldr	r3, [pc, #140]	@ (8005564 <HAL_PWREx_EnableOverDrive+0x98>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054da:	4a22      	ldr	r2, [pc, #136]	@ (8005564 <HAL_PWREx_EnableOverDrive+0x98>)
 80054dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80054e2:	4b20      	ldr	r3, [pc, #128]	@ (8005564 <HAL_PWREx_EnableOverDrive+0x98>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80054ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005568 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1d      	ldr	r2, [pc, #116]	@ (8005568 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054fa:	f7fc fe0f 	bl	800211c <HAL_GetTick>
 80054fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005500:	e009      	b.n	8005516 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005502:	f7fc fe0b 	bl	800211c <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005510:	d901      	bls.n	8005516 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e022      	b.n	800555c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005516:	4b14      	ldr	r3, [pc, #80]	@ (8005568 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800551e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005522:	d1ee      	bne.n	8005502 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005524:	4b10      	ldr	r3, [pc, #64]	@ (8005568 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a0f      	ldr	r2, [pc, #60]	@ (8005568 <HAL_PWREx_EnableOverDrive+0x9c>)
 800552a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800552e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005530:	f7fc fdf4 	bl	800211c <HAL_GetTick>
 8005534:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005536:	e009      	b.n	800554c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005538:	f7fc fdf0 	bl	800211c <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005546:	d901      	bls.n	800554c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e007      	b.n	800555c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800554c:	4b06      	ldr	r3, [pc, #24]	@ (8005568 <HAL_PWREx_EnableOverDrive+0x9c>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005554:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005558:	d1ee      	bne.n	8005538 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40023800 	.word	0x40023800
 8005568:	40007000 	.word	0x40007000

0800556c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005574:	2300      	movs	r3, #0
 8005576:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e291      	b.n	8005aa6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 8087 	beq.w	800569e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005590:	4b96      	ldr	r3, [pc, #600]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 030c 	and.w	r3, r3, #12
 8005598:	2b04      	cmp	r3, #4
 800559a:	d00c      	beq.n	80055b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800559c:	4b93      	ldr	r3, [pc, #588]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f003 030c 	and.w	r3, r3, #12
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d112      	bne.n	80055ce <HAL_RCC_OscConfig+0x62>
 80055a8:	4b90      	ldr	r3, [pc, #576]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055b4:	d10b      	bne.n	80055ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b6:	4b8d      	ldr	r3, [pc, #564]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d06c      	beq.n	800569c <HAL_RCC_OscConfig+0x130>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d168      	bne.n	800569c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e26b      	b.n	8005aa6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055d6:	d106      	bne.n	80055e6 <HAL_RCC_OscConfig+0x7a>
 80055d8:	4b84      	ldr	r3, [pc, #528]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a83      	ldr	r2, [pc, #524]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 80055de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	e02e      	b.n	8005644 <HAL_RCC_OscConfig+0xd8>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10c      	bne.n	8005608 <HAL_RCC_OscConfig+0x9c>
 80055ee:	4b7f      	ldr	r3, [pc, #508]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a7e      	ldr	r2, [pc, #504]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 80055f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	4b7c      	ldr	r3, [pc, #496]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a7b      	ldr	r2, [pc, #492]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 8005600:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	e01d      	b.n	8005644 <HAL_RCC_OscConfig+0xd8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005610:	d10c      	bne.n	800562c <HAL_RCC_OscConfig+0xc0>
 8005612:	4b76      	ldr	r3, [pc, #472]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a75      	ldr	r2, [pc, #468]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 8005618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	4b73      	ldr	r3, [pc, #460]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a72      	ldr	r2, [pc, #456]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 8005624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	e00b      	b.n	8005644 <HAL_RCC_OscConfig+0xd8>
 800562c:	4b6f      	ldr	r3, [pc, #444]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a6e      	ldr	r2, [pc, #440]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 8005632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005636:	6013      	str	r3, [r2, #0]
 8005638:	4b6c      	ldr	r3, [pc, #432]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a6b      	ldr	r2, [pc, #428]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 800563e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d013      	beq.n	8005674 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564c:	f7fc fd66 	bl	800211c <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005654:	f7fc fd62 	bl	800211c <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b64      	cmp	r3, #100	@ 0x64
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e21f      	b.n	8005aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005666:	4b61      	ldr	r3, [pc, #388]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0f0      	beq.n	8005654 <HAL_RCC_OscConfig+0xe8>
 8005672:	e014      	b.n	800569e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fc fd52 	bl	800211c <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800567c:	f7fc fd4e 	bl	800211c <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b64      	cmp	r3, #100	@ 0x64
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e20b      	b.n	8005aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800568e:	4b57      	ldr	r3, [pc, #348]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0x110>
 800569a:	e000      	b.n	800569e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800569c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d069      	beq.n	800577e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056aa:	4b50      	ldr	r3, [pc, #320]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 030c 	and.w	r3, r3, #12
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00b      	beq.n	80056ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056b6:	4b4d      	ldr	r3, [pc, #308]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 030c 	and.w	r3, r3, #12
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d11c      	bne.n	80056fc <HAL_RCC_OscConfig+0x190>
 80056c2:	4b4a      	ldr	r3, [pc, #296]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d116      	bne.n	80056fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ce:	4b47      	ldr	r3, [pc, #284]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d005      	beq.n	80056e6 <HAL_RCC_OscConfig+0x17a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d001      	beq.n	80056e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e1df      	b.n	8005aa6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e6:	4b41      	ldr	r3, [pc, #260]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	493d      	ldr	r1, [pc, #244]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056fa:	e040      	b.n	800577e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d023      	beq.n	800574c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005704:	4b39      	ldr	r3, [pc, #228]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a38      	ldr	r2, [pc, #224]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 800570a:	f043 0301 	orr.w	r3, r3, #1
 800570e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005710:	f7fc fd04 	bl	800211c <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005718:	f7fc fd00 	bl	800211c <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e1bd      	b.n	8005aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800572a:	4b30      	ldr	r3, [pc, #192]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f0      	beq.n	8005718 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005736:	4b2d      	ldr	r3, [pc, #180]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	4929      	ldr	r1, [pc, #164]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 8005746:	4313      	orrs	r3, r2
 8005748:	600b      	str	r3, [r1, #0]
 800574a:	e018      	b.n	800577e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800574c:	4b27      	ldr	r3, [pc, #156]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a26      	ldr	r2, [pc, #152]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 8005752:	f023 0301 	bic.w	r3, r3, #1
 8005756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005758:	f7fc fce0 	bl	800211c <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005760:	f7fc fcdc 	bl	800211c <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e199      	b.n	8005aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005772:	4b1e      	ldr	r3, [pc, #120]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1f0      	bne.n	8005760 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0308 	and.w	r3, r3, #8
 8005786:	2b00      	cmp	r3, #0
 8005788:	d038      	beq.n	80057fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d019      	beq.n	80057c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005792:	4b16      	ldr	r3, [pc, #88]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 8005794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005796:	4a15      	ldr	r2, [pc, #84]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 8005798:	f043 0301 	orr.w	r3, r3, #1
 800579c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800579e:	f7fc fcbd 	bl	800211c <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057a6:	f7fc fcb9 	bl	800211c <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e176      	b.n	8005aa6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057b8:	4b0c      	ldr	r3, [pc, #48]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 80057ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <HAL_RCC_OscConfig+0x23a>
 80057c4:	e01a      	b.n	80057fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057c6:	4b09      	ldr	r3, [pc, #36]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 80057c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ca:	4a08      	ldr	r2, [pc, #32]	@ (80057ec <HAL_RCC_OscConfig+0x280>)
 80057cc:	f023 0301 	bic.w	r3, r3, #1
 80057d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d2:	f7fc fca3 	bl	800211c <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057d8:	e00a      	b.n	80057f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057da:	f7fc fc9f 	bl	800211c <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d903      	bls.n	80057f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e15c      	b.n	8005aa6 <HAL_RCC_OscConfig+0x53a>
 80057ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057f0:	4b91      	ldr	r3, [pc, #580]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 80057f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1ee      	bne.n	80057da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 80a4 	beq.w	8005952 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800580a:	4b8b      	ldr	r3, [pc, #556]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 800580c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10d      	bne.n	8005832 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005816:	4b88      	ldr	r3, [pc, #544]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 8005818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581a:	4a87      	ldr	r2, [pc, #540]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 800581c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005820:	6413      	str	r3, [r2, #64]	@ 0x40
 8005822:	4b85      	ldr	r3, [pc, #532]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800582a:	60bb      	str	r3, [r7, #8]
 800582c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800582e:	2301      	movs	r3, #1
 8005830:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005832:	4b82      	ldr	r3, [pc, #520]	@ (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583a:	2b00      	cmp	r3, #0
 800583c:	d118      	bne.n	8005870 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800583e:	4b7f      	ldr	r3, [pc, #508]	@ (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a7e      	ldr	r2, [pc, #504]	@ (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800584a:	f7fc fc67 	bl	800211c <HAL_GetTick>
 800584e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005850:	e008      	b.n	8005864 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005852:	f7fc fc63 	bl	800211c <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b64      	cmp	r3, #100	@ 0x64
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e120      	b.n	8005aa6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005864:	4b75      	ldr	r3, [pc, #468]	@ (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0f0      	beq.n	8005852 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d106      	bne.n	8005886 <HAL_RCC_OscConfig+0x31a>
 8005878:	4b6f      	ldr	r3, [pc, #444]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 800587a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587c:	4a6e      	ldr	r2, [pc, #440]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 800587e:	f043 0301 	orr.w	r3, r3, #1
 8005882:	6713      	str	r3, [r2, #112]	@ 0x70
 8005884:	e02d      	b.n	80058e2 <HAL_RCC_OscConfig+0x376>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10c      	bne.n	80058a8 <HAL_RCC_OscConfig+0x33c>
 800588e:	4b6a      	ldr	r3, [pc, #424]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 8005890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005892:	4a69      	ldr	r2, [pc, #420]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 8005894:	f023 0301 	bic.w	r3, r3, #1
 8005898:	6713      	str	r3, [r2, #112]	@ 0x70
 800589a:	4b67      	ldr	r3, [pc, #412]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 800589c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589e:	4a66      	ldr	r2, [pc, #408]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 80058a0:	f023 0304 	bic.w	r3, r3, #4
 80058a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80058a6:	e01c      	b.n	80058e2 <HAL_RCC_OscConfig+0x376>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b05      	cmp	r3, #5
 80058ae:	d10c      	bne.n	80058ca <HAL_RCC_OscConfig+0x35e>
 80058b0:	4b61      	ldr	r3, [pc, #388]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 80058b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b4:	4a60      	ldr	r2, [pc, #384]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 80058b6:	f043 0304 	orr.w	r3, r3, #4
 80058ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80058bc:	4b5e      	ldr	r3, [pc, #376]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 80058be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c0:	4a5d      	ldr	r2, [pc, #372]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80058c8:	e00b      	b.n	80058e2 <HAL_RCC_OscConfig+0x376>
 80058ca:	4b5b      	ldr	r3, [pc, #364]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 80058cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ce:	4a5a      	ldr	r2, [pc, #360]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 80058d0:	f023 0301 	bic.w	r3, r3, #1
 80058d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80058d6:	4b58      	ldr	r3, [pc, #352]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 80058d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058da:	4a57      	ldr	r2, [pc, #348]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 80058dc:	f023 0304 	bic.w	r3, r3, #4
 80058e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d015      	beq.n	8005916 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ea:	f7fc fc17 	bl	800211c <HAL_GetTick>
 80058ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f0:	e00a      	b.n	8005908 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058f2:	f7fc fc13 	bl	800211c <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005900:	4293      	cmp	r3, r2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e0ce      	b.n	8005aa6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005908:	4b4b      	ldr	r3, [pc, #300]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0ee      	beq.n	80058f2 <HAL_RCC_OscConfig+0x386>
 8005914:	e014      	b.n	8005940 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005916:	f7fc fc01 	bl	800211c <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800591c:	e00a      	b.n	8005934 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800591e:	f7fc fbfd 	bl	800211c <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800592c:	4293      	cmp	r3, r2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e0b8      	b.n	8005aa6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005934:	4b40      	ldr	r3, [pc, #256]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 8005936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1ee      	bne.n	800591e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005940:	7dfb      	ldrb	r3, [r7, #23]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d105      	bne.n	8005952 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005946:	4b3c      	ldr	r3, [pc, #240]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 8005948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594a:	4a3b      	ldr	r2, [pc, #236]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 800594c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005950:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 80a4 	beq.w	8005aa4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800595c:	4b36      	ldr	r3, [pc, #216]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 030c 	and.w	r3, r3, #12
 8005964:	2b08      	cmp	r3, #8
 8005966:	d06b      	beq.n	8005a40 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d149      	bne.n	8005a04 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005970:	4b31      	ldr	r3, [pc, #196]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a30      	ldr	r2, [pc, #192]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 8005976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800597a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fc fbce 	bl	800211c <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005984:	f7fc fbca 	bl	800211c <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e087      	b.n	8005aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005996:	4b28      	ldr	r3, [pc, #160]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69da      	ldr	r2, [r3, #28]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b0:	019b      	lsls	r3, r3, #6
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	3b01      	subs	r3, #1
 80059bc:	041b      	lsls	r3, r3, #16
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c4:	061b      	lsls	r3, r3, #24
 80059c6:	4313      	orrs	r3, r2
 80059c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 80059ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059d0:	4b19      	ldr	r3, [pc, #100]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a18      	ldr	r2, [pc, #96]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 80059d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059dc:	f7fc fb9e 	bl	800211c <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e4:	f7fc fb9a 	bl	800211c <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e057      	b.n	8005aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059f6:	4b10      	ldr	r3, [pc, #64]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0f0      	beq.n	80059e4 <HAL_RCC_OscConfig+0x478>
 8005a02:	e04f      	b.n	8005aa4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a04:	4b0c      	ldr	r3, [pc, #48]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a0b      	ldr	r2, [pc, #44]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 8005a0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a10:	f7fc fb84 	bl	800211c <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a18:	f7fc fb80 	bl	800211c <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e03d      	b.n	8005aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a2a:	4b03      	ldr	r3, [pc, #12]	@ (8005a38 <HAL_RCC_OscConfig+0x4cc>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_OscConfig+0x4ac>
 8005a36:	e035      	b.n	8005aa4 <HAL_RCC_OscConfig+0x538>
 8005a38:	40023800 	.word	0x40023800
 8005a3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005a40:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab0 <HAL_RCC_OscConfig+0x544>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d028      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d121      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d11a      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a70:	4013      	ands	r3, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a76:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d111      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a86:	085b      	lsrs	r3, r3, #1
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d107      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d001      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e000      	b.n	8005aa6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	40023800 	.word	0x40023800

08005ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e0d0      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005acc:	4b6a      	ldr	r3, [pc, #424]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c4>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d910      	bls.n	8005afc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ada:	4b67      	ldr	r3, [pc, #412]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c4>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f023 020f 	bic.w	r2, r3, #15
 8005ae2:	4965      	ldr	r1, [pc, #404]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aea:	4b63      	ldr	r3, [pc, #396]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c4>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d001      	beq.n	8005afc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e0b8      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d020      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d005      	beq.n	8005b20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b14:	4b59      	ldr	r3, [pc, #356]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c8>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	4a58      	ldr	r2, [pc, #352]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c8>)
 8005b1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b2c:	4b53      	ldr	r3, [pc, #332]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c8>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	4a52      	ldr	r2, [pc, #328]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c8>)
 8005b32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b38:	4b50      	ldr	r3, [pc, #320]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c8>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	494d      	ldr	r1, [pc, #308]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c8>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d040      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d107      	bne.n	8005b6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b5e:	4b47      	ldr	r3, [pc, #284]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c8>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d115      	bne.n	8005b96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e07f      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d107      	bne.n	8005b86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b76:	4b41      	ldr	r3, [pc, #260]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c8>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e073      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b86:	4b3d      	ldr	r3, [pc, #244]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e06b      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b96:	4b39      	ldr	r3, [pc, #228]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c8>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f023 0203 	bic.w	r2, r3, #3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	4936      	ldr	r1, [pc, #216]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c8>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba8:	f7fc fab8 	bl	800211c <HAL_GetTick>
 8005bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bae:	e00a      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bb0:	f7fc fab4 	bl	800211c <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e053      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c8>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 020c 	and.w	r2, r3, #12
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d1eb      	bne.n	8005bb0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bd8:	4b27      	ldr	r3, [pc, #156]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c4>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 030f 	and.w	r3, r3, #15
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d210      	bcs.n	8005c08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be6:	4b24      	ldr	r3, [pc, #144]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c4>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f023 020f 	bic.w	r2, r3, #15
 8005bee:	4922      	ldr	r1, [pc, #136]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c4>)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf6:	4b20      	ldr	r3, [pc, #128]	@ (8005c78 <HAL_RCC_ClockConfig+0x1c4>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d001      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e032      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d008      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c14:	4b19      	ldr	r3, [pc, #100]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c8>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	4916      	ldr	r1, [pc, #88]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c8>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c32:	4b12      	ldr	r3, [pc, #72]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c8>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	490e      	ldr	r1, [pc, #56]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c8>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c46:	f000 f821 	bl	8005c8c <HAL_RCC_GetSysClockFreq>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c7c <HAL_RCC_ClockConfig+0x1c8>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	091b      	lsrs	r3, r3, #4
 8005c52:	f003 030f 	and.w	r3, r3, #15
 8005c56:	490a      	ldr	r1, [pc, #40]	@ (8005c80 <HAL_RCC_ClockConfig+0x1cc>)
 8005c58:	5ccb      	ldrb	r3, [r1, r3]
 8005c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5e:	4a09      	ldr	r2, [pc, #36]	@ (8005c84 <HAL_RCC_ClockConfig+0x1d0>)
 8005c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c62:	4b09      	ldr	r3, [pc, #36]	@ (8005c88 <HAL_RCC_ClockConfig+0x1d4>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fb f8ee 	bl	8000e48 <HAL_InitTick>

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	40023c00 	.word	0x40023c00
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	0800a030 	.word	0x0800a030
 8005c84:	20000008 	.word	0x20000008
 8005c88:	20000020 	.word	0x20000020

08005c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c90:	b090      	sub	sp, #64	@ 0x40
 8005c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005c94:	2300      	movs	r3, #0
 8005c96:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c98:	2300      	movs	r3, #0
 8005c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ca4:	4b59      	ldr	r3, [pc, #356]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 030c 	and.w	r3, r3, #12
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d00d      	beq.n	8005ccc <HAL_RCC_GetSysClockFreq+0x40>
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	f200 80a1 	bhi.w	8005df8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d003      	beq.n	8005cc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005cbe:	e09b      	b.n	8005df8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cc0:	4b53      	ldr	r3, [pc, #332]	@ (8005e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8005cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005cc4:	e09b      	b.n	8005dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cc6:	4b53      	ldr	r3, [pc, #332]	@ (8005e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8005cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005cca:	e098      	b.n	8005dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ccc:	4b4f      	ldr	r3, [pc, #316]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cd4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005cd6:	4b4d      	ldr	r3, [pc, #308]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d028      	beq.n	8005d34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	099b      	lsrs	r3, r3, #6
 8005ce8:	2200      	movs	r2, #0
 8005cea:	623b      	str	r3, [r7, #32]
 8005cec:	627a      	str	r2, [r7, #36]	@ 0x24
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4b47      	ldr	r3, [pc, #284]	@ (8005e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8005cf8:	fb03 f201 	mul.w	r2, r3, r1
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	fb00 f303 	mul.w	r3, r0, r3
 8005d02:	4413      	add	r3, r2
 8005d04:	4a43      	ldr	r2, [pc, #268]	@ (8005e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d06:	fba0 1202 	umull	r1, r2, r0, r2
 8005d0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d0c:	460a      	mov	r2, r1
 8005d0e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005d10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d12:	4413      	add	r3, r2
 8005d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d18:	2200      	movs	r2, #0
 8005d1a:	61bb      	str	r3, [r7, #24]
 8005d1c:	61fa      	str	r2, [r7, #28]
 8005d1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005d26:	f7fa fa73 	bl	8000210 <__aeabi_uldivmod>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4613      	mov	r3, r2
 8005d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d32:	e053      	b.n	8005ddc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d34:	4b35      	ldr	r3, [pc, #212]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	099b      	lsrs	r3, r3, #6
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	617a      	str	r2, [r7, #20]
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005d46:	f04f 0b00 	mov.w	fp, #0
 8005d4a:	4652      	mov	r2, sl
 8005d4c:	465b      	mov	r3, fp
 8005d4e:	f04f 0000 	mov.w	r0, #0
 8005d52:	f04f 0100 	mov.w	r1, #0
 8005d56:	0159      	lsls	r1, r3, #5
 8005d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d5c:	0150      	lsls	r0, r2, #5
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	ebb2 080a 	subs.w	r8, r2, sl
 8005d66:	eb63 090b 	sbc.w	r9, r3, fp
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	f04f 0300 	mov.w	r3, #0
 8005d72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005d76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005d7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005d7e:	ebb2 0408 	subs.w	r4, r2, r8
 8005d82:	eb63 0509 	sbc.w	r5, r3, r9
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	00eb      	lsls	r3, r5, #3
 8005d90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d94:	00e2      	lsls	r2, r4, #3
 8005d96:	4614      	mov	r4, r2
 8005d98:	461d      	mov	r5, r3
 8005d9a:	eb14 030a 	adds.w	r3, r4, sl
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	eb45 030b 	adc.w	r3, r5, fp
 8005da4:	607b      	str	r3, [r7, #4]
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005db2:	4629      	mov	r1, r5
 8005db4:	028b      	lsls	r3, r1, #10
 8005db6:	4621      	mov	r1, r4
 8005db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	028a      	lsls	r2, r1, #10
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	60fa      	str	r2, [r7, #12]
 8005dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dd0:	f7fa fa1e 	bl	8000210 <__aeabi_uldivmod>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4613      	mov	r3, r2
 8005dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	0c1b      	lsrs	r3, r3, #16
 8005de2:	f003 0303 	and.w	r3, r3, #3
 8005de6:	3301      	adds	r3, #1
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005dec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005df6:	e002      	b.n	8005dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005df8:	4b05      	ldr	r3, [pc, #20]	@ (8005e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8005dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3740      	adds	r7, #64	@ 0x40
 8005e04:	46bd      	mov	sp, r7
 8005e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40023800 	.word	0x40023800
 8005e10:	00f42400 	.word	0x00f42400
 8005e14:	017d7840 	.word	0x017d7840

08005e18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e1c:	4b03      	ldr	r3, [pc, #12]	@ (8005e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	20000008 	.word	0x20000008

08005e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e34:	f7ff fff0 	bl	8005e18 <HAL_RCC_GetHCLKFreq>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	4b05      	ldr	r3, [pc, #20]	@ (8005e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	0a9b      	lsrs	r3, r3, #10
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	4903      	ldr	r1, [pc, #12]	@ (8005e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e46:	5ccb      	ldrb	r3, [r1, r3]
 8005e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	40023800 	.word	0x40023800
 8005e54:	0800a040 	.word	0x0800a040

08005e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e5c:	f7ff ffdc 	bl	8005e18 <HAL_RCC_GetHCLKFreq>
 8005e60:	4602      	mov	r2, r0
 8005e62:	4b05      	ldr	r3, [pc, #20]	@ (8005e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	0b5b      	lsrs	r3, r3, #13
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	4903      	ldr	r1, [pc, #12]	@ (8005e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e6e:	5ccb      	ldrb	r3, [r1, r3]
 8005e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40023800 	.word	0x40023800
 8005e7c:	0800a040 	.word	0x0800a040

08005e80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	220f      	movs	r2, #15
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e90:	4b12      	ldr	r3, [pc, #72]	@ (8005edc <HAL_RCC_GetClockConfig+0x5c>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f003 0203 	and.w	r2, r3, #3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005edc <HAL_RCC_GetClockConfig+0x5c>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8005edc <HAL_RCC_GetClockConfig+0x5c>)
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005eb4:	4b09      	ldr	r3, [pc, #36]	@ (8005edc <HAL_RCC_GetClockConfig+0x5c>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	08db      	lsrs	r3, r3, #3
 8005eba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ec2:	4b07      	ldr	r3, [pc, #28]	@ (8005ee0 <HAL_RCC_GetClockConfig+0x60>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 020f 	and.w	r2, r3, #15
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	601a      	str	r2, [r3, #0]
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	40023c00 	.word	0x40023c00

08005ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d012      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f0c:	4b69      	ldr	r3, [pc, #420]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	4a68      	ldr	r2, [pc, #416]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f12:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005f16:	6093      	str	r3, [r2, #8]
 8005f18:	4b66      	ldr	r3, [pc, #408]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f20:	4964      	ldr	r1, [pc, #400]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d017      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f3e:	4b5d      	ldr	r3, [pc, #372]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f44:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f4c:	4959      	ldr	r1, [pc, #356]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f5c:	d101      	bne.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d017      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f7a:	4b4e      	ldr	r3, [pc, #312]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f80:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f88:	494a      	ldr	r1, [pc, #296]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f98:	d101      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 808b 	beq.w	80060de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fcc:	4a39      	ldr	r2, [pc, #228]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fd4:	4b37      	ldr	r3, [pc, #220]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fdc:	60bb      	str	r3, [r7, #8]
 8005fde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005fe0:	4b35      	ldr	r3, [pc, #212]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a34      	ldr	r2, [pc, #208]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fec:	f7fc f896 	bl	800211c <HAL_GetTick>
 8005ff0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005ff2:	e008      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff4:	f7fc f892 	bl	800211c <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b64      	cmp	r3, #100	@ 0x64
 8006000:	d901      	bls.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e357      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006006:	4b2c      	ldr	r3, [pc, #176]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f0      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006012:	4b28      	ldr	r3, [pc, #160]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800601a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d035      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	429a      	cmp	r2, r3
 800602e:	d02e      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006030:	4b20      	ldr	r3, [pc, #128]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006038:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800603a:	4b1e      	ldr	r3, [pc, #120]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800603c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800603e:	4a1d      	ldr	r2, [pc, #116]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006044:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006046:	4b1b      	ldr	r3, [pc, #108]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604a:	4a1a      	ldr	r2, [pc, #104]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800604c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006050:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006052:	4a18      	ldr	r2, [pc, #96]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006058:	4b16      	ldr	r3, [pc, #88]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800605a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b01      	cmp	r3, #1
 8006062:	d114      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006064:	f7fc f85a 	bl	800211c <HAL_GetTick>
 8006068:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800606a:	e00a      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800606c:	f7fc f856 	bl	800211c <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800607a:	4293      	cmp	r3, r2
 800607c:	d901      	bls.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e319      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006082:	4b0c      	ldr	r3, [pc, #48]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0ee      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006096:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800609a:	d111      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800609c:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80060a8:	4b04      	ldr	r3, [pc, #16]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060aa:	400b      	ands	r3, r1
 80060ac:	4901      	ldr	r1, [pc, #4]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	608b      	str	r3, [r1, #8]
 80060b2:	e00b      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80060b4:	40023800 	.word	0x40023800
 80060b8:	40007000 	.word	0x40007000
 80060bc:	0ffffcff 	.word	0x0ffffcff
 80060c0:	4baa      	ldr	r3, [pc, #680]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	4aa9      	ldr	r2, [pc, #676]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060c6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80060ca:	6093      	str	r3, [r2, #8]
 80060cc:	4ba7      	ldr	r3, [pc, #668]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d8:	49a4      	ldr	r1, [pc, #656]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0310 	and.w	r3, r3, #16
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d010      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060ea:	4ba0      	ldr	r3, [pc, #640]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060f0:	4a9e      	ldr	r2, [pc, #632]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80060fa:	4b9c      	ldr	r3, [pc, #624]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006104:	4999      	ldr	r1, [pc, #612]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006106:	4313      	orrs	r3, r2
 8006108:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00a      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006118:	4b94      	ldr	r3, [pc, #592]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800611a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800611e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006126:	4991      	ldr	r1, [pc, #580]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006128:	4313      	orrs	r3, r2
 800612a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800613a:	4b8c      	ldr	r3, [pc, #560]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800613c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006140:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006148:	4988      	ldr	r1, [pc, #544]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800615c:	4b83      	ldr	r3, [pc, #524]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006162:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800616a:	4980      	ldr	r1, [pc, #512]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800616c:	4313      	orrs	r3, r2
 800616e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800617e:	4b7b      	ldr	r3, [pc, #492]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006184:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800618c:	4977      	ldr	r1, [pc, #476]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800618e:	4313      	orrs	r3, r2
 8006190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061a0:	4b72      	ldr	r3, [pc, #456]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a6:	f023 0203 	bic.w	r2, r3, #3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ae:	496f      	ldr	r1, [pc, #444]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00a      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061c2:	4b6a      	ldr	r3, [pc, #424]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c8:	f023 020c 	bic.w	r2, r3, #12
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061d0:	4966      	ldr	r1, [pc, #408]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061e4:	4b61      	ldr	r3, [pc, #388]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061f2:	495e      	ldr	r1, [pc, #376]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006206:	4b59      	ldr	r3, [pc, #356]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800620c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006214:	4955      	ldr	r1, [pc, #340]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006228:	4b50      	ldr	r3, [pc, #320]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800622e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006236:	494d      	ldr	r1, [pc, #308]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800624a:	4b48      	ldr	r3, [pc, #288]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800624c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006250:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006258:	4944      	ldr	r1, [pc, #272]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800626c:	4b3f      	ldr	r3, [pc, #252]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800626e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006272:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800627a:	493c      	ldr	r1, [pc, #240]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800627c:	4313      	orrs	r3, r2
 800627e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800628e:	4b37      	ldr	r3, [pc, #220]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006294:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800629c:	4933      	ldr	r1, [pc, #204]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00a      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062b0:	4b2e      	ldr	r3, [pc, #184]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062b6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062be:	492b      	ldr	r1, [pc, #172]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d011      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80062d2:	4b26      	ldr	r3, [pc, #152]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062e0:	4922      	ldr	r1, [pc, #136]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062f0:	d101      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80062f2:	2301      	movs	r3, #1
 80062f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0308 	and.w	r3, r3, #8
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006302:	2301      	movs	r3, #1
 8006304:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006312:	4b16      	ldr	r3, [pc, #88]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006318:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006320:	4912      	ldr	r1, [pc, #72]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00b      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006334:	4b0d      	ldr	r3, [pc, #52]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800633a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006344:	4909      	ldr	r1, [pc, #36]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006346:	4313      	orrs	r3, r2
 8006348:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d006      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 80d9 	beq.w	8006512 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006360:	4b02      	ldr	r3, [pc, #8]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a01      	ldr	r2, [pc, #4]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006366:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800636a:	e001      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800636c:	40023800 	.word	0x40023800
 8006370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006372:	f7fb fed3 	bl	800211c <HAL_GetTick>
 8006376:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006378:	e008      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800637a:	f7fb fecf 	bl	800211c <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b64      	cmp	r3, #100	@ 0x64
 8006386:	d901      	bls.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e194      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800638c:	4b6c      	ldr	r3, [pc, #432]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1f0      	bne.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d021      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d11d      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80063ac:	4b64      	ldr	r3, [pc, #400]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063b2:	0c1b      	lsrs	r3, r3, #16
 80063b4:	f003 0303 	and.w	r3, r3, #3
 80063b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80063ba:	4b61      	ldr	r3, [pc, #388]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063c0:	0e1b      	lsrs	r3, r3, #24
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	019a      	lsls	r2, r3, #6
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	041b      	lsls	r3, r3, #16
 80063d2:	431a      	orrs	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	061b      	lsls	r3, r3, #24
 80063d8:	431a      	orrs	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	071b      	lsls	r3, r3, #28
 80063e0:	4957      	ldr	r1, [pc, #348]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063fc:	d00a      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006406:	2b00      	cmp	r3, #0
 8006408:	d02e      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006412:	d129      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006414:	4b4a      	ldr	r3, [pc, #296]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800641a:	0c1b      	lsrs	r3, r3, #16
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006422:	4b47      	ldr	r3, [pc, #284]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006428:	0f1b      	lsrs	r3, r3, #28
 800642a:	f003 0307 	and.w	r3, r3, #7
 800642e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	019a      	lsls	r2, r3, #6
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	041b      	lsls	r3, r3, #16
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	061b      	lsls	r3, r3, #24
 8006442:	431a      	orrs	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	071b      	lsls	r3, r3, #28
 8006448:	493d      	ldr	r1, [pc, #244]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800644a:	4313      	orrs	r3, r2
 800644c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006450:	4b3b      	ldr	r3, [pc, #236]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006452:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006456:	f023 021f 	bic.w	r2, r3, #31
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645e:	3b01      	subs	r3, #1
 8006460:	4937      	ldr	r1, [pc, #220]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01d      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006474:	4b32      	ldr	r3, [pc, #200]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800647a:	0e1b      	lsrs	r3, r3, #24
 800647c:	f003 030f 	and.w	r3, r3, #15
 8006480:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006482:	4b2f      	ldr	r3, [pc, #188]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006488:	0f1b      	lsrs	r3, r3, #28
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	019a      	lsls	r2, r3, #6
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	041b      	lsls	r3, r3, #16
 800649c:	431a      	orrs	r2, r3
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	061b      	lsls	r3, r3, #24
 80064a2:	431a      	orrs	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	071b      	lsls	r3, r3, #28
 80064a8:	4925      	ldr	r1, [pc, #148]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d011      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	019a      	lsls	r2, r3, #6
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	061b      	lsls	r3, r3, #24
 80064d0:	431a      	orrs	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	071b      	lsls	r3, r3, #28
 80064d8:	4919      	ldr	r1, [pc, #100]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064e0:	4b17      	ldr	r3, [pc, #92]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a16      	ldr	r2, [pc, #88]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80064ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ec:	f7fb fe16 	bl	800211c <HAL_GetTick>
 80064f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064f4:	f7fb fe12 	bl	800211c <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b64      	cmp	r3, #100	@ 0x64
 8006500:	d901      	bls.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e0d7      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006506:	4b0e      	ldr	r3, [pc, #56]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f0      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	2b01      	cmp	r3, #1
 8006516:	f040 80cd 	bne.w	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800651a:	4b09      	ldr	r3, [pc, #36]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a08      	ldr	r2, [pc, #32]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006526:	f7fb fdf9 	bl	800211c <HAL_GetTick>
 800652a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800652c:	e00a      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800652e:	f7fb fdf5 	bl	800211c <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b64      	cmp	r3, #100	@ 0x64
 800653a:	d903      	bls.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e0ba      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006540:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006544:	4b5e      	ldr	r3, [pc, #376]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800654c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006550:	d0ed      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800656e:	2b00      	cmp	r3, #0
 8006570:	d02e      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d12a      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800657a:	4b51      	ldr	r3, [pc, #324]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800657c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006580:	0c1b      	lsrs	r3, r3, #16
 8006582:	f003 0303 	and.w	r3, r3, #3
 8006586:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006588:	4b4d      	ldr	r3, [pc, #308]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800658a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800658e:	0f1b      	lsrs	r3, r3, #28
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	019a      	lsls	r2, r3, #6
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	041b      	lsls	r3, r3, #16
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	061b      	lsls	r3, r3, #24
 80065a8:	431a      	orrs	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	071b      	lsls	r3, r3, #28
 80065ae:	4944      	ldr	r1, [pc, #272]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80065b6:	4b42      	ldr	r3, [pc, #264]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065bc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c4:	3b01      	subs	r3, #1
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	493d      	ldr	r1, [pc, #244]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d022      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065e4:	d11d      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80065e6:	4b36      	ldr	r3, [pc, #216]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ec:	0e1b      	lsrs	r3, r3, #24
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80065f4:	4b32      	ldr	r3, [pc, #200]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065fa:	0f1b      	lsrs	r3, r3, #28
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	019a      	lsls	r2, r3, #6
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	041b      	lsls	r3, r3, #16
 800660e:	431a      	orrs	r2, r3
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	061b      	lsls	r3, r3, #24
 8006614:	431a      	orrs	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	071b      	lsls	r3, r3, #28
 800661a:	4929      	ldr	r1, [pc, #164]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800661c:	4313      	orrs	r3, r2
 800661e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0308 	and.w	r3, r3, #8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d028      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800662e:	4b24      	ldr	r3, [pc, #144]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006634:	0e1b      	lsrs	r3, r3, #24
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800663c:	4b20      	ldr	r3, [pc, #128]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800663e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006642:	0c1b      	lsrs	r3, r3, #16
 8006644:	f003 0303 	and.w	r3, r3, #3
 8006648:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	019a      	lsls	r2, r3, #6
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	041b      	lsls	r3, r3, #16
 8006654:	431a      	orrs	r2, r3
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	061b      	lsls	r3, r3, #24
 800665a:	431a      	orrs	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	071b      	lsls	r3, r3, #28
 8006662:	4917      	ldr	r1, [pc, #92]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006664:	4313      	orrs	r3, r2
 8006666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800666a:	4b15      	ldr	r3, [pc, #84]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800666c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006670:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006678:	4911      	ldr	r1, [pc, #68]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800667a:	4313      	orrs	r3, r2
 800667c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006680:	4b0f      	ldr	r3, [pc, #60]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a0e      	ldr	r2, [pc, #56]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800668a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800668c:	f7fb fd46 	bl	800211c <HAL_GetTick>
 8006690:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006692:	e008      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006694:	f7fb fd42 	bl	800211c <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b64      	cmp	r3, #100	@ 0x64
 80066a0:	d901      	bls.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e007      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066a6:	4b06      	ldr	r3, [pc, #24]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066b2:	d1ef      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3720      	adds	r7, #32
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	40023800 	.word	0x40023800

080066c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e025      	b.n	8006724 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d106      	bne.n	80066f2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7fa fba1 	bl	8000e34 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2202      	movs	r2, #2
 80066f6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3304      	adds	r3, #4
 8006702:	4619      	mov	r1, r3
 8006704:	4610      	mov	r0, r2
 8006706:	f001 fd97 	bl	8008238 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6818      	ldr	r0, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	461a      	mov	r2, r3
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	f001 fdeb 	bl	80082f0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800673e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006740:	7dfb      	ldrb	r3, [r7, #23]
 8006742:	2b02      	cmp	r3, #2
 8006744:	d101      	bne.n	800674a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006746:	2302      	movs	r3, #2
 8006748:	e021      	b.n	800678e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800674a:	7dfb      	ldrb	r3, [r7, #23]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d002      	beq.n	8006756 <HAL_SDRAM_SendCommand+0x2a>
 8006750:	7dfb      	ldrb	r3, [r7, #23]
 8006752:	2b05      	cmp	r3, #5
 8006754:	d118      	bne.n	8006788 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	4618      	mov	r0, r3
 8006768:	f001 fe2c 	bl	80083c4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b02      	cmp	r3, #2
 8006772:	d104      	bne.n	800677e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2205      	movs	r2, #5
 8006778:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800677c:	e006      	b.n	800678c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006786:	e001      	b.n	800678c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b082      	sub	sp, #8
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d101      	bne.n	80067b0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80067ac:	2302      	movs	r3, #2
 80067ae:	e016      	b.n	80067de <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d10f      	bne.n	80067dc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f001 fe1e 	bl	800840c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
 80067da:	e000      	b.n	80067de <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b082      	sub	sp, #8
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e049      	b.n	800688c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d106      	bne.n	8006812 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7fa f943 	bl	8000a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2202      	movs	r2, #2
 8006816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	3304      	adds	r3, #4
 8006822:	4619      	mov	r1, r3
 8006824:	4610      	mov	r0, r2
 8006826:	f000 f9dd 	bl	8006be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d001      	beq.n	80068ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e054      	b.n	8006956 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 0201 	orr.w	r2, r2, #1
 80068c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a26      	ldr	r2, [pc, #152]	@ (8006964 <HAL_TIM_Base_Start_IT+0xd0>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d022      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x80>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d6:	d01d      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x80>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a22      	ldr	r2, [pc, #136]	@ (8006968 <HAL_TIM_Base_Start_IT+0xd4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d018      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x80>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a21      	ldr	r2, [pc, #132]	@ (800696c <HAL_TIM_Base_Start_IT+0xd8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d013      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x80>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a1f      	ldr	r2, [pc, #124]	@ (8006970 <HAL_TIM_Base_Start_IT+0xdc>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00e      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x80>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006974 <HAL_TIM_Base_Start_IT+0xe0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d009      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x80>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a1c      	ldr	r2, [pc, #112]	@ (8006978 <HAL_TIM_Base_Start_IT+0xe4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d004      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x80>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1b      	ldr	r2, [pc, #108]	@ (800697c <HAL_TIM_Base_Start_IT+0xe8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d115      	bne.n	8006940 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689a      	ldr	r2, [r3, #8]
 800691a:	4b19      	ldr	r3, [pc, #100]	@ (8006980 <HAL_TIM_Base_Start_IT+0xec>)
 800691c:	4013      	ands	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b06      	cmp	r3, #6
 8006924:	d015      	beq.n	8006952 <HAL_TIM_Base_Start_IT+0xbe>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800692c:	d011      	beq.n	8006952 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0201 	orr.w	r2, r2, #1
 800693c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800693e:	e008      	b.n	8006952 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0201 	orr.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	e000      	b.n	8006954 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006952:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40010000 	.word	0x40010000
 8006968:	40000400 	.word	0x40000400
 800696c:	40000800 	.word	0x40000800
 8006970:	40000c00 	.word	0x40000c00
 8006974:	40010400 	.word	0x40010400
 8006978:	40014000 	.word	0x40014000
 800697c:	40001800 	.word	0x40001800
 8006980:	00010007 	.word	0x00010007

08006984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d020      	beq.n	80069e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d01b      	beq.n	80069e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f06f 0202 	mvn.w	r2, #2
 80069b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f003 0303 	and.w	r3, r3, #3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f8e9 	bl	8006ba6 <HAL_TIM_IC_CaptureCallback>
 80069d4:	e005      	b.n	80069e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f8db 	bl	8006b92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f8ec 	bl	8006bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f003 0304 	and.w	r3, r3, #4
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d020      	beq.n	8006a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d01b      	beq.n	8006a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f06f 0204 	mvn.w	r2, #4
 8006a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f8c3 	bl	8006ba6 <HAL_TIM_IC_CaptureCallback>
 8006a20:	e005      	b.n	8006a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f8b5 	bl	8006b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f8c6 	bl	8006bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f003 0308 	and.w	r3, r3, #8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d020      	beq.n	8006a80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d01b      	beq.n	8006a80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f06f 0208 	mvn.w	r2, #8
 8006a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2204      	movs	r2, #4
 8006a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f89d 	bl	8006ba6 <HAL_TIM_IC_CaptureCallback>
 8006a6c:	e005      	b.n	8006a7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f88f 	bl	8006b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f8a0 	bl	8006bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f003 0310 	and.w	r3, r3, #16
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d020      	beq.n	8006acc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f003 0310 	and.w	r3, r3, #16
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01b      	beq.n	8006acc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f06f 0210 	mvn.w	r2, #16
 8006a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f877 	bl	8006ba6 <HAL_TIM_IC_CaptureCallback>
 8006ab8:	e005      	b.n	8006ac6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f869 	bl	8006b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f87a 	bl	8006bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00c      	beq.n	8006af0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d007      	beq.n	8006af0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f06f 0201 	mvn.w	r2, #1
 8006ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7f9 fea6 	bl	800083c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d104      	bne.n	8006b04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00c      	beq.n	8006b1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d007      	beq.n	8006b1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f919 	bl	8006d50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00c      	beq.n	8006b42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d007      	beq.n	8006b42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f911 	bl	8006d64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00c      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d007      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f834 	bl	8006bce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f003 0320 	and.w	r3, r3, #32
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00c      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f003 0320 	and.w	r3, r3, #32
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d007      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f06f 0220 	mvn.w	r2, #32
 8006b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f8d9 	bl	8006d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b8a:	bf00      	nop
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b9a:	bf00      	nop
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bae:	bf00      	nop
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bc2:	bf00      	nop
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a46      	ldr	r2, [pc, #280]	@ (8006d10 <TIM_Base_SetConfig+0x12c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d013      	beq.n	8006c24 <TIM_Base_SetConfig+0x40>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c02:	d00f      	beq.n	8006c24 <TIM_Base_SetConfig+0x40>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a43      	ldr	r2, [pc, #268]	@ (8006d14 <TIM_Base_SetConfig+0x130>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d00b      	beq.n	8006c24 <TIM_Base_SetConfig+0x40>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a42      	ldr	r2, [pc, #264]	@ (8006d18 <TIM_Base_SetConfig+0x134>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d007      	beq.n	8006c24 <TIM_Base_SetConfig+0x40>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a41      	ldr	r2, [pc, #260]	@ (8006d1c <TIM_Base_SetConfig+0x138>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d003      	beq.n	8006c24 <TIM_Base_SetConfig+0x40>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a40      	ldr	r2, [pc, #256]	@ (8006d20 <TIM_Base_SetConfig+0x13c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d108      	bne.n	8006c36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a35      	ldr	r2, [pc, #212]	@ (8006d10 <TIM_Base_SetConfig+0x12c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d02b      	beq.n	8006c96 <TIM_Base_SetConfig+0xb2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c44:	d027      	beq.n	8006c96 <TIM_Base_SetConfig+0xb2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a32      	ldr	r2, [pc, #200]	@ (8006d14 <TIM_Base_SetConfig+0x130>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d023      	beq.n	8006c96 <TIM_Base_SetConfig+0xb2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a31      	ldr	r2, [pc, #196]	@ (8006d18 <TIM_Base_SetConfig+0x134>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d01f      	beq.n	8006c96 <TIM_Base_SetConfig+0xb2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a30      	ldr	r2, [pc, #192]	@ (8006d1c <TIM_Base_SetConfig+0x138>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d01b      	beq.n	8006c96 <TIM_Base_SetConfig+0xb2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a2f      	ldr	r2, [pc, #188]	@ (8006d20 <TIM_Base_SetConfig+0x13c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d017      	beq.n	8006c96 <TIM_Base_SetConfig+0xb2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a2e      	ldr	r2, [pc, #184]	@ (8006d24 <TIM_Base_SetConfig+0x140>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d013      	beq.n	8006c96 <TIM_Base_SetConfig+0xb2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a2d      	ldr	r2, [pc, #180]	@ (8006d28 <TIM_Base_SetConfig+0x144>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d00f      	beq.n	8006c96 <TIM_Base_SetConfig+0xb2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a2c      	ldr	r2, [pc, #176]	@ (8006d2c <TIM_Base_SetConfig+0x148>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d00b      	beq.n	8006c96 <TIM_Base_SetConfig+0xb2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a2b      	ldr	r2, [pc, #172]	@ (8006d30 <TIM_Base_SetConfig+0x14c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d007      	beq.n	8006c96 <TIM_Base_SetConfig+0xb2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a2a      	ldr	r2, [pc, #168]	@ (8006d34 <TIM_Base_SetConfig+0x150>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d003      	beq.n	8006c96 <TIM_Base_SetConfig+0xb2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a29      	ldr	r2, [pc, #164]	@ (8006d38 <TIM_Base_SetConfig+0x154>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d108      	bne.n	8006ca8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a10      	ldr	r2, [pc, #64]	@ (8006d10 <TIM_Base_SetConfig+0x12c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d003      	beq.n	8006cdc <TIM_Base_SetConfig+0xf8>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a12      	ldr	r2, [pc, #72]	@ (8006d20 <TIM_Base_SetConfig+0x13c>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d103      	bne.n	8006ce4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	691a      	ldr	r2, [r3, #16]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d105      	bne.n	8006d02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f023 0201 	bic.w	r2, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	611a      	str	r2, [r3, #16]
  }
}
 8006d02:	bf00      	nop
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	40010000 	.word	0x40010000
 8006d14:	40000400 	.word	0x40000400
 8006d18:	40000800 	.word	0x40000800
 8006d1c:	40000c00 	.word	0x40000c00
 8006d20:	40010400 	.word	0x40010400
 8006d24:	40014000 	.word	0x40014000
 8006d28:	40014400 	.word	0x40014400
 8006d2c:	40014800 	.word	0x40014800
 8006d30:	40001800 	.word	0x40001800
 8006d34:	40001c00 	.word	0x40001c00
 8006d38:	40002000 	.word	0x40002000

08006d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e040      	b.n	8006e0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7f9 feea 	bl	8000b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2224      	movs	r2, #36	@ 0x24
 8006da4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0201 	bic.w	r2, r2, #1
 8006db4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fdc2 	bl	8007948 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fb5b 	bl	8007480 <UART_SetConfig>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e01b      	b.n	8006e0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006de2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689a      	ldr	r2, [r3, #8]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006df2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0201 	orr.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fe41 	bl	8007a8c <UART_CheckIdleState>
 8006e0a:	4603      	mov	r3, r0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b08a      	sub	sp, #40	@ 0x28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e28:	2b20      	cmp	r3, #32
 8006e2a:	d132      	bne.n	8006e92 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <HAL_UART_Receive_IT+0x24>
 8006e32:	88fb      	ldrh	r3, [r7, #6]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e02b      	b.n	8006e94 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d018      	beq.n	8006e82 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6e:	623b      	str	r3, [r7, #32]
 8006e70:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e72:	69f9      	ldr	r1, [r7, #28]
 8006e74:	6a3a      	ldr	r2, [r7, #32]
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1e6      	bne.n	8006e50 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e82:	88fb      	ldrh	r3, [r7, #6]
 8006e84:	461a      	mov	r2, r3
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 fec3 	bl	8007c14 <UART_Start_Receive_IT>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	e000      	b.n	8006e94 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006e92:	2302      	movs	r3, #2
  }
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3728      	adds	r7, #40	@ 0x28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b0ba      	sub	sp, #232	@ 0xe8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ec2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006ec6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006eca:	4013      	ands	r3, r2
 8006ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006ed0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d115      	bne.n	8006f04 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006edc:	f003 0320 	and.w	r3, r3, #32
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00f      	beq.n	8006f04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ee8:	f003 0320 	and.w	r3, r3, #32
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d009      	beq.n	8006f04 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 8297 	beq.w	8007428 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	4798      	blx	r3
      }
      return;
 8006f02:	e291      	b.n	8007428 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 8117 	beq.w	800713c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d106      	bne.n	8006f28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006f1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006f1e:	4b85      	ldr	r3, [pc, #532]	@ (8007134 <HAL_UART_IRQHandler+0x298>)
 8006f20:	4013      	ands	r3, r2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 810a 	beq.w	800713c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d011      	beq.n	8006f58 <HAL_UART_IRQHandler+0xbc>
 8006f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00b      	beq.n	8006f58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2201      	movs	r2, #1
 8006f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f4e:	f043 0201 	orr.w	r2, r3, #1
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d011      	beq.n	8006f88 <HAL_UART_IRQHandler+0xec>
 8006f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00b      	beq.n	8006f88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2202      	movs	r2, #2
 8006f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f7e:	f043 0204 	orr.w	r2, r3, #4
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d011      	beq.n	8006fb8 <HAL_UART_IRQHandler+0x11c>
 8006f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00b      	beq.n	8006fb8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2204      	movs	r2, #4
 8006fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fae:	f043 0202 	orr.w	r2, r3, #2
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fbc:	f003 0308 	and.w	r3, r3, #8
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d017      	beq.n	8006ff4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fc8:	f003 0320 	and.w	r3, r3, #32
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d105      	bne.n	8006fdc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fd4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00b      	beq.n	8006ff4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2208      	movs	r2, #8
 8006fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fea:	f043 0208 	orr.w	r2, r3, #8
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ff8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d012      	beq.n	8007026 <HAL_UART_IRQHandler+0x18a>
 8007000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007004:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00c      	beq.n	8007026 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007014:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800701c:	f043 0220 	orr.w	r2, r3, #32
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 81fd 	beq.w	800742c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007036:	f003 0320 	and.w	r3, r3, #32
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00d      	beq.n	800705a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800703e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007042:	f003 0320 	and.w	r3, r3, #32
 8007046:	2b00      	cmp	r3, #0
 8007048:	d007      	beq.n	800705a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007060:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800706e:	2b40      	cmp	r3, #64	@ 0x40
 8007070:	d005      	beq.n	800707e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007072:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007076:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800707a:	2b00      	cmp	r3, #0
 800707c:	d04f      	beq.n	800711e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fe8e 	bl	8007da0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708e:	2b40      	cmp	r3, #64	@ 0x40
 8007090:	d141      	bne.n	8007116 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3308      	adds	r3, #8
 8007098:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070a0:	e853 3f00 	ldrex	r3, [r3]
 80070a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80070a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3308      	adds	r3, #8
 80070ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80070be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80070c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80070ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80070d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1d9      	bne.n	8007092 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d013      	beq.n	800710e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070ea:	4a13      	ldr	r2, [pc, #76]	@ (8007138 <HAL_UART_IRQHandler+0x29c>)
 80070ec:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fb faa0 	bl	8002638 <HAL_DMA_Abort_IT>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d017      	beq.n	800712e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007108:	4610      	mov	r0, r2
 800710a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800710c:	e00f      	b.n	800712e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f9a0 	bl	8007454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007114:	e00b      	b.n	800712e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f99c 	bl	8007454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800711c:	e007      	b.n	800712e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f998 	bl	8007454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800712c:	e17e      	b.n	800742c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800712e:	bf00      	nop
    return;
 8007130:	e17c      	b.n	800742c <HAL_UART_IRQHandler+0x590>
 8007132:	bf00      	nop
 8007134:	04000120 	.word	0x04000120
 8007138:	08007e69 	.word	0x08007e69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007140:	2b01      	cmp	r3, #1
 8007142:	f040 814c 	bne.w	80073de <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800714a:	f003 0310 	and.w	r3, r3, #16
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 8145 	beq.w	80073de <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007158:	f003 0310 	and.w	r3, r3, #16
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 813e 	beq.w	80073de <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2210      	movs	r2, #16
 8007168:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007174:	2b40      	cmp	r3, #64	@ 0x40
 8007176:	f040 80b6 	bne.w	80072e6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007186:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 8150 	beq.w	8007430 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800719a:	429a      	cmp	r2, r3
 800719c:	f080 8148 	bcs.w	8007430 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071b4:	f000 8086 	beq.w	80072c4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071c4:	e853 3f00 	ldrex	r3, [r3]
 80071c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80071cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80071d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	461a      	mov	r2, r3
 80071de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80071e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80071ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80071fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1da      	bne.n	80071b8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007212:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007214:	f023 0301 	bic.w	r3, r3, #1
 8007218:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3308      	adds	r3, #8
 8007222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007226:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800722a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800722e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007232:	e841 2300 	strex	r3, r2, [r1]
 8007236:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007238:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1e1      	bne.n	8007202 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3308      	adds	r3, #8
 8007244:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007246:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800724e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007250:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007254:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	3308      	adds	r3, #8
 800725e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007262:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007264:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007268:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007270:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e3      	bne.n	800723e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2220      	movs	r2, #32
 800727a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800728c:	e853 3f00 	ldrex	r3, [r3]
 8007290:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007294:	f023 0310 	bic.w	r3, r3, #16
 8007298:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	461a      	mov	r2, r3
 80072a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072ae:	e841 2300 	strex	r3, r2, [r1]
 80072b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1e4      	bne.n	8007284 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fb f94a 	bl	8002558 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	b29b      	uxth	r3, r3
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f8c2 	bl	8007468 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072e4:	e0a4      	b.n	8007430 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007300:	b29b      	uxth	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 8096 	beq.w	8007434 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007308:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 8091 	beq.w	8007434 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731a:	e853 3f00 	ldrex	r3, [r3]
 800731e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007322:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007326:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007334:	647b      	str	r3, [r7, #68]	@ 0x44
 8007336:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007338:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800733a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800733c:	e841 2300 	strex	r3, r2, [r1]
 8007340:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e4      	bne.n	8007312 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3308      	adds	r3, #8
 800734e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007352:	e853 3f00 	ldrex	r3, [r3]
 8007356:	623b      	str	r3, [r7, #32]
   return(result);
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	f023 0301 	bic.w	r3, r3, #1
 800735e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3308      	adds	r3, #8
 8007368:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800736c:	633a      	str	r2, [r7, #48]	@ 0x30
 800736e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007374:	e841 2300 	strex	r3, r2, [r1]
 8007378:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800737a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e3      	bne.n	8007348 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2220      	movs	r2, #32
 8007384:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f023 0310 	bic.w	r3, r3, #16
 80073a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	461a      	mov	r2, r3
 80073b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80073b6:	61fb      	str	r3, [r7, #28]
 80073b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ba:	69b9      	ldr	r1, [r7, #24]
 80073bc:	69fa      	ldr	r2, [r7, #28]
 80073be:	e841 2300 	strex	r3, r2, [r1]
 80073c2:	617b      	str	r3, [r7, #20]
   return(result);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e4      	bne.n	8007394 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2202      	movs	r2, #2
 80073ce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f846 	bl	8007468 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073dc:	e02a      	b.n	8007434 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00e      	beq.n	8007408 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80073ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d008      	beq.n	8007408 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d01c      	beq.n	8007438 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	4798      	blx	r3
    }
    return;
 8007406:	e017      	b.n	8007438 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800740c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007410:	2b00      	cmp	r3, #0
 8007412:	d012      	beq.n	800743a <HAL_UART_IRQHandler+0x59e>
 8007414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00c      	beq.n	800743a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fd37 	bl	8007e94 <UART_EndTransmit_IT>
    return;
 8007426:	e008      	b.n	800743a <HAL_UART_IRQHandler+0x59e>
      return;
 8007428:	bf00      	nop
 800742a:	e006      	b.n	800743a <HAL_UART_IRQHandler+0x59e>
    return;
 800742c:	bf00      	nop
 800742e:	e004      	b.n	800743a <HAL_UART_IRQHandler+0x59e>
      return;
 8007430:	bf00      	nop
 8007432:	e002      	b.n	800743a <HAL_UART_IRQHandler+0x59e>
      return;
 8007434:	bf00      	nop
 8007436:	e000      	b.n	800743a <HAL_UART_IRQHandler+0x59e>
    return;
 8007438:	bf00      	nop
  }

}
 800743a:	37e8      	adds	r7, #232	@ 0xe8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	431a      	orrs	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	431a      	orrs	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	4ba6      	ldr	r3, [pc, #664]	@ (8007744 <UART_SetConfig+0x2c4>)
 80074ac:	4013      	ands	r3, r2
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	6812      	ldr	r2, [r2, #0]
 80074b2:	6979      	ldr	r1, [r7, #20]
 80074b4:	430b      	orrs	r3, r1
 80074b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68da      	ldr	r2, [r3, #12]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a1b      	ldr	r3, [r3, #32]
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	4313      	orrs	r3, r2
 80074dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a94      	ldr	r2, [pc, #592]	@ (8007748 <UART_SetConfig+0x2c8>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d120      	bne.n	800753e <UART_SetConfig+0xbe>
 80074fc:	4b93      	ldr	r3, [pc, #588]	@ (800774c <UART_SetConfig+0x2cc>)
 80074fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007502:	f003 0303 	and.w	r3, r3, #3
 8007506:	2b03      	cmp	r3, #3
 8007508:	d816      	bhi.n	8007538 <UART_SetConfig+0xb8>
 800750a:	a201      	add	r2, pc, #4	@ (adr r2, 8007510 <UART_SetConfig+0x90>)
 800750c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007510:	08007521 	.word	0x08007521
 8007514:	0800752d 	.word	0x0800752d
 8007518:	08007527 	.word	0x08007527
 800751c:	08007533 	.word	0x08007533
 8007520:	2301      	movs	r3, #1
 8007522:	77fb      	strb	r3, [r7, #31]
 8007524:	e150      	b.n	80077c8 <UART_SetConfig+0x348>
 8007526:	2302      	movs	r3, #2
 8007528:	77fb      	strb	r3, [r7, #31]
 800752a:	e14d      	b.n	80077c8 <UART_SetConfig+0x348>
 800752c:	2304      	movs	r3, #4
 800752e:	77fb      	strb	r3, [r7, #31]
 8007530:	e14a      	b.n	80077c8 <UART_SetConfig+0x348>
 8007532:	2308      	movs	r3, #8
 8007534:	77fb      	strb	r3, [r7, #31]
 8007536:	e147      	b.n	80077c8 <UART_SetConfig+0x348>
 8007538:	2310      	movs	r3, #16
 800753a:	77fb      	strb	r3, [r7, #31]
 800753c:	e144      	b.n	80077c8 <UART_SetConfig+0x348>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a83      	ldr	r2, [pc, #524]	@ (8007750 <UART_SetConfig+0x2d0>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d132      	bne.n	80075ae <UART_SetConfig+0x12e>
 8007548:	4b80      	ldr	r3, [pc, #512]	@ (800774c <UART_SetConfig+0x2cc>)
 800754a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800754e:	f003 030c 	and.w	r3, r3, #12
 8007552:	2b0c      	cmp	r3, #12
 8007554:	d828      	bhi.n	80075a8 <UART_SetConfig+0x128>
 8007556:	a201      	add	r2, pc, #4	@ (adr r2, 800755c <UART_SetConfig+0xdc>)
 8007558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755c:	08007591 	.word	0x08007591
 8007560:	080075a9 	.word	0x080075a9
 8007564:	080075a9 	.word	0x080075a9
 8007568:	080075a9 	.word	0x080075a9
 800756c:	0800759d 	.word	0x0800759d
 8007570:	080075a9 	.word	0x080075a9
 8007574:	080075a9 	.word	0x080075a9
 8007578:	080075a9 	.word	0x080075a9
 800757c:	08007597 	.word	0x08007597
 8007580:	080075a9 	.word	0x080075a9
 8007584:	080075a9 	.word	0x080075a9
 8007588:	080075a9 	.word	0x080075a9
 800758c:	080075a3 	.word	0x080075a3
 8007590:	2300      	movs	r3, #0
 8007592:	77fb      	strb	r3, [r7, #31]
 8007594:	e118      	b.n	80077c8 <UART_SetConfig+0x348>
 8007596:	2302      	movs	r3, #2
 8007598:	77fb      	strb	r3, [r7, #31]
 800759a:	e115      	b.n	80077c8 <UART_SetConfig+0x348>
 800759c:	2304      	movs	r3, #4
 800759e:	77fb      	strb	r3, [r7, #31]
 80075a0:	e112      	b.n	80077c8 <UART_SetConfig+0x348>
 80075a2:	2308      	movs	r3, #8
 80075a4:	77fb      	strb	r3, [r7, #31]
 80075a6:	e10f      	b.n	80077c8 <UART_SetConfig+0x348>
 80075a8:	2310      	movs	r3, #16
 80075aa:	77fb      	strb	r3, [r7, #31]
 80075ac:	e10c      	b.n	80077c8 <UART_SetConfig+0x348>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a68      	ldr	r2, [pc, #416]	@ (8007754 <UART_SetConfig+0x2d4>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d120      	bne.n	80075fa <UART_SetConfig+0x17a>
 80075b8:	4b64      	ldr	r3, [pc, #400]	@ (800774c <UART_SetConfig+0x2cc>)
 80075ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075be:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80075c2:	2b30      	cmp	r3, #48	@ 0x30
 80075c4:	d013      	beq.n	80075ee <UART_SetConfig+0x16e>
 80075c6:	2b30      	cmp	r3, #48	@ 0x30
 80075c8:	d814      	bhi.n	80075f4 <UART_SetConfig+0x174>
 80075ca:	2b20      	cmp	r3, #32
 80075cc:	d009      	beq.n	80075e2 <UART_SetConfig+0x162>
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d810      	bhi.n	80075f4 <UART_SetConfig+0x174>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <UART_SetConfig+0x15c>
 80075d6:	2b10      	cmp	r3, #16
 80075d8:	d006      	beq.n	80075e8 <UART_SetConfig+0x168>
 80075da:	e00b      	b.n	80075f4 <UART_SetConfig+0x174>
 80075dc:	2300      	movs	r3, #0
 80075de:	77fb      	strb	r3, [r7, #31]
 80075e0:	e0f2      	b.n	80077c8 <UART_SetConfig+0x348>
 80075e2:	2302      	movs	r3, #2
 80075e4:	77fb      	strb	r3, [r7, #31]
 80075e6:	e0ef      	b.n	80077c8 <UART_SetConfig+0x348>
 80075e8:	2304      	movs	r3, #4
 80075ea:	77fb      	strb	r3, [r7, #31]
 80075ec:	e0ec      	b.n	80077c8 <UART_SetConfig+0x348>
 80075ee:	2308      	movs	r3, #8
 80075f0:	77fb      	strb	r3, [r7, #31]
 80075f2:	e0e9      	b.n	80077c8 <UART_SetConfig+0x348>
 80075f4:	2310      	movs	r3, #16
 80075f6:	77fb      	strb	r3, [r7, #31]
 80075f8:	e0e6      	b.n	80077c8 <UART_SetConfig+0x348>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a56      	ldr	r2, [pc, #344]	@ (8007758 <UART_SetConfig+0x2d8>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d120      	bne.n	8007646 <UART_SetConfig+0x1c6>
 8007604:	4b51      	ldr	r3, [pc, #324]	@ (800774c <UART_SetConfig+0x2cc>)
 8007606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800760a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800760e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007610:	d013      	beq.n	800763a <UART_SetConfig+0x1ba>
 8007612:	2bc0      	cmp	r3, #192	@ 0xc0
 8007614:	d814      	bhi.n	8007640 <UART_SetConfig+0x1c0>
 8007616:	2b80      	cmp	r3, #128	@ 0x80
 8007618:	d009      	beq.n	800762e <UART_SetConfig+0x1ae>
 800761a:	2b80      	cmp	r3, #128	@ 0x80
 800761c:	d810      	bhi.n	8007640 <UART_SetConfig+0x1c0>
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <UART_SetConfig+0x1a8>
 8007622:	2b40      	cmp	r3, #64	@ 0x40
 8007624:	d006      	beq.n	8007634 <UART_SetConfig+0x1b4>
 8007626:	e00b      	b.n	8007640 <UART_SetConfig+0x1c0>
 8007628:	2300      	movs	r3, #0
 800762a:	77fb      	strb	r3, [r7, #31]
 800762c:	e0cc      	b.n	80077c8 <UART_SetConfig+0x348>
 800762e:	2302      	movs	r3, #2
 8007630:	77fb      	strb	r3, [r7, #31]
 8007632:	e0c9      	b.n	80077c8 <UART_SetConfig+0x348>
 8007634:	2304      	movs	r3, #4
 8007636:	77fb      	strb	r3, [r7, #31]
 8007638:	e0c6      	b.n	80077c8 <UART_SetConfig+0x348>
 800763a:	2308      	movs	r3, #8
 800763c:	77fb      	strb	r3, [r7, #31]
 800763e:	e0c3      	b.n	80077c8 <UART_SetConfig+0x348>
 8007640:	2310      	movs	r3, #16
 8007642:	77fb      	strb	r3, [r7, #31]
 8007644:	e0c0      	b.n	80077c8 <UART_SetConfig+0x348>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a44      	ldr	r2, [pc, #272]	@ (800775c <UART_SetConfig+0x2dc>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d125      	bne.n	800769c <UART_SetConfig+0x21c>
 8007650:	4b3e      	ldr	r3, [pc, #248]	@ (800774c <UART_SetConfig+0x2cc>)
 8007652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800765a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800765e:	d017      	beq.n	8007690 <UART_SetConfig+0x210>
 8007660:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007664:	d817      	bhi.n	8007696 <UART_SetConfig+0x216>
 8007666:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800766a:	d00b      	beq.n	8007684 <UART_SetConfig+0x204>
 800766c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007670:	d811      	bhi.n	8007696 <UART_SetConfig+0x216>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <UART_SetConfig+0x1fe>
 8007676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800767a:	d006      	beq.n	800768a <UART_SetConfig+0x20a>
 800767c:	e00b      	b.n	8007696 <UART_SetConfig+0x216>
 800767e:	2300      	movs	r3, #0
 8007680:	77fb      	strb	r3, [r7, #31]
 8007682:	e0a1      	b.n	80077c8 <UART_SetConfig+0x348>
 8007684:	2302      	movs	r3, #2
 8007686:	77fb      	strb	r3, [r7, #31]
 8007688:	e09e      	b.n	80077c8 <UART_SetConfig+0x348>
 800768a:	2304      	movs	r3, #4
 800768c:	77fb      	strb	r3, [r7, #31]
 800768e:	e09b      	b.n	80077c8 <UART_SetConfig+0x348>
 8007690:	2308      	movs	r3, #8
 8007692:	77fb      	strb	r3, [r7, #31]
 8007694:	e098      	b.n	80077c8 <UART_SetConfig+0x348>
 8007696:	2310      	movs	r3, #16
 8007698:	77fb      	strb	r3, [r7, #31]
 800769a:	e095      	b.n	80077c8 <UART_SetConfig+0x348>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a2f      	ldr	r2, [pc, #188]	@ (8007760 <UART_SetConfig+0x2e0>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d125      	bne.n	80076f2 <UART_SetConfig+0x272>
 80076a6:	4b29      	ldr	r3, [pc, #164]	@ (800774c <UART_SetConfig+0x2cc>)
 80076a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80076b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076b4:	d017      	beq.n	80076e6 <UART_SetConfig+0x266>
 80076b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076ba:	d817      	bhi.n	80076ec <UART_SetConfig+0x26c>
 80076bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076c0:	d00b      	beq.n	80076da <UART_SetConfig+0x25a>
 80076c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076c6:	d811      	bhi.n	80076ec <UART_SetConfig+0x26c>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <UART_SetConfig+0x254>
 80076cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076d0:	d006      	beq.n	80076e0 <UART_SetConfig+0x260>
 80076d2:	e00b      	b.n	80076ec <UART_SetConfig+0x26c>
 80076d4:	2301      	movs	r3, #1
 80076d6:	77fb      	strb	r3, [r7, #31]
 80076d8:	e076      	b.n	80077c8 <UART_SetConfig+0x348>
 80076da:	2302      	movs	r3, #2
 80076dc:	77fb      	strb	r3, [r7, #31]
 80076de:	e073      	b.n	80077c8 <UART_SetConfig+0x348>
 80076e0:	2304      	movs	r3, #4
 80076e2:	77fb      	strb	r3, [r7, #31]
 80076e4:	e070      	b.n	80077c8 <UART_SetConfig+0x348>
 80076e6:	2308      	movs	r3, #8
 80076e8:	77fb      	strb	r3, [r7, #31]
 80076ea:	e06d      	b.n	80077c8 <UART_SetConfig+0x348>
 80076ec:	2310      	movs	r3, #16
 80076ee:	77fb      	strb	r3, [r7, #31]
 80076f0:	e06a      	b.n	80077c8 <UART_SetConfig+0x348>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a1b      	ldr	r2, [pc, #108]	@ (8007764 <UART_SetConfig+0x2e4>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d138      	bne.n	800776e <UART_SetConfig+0x2ee>
 80076fc:	4b13      	ldr	r3, [pc, #76]	@ (800774c <UART_SetConfig+0x2cc>)
 80076fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007702:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007706:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800770a:	d017      	beq.n	800773c <UART_SetConfig+0x2bc>
 800770c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007710:	d82a      	bhi.n	8007768 <UART_SetConfig+0x2e8>
 8007712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007716:	d00b      	beq.n	8007730 <UART_SetConfig+0x2b0>
 8007718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800771c:	d824      	bhi.n	8007768 <UART_SetConfig+0x2e8>
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <UART_SetConfig+0x2aa>
 8007722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007726:	d006      	beq.n	8007736 <UART_SetConfig+0x2b6>
 8007728:	e01e      	b.n	8007768 <UART_SetConfig+0x2e8>
 800772a:	2300      	movs	r3, #0
 800772c:	77fb      	strb	r3, [r7, #31]
 800772e:	e04b      	b.n	80077c8 <UART_SetConfig+0x348>
 8007730:	2302      	movs	r3, #2
 8007732:	77fb      	strb	r3, [r7, #31]
 8007734:	e048      	b.n	80077c8 <UART_SetConfig+0x348>
 8007736:	2304      	movs	r3, #4
 8007738:	77fb      	strb	r3, [r7, #31]
 800773a:	e045      	b.n	80077c8 <UART_SetConfig+0x348>
 800773c:	2308      	movs	r3, #8
 800773e:	77fb      	strb	r3, [r7, #31]
 8007740:	e042      	b.n	80077c8 <UART_SetConfig+0x348>
 8007742:	bf00      	nop
 8007744:	efff69f3 	.word	0xefff69f3
 8007748:	40011000 	.word	0x40011000
 800774c:	40023800 	.word	0x40023800
 8007750:	40004400 	.word	0x40004400
 8007754:	40004800 	.word	0x40004800
 8007758:	40004c00 	.word	0x40004c00
 800775c:	40005000 	.word	0x40005000
 8007760:	40011400 	.word	0x40011400
 8007764:	40007800 	.word	0x40007800
 8007768:	2310      	movs	r3, #16
 800776a:	77fb      	strb	r3, [r7, #31]
 800776c:	e02c      	b.n	80077c8 <UART_SetConfig+0x348>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a72      	ldr	r2, [pc, #456]	@ (800793c <UART_SetConfig+0x4bc>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d125      	bne.n	80077c4 <UART_SetConfig+0x344>
 8007778:	4b71      	ldr	r3, [pc, #452]	@ (8007940 <UART_SetConfig+0x4c0>)
 800777a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800777e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007782:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007786:	d017      	beq.n	80077b8 <UART_SetConfig+0x338>
 8007788:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800778c:	d817      	bhi.n	80077be <UART_SetConfig+0x33e>
 800778e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007792:	d00b      	beq.n	80077ac <UART_SetConfig+0x32c>
 8007794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007798:	d811      	bhi.n	80077be <UART_SetConfig+0x33e>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <UART_SetConfig+0x326>
 800779e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077a2:	d006      	beq.n	80077b2 <UART_SetConfig+0x332>
 80077a4:	e00b      	b.n	80077be <UART_SetConfig+0x33e>
 80077a6:	2300      	movs	r3, #0
 80077a8:	77fb      	strb	r3, [r7, #31]
 80077aa:	e00d      	b.n	80077c8 <UART_SetConfig+0x348>
 80077ac:	2302      	movs	r3, #2
 80077ae:	77fb      	strb	r3, [r7, #31]
 80077b0:	e00a      	b.n	80077c8 <UART_SetConfig+0x348>
 80077b2:	2304      	movs	r3, #4
 80077b4:	77fb      	strb	r3, [r7, #31]
 80077b6:	e007      	b.n	80077c8 <UART_SetConfig+0x348>
 80077b8:	2308      	movs	r3, #8
 80077ba:	77fb      	strb	r3, [r7, #31]
 80077bc:	e004      	b.n	80077c8 <UART_SetConfig+0x348>
 80077be:	2310      	movs	r3, #16
 80077c0:	77fb      	strb	r3, [r7, #31]
 80077c2:	e001      	b.n	80077c8 <UART_SetConfig+0x348>
 80077c4:	2310      	movs	r3, #16
 80077c6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077d0:	d15b      	bne.n	800788a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80077d2:	7ffb      	ldrb	r3, [r7, #31]
 80077d4:	2b08      	cmp	r3, #8
 80077d6:	d828      	bhi.n	800782a <UART_SetConfig+0x3aa>
 80077d8:	a201      	add	r2, pc, #4	@ (adr r2, 80077e0 <UART_SetConfig+0x360>)
 80077da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077de:	bf00      	nop
 80077e0:	08007805 	.word	0x08007805
 80077e4:	0800780d 	.word	0x0800780d
 80077e8:	08007815 	.word	0x08007815
 80077ec:	0800782b 	.word	0x0800782b
 80077f0:	0800781b 	.word	0x0800781b
 80077f4:	0800782b 	.word	0x0800782b
 80077f8:	0800782b 	.word	0x0800782b
 80077fc:	0800782b 	.word	0x0800782b
 8007800:	08007823 	.word	0x08007823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007804:	f7fe fb14 	bl	8005e30 <HAL_RCC_GetPCLK1Freq>
 8007808:	61b8      	str	r0, [r7, #24]
        break;
 800780a:	e013      	b.n	8007834 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800780c:	f7fe fb24 	bl	8005e58 <HAL_RCC_GetPCLK2Freq>
 8007810:	61b8      	str	r0, [r7, #24]
        break;
 8007812:	e00f      	b.n	8007834 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007814:	4b4b      	ldr	r3, [pc, #300]	@ (8007944 <UART_SetConfig+0x4c4>)
 8007816:	61bb      	str	r3, [r7, #24]
        break;
 8007818:	e00c      	b.n	8007834 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800781a:	f7fe fa37 	bl	8005c8c <HAL_RCC_GetSysClockFreq>
 800781e:	61b8      	str	r0, [r7, #24]
        break;
 8007820:	e008      	b.n	8007834 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007826:	61bb      	str	r3, [r7, #24]
        break;
 8007828:	e004      	b.n	8007834 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	77bb      	strb	r3, [r7, #30]
        break;
 8007832:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d074      	beq.n	8007924 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	005a      	lsls	r2, r3, #1
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	085b      	lsrs	r3, r3, #1
 8007844:	441a      	add	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	fbb2 f3f3 	udiv	r3, r2, r3
 800784e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	2b0f      	cmp	r3, #15
 8007854:	d916      	bls.n	8007884 <UART_SetConfig+0x404>
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800785c:	d212      	bcs.n	8007884 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	b29b      	uxth	r3, r3
 8007862:	f023 030f 	bic.w	r3, r3, #15
 8007866:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	085b      	lsrs	r3, r3, #1
 800786c:	b29b      	uxth	r3, r3
 800786e:	f003 0307 	and.w	r3, r3, #7
 8007872:	b29a      	uxth	r2, r3
 8007874:	89fb      	ldrh	r3, [r7, #14]
 8007876:	4313      	orrs	r3, r2
 8007878:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	89fa      	ldrh	r2, [r7, #14]
 8007880:	60da      	str	r2, [r3, #12]
 8007882:	e04f      	b.n	8007924 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	77bb      	strb	r3, [r7, #30]
 8007888:	e04c      	b.n	8007924 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800788a:	7ffb      	ldrb	r3, [r7, #31]
 800788c:	2b08      	cmp	r3, #8
 800788e:	d828      	bhi.n	80078e2 <UART_SetConfig+0x462>
 8007890:	a201      	add	r2, pc, #4	@ (adr r2, 8007898 <UART_SetConfig+0x418>)
 8007892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007896:	bf00      	nop
 8007898:	080078bd 	.word	0x080078bd
 800789c:	080078c5 	.word	0x080078c5
 80078a0:	080078cd 	.word	0x080078cd
 80078a4:	080078e3 	.word	0x080078e3
 80078a8:	080078d3 	.word	0x080078d3
 80078ac:	080078e3 	.word	0x080078e3
 80078b0:	080078e3 	.word	0x080078e3
 80078b4:	080078e3 	.word	0x080078e3
 80078b8:	080078db 	.word	0x080078db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078bc:	f7fe fab8 	bl	8005e30 <HAL_RCC_GetPCLK1Freq>
 80078c0:	61b8      	str	r0, [r7, #24]
        break;
 80078c2:	e013      	b.n	80078ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078c4:	f7fe fac8 	bl	8005e58 <HAL_RCC_GetPCLK2Freq>
 80078c8:	61b8      	str	r0, [r7, #24]
        break;
 80078ca:	e00f      	b.n	80078ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007944 <UART_SetConfig+0x4c4>)
 80078ce:	61bb      	str	r3, [r7, #24]
        break;
 80078d0:	e00c      	b.n	80078ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078d2:	f7fe f9db 	bl	8005c8c <HAL_RCC_GetSysClockFreq>
 80078d6:	61b8      	str	r0, [r7, #24]
        break;
 80078d8:	e008      	b.n	80078ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078de:	61bb      	str	r3, [r7, #24]
        break;
 80078e0:	e004      	b.n	80078ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	77bb      	strb	r3, [r7, #30]
        break;
 80078ea:	bf00      	nop
    }

    if (pclk != 0U)
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d018      	beq.n	8007924 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	085a      	lsrs	r2, r3, #1
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	441a      	add	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	fbb2 f3f3 	udiv	r3, r2, r3
 8007904:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	2b0f      	cmp	r3, #15
 800790a:	d909      	bls.n	8007920 <UART_SetConfig+0x4a0>
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007912:	d205      	bcs.n	8007920 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	b29a      	uxth	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	60da      	str	r2, [r3, #12]
 800791e:	e001      	b.n	8007924 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007930:	7fbb      	ldrb	r3, [r7, #30]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3720      	adds	r7, #32
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	40007c00 	.word	0x40007c00
 8007940:	40023800 	.word	0x40023800
 8007944:	00f42400 	.word	0x00f42400

08007948 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007954:	f003 0308 	and.w	r3, r3, #8
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00a      	beq.n	8007972 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	430a      	orrs	r2, r1
 8007992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00a      	beq.n	80079b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ba:	f003 0304 	and.w	r3, r3, #4
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00a      	beq.n	80079d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079dc:	f003 0310 	and.w	r3, r3, #16
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00a      	beq.n	80079fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d01a      	beq.n	8007a5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a46:	d10a      	bne.n	8007a5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	605a      	str	r2, [r3, #4]
  }
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b08c      	sub	sp, #48	@ 0x30
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a9c:	f7fa fb3e 	bl	800211c <HAL_GetTick>
 8007aa0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0308 	and.w	r3, r3, #8
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d12e      	bne.n	8007b0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ab0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f83b 	bl	8007b3a <UART_WaitOnFlagUntilTimeout>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d021      	beq.n	8007b0e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	e853 3f00 	ldrex	r3, [r3]
 8007ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ade:	623b      	str	r3, [r7, #32]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	61fb      	str	r3, [r7, #28]
 8007aea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aec:	69b9      	ldr	r1, [r7, #24]
 8007aee:	69fa      	ldr	r2, [r7, #28]
 8007af0:	e841 2300 	strex	r3, r2, [r1]
 8007af4:	617b      	str	r3, [r7, #20]
   return(result);
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1e6      	bne.n	8007aca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2220      	movs	r2, #32
 8007b00:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e011      	b.n	8007b32 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2220      	movs	r2, #32
 8007b12:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3728      	adds	r7, #40	@ 0x28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b084      	sub	sp, #16
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	60f8      	str	r0, [r7, #12]
 8007b42:	60b9      	str	r1, [r7, #8]
 8007b44:	603b      	str	r3, [r7, #0]
 8007b46:	4613      	mov	r3, r2
 8007b48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b4a:	e04f      	b.n	8007bec <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b52:	d04b      	beq.n	8007bec <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b54:	f7fa fae2 	bl	800211c <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	69ba      	ldr	r2, [r7, #24]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d302      	bcc.n	8007b6a <UART_WaitOnFlagUntilTimeout+0x30>
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e04e      	b.n	8007c0c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0304 	and.w	r3, r3, #4
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d037      	beq.n	8007bec <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b80      	cmp	r3, #128	@ 0x80
 8007b80:	d034      	beq.n	8007bec <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b40      	cmp	r3, #64	@ 0x40
 8007b86:	d031      	beq.n	8007bec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	69db      	ldr	r3, [r3, #28]
 8007b8e:	f003 0308 	and.w	r3, r3, #8
 8007b92:	2b08      	cmp	r3, #8
 8007b94:	d110      	bne.n	8007bb8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2208      	movs	r2, #8
 8007b9c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 f8fe 	bl	8007da0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2208      	movs	r2, #8
 8007ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e029      	b.n	8007c0c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bc6:	d111      	bne.n	8007bec <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bd0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 f8e4 	bl	8007da0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e00f      	b.n	8007c0c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	69da      	ldr	r2, [r3, #28]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	bf0c      	ite	eq
 8007bfc:	2301      	moveq	r3, #1
 8007bfe:	2300      	movne	r3, #0
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	461a      	mov	r2, r3
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d0a0      	beq.n	8007b4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b097      	sub	sp, #92	@ 0x5c
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	88fa      	ldrh	r2, [r7, #6]
 8007c2c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	88fa      	ldrh	r2, [r7, #6]
 8007c34:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c46:	d10e      	bne.n	8007c66 <UART_Start_Receive_IT+0x52>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d105      	bne.n	8007c5c <UART_Start_Receive_IT+0x48>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007c56:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c5a:	e02d      	b.n	8007cb8 <UART_Start_Receive_IT+0xa4>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	22ff      	movs	r2, #255	@ 0xff
 8007c60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c64:	e028      	b.n	8007cb8 <UART_Start_Receive_IT+0xa4>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10d      	bne.n	8007c8a <UART_Start_Receive_IT+0x76>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d104      	bne.n	8007c80 <UART_Start_Receive_IT+0x6c>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	22ff      	movs	r2, #255	@ 0xff
 8007c7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c7e:	e01b      	b.n	8007cb8 <UART_Start_Receive_IT+0xa4>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	227f      	movs	r2, #127	@ 0x7f
 8007c84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c88:	e016      	b.n	8007cb8 <UART_Start_Receive_IT+0xa4>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c92:	d10d      	bne.n	8007cb0 <UART_Start_Receive_IT+0x9c>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d104      	bne.n	8007ca6 <UART_Start_Receive_IT+0x92>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	227f      	movs	r2, #127	@ 0x7f
 8007ca0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007ca4:	e008      	b.n	8007cb8 <UART_Start_Receive_IT+0xa4>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	223f      	movs	r2, #63	@ 0x3f
 8007caa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007cae:	e003      	b.n	8007cb8 <UART_Start_Receive_IT+0xa4>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2222      	movs	r2, #34	@ 0x22
 8007cc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3308      	adds	r3, #8
 8007cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cd2:	e853 3f00 	ldrex	r3, [r3]
 8007cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cda:	f043 0301 	orr.w	r3, r3, #1
 8007cde:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007ce8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007cea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007cee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e5      	bne.n	8007cc8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d04:	d107      	bne.n	8007d16 <UART_Start_Receive_IT+0x102>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d103      	bne.n	8007d16 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4a21      	ldr	r2, [pc, #132]	@ (8007d98 <UART_Start_Receive_IT+0x184>)
 8007d12:	669a      	str	r2, [r3, #104]	@ 0x68
 8007d14:	e002      	b.n	8007d1c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	4a20      	ldr	r2, [pc, #128]	@ (8007d9c <UART_Start_Receive_IT+0x188>)
 8007d1a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d019      	beq.n	8007d58 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d34:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d44:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e6      	bne.n	8007d24 <UART_Start_Receive_IT+0x110>
 8007d56:	e018      	b.n	8007d8a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	e853 3f00 	ldrex	r3, [r3]
 8007d64:	613b      	str	r3, [r7, #16]
   return(result);
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f043 0320 	orr.w	r3, r3, #32
 8007d6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d76:	623b      	str	r3, [r7, #32]
 8007d78:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7a:	69f9      	ldr	r1, [r7, #28]
 8007d7c:	6a3a      	ldr	r2, [r7, #32]
 8007d7e:	e841 2300 	strex	r3, r2, [r1]
 8007d82:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1e6      	bne.n	8007d58 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	375c      	adds	r7, #92	@ 0x5c
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	08008091 	.word	0x08008091
 8007d9c:	08007ee9 	.word	0x08007ee9

08007da0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b095      	sub	sp, #84	@ 0x54
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007dcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e6      	bne.n	8007da8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3308      	adds	r3, #8
 8007de0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	e853 3f00 	ldrex	r3, [r3]
 8007de8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	f023 0301 	bic.w	r3, r3, #1
 8007df0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3308      	adds	r3, #8
 8007df8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e5      	bne.n	8007dda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d118      	bne.n	8007e48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f023 0310 	bic.w	r3, r3, #16
 8007e2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	461a      	mov	r2, r3
 8007e32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e34:	61bb      	str	r3, [r7, #24]
 8007e36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	6979      	ldr	r1, [r7, #20]
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	e841 2300 	strex	r3, r2, [r1]
 8007e40:	613b      	str	r3, [r7, #16]
   return(result);
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e6      	bne.n	8007e16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007e5c:	bf00      	nop
 8007e5e:	3754      	adds	r7, #84	@ 0x54
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f7ff fae4 	bl	8007454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007eb0:	61fb      	str	r3, [r7, #28]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	61bb      	str	r3, [r7, #24]
 8007ebc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	6979      	ldr	r1, [r7, #20]
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e6      	bne.n	8007e9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2220      	movs	r2, #32
 8007ed2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7ff fab0 	bl	8007440 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ee0:	bf00      	nop
 8007ee2:	3720      	adds	r7, #32
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b09c      	sub	sp, #112	@ 0x70
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ef6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f00:	2b22      	cmp	r3, #34	@ 0x22
 8007f02:	f040 80b9 	bne.w	8008078 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f10:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007f14:	b2d9      	uxtb	r1, r3
 8007f16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f20:	400a      	ands	r2, r1
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f2a:	1c5a      	adds	r2, r3, #1
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f040 809c 	bne.w	8008088 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e6      	bne.n	8007f50 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3308      	adds	r3, #8
 8007f88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f94:	f023 0301 	bic.w	r3, r3, #1
 8007f98:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007fa2:	647a      	str	r2, [r7, #68]	@ 0x44
 8007fa4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007fa8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007faa:	e841 2300 	strex	r3, r2, [r1]
 8007fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1e5      	bne.n	8007f82 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d018      	beq.n	800800a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007fec:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ff6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ff8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ffc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e6      	bne.n	8007fd8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800800e:	2b01      	cmp	r3, #1
 8008010:	d12e      	bne.n	8008070 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	e853 3f00 	ldrex	r3, [r3]
 8008024:	60fb      	str	r3, [r7, #12]
   return(result);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f023 0310 	bic.w	r3, r3, #16
 800802c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008036:	61fb      	str	r3, [r7, #28]
 8008038:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803a:	69b9      	ldr	r1, [r7, #24]
 800803c:	69fa      	ldr	r2, [r7, #28]
 800803e:	e841 2300 	strex	r3, r2, [r1]
 8008042:	617b      	str	r3, [r7, #20]
   return(result);
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1e6      	bne.n	8008018 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	69db      	ldr	r3, [r3, #28]
 8008050:	f003 0310 	and.w	r3, r3, #16
 8008054:	2b10      	cmp	r3, #16
 8008056:	d103      	bne.n	8008060 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2210      	movs	r2, #16
 800805e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7ff f9fd 	bl	8007468 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800806e:	e00b      	b.n	8008088 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7f8 fa8f 	bl	8000594 <HAL_UART_RxCpltCallback>
}
 8008076:	e007      	b.n	8008088 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699a      	ldr	r2, [r3, #24]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0208 	orr.w	r2, r2, #8
 8008086:	619a      	str	r2, [r3, #24]
}
 8008088:	bf00      	nop
 800808a:	3770      	adds	r7, #112	@ 0x70
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b09c      	sub	sp, #112	@ 0x70
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800809e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080a8:	2b22      	cmp	r3, #34	@ 0x22
 80080aa:	f040 80b9 	bne.w	8008220 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80080be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80080c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80080c6:	4013      	ands	r3, r2
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080d2:	1c9a      	adds	r2, r3, #2
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80080de:	b29b      	uxth	r3, r3
 80080e0:	3b01      	subs	r3, #1
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f040 809c 	bne.w	8008230 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008100:	e853 3f00 	ldrex	r3, [r3]
 8008104:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800810c:	667b      	str	r3, [r7, #100]	@ 0x64
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008116:	657b      	str	r3, [r7, #84]	@ 0x54
 8008118:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800811c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800811e:	e841 2300 	strex	r3, r2, [r1]
 8008122:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1e6      	bne.n	80080f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3308      	adds	r3, #8
 8008130:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008134:	e853 3f00 	ldrex	r3, [r3]
 8008138:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	f023 0301 	bic.w	r3, r3, #1
 8008140:	663b      	str	r3, [r7, #96]	@ 0x60
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3308      	adds	r3, #8
 8008148:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800814a:	643a      	str	r2, [r7, #64]	@ 0x40
 800814c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008150:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008152:	e841 2300 	strex	r3, r2, [r1]
 8008156:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1e5      	bne.n	800812a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2220      	movs	r2, #32
 8008162:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d018      	beq.n	80081b2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	61fb      	str	r3, [r7, #28]
   return(result);
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008194:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800819e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081a0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081a6:	e841 2300 	strex	r3, r2, [r1]
 80081aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1e6      	bne.n	8008180 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d12e      	bne.n	8008218 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	e853 3f00 	ldrex	r3, [r3]
 80081cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	f023 0310 	bic.w	r3, r3, #16
 80081d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80081de:	61bb      	str	r3, [r7, #24]
 80081e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	6979      	ldr	r1, [r7, #20]
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	613b      	str	r3, [r7, #16]
   return(result);
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e6      	bne.n	80081c0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	f003 0310 	and.w	r3, r3, #16
 80081fc:	2b10      	cmp	r3, #16
 80081fe:	d103      	bne.n	8008208 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2210      	movs	r2, #16
 8008206:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff f929 	bl	8007468 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008216:	e00b      	b.n	8008230 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7f8 f9bb 	bl	8000594 <HAL_UART_RxCpltCallback>
}
 800821e:	e007      	b.n	8008230 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	699a      	ldr	r2, [r3, #24]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f042 0208 	orr.w	r2, r2, #8
 800822e:	619a      	str	r2, [r3, #24]
}
 8008230:	bf00      	nop
 8008232:	3770      	adds	r7, #112	@ 0x70
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d121      	bne.n	800828e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	4b27      	ldr	r3, [pc, #156]	@ (80082ec <FMC_SDRAM_Init+0xb4>)
 8008250:	4013      	ands	r3, r2
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	6851      	ldr	r1, [r2, #4]
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	6892      	ldr	r2, [r2, #8]
 800825a:	4311      	orrs	r1, r2
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	68d2      	ldr	r2, [r2, #12]
 8008260:	4311      	orrs	r1, r2
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	6912      	ldr	r2, [r2, #16]
 8008266:	4311      	orrs	r1, r2
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	6952      	ldr	r2, [r2, #20]
 800826c:	4311      	orrs	r1, r2
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	6992      	ldr	r2, [r2, #24]
 8008272:	4311      	orrs	r1, r2
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	69d2      	ldr	r2, [r2, #28]
 8008278:	4311      	orrs	r1, r2
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	6a12      	ldr	r2, [r2, #32]
 800827e:	4311      	orrs	r1, r2
 8008280:	683a      	ldr	r2, [r7, #0]
 8008282:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008284:	430a      	orrs	r2, r1
 8008286:	431a      	orrs	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	601a      	str	r2, [r3, #0]
 800828c:	e026      	b.n	80082dc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	69d9      	ldr	r1, [r3, #28]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	4319      	orrs	r1, r3
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a4:	430b      	orrs	r3, r1
 80082a6:	431a      	orrs	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	4b0e      	ldr	r3, [pc, #56]	@ (80082ec <FMC_SDRAM_Init+0xb4>)
 80082b2:	4013      	ands	r3, r2
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	6851      	ldr	r1, [r2, #4]
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	6892      	ldr	r2, [r2, #8]
 80082bc:	4311      	orrs	r1, r2
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	68d2      	ldr	r2, [r2, #12]
 80082c2:	4311      	orrs	r1, r2
 80082c4:	683a      	ldr	r2, [r7, #0]
 80082c6:	6912      	ldr	r2, [r2, #16]
 80082c8:	4311      	orrs	r1, r2
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	6952      	ldr	r2, [r2, #20]
 80082ce:	4311      	orrs	r1, r2
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	6992      	ldr	r2, [r2, #24]
 80082d4:	430a      	orrs	r2, r1
 80082d6:	431a      	orrs	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	ffff8000 	.word	0xffff8000

080082f0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d128      	bne.n	8008354 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	1e59      	subs	r1, r3, #1
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	3b01      	subs	r3, #1
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	4319      	orrs	r1, r3
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	3b01      	subs	r3, #1
 8008320:	021b      	lsls	r3, r3, #8
 8008322:	4319      	orrs	r1, r3
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	3b01      	subs	r3, #1
 800832a:	031b      	lsls	r3, r3, #12
 800832c:	4319      	orrs	r1, r3
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	3b01      	subs	r3, #1
 8008334:	041b      	lsls	r3, r3, #16
 8008336:	4319      	orrs	r1, r3
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	3b01      	subs	r3, #1
 800833e:	051b      	lsls	r3, r3, #20
 8008340:	4319      	orrs	r1, r3
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	3b01      	subs	r3, #1
 8008348:	061b      	lsls	r3, r3, #24
 800834a:	430b      	orrs	r3, r1
 800834c:	431a      	orrs	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	609a      	str	r2, [r3, #8]
 8008352:	e02d      	b.n	80083b0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	689a      	ldr	r2, [r3, #8]
 8008358:	4b19      	ldr	r3, [pc, #100]	@ (80083c0 <FMC_SDRAM_Timing_Init+0xd0>)
 800835a:	4013      	ands	r3, r2
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	68d2      	ldr	r2, [r2, #12]
 8008360:	3a01      	subs	r2, #1
 8008362:	0311      	lsls	r1, r2, #12
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	6952      	ldr	r2, [r2, #20]
 8008368:	3a01      	subs	r2, #1
 800836a:	0512      	lsls	r2, r2, #20
 800836c:	430a      	orrs	r2, r1
 800836e:	431a      	orrs	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	1e59      	subs	r1, r3, #1
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	3b01      	subs	r3, #1
 8008388:	011b      	lsls	r3, r3, #4
 800838a:	4319      	orrs	r1, r3
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	3b01      	subs	r3, #1
 8008392:	021b      	lsls	r3, r3, #8
 8008394:	4319      	orrs	r1, r3
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	3b01      	subs	r3, #1
 800839c:	041b      	lsls	r3, r3, #16
 800839e:	4319      	orrs	r1, r3
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	061b      	lsls	r3, r3, #24
 80083a8:	430b      	orrs	r3, r1
 80083aa:	431a      	orrs	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	ff0f0fff 	.word	0xff0f0fff

080083c4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	691a      	ldr	r2, [r3, #16]
 80083d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008408 <FMC_SDRAM_SendCommand+0x44>)
 80083d6:	4013      	ands	r3, r2
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	6811      	ldr	r1, [r2, #0]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	6852      	ldr	r2, [r2, #4]
 80083e0:	4311      	orrs	r1, r2
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	6892      	ldr	r2, [r2, #8]
 80083e6:	3a01      	subs	r2, #1
 80083e8:	0152      	lsls	r2, r2, #5
 80083ea:	4311      	orrs	r1, r2
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	68d2      	ldr	r2, [r2, #12]
 80083f0:	0252      	lsls	r2, r2, #9
 80083f2:	430a      	orrs	r2, r1
 80083f4:	431a      	orrs	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr
 8008408:	ffc00000 	.word	0xffc00000

0800840c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	695a      	ldr	r2, [r3, #20]
 800841a:	4b07      	ldr	r3, [pc, #28]	@ (8008438 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800841c:	4013      	ands	r3, r2
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	0052      	lsls	r2, r2, #1
 8008422:	431a      	orrs	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	ffffc001 	.word	0xffffc001

0800843c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f043 0201 	orr.w	r2, r3, #1
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f023 0201 	bic.w	r2, r3, #1
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800848a:	2300      	movs	r3, #0
 800848c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	3301      	adds	r3, #1
 8008492:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800849a:	d901      	bls.n	80084a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	e01b      	b.n	80084d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	daf2      	bge.n	800848e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	019b      	lsls	r3, r3, #6
 80084b0:	f043 0220 	orr.w	r2, r3, #32
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	3301      	adds	r3, #1
 80084bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084c4:	d901      	bls.n	80084ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e006      	b.n	80084d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	f003 0320 	and.w	r3, r3, #32
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	d0f0      	beq.n	80084b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3301      	adds	r3, #1
 80084f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084fc:	d901      	bls.n	8008502 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e018      	b.n	8008534 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	2b00      	cmp	r3, #0
 8008508:	daf2      	bge.n	80084f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800850a:	2300      	movs	r3, #0
 800850c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2210      	movs	r2, #16
 8008512:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	3301      	adds	r3, #1
 8008518:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008520:	d901      	bls.n	8008526 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008522:	2303      	movs	r3, #3
 8008524:	e006      	b.n	8008534 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	f003 0310 	and.w	r3, r3, #16
 800852e:	2b10      	cmp	r3, #16
 8008530:	d0f0      	beq.n	8008514 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008540:	b480      	push	{r7}
 8008542:	b08b      	sub	sp, #44	@ 0x2c
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	4613      	mov	r3, r2
 800854c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008556:	88fb      	ldrh	r3, [r7, #6]
 8008558:	089b      	lsrs	r3, r3, #2
 800855a:	b29b      	uxth	r3, r3
 800855c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800855e:	88fb      	ldrh	r3, [r7, #6]
 8008560:	f003 0303 	and.w	r3, r3, #3
 8008564:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008566:	2300      	movs	r3, #0
 8008568:	623b      	str	r3, [r7, #32]
 800856a:	e014      	b.n	8008596 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008576:	601a      	str	r2, [r3, #0]
    pDest++;
 8008578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857a:	3301      	adds	r3, #1
 800857c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800857e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008580:	3301      	adds	r3, #1
 8008582:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008586:	3301      	adds	r3, #1
 8008588:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800858a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858c:	3301      	adds	r3, #1
 800858e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008590:	6a3b      	ldr	r3, [r7, #32]
 8008592:	3301      	adds	r3, #1
 8008594:	623b      	str	r3, [r7, #32]
 8008596:	6a3a      	ldr	r2, [r7, #32]
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	429a      	cmp	r2, r3
 800859c:	d3e6      	bcc.n	800856c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800859e:	8bfb      	ldrh	r3, [r7, #30]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d01e      	beq.n	80085e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085ae:	461a      	mov	r2, r3
 80085b0:	f107 0310 	add.w	r3, r7, #16
 80085b4:	6812      	ldr	r2, [r2, #0]
 80085b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	00db      	lsls	r3, r3, #3
 80085c0:	fa22 f303 	lsr.w	r3, r2, r3
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c8:	701a      	strb	r2, [r3, #0]
      i++;
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	3301      	adds	r3, #1
 80085ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80085d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d2:	3301      	adds	r3, #1
 80085d4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80085d6:	8bfb      	ldrh	r3, [r7, #30]
 80085d8:	3b01      	subs	r3, #1
 80085da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80085dc:	8bfb      	ldrh	r3, [r7, #30]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1ea      	bne.n	80085b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80085e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	372c      	adds	r7, #44	@ 0x2c
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	4013      	ands	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008608:	68fb      	ldr	r3, [r7, #12]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008616:	b480      	push	{r7}
 8008618:	b085      	sub	sp, #20
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	460b      	mov	r3, r1
 8008620:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008626:	78fb      	ldrb	r3, [r7, #3]
 8008628:	015a      	lsls	r2, r3, #5
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	4413      	add	r3, r2
 800862e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008636:	78fb      	ldrb	r3, [r7, #3]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	4413      	add	r3, r2
 800863e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	4013      	ands	r3, r2
 8008648:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800864a:	68bb      	ldr	r3, [r7, #8]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	f003 0301 	and.w	r3, r3, #1
}
 8008668:	4618      	mov	r0, r3
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008692:	f023 0303 	bic.w	r3, r3, #3
 8008696:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	78fb      	ldrb	r3, [r7, #3]
 80086a2:	f003 0303 	and.w	r3, r3, #3
 80086a6:	68f9      	ldr	r1, [r7, #12]
 80086a8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80086ac:	4313      	orrs	r3, r2
 80086ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d107      	bne.n	80086c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086bc:	461a      	mov	r2, r3
 80086be:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80086c2:	6053      	str	r3, [r2, #4]
 80086c4:	e00c      	b.n	80086e0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80086c6:	78fb      	ldrb	r3, [r7, #3]
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d107      	bne.n	80086dc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086d2:	461a      	mov	r2, r3
 80086d4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80086d8:	6053      	str	r3, [r2, #4]
 80086da:	e001      	b.n	80086e0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e000      	b.n	80086e2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	b29b      	uxth	r3, r3
}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008710:	b480      	push	{r7}
 8008712:	b089      	sub	sp, #36	@ 0x24
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008724:	2300      	movs	r3, #0
 8008726:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	4413      	add	r3, r2
 8008730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	0c9b      	lsrs	r3, r3, #18
 8008738:	f003 0303 	and.w	r3, r3, #3
 800873c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	4413      	add	r3, r2
 8008746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	0fdb      	lsrs	r3, r3, #31
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	015a      	lsls	r2, r3, #5
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	4413      	add	r3, r2
 800875c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	0fdb      	lsrs	r3, r3, #31
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f003 0320 	and.w	r3, r3, #32
 8008772:	2b20      	cmp	r3, #32
 8008774:	d10d      	bne.n	8008792 <USB_HC_Halt+0x82>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10a      	bne.n	8008792 <USB_HC_Halt+0x82>
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d005      	beq.n	800878e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d002      	beq.n	800878e <USB_HC_Halt+0x7e>
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	2b03      	cmp	r3, #3
 800878c:	d101      	bne.n	8008792 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	e0d8      	b.n	8008944 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d002      	beq.n	800879e <USB_HC_Halt+0x8e>
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	2b02      	cmp	r3, #2
 800879c:	d173      	bne.n	8008886 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	015a      	lsls	r2, r3, #5
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	4413      	add	r3, r2
 80087a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	69ba      	ldr	r2, [r7, #24]
 80087ae:	0151      	lsls	r1, r2, #5
 80087b0:	69fa      	ldr	r2, [r7, #28]
 80087b2:	440a      	add	r2, r1
 80087b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087bc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f003 0320 	and.w	r3, r3, #32
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d14a      	bne.n	8008860 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d133      	bne.n	800883e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	0151      	lsls	r1, r2, #5
 80087e8:	69fa      	ldr	r2, [r7, #28]
 80087ea:	440a      	add	r2, r1
 80087ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80087f4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	0151      	lsls	r1, r2, #5
 8008808:	69fa      	ldr	r2, [r7, #28]
 800880a:	440a      	add	r2, r1
 800880c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008810:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008814:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	3301      	adds	r3, #1
 800881a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008822:	d82e      	bhi.n	8008882 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	4413      	add	r3, r2
 800882c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008836:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800883a:	d0ec      	beq.n	8008816 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800883c:	e081      	b.n	8008942 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	4413      	add	r3, r2
 8008846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	69ba      	ldr	r2, [r7, #24]
 800884e:	0151      	lsls	r1, r2, #5
 8008850:	69fa      	ldr	r2, [r7, #28]
 8008852:	440a      	add	r2, r1
 8008854:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008858:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800885c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800885e:	e070      	b.n	8008942 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	4413      	add	r3, r2
 8008868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69ba      	ldr	r2, [r7, #24]
 8008870:	0151      	lsls	r1, r2, #5
 8008872:	69fa      	ldr	r2, [r7, #28]
 8008874:	440a      	add	r2, r1
 8008876:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800887a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800887e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008880:	e05f      	b.n	8008942 <USB_HC_Halt+0x232>
            break;
 8008882:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008884:	e05d      	b.n	8008942 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	4413      	add	r3, r2
 800888e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	0151      	lsls	r1, r2, #5
 8008898:	69fa      	ldr	r2, [r7, #28]
 800889a:	440a      	add	r2, r1
 800889c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088a4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d133      	bne.n	800891e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	0151      	lsls	r1, r2, #5
 80088c8:	69fa      	ldr	r2, [r7, #28]
 80088ca:	440a      	add	r2, r1
 80088cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80088d4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	0151      	lsls	r1, r2, #5
 80088e8:	69fa      	ldr	r2, [r7, #28]
 80088ea:	440a      	add	r2, r1
 80088ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088f4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	3301      	adds	r3, #1
 80088fa:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008902:	d81d      	bhi.n	8008940 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	015a      	lsls	r2, r3, #5
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	4413      	add	r3, r2
 800890c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008916:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800891a:	d0ec      	beq.n	80088f6 <USB_HC_Halt+0x1e6>
 800891c:	e011      	b.n	8008942 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	4413      	add	r3, r2
 8008926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	0151      	lsls	r1, r2, #5
 8008930:	69fa      	ldr	r2, [r7, #28]
 8008932:	440a      	add	r2, r1
 8008934:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008938:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800893c:	6013      	str	r3, [r2, #0]
 800893e:	e000      	b.n	8008942 <USB_HC_Halt+0x232>
          break;
 8008940:	bf00      	nop
    }
  }

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3724      	adds	r7, #36	@ 0x24
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b088      	sub	sp, #32
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008960:	2300      	movs	r3, #0
 8008962:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff fd7a 	bl	800845e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800896a:	2110      	movs	r1, #16
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7ff fd87 	bl	8008480 <USB_FlushTxFifo>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d001      	beq.n	800897c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7ff fdb1 	bl	80084e4 <USB_FlushRxFifo>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800898c:	2300      	movs	r3, #0
 800898e:	61bb      	str	r3, [r7, #24]
 8008990:	e01f      	b.n	80089d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	4413      	add	r3, r2
 800899a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80089a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80089b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	015a      	lsls	r2, r3, #5
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089c6:	461a      	mov	r2, r3
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	3301      	adds	r3, #1
 80089d0:	61bb      	str	r3, [r7, #24]
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	2b0f      	cmp	r3, #15
 80089d6:	d9dc      	bls.n	8008992 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80089d8:	2300      	movs	r3, #0
 80089da:	61bb      	str	r3, [r7, #24]
 80089dc:	e034      	b.n	8008a48 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80089f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a04:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a12:	461a      	mov	r2, r3
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008a24:	d80c      	bhi.n	8008a40 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	015a      	lsls	r2, r3, #5
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a3c:	d0ec      	beq.n	8008a18 <USB_StopHost+0xc8>
 8008a3e:	e000      	b.n	8008a42 <USB_StopHost+0xf2>
        break;
 8008a40:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	3301      	adds	r3, #1
 8008a46:	61bb      	str	r3, [r7, #24]
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	2b0f      	cmp	r3, #15
 8008a4c:	d9c7      	bls.n	80089de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a54:	461a      	mov	r2, r3
 8008a56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a5a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a62:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7ff fce9 	bl	800843c <USB_EnableGlobalInt>

  return ret;
 8008a6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3720      	adds	r7, #32
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a82:	1c5a      	adds	r2, r3, #1
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f804 	bl	8008a98 <USBH_HandleSof>
}
 8008a90:	bf00      	nop
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b0b      	cmp	r3, #11
 8008aa8:	d10a      	bne.n	8008ac0 <USBH_HandleSof+0x28>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d005      	beq.n	8008ac0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	4798      	blx	r3
  }
}
 8008ac0:	bf00      	nop
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008aec:	2200      	movs	r2, #0
 8008aee:	4619      	mov	r1, r3
 8008af0:	f000 f8ae 	bl	8008c50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008af4:	bf00      	nop
}
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008b0c:	bf00      	nop
}
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	4619      	mov	r1, r3
 8008b50:	f000 f87e 	bl	8008c50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b082      	sub	sp, #8
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f001 f954 	bl	8009e2c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	791b      	ldrb	r3, [r3, #4]
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f830 	bl	8008bf0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	795b      	ldrb	r3, [r3, #5]
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f82a 	bl	8008bf0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	f000 f84c 	bl	8008c50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008bde:	2200      	movs	r2, #0
 8008be0:	4619      	mov	r1, r3
 8008be2:	f000 f835 	bl	8008c50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008bfc:	78fb      	ldrb	r3, [r7, #3]
 8008bfe:	2b0f      	cmp	r3, #15
 8008c00:	d80d      	bhi.n	8008c1e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c02:	78fb      	ldrb	r3, [r7, #3]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	33e0      	adds	r3, #224	@ 0xe0
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	78fb      	ldrb	r3, [r7, #3]
 8008c10:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	33e0      	adds	r3, #224	@ 0xe0
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	440b      	add	r3, r1
 8008c1c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c32:	f3ef 8305 	mrs	r3, IPSR
 8008c36:	607b      	str	r3, [r7, #4]
  return(result);
 8008c38:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	bf14      	ite	ne
 8008c3e:	2301      	movne	r3, #1
 8008c40:	2300      	moveq	r3, #0
 8008c42:	b2db      	uxtb	r3, r3
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d101      	bne.n	8008c6e <osMessagePut+0x1e>
    ticks = 1;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008c6e:	f7ff ffdd 	bl	8008c2c <inHandlerMode>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d018      	beq.n	8008caa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008c78:	f107 0210 	add.w	r2, r7, #16
 8008c7c:	f107 0108 	add.w	r1, r7, #8
 8008c80:	2300      	movs	r3, #0
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 f9b6 	bl	8008ff4 <xQueueGenericSendFromISR>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d001      	beq.n	8008c92 <osMessagePut+0x42>
      return osErrorOS;
 8008c8e:	23ff      	movs	r3, #255	@ 0xff
 8008c90:	e018      	b.n	8008cc4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d014      	beq.n	8008cc2 <osMessagePut+0x72>
 8008c98:	4b0c      	ldr	r3, [pc, #48]	@ (8008ccc <osMessagePut+0x7c>)
 8008c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	e00b      	b.n	8008cc2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008caa:	f107 0108 	add.w	r1, r7, #8
 8008cae:	2300      	movs	r3, #0
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f000 f894 	bl	8008de0 <xQueueGenericSend>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d001      	beq.n	8008cc2 <osMessagePut+0x72>
      return osErrorOS;
 8008cbe:	23ff      	movs	r3, #255	@ 0xff
 8008cc0:	e000      	b.n	8008cc4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3718      	adds	r7, #24
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	e000ed04 	.word	0xe000ed04

08008cd0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	689a      	ldr	r2, [r3, #8]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	683a      	ldr	r2, [r7, #0]
 8008cf4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	1c5a      	adds	r2, r3, #1
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	601a      	str	r2, [r3, #0]
}
 8008d0c:	bf00      	nop
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d2e:	d103      	bne.n	8008d38 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	60fb      	str	r3, [r7, #12]
 8008d36:	e00c      	b.n	8008d52 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3308      	adds	r3, #8
 8008d3c:	60fb      	str	r3, [r7, #12]
 8008d3e:	e002      	b.n	8008d46 <vListInsert+0x2e>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d2f6      	bcs.n	8008d40 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	1c5a      	adds	r2, r3, #1
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	601a      	str	r2, [r3, #0]
}
 8008d7e:	bf00      	nop
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b085      	sub	sp, #20
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	6892      	ldr	r2, [r2, #8]
 8008da0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	6852      	ldr	r2, [r2, #4]
 8008daa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d103      	bne.n	8008dbe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	689a      	ldr	r2, [r3, #8]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	1e5a      	subs	r2, r3, #1
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
	...

08008de0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b08e      	sub	sp, #56	@ 0x38
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
 8008dec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008dee:	2300      	movs	r3, #0
 8008df0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10d      	bne.n	8008e18 <xQueueGenericSend+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e00:	b672      	cpsid	i
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	b662      	cpsie	i
 8008e10:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008e12:	bf00      	nop
 8008e14:	bf00      	nop
 8008e16:	e7fd      	b.n	8008e14 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d103      	bne.n	8008e26 <xQueueGenericSend+0x46>
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d101      	bne.n	8008e2a <xQueueGenericSend+0x4a>
 8008e26:	2301      	movs	r3, #1
 8008e28:	e000      	b.n	8008e2c <xQueueGenericSend+0x4c>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10d      	bne.n	8008e4c <xQueueGenericSend+0x6c>
	__asm volatile
 8008e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e34:	b672      	cpsid	i
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	b662      	cpsie	i
 8008e44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e46:	bf00      	nop
 8008e48:	bf00      	nop
 8008e4a:	e7fd      	b.n	8008e48 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d103      	bne.n	8008e5a <xQueueGenericSend+0x7a>
 8008e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d101      	bne.n	8008e5e <xQueueGenericSend+0x7e>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e000      	b.n	8008e60 <xQueueGenericSend+0x80>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10d      	bne.n	8008e80 <xQueueGenericSend+0xa0>
	__asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e68:	b672      	cpsid	i
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	b662      	cpsie	i
 8008e78:	623b      	str	r3, [r7, #32]
}
 8008e7a:	bf00      	nop
 8008e7c:	bf00      	nop
 8008e7e:	e7fd      	b.n	8008e7c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e80:	f000 fd56 	bl	8009930 <xTaskGetSchedulerState>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d102      	bne.n	8008e90 <xQueueGenericSend+0xb0>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d101      	bne.n	8008e94 <xQueueGenericSend+0xb4>
 8008e90:	2301      	movs	r3, #1
 8008e92:	e000      	b.n	8008e96 <xQueueGenericSend+0xb6>
 8008e94:	2300      	movs	r3, #0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10d      	bne.n	8008eb6 <xQueueGenericSend+0xd6>
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9e:	b672      	cpsid	i
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	b662      	cpsie	i
 8008eae:	61fb      	str	r3, [r7, #28]
}
 8008eb0:	bf00      	nop
 8008eb2:	bf00      	nop
 8008eb4:	e7fd      	b.n	8008eb2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008eb6:	f000 fe5f 	bl	8009b78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d302      	bcc.n	8008ecc <xQueueGenericSend+0xec>
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d129      	bne.n	8008f20 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	68b9      	ldr	r1, [r7, #8]
 8008ed0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ed2:	f000 f932 	bl	800913a <prvCopyDataToQueue>
 8008ed6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d010      	beq.n	8008f02 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee2:	3324      	adds	r3, #36	@ 0x24
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 fc13 	bl	8009710 <xTaskRemoveFromEventList>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d013      	beq.n	8008f18 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ef0:	4b3f      	ldr	r3, [pc, #252]	@ (8008ff0 <xQueueGenericSend+0x210>)
 8008ef2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	e00a      	b.n	8008f18 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d007      	beq.n	8008f18 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f08:	4b39      	ldr	r3, [pc, #228]	@ (8008ff0 <xQueueGenericSend+0x210>)
 8008f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f0e:	601a      	str	r2, [r3, #0]
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f18:	f000 fe64 	bl	8009be4 <vPortExitCritical>
				return pdPASS;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e063      	b.n	8008fe8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d103      	bne.n	8008f2e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f26:	f000 fe5d 	bl	8009be4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e05c      	b.n	8008fe8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d106      	bne.n	8008f42 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f34:	f107 0314 	add.w	r3, r7, #20
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 fc4f 	bl	80097dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f42:	f000 fe4f 	bl	8009be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f46:	f000 f9cd 	bl	80092e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f4a:	f000 fe15 	bl	8009b78 <vPortEnterCritical>
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f54:	b25b      	sxtb	r3, r3
 8008f56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f5a:	d103      	bne.n	8008f64 <xQueueGenericSend+0x184>
 8008f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f6a:	b25b      	sxtb	r3, r3
 8008f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f70:	d103      	bne.n	8008f7a <xQueueGenericSend+0x19a>
 8008f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f7a:	f000 fe33 	bl	8009be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f7e:	1d3a      	adds	r2, r7, #4
 8008f80:	f107 0314 	add.w	r3, r7, #20
 8008f84:	4611      	mov	r1, r2
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fc3e 	bl	8009808 <xTaskCheckForTimeOut>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d124      	bne.n	8008fdc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f94:	f000 f98d 	bl	80092b2 <prvIsQueueFull>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d018      	beq.n	8008fd0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa0:	3310      	adds	r3, #16
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 fb8a 	bl	80096c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fae:	f000 f92e 	bl	800920e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008fb2:	f000 f9a5 	bl	8009300 <xTaskResumeAll>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f47f af7c 	bne.w	8008eb6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8008fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff0 <xQueueGenericSend+0x210>)
 8008fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	f3bf 8f4f 	dsb	sy
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	e772      	b.n	8008eb6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008fd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fd2:	f000 f91c 	bl	800920e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fd6:	f000 f993 	bl	8009300 <xTaskResumeAll>
 8008fda:	e76c      	b.n	8008eb6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008fdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fde:	f000 f916 	bl	800920e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fe2:	f000 f98d 	bl	8009300 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008fe6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3738      	adds	r7, #56	@ 0x38
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	e000ed04 	.word	0xe000ed04

08008ff4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b08e      	sub	sp, #56	@ 0x38
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
 8009000:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10d      	bne.n	8009028 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009010:	b672      	cpsid	i
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	b662      	cpsie	i
 8009020:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009022:	bf00      	nop
 8009024:	bf00      	nop
 8009026:	e7fd      	b.n	8009024 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d103      	bne.n	8009036 <xQueueGenericSendFromISR+0x42>
 800902e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <xQueueGenericSendFromISR+0x46>
 8009036:	2301      	movs	r3, #1
 8009038:	e000      	b.n	800903c <xQueueGenericSendFromISR+0x48>
 800903a:	2300      	movs	r3, #0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10d      	bne.n	800905c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8009040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009044:	b672      	cpsid	i
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	b662      	cpsie	i
 8009054:	623b      	str	r3, [r7, #32]
}
 8009056:	bf00      	nop
 8009058:	bf00      	nop
 800905a:	e7fd      	b.n	8009058 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	2b02      	cmp	r3, #2
 8009060:	d103      	bne.n	800906a <xQueueGenericSendFromISR+0x76>
 8009062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009066:	2b01      	cmp	r3, #1
 8009068:	d101      	bne.n	800906e <xQueueGenericSendFromISR+0x7a>
 800906a:	2301      	movs	r3, #1
 800906c:	e000      	b.n	8009070 <xQueueGenericSendFromISR+0x7c>
 800906e:	2300      	movs	r3, #0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10d      	bne.n	8009090 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8009074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009078:	b672      	cpsid	i
 800907a:	f383 8811 	msr	BASEPRI, r3
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	b662      	cpsie	i
 8009088:	61fb      	str	r3, [r7, #28]
}
 800908a:	bf00      	nop
 800908c:	bf00      	nop
 800908e:	e7fd      	b.n	800908c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009090:	f000 fe2e 	bl	8009cf0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009094:	f3ef 8211 	mrs	r2, BASEPRI
 8009098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909c:	b672      	cpsid	i
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	b662      	cpsie	i
 80090ac:	61ba      	str	r2, [r7, #24]
 80090ae:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80090b0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80090b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090bc:	429a      	cmp	r2, r3
 80090be:	d302      	bcc.n	80090c6 <xQueueGenericSendFromISR+0xd2>
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d12c      	bne.n	8009120 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80090c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	68b9      	ldr	r1, [r7, #8]
 80090d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090d6:	f000 f830 	bl	800913a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80090da:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80090de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090e2:	d112      	bne.n	800910a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d016      	beq.n	800911a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ee:	3324      	adds	r3, #36	@ 0x24
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 fb0d 	bl	8009710 <xTaskRemoveFromEventList>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00e      	beq.n	800911a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00b      	beq.n	800911a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2201      	movs	r2, #1
 8009106:	601a      	str	r2, [r3, #0]
 8009108:	e007      	b.n	800911a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800910a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800910e:	3301      	adds	r3, #1
 8009110:	b2db      	uxtb	r3, r3
 8009112:	b25a      	sxtb	r2, r3
 8009114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009116:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800911a:	2301      	movs	r3, #1
 800911c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800911e:	e001      	b.n	8009124 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009120:	2300      	movs	r3, #0
 8009122:	637b      	str	r3, [r7, #52]	@ 0x34
 8009124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009126:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800912e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009132:	4618      	mov	r0, r3
 8009134:	3738      	adds	r7, #56	@ 0x38
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b086      	sub	sp, #24
 800913e:	af00      	add	r7, sp, #0
 8009140:	60f8      	str	r0, [r7, #12]
 8009142:	60b9      	str	r1, [r7, #8]
 8009144:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009146:	2300      	movs	r3, #0
 8009148:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800914e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10d      	bne.n	8009174 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d14d      	bne.n	80091fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	4618      	mov	r0, r3
 8009166:	f000 fc01 	bl	800996c <xTaskPriorityDisinherit>
 800916a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	609a      	str	r2, [r3, #8]
 8009172:	e043      	b.n	80091fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d119      	bne.n	80091ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6858      	ldr	r0, [r3, #4]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009182:	461a      	mov	r2, r3
 8009184:	68b9      	ldr	r1, [r7, #8]
 8009186:	f000 ff11 	bl	8009fac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009192:	441a      	add	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d32b      	bcc.n	80091fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	605a      	str	r2, [r3, #4]
 80091ac:	e026      	b.n	80091fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	68d8      	ldr	r0, [r3, #12]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b6:	461a      	mov	r2, r3
 80091b8:	68b9      	ldr	r1, [r7, #8]
 80091ba:	f000 fef7 	bl	8009fac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	68da      	ldr	r2, [r3, #12]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c6:	425b      	negs	r3, r3
 80091c8:	441a      	add	r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d207      	bcs.n	80091ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	689a      	ldr	r2, [r3, #8]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091e2:	425b      	negs	r3, r3
 80091e4:	441a      	add	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d105      	bne.n	80091fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d002      	beq.n	80091fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	1c5a      	adds	r2, r3, #1
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009204:	697b      	ldr	r3, [r7, #20]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b084      	sub	sp, #16
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009216:	f000 fcaf 	bl	8009b78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009220:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009222:	e011      	b.n	8009248 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009228:	2b00      	cmp	r3, #0
 800922a:	d012      	beq.n	8009252 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3324      	adds	r3, #36	@ 0x24
 8009230:	4618      	mov	r0, r3
 8009232:	f000 fa6d 	bl	8009710 <xTaskRemoveFromEventList>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d001      	beq.n	8009240 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800923c:	f000 fb4c 	bl	80098d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009240:	7bfb      	ldrb	r3, [r7, #15]
 8009242:	3b01      	subs	r3, #1
 8009244:	b2db      	uxtb	r3, r3
 8009246:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800924c:	2b00      	cmp	r3, #0
 800924e:	dce9      	bgt.n	8009224 <prvUnlockQueue+0x16>
 8009250:	e000      	b.n	8009254 <prvUnlockQueue+0x46>
					break;
 8009252:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	22ff      	movs	r2, #255	@ 0xff
 8009258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800925c:	f000 fcc2 	bl	8009be4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009260:	f000 fc8a 	bl	8009b78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800926a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800926c:	e011      	b.n	8009292 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d012      	beq.n	800929c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	3310      	adds	r3, #16
 800927a:	4618      	mov	r0, r3
 800927c:	f000 fa48 	bl	8009710 <xTaskRemoveFromEventList>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009286:	f000 fb27 	bl	80098d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800928a:	7bbb      	ldrb	r3, [r7, #14]
 800928c:	3b01      	subs	r3, #1
 800928e:	b2db      	uxtb	r3, r3
 8009290:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009292:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009296:	2b00      	cmp	r3, #0
 8009298:	dce9      	bgt.n	800926e <prvUnlockQueue+0x60>
 800929a:	e000      	b.n	800929e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800929c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	22ff      	movs	r2, #255	@ 0xff
 80092a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80092a6:	f000 fc9d 	bl	8009be4 <vPortExitCritical>
}
 80092aa:	bf00      	nop
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092ba:	f000 fc5d 	bl	8009b78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d102      	bne.n	80092d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80092ca:	2301      	movs	r3, #1
 80092cc:	60fb      	str	r3, [r7, #12]
 80092ce:	e001      	b.n	80092d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80092d0:	2300      	movs	r3, #0
 80092d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092d4:	f000 fc86 	bl	8009be4 <vPortExitCritical>

	return xReturn;
 80092d8:	68fb      	ldr	r3, [r7, #12]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
	...

080092e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80092e4:	b480      	push	{r7}
 80092e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80092e8:	4b04      	ldr	r3, [pc, #16]	@ (80092fc <vTaskSuspendAll+0x18>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	3301      	adds	r3, #1
 80092ee:	4a03      	ldr	r2, [pc, #12]	@ (80092fc <vTaskSuspendAll+0x18>)
 80092f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80092f2:	bf00      	nop
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	2000067c 	.word	0x2000067c

08009300 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009306:	2300      	movs	r3, #0
 8009308:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800930a:	2300      	movs	r3, #0
 800930c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800930e:	4b43      	ldr	r3, [pc, #268]	@ (800941c <xTaskResumeAll+0x11c>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10d      	bne.n	8009332 <xTaskResumeAll+0x32>
	__asm volatile
 8009316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931a:	b672      	cpsid	i
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	b662      	cpsie	i
 800932a:	603b      	str	r3, [r7, #0]
}
 800932c:	bf00      	nop
 800932e:	bf00      	nop
 8009330:	e7fd      	b.n	800932e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009332:	f000 fc21 	bl	8009b78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009336:	4b39      	ldr	r3, [pc, #228]	@ (800941c <xTaskResumeAll+0x11c>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	3b01      	subs	r3, #1
 800933c:	4a37      	ldr	r2, [pc, #220]	@ (800941c <xTaskResumeAll+0x11c>)
 800933e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009340:	4b36      	ldr	r3, [pc, #216]	@ (800941c <xTaskResumeAll+0x11c>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d161      	bne.n	800940c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009348:	4b35      	ldr	r3, [pc, #212]	@ (8009420 <xTaskResumeAll+0x120>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d05d      	beq.n	800940c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009350:	e02e      	b.n	80093b0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009352:	4b34      	ldr	r3, [pc, #208]	@ (8009424 <xTaskResumeAll+0x124>)
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3318      	adds	r3, #24
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff fd13 	bl	8008d8a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	3304      	adds	r3, #4
 8009368:	4618      	mov	r0, r3
 800936a:	f7ff fd0e 	bl	8008d8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009372:	2201      	movs	r2, #1
 8009374:	409a      	lsls	r2, r3
 8009376:	4b2c      	ldr	r3, [pc, #176]	@ (8009428 <xTaskResumeAll+0x128>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4313      	orrs	r3, r2
 800937c:	4a2a      	ldr	r2, [pc, #168]	@ (8009428 <xTaskResumeAll+0x128>)
 800937e:	6013      	str	r3, [r2, #0]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009384:	4613      	mov	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4413      	add	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4a27      	ldr	r2, [pc, #156]	@ (800942c <xTaskResumeAll+0x12c>)
 800938e:	441a      	add	r2, r3
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	3304      	adds	r3, #4
 8009394:	4619      	mov	r1, r3
 8009396:	4610      	mov	r0, r2
 8009398:	f7ff fc9a 	bl	8008cd0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093a0:	4b23      	ldr	r3, [pc, #140]	@ (8009430 <xTaskResumeAll+0x130>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d302      	bcc.n	80093b0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80093aa:	4b22      	ldr	r3, [pc, #136]	@ (8009434 <xTaskResumeAll+0x134>)
 80093ac:	2201      	movs	r2, #1
 80093ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093b0:	4b1c      	ldr	r3, [pc, #112]	@ (8009424 <xTaskResumeAll+0x124>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1cc      	bne.n	8009352 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093be:	f000 fa97 	bl	80098f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80093c2:	4b1d      	ldr	r3, [pc, #116]	@ (8009438 <xTaskResumeAll+0x138>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d010      	beq.n	80093f0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80093ce:	f000 f837 	bl	8009440 <xTaskIncrementTick>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80093d8:	4b16      	ldr	r3, [pc, #88]	@ (8009434 <xTaskResumeAll+0x134>)
 80093da:	2201      	movs	r2, #1
 80093dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1f1      	bne.n	80093ce <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80093ea:	4b13      	ldr	r3, [pc, #76]	@ (8009438 <xTaskResumeAll+0x138>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80093f0:	4b10      	ldr	r3, [pc, #64]	@ (8009434 <xTaskResumeAll+0x134>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d009      	beq.n	800940c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80093f8:	2301      	movs	r3, #1
 80093fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80093fc:	4b0f      	ldr	r3, [pc, #60]	@ (800943c <xTaskResumeAll+0x13c>)
 80093fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009402:	601a      	str	r2, [r3, #0]
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800940c:	f000 fbea 	bl	8009be4 <vPortExitCritical>

	return xAlreadyYielded;
 8009410:	68bb      	ldr	r3, [r7, #8]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	2000067c 	.word	0x2000067c
 8009420:	2000065c 	.word	0x2000065c
 8009424:	20000634 	.word	0x20000634
 8009428:	20000664 	.word	0x20000664
 800942c:	200005a0 	.word	0x200005a0
 8009430:	2000059c 	.word	0x2000059c
 8009434:	20000670 	.word	0x20000670
 8009438:	2000066c 	.word	0x2000066c
 800943c:	e000ed04 	.word	0xe000ed04

08009440 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009446:	2300      	movs	r3, #0
 8009448:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800944a:	4b50      	ldr	r3, [pc, #320]	@ (800958c <xTaskIncrementTick+0x14c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	f040 808b 	bne.w	800956a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009454:	4b4e      	ldr	r3, [pc, #312]	@ (8009590 <xTaskIncrementTick+0x150>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	3301      	adds	r3, #1
 800945a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800945c:	4a4c      	ldr	r2, [pc, #304]	@ (8009590 <xTaskIncrementTick+0x150>)
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d123      	bne.n	80094b0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009468:	4b4a      	ldr	r3, [pc, #296]	@ (8009594 <xTaskIncrementTick+0x154>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00d      	beq.n	800948e <xTaskIncrementTick+0x4e>
	__asm volatile
 8009472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009476:	b672      	cpsid	i
 8009478:	f383 8811 	msr	BASEPRI, r3
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	b662      	cpsie	i
 8009486:	603b      	str	r3, [r7, #0]
}
 8009488:	bf00      	nop
 800948a:	bf00      	nop
 800948c:	e7fd      	b.n	800948a <xTaskIncrementTick+0x4a>
 800948e:	4b41      	ldr	r3, [pc, #260]	@ (8009594 <xTaskIncrementTick+0x154>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	60fb      	str	r3, [r7, #12]
 8009494:	4b40      	ldr	r3, [pc, #256]	@ (8009598 <xTaskIncrementTick+0x158>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a3e      	ldr	r2, [pc, #248]	@ (8009594 <xTaskIncrementTick+0x154>)
 800949a:	6013      	str	r3, [r2, #0]
 800949c:	4a3e      	ldr	r2, [pc, #248]	@ (8009598 <xTaskIncrementTick+0x158>)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6013      	str	r3, [r2, #0]
 80094a2:	4b3e      	ldr	r3, [pc, #248]	@ (800959c <xTaskIncrementTick+0x15c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	3301      	adds	r3, #1
 80094a8:	4a3c      	ldr	r2, [pc, #240]	@ (800959c <xTaskIncrementTick+0x15c>)
 80094aa:	6013      	str	r3, [r2, #0]
 80094ac:	f000 fa20 	bl	80098f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094b0:	4b3b      	ldr	r3, [pc, #236]	@ (80095a0 <xTaskIncrementTick+0x160>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d348      	bcc.n	800954c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094ba:	4b36      	ldr	r3, [pc, #216]	@ (8009594 <xTaskIncrementTick+0x154>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d104      	bne.n	80094ce <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094c4:	4b36      	ldr	r3, [pc, #216]	@ (80095a0 <xTaskIncrementTick+0x160>)
 80094c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094ca:	601a      	str	r2, [r3, #0]
					break;
 80094cc:	e03e      	b.n	800954c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ce:	4b31      	ldr	r3, [pc, #196]	@ (8009594 <xTaskIncrementTick+0x154>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d203      	bcs.n	80094ee <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80094e6:	4a2e      	ldr	r2, [pc, #184]	@ (80095a0 <xTaskIncrementTick+0x160>)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80094ec:	e02e      	b.n	800954c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	3304      	adds	r3, #4
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7ff fc49 	bl	8008d8a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d004      	beq.n	800950a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	3318      	adds	r3, #24
 8009504:	4618      	mov	r0, r3
 8009506:	f7ff fc40 	bl	8008d8a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950e:	2201      	movs	r2, #1
 8009510:	409a      	lsls	r2, r3
 8009512:	4b24      	ldr	r3, [pc, #144]	@ (80095a4 <xTaskIncrementTick+0x164>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4313      	orrs	r3, r2
 8009518:	4a22      	ldr	r2, [pc, #136]	@ (80095a4 <xTaskIncrementTick+0x164>)
 800951a:	6013      	str	r3, [r2, #0]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009520:	4613      	mov	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4413      	add	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4a1f      	ldr	r2, [pc, #124]	@ (80095a8 <xTaskIncrementTick+0x168>)
 800952a:	441a      	add	r2, r3
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	3304      	adds	r3, #4
 8009530:	4619      	mov	r1, r3
 8009532:	4610      	mov	r0, r2
 8009534:	f7ff fbcc 	bl	8008cd0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800953c:	4b1b      	ldr	r3, [pc, #108]	@ (80095ac <xTaskIncrementTick+0x16c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009542:	429a      	cmp	r2, r3
 8009544:	d3b9      	bcc.n	80094ba <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009546:	2301      	movs	r3, #1
 8009548:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800954a:	e7b6      	b.n	80094ba <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800954c:	4b17      	ldr	r3, [pc, #92]	@ (80095ac <xTaskIncrementTick+0x16c>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009552:	4915      	ldr	r1, [pc, #84]	@ (80095a8 <xTaskIncrementTick+0x168>)
 8009554:	4613      	mov	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	440b      	add	r3, r1
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d907      	bls.n	8009574 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009564:	2301      	movs	r3, #1
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	e004      	b.n	8009574 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800956a:	4b11      	ldr	r3, [pc, #68]	@ (80095b0 <xTaskIncrementTick+0x170>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3301      	adds	r3, #1
 8009570:	4a0f      	ldr	r2, [pc, #60]	@ (80095b0 <xTaskIncrementTick+0x170>)
 8009572:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009574:	4b0f      	ldr	r3, [pc, #60]	@ (80095b4 <xTaskIncrementTick+0x174>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800957c:	2301      	movs	r3, #1
 800957e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009580:	697b      	ldr	r3, [r7, #20]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	2000067c 	.word	0x2000067c
 8009590:	20000660 	.word	0x20000660
 8009594:	2000062c 	.word	0x2000062c
 8009598:	20000630 	.word	0x20000630
 800959c:	20000674 	.word	0x20000674
 80095a0:	20000678 	.word	0x20000678
 80095a4:	20000664 	.word	0x20000664
 80095a8:	200005a0 	.word	0x200005a0
 80095ac:	2000059c 	.word	0x2000059c
 80095b0:	2000066c 	.word	0x2000066c
 80095b4:	20000670 	.word	0x20000670

080095b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b088      	sub	sp, #32
 80095bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095be:	4b3b      	ldr	r3, [pc, #236]	@ (80096ac <vTaskSwitchContext+0xf4>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d003      	beq.n	80095ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095c6:	4b3a      	ldr	r3, [pc, #232]	@ (80096b0 <vTaskSwitchContext+0xf8>)
 80095c8:	2201      	movs	r2, #1
 80095ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095cc:	e069      	b.n	80096a2 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 80095ce:	4b38      	ldr	r3, [pc, #224]	@ (80096b0 <vTaskSwitchContext+0xf8>)
 80095d0:	2200      	movs	r2, #0
 80095d2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80095d4:	4b37      	ldr	r3, [pc, #220]	@ (80096b4 <vTaskSwitchContext+0xfc>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095da:	61fb      	str	r3, [r7, #28]
 80095dc:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80095e0:	61bb      	str	r3, [r7, #24]
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	69ba      	ldr	r2, [r7, #24]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d111      	bne.n	8009610 <vTaskSwitchContext+0x58>
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	3304      	adds	r3, #4
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	69ba      	ldr	r2, [r7, #24]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d10b      	bne.n	8009610 <vTaskSwitchContext+0x58>
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	3308      	adds	r3, #8
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	69ba      	ldr	r2, [r7, #24]
 8009600:	429a      	cmp	r2, r3
 8009602:	d105      	bne.n	8009610 <vTaskSwitchContext+0x58>
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	330c      	adds	r3, #12
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	69ba      	ldr	r2, [r7, #24]
 800960c:	429a      	cmp	r2, r3
 800960e:	d008      	beq.n	8009622 <vTaskSwitchContext+0x6a>
 8009610:	4b28      	ldr	r3, [pc, #160]	@ (80096b4 <vTaskSwitchContext+0xfc>)
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	4b27      	ldr	r3, [pc, #156]	@ (80096b4 <vTaskSwitchContext+0xfc>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3334      	adds	r3, #52	@ 0x34
 800961a:	4619      	mov	r1, r3
 800961c:	4610      	mov	r0, r2
 800961e:	f7f6 ffad 	bl	800057c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009622:	4b25      	ldr	r3, [pc, #148]	@ (80096b8 <vTaskSwitchContext+0x100>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	fab3 f383 	clz	r3, r3
 800962e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009630:	7afb      	ldrb	r3, [r7, #11]
 8009632:	f1c3 031f 	rsb	r3, r3, #31
 8009636:	617b      	str	r3, [r7, #20]
 8009638:	4920      	ldr	r1, [pc, #128]	@ (80096bc <vTaskSwitchContext+0x104>)
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	4613      	mov	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4413      	add	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	440b      	add	r3, r1
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10d      	bne.n	8009668 <vTaskSwitchContext+0xb0>
	__asm volatile
 800964c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009650:	b672      	cpsid	i
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	b662      	cpsie	i
 8009660:	607b      	str	r3, [r7, #4]
}
 8009662:	bf00      	nop
 8009664:	bf00      	nop
 8009666:	e7fd      	b.n	8009664 <vTaskSwitchContext+0xac>
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	4613      	mov	r3, r2
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4413      	add	r3, r2
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4a12      	ldr	r2, [pc, #72]	@ (80096bc <vTaskSwitchContext+0x104>)
 8009674:	4413      	add	r3, r2
 8009676:	613b      	str	r3, [r7, #16]
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	685a      	ldr	r2, [r3, #4]
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	605a      	str	r2, [r3, #4]
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	3308      	adds	r3, #8
 800968a:	429a      	cmp	r2, r3
 800968c:	d104      	bne.n	8009698 <vTaskSwitchContext+0xe0>
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	685a      	ldr	r2, [r3, #4]
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	605a      	str	r2, [r3, #4]
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	4a05      	ldr	r2, [pc, #20]	@ (80096b4 <vTaskSwitchContext+0xfc>)
 80096a0:	6013      	str	r3, [r2, #0]
}
 80096a2:	bf00      	nop
 80096a4:	3720      	adds	r7, #32
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	2000067c 	.word	0x2000067c
 80096b0:	20000670 	.word	0x20000670
 80096b4:	2000059c 	.word	0x2000059c
 80096b8:	20000664 	.word	0x20000664
 80096bc:	200005a0 	.word	0x200005a0

080096c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10d      	bne.n	80096ec <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d4:	b672      	cpsid	i
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	b662      	cpsie	i
 80096e4:	60fb      	str	r3, [r7, #12]
}
 80096e6:	bf00      	nop
 80096e8:	bf00      	nop
 80096ea:	e7fd      	b.n	80096e8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096ec:	4b07      	ldr	r3, [pc, #28]	@ (800970c <vTaskPlaceOnEventList+0x4c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3318      	adds	r3, #24
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7ff fb0f 	bl	8008d18 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096fa:	2101      	movs	r1, #1
 80096fc:	6838      	ldr	r0, [r7, #0]
 80096fe:	f000 f9c1 	bl	8009a84 <prvAddCurrentTaskToDelayedList>
}
 8009702:	bf00      	nop
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	2000059c 	.word	0x2000059c

08009710 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10d      	bne.n	8009742 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800972a:	b672      	cpsid	i
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	b662      	cpsie	i
 800973a:	60fb      	str	r3, [r7, #12]
}
 800973c:	bf00      	nop
 800973e:	bf00      	nop
 8009740:	e7fd      	b.n	800973e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	3318      	adds	r3, #24
 8009746:	4618      	mov	r0, r3
 8009748:	f7ff fb1f 	bl	8008d8a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800974c:	4b1d      	ldr	r3, [pc, #116]	@ (80097c4 <xTaskRemoveFromEventList+0xb4>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d11c      	bne.n	800978e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	3304      	adds	r3, #4
 8009758:	4618      	mov	r0, r3
 800975a:	f7ff fb16 	bl	8008d8a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009762:	2201      	movs	r2, #1
 8009764:	409a      	lsls	r2, r3
 8009766:	4b18      	ldr	r3, [pc, #96]	@ (80097c8 <xTaskRemoveFromEventList+0xb8>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4313      	orrs	r3, r2
 800976c:	4a16      	ldr	r2, [pc, #88]	@ (80097c8 <xTaskRemoveFromEventList+0xb8>)
 800976e:	6013      	str	r3, [r2, #0]
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009774:	4613      	mov	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4a13      	ldr	r2, [pc, #76]	@ (80097cc <xTaskRemoveFromEventList+0xbc>)
 800977e:	441a      	add	r2, r3
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	3304      	adds	r3, #4
 8009784:	4619      	mov	r1, r3
 8009786:	4610      	mov	r0, r2
 8009788:	f7ff faa2 	bl	8008cd0 <vListInsertEnd>
 800978c:	e005      	b.n	800979a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	3318      	adds	r3, #24
 8009792:	4619      	mov	r1, r3
 8009794:	480e      	ldr	r0, [pc, #56]	@ (80097d0 <xTaskRemoveFromEventList+0xc0>)
 8009796:	f7ff fa9b 	bl	8008cd0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800979e:	4b0d      	ldr	r3, [pc, #52]	@ (80097d4 <xTaskRemoveFromEventList+0xc4>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d905      	bls.n	80097b4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80097a8:	2301      	movs	r3, #1
 80097aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80097ac:	4b0a      	ldr	r3, [pc, #40]	@ (80097d8 <xTaskRemoveFromEventList+0xc8>)
 80097ae:	2201      	movs	r2, #1
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	e001      	b.n	80097b8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80097b4:	2300      	movs	r3, #0
 80097b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097b8:	697b      	ldr	r3, [r7, #20]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3718      	adds	r7, #24
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	2000067c 	.word	0x2000067c
 80097c8:	20000664 	.word	0x20000664
 80097cc:	200005a0 	.word	0x200005a0
 80097d0:	20000634 	.word	0x20000634
 80097d4:	2000059c 	.word	0x2000059c
 80097d8:	20000670 	.word	0x20000670

080097dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097e4:	4b06      	ldr	r3, [pc, #24]	@ (8009800 <vTaskInternalSetTimeOutState+0x24>)
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097ec:	4b05      	ldr	r3, [pc, #20]	@ (8009804 <vTaskInternalSetTimeOutState+0x28>)
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	605a      	str	r2, [r3, #4]
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	20000674 	.word	0x20000674
 8009804:	20000660 	.word	0x20000660

08009808 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b088      	sub	sp, #32
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10d      	bne.n	8009834 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981c:	b672      	cpsid	i
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	b662      	cpsie	i
 800982c:	613b      	str	r3, [r7, #16]
}
 800982e:	bf00      	nop
 8009830:	bf00      	nop
 8009832:	e7fd      	b.n	8009830 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10d      	bne.n	8009856 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800983a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983e:	b672      	cpsid	i
 8009840:	f383 8811 	msr	BASEPRI, r3
 8009844:	f3bf 8f6f 	isb	sy
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	b662      	cpsie	i
 800984e:	60fb      	str	r3, [r7, #12]
}
 8009850:	bf00      	nop
 8009852:	bf00      	nop
 8009854:	e7fd      	b.n	8009852 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009856:	f000 f98f 	bl	8009b78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800985a:	4b1d      	ldr	r3, [pc, #116]	@ (80098d0 <xTaskCheckForTimeOut+0xc8>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	69ba      	ldr	r2, [r7, #24]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009872:	d102      	bne.n	800987a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009874:	2300      	movs	r3, #0
 8009876:	61fb      	str	r3, [r7, #28]
 8009878:	e023      	b.n	80098c2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	4b15      	ldr	r3, [pc, #84]	@ (80098d4 <xTaskCheckForTimeOut+0xcc>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	429a      	cmp	r2, r3
 8009884:	d007      	beq.n	8009896 <xTaskCheckForTimeOut+0x8e>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	69ba      	ldr	r2, [r7, #24]
 800988c:	429a      	cmp	r2, r3
 800988e:	d302      	bcc.n	8009896 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009890:	2301      	movs	r3, #1
 8009892:	61fb      	str	r3, [r7, #28]
 8009894:	e015      	b.n	80098c2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	429a      	cmp	r2, r3
 800989e:	d20b      	bcs.n	80098b8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	1ad2      	subs	r2, r2, r3
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7ff ff95 	bl	80097dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80098b2:	2300      	movs	r3, #0
 80098b4:	61fb      	str	r3, [r7, #28]
 80098b6:	e004      	b.n	80098c2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	2200      	movs	r2, #0
 80098bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80098be:	2301      	movs	r3, #1
 80098c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80098c2:	f000 f98f 	bl	8009be4 <vPortExitCritical>

	return xReturn;
 80098c6:	69fb      	ldr	r3, [r7, #28]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3720      	adds	r7, #32
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	20000660 	.word	0x20000660
 80098d4:	20000674 	.word	0x20000674

080098d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098d8:	b480      	push	{r7}
 80098da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80098dc:	4b03      	ldr	r3, [pc, #12]	@ (80098ec <vTaskMissedYield+0x14>)
 80098de:	2201      	movs	r2, #1
 80098e0:	601a      	str	r2, [r3, #0]
}
 80098e2:	bf00      	nop
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr
 80098ec:	20000670 	.word	0x20000670

080098f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009928 <prvResetNextTaskUnblockTime+0x38>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d104      	bne.n	800990a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009900:	4b0a      	ldr	r3, [pc, #40]	@ (800992c <prvResetNextTaskUnblockTime+0x3c>)
 8009902:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009906:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009908:	e008      	b.n	800991c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800990a:	4b07      	ldr	r3, [pc, #28]	@ (8009928 <prvResetNextTaskUnblockTime+0x38>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	4a04      	ldr	r2, [pc, #16]	@ (800992c <prvResetNextTaskUnblockTime+0x3c>)
 800991a:	6013      	str	r3, [r2, #0]
}
 800991c:	bf00      	nop
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	2000062c 	.word	0x2000062c
 800992c:	20000678 	.word	0x20000678

08009930 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009936:	4b0b      	ldr	r3, [pc, #44]	@ (8009964 <xTaskGetSchedulerState+0x34>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d102      	bne.n	8009944 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800993e:	2301      	movs	r3, #1
 8009940:	607b      	str	r3, [r7, #4]
 8009942:	e008      	b.n	8009956 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009944:	4b08      	ldr	r3, [pc, #32]	@ (8009968 <xTaskGetSchedulerState+0x38>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d102      	bne.n	8009952 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800994c:	2302      	movs	r3, #2
 800994e:	607b      	str	r3, [r7, #4]
 8009950:	e001      	b.n	8009956 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009952:	2300      	movs	r3, #0
 8009954:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009956:	687b      	ldr	r3, [r7, #4]
	}
 8009958:	4618      	mov	r0, r3
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr
 8009964:	20000668 	.word	0x20000668
 8009968:	2000067c 	.word	0x2000067c

0800996c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009978:	2300      	movs	r3, #0
 800997a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d074      	beq.n	8009a6c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009982:	4b3d      	ldr	r3, [pc, #244]	@ (8009a78 <xTaskPriorityDisinherit+0x10c>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	693a      	ldr	r2, [r7, #16]
 8009988:	429a      	cmp	r2, r3
 800998a:	d00d      	beq.n	80099a8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009990:	b672      	cpsid	i
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	b662      	cpsie	i
 80099a0:	60fb      	str	r3, [r7, #12]
}
 80099a2:	bf00      	nop
 80099a4:	bf00      	nop
 80099a6:	e7fd      	b.n	80099a4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10d      	bne.n	80099cc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b4:	b672      	cpsid	i
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	b662      	cpsie	i
 80099c4:	60bb      	str	r3, [r7, #8]
}
 80099c6:	bf00      	nop
 80099c8:	bf00      	nop
 80099ca:	e7fd      	b.n	80099c8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099d0:	1e5a      	subs	r2, r3, #1
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099de:	429a      	cmp	r2, r3
 80099e0:	d044      	beq.n	8009a6c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d140      	bne.n	8009a6c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	3304      	adds	r3, #4
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7ff f9cb 	bl	8008d8a <uxListRemove>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d115      	bne.n	8009a26 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099fe:	491f      	ldr	r1, [pc, #124]	@ (8009a7c <xTaskPriorityDisinherit+0x110>)
 8009a00:	4613      	mov	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	440b      	add	r3, r1
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10a      	bne.n	8009a26 <xTaskPriorityDisinherit+0xba>
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a14:	2201      	movs	r2, #1
 8009a16:	fa02 f303 	lsl.w	r3, r2, r3
 8009a1a:	43da      	mvns	r2, r3
 8009a1c:	4b18      	ldr	r3, [pc, #96]	@ (8009a80 <xTaskPriorityDisinherit+0x114>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4013      	ands	r3, r2
 8009a22:	4a17      	ldr	r2, [pc, #92]	@ (8009a80 <xTaskPriorityDisinherit+0x114>)
 8009a24:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a32:	f1c3 0207 	rsb	r2, r3, #7
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a3e:	2201      	movs	r2, #1
 8009a40:	409a      	lsls	r2, r3
 8009a42:	4b0f      	ldr	r3, [pc, #60]	@ (8009a80 <xTaskPriorityDisinherit+0x114>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	4a0d      	ldr	r2, [pc, #52]	@ (8009a80 <xTaskPriorityDisinherit+0x114>)
 8009a4a:	6013      	str	r3, [r2, #0]
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a50:	4613      	mov	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4413      	add	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4a08      	ldr	r2, [pc, #32]	@ (8009a7c <xTaskPriorityDisinherit+0x110>)
 8009a5a:	441a      	add	r2, r3
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	3304      	adds	r3, #4
 8009a60:	4619      	mov	r1, r3
 8009a62:	4610      	mov	r0, r2
 8009a64:	f7ff f934 	bl	8008cd0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a6c:	697b      	ldr	r3, [r7, #20]
	}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3718      	adds	r7, #24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	2000059c 	.word	0x2000059c
 8009a7c:	200005a0 	.word	0x200005a0
 8009a80:	20000664 	.word	0x20000664

08009a84 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a8e:	4b29      	ldr	r3, [pc, #164]	@ (8009b34 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a94:	4b28      	ldr	r3, [pc, #160]	@ (8009b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3304      	adds	r3, #4
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7ff f975 	bl	8008d8a <uxListRemove>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10b      	bne.n	8009abe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009aa6:	4b24      	ldr	r3, [pc, #144]	@ (8009b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aac:	2201      	movs	r2, #1
 8009aae:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab2:	43da      	mvns	r2, r3
 8009ab4:	4b21      	ldr	r3, [pc, #132]	@ (8009b3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4013      	ands	r3, r2
 8009aba:	4a20      	ldr	r2, [pc, #128]	@ (8009b3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009abc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ac4:	d10a      	bne.n	8009adc <prvAddCurrentTaskToDelayedList+0x58>
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d007      	beq.n	8009adc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009acc:	4b1a      	ldr	r3, [pc, #104]	@ (8009b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	481a      	ldr	r0, [pc, #104]	@ (8009b40 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009ad6:	f7ff f8fb 	bl	8008cd0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ada:	e026      	b.n	8009b2a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ae4:	4b14      	ldr	r3, [pc, #80]	@ (8009b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d209      	bcs.n	8009b08 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009af4:	4b13      	ldr	r3, [pc, #76]	@ (8009b44 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	4b0f      	ldr	r3, [pc, #60]	@ (8009b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	3304      	adds	r3, #4
 8009afe:	4619      	mov	r1, r3
 8009b00:	4610      	mov	r0, r2
 8009b02:	f7ff f909 	bl	8008d18 <vListInsert>
}
 8009b06:	e010      	b.n	8009b2a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b08:	4b0f      	ldr	r3, [pc, #60]	@ (8009b48 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	3304      	adds	r3, #4
 8009b12:	4619      	mov	r1, r3
 8009b14:	4610      	mov	r0, r2
 8009b16:	f7ff f8ff 	bl	8008d18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d202      	bcs.n	8009b2a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009b24:	4a09      	ldr	r2, [pc, #36]	@ (8009b4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	6013      	str	r3, [r2, #0]
}
 8009b2a:	bf00      	nop
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	20000660 	.word	0x20000660
 8009b38:	2000059c 	.word	0x2000059c
 8009b3c:	20000664 	.word	0x20000664
 8009b40:	20000648 	.word	0x20000648
 8009b44:	20000630 	.word	0x20000630
 8009b48:	2000062c 	.word	0x2000062c
 8009b4c:	20000678 	.word	0x20000678

08009b50 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b50:	4b07      	ldr	r3, [pc, #28]	@ (8009b70 <pxCurrentTCBConst2>)
 8009b52:	6819      	ldr	r1, [r3, #0]
 8009b54:	6808      	ldr	r0, [r1, #0]
 8009b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5a:	f380 8809 	msr	PSP, r0
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f04f 0000 	mov.w	r0, #0
 8009b66:	f380 8811 	msr	BASEPRI, r0
 8009b6a:	4770      	bx	lr
 8009b6c:	f3af 8000 	nop.w

08009b70 <pxCurrentTCBConst2>:
 8009b70:	2000059c 	.word	0x2000059c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b74:	bf00      	nop
 8009b76:	bf00      	nop

08009b78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b82:	b672      	cpsid	i
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	b662      	cpsie	i
 8009b92:	607b      	str	r3, [r7, #4]
}
 8009b94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b96:	4b11      	ldr	r3, [pc, #68]	@ (8009bdc <vPortEnterCritical+0x64>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8009bdc <vPortEnterCritical+0x64>)
 8009b9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8009bdc <vPortEnterCritical+0x64>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d112      	bne.n	8009bce <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8009be0 <vPortEnterCritical+0x68>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00d      	beq.n	8009bce <vPortEnterCritical+0x56>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb6:	b672      	cpsid	i
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	b662      	cpsie	i
 8009bc6:	603b      	str	r3, [r7, #0]
}
 8009bc8:	bf00      	nop
 8009bca:	bf00      	nop
 8009bcc:	e7fd      	b.n	8009bca <vPortEnterCritical+0x52>
	}
}
 8009bce:	bf00      	nop
 8009bd0:	370c      	adds	r7, #12
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	20000028 	.word	0x20000028
 8009be0:	e000ed04 	.word	0xe000ed04

08009be4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bea:	4b13      	ldr	r3, [pc, #76]	@ (8009c38 <vPortExitCritical+0x54>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d10d      	bne.n	8009c0e <vPortExitCritical+0x2a>
	__asm volatile
 8009bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf6:	b672      	cpsid	i
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	b662      	cpsie	i
 8009c06:	607b      	str	r3, [r7, #4]
}
 8009c08:	bf00      	nop
 8009c0a:	bf00      	nop
 8009c0c:	e7fd      	b.n	8009c0a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8009c38 <vPortExitCritical+0x54>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	4a08      	ldr	r2, [pc, #32]	@ (8009c38 <vPortExitCritical+0x54>)
 8009c16:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c18:	4b07      	ldr	r3, [pc, #28]	@ (8009c38 <vPortExitCritical+0x54>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d105      	bne.n	8009c2c <vPortExitCritical+0x48>
 8009c20:	2300      	movs	r3, #0
 8009c22:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	f383 8811 	msr	BASEPRI, r3
}
 8009c2a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	20000028 	.word	0x20000028
 8009c3c:	00000000 	.word	0x00000000

08009c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c40:	f3ef 8009 	mrs	r0, PSP
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	4b15      	ldr	r3, [pc, #84]	@ (8009ca0 <pxCurrentTCBConst>)
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	f01e 0f10 	tst.w	lr, #16
 8009c50:	bf08      	it	eq
 8009c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5a:	6010      	str	r0, [r2, #0]
 8009c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009c64:	b672      	cpsid	i
 8009c66:	f380 8811 	msr	BASEPRI, r0
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	b662      	cpsie	i
 8009c74:	f7ff fca0 	bl	80095b8 <vTaskSwitchContext>
 8009c78:	f04f 0000 	mov.w	r0, #0
 8009c7c:	f380 8811 	msr	BASEPRI, r0
 8009c80:	bc09      	pop	{r0, r3}
 8009c82:	6819      	ldr	r1, [r3, #0]
 8009c84:	6808      	ldr	r0, [r1, #0]
 8009c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8a:	f01e 0f10 	tst.w	lr, #16
 8009c8e:	bf08      	it	eq
 8009c90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c94:	f380 8809 	msr	PSP, r0
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop

08009ca0 <pxCurrentTCBConst>:
 8009ca0:	2000059c 	.word	0x2000059c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ca4:	bf00      	nop
 8009ca6:	bf00      	nop

08009ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
	__asm volatile
 8009cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb2:	b672      	cpsid	i
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	b662      	cpsie	i
 8009cc2:	607b      	str	r3, [r7, #4]
}
 8009cc4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009cc6:	f7ff fbbb 	bl	8009440 <xTaskIncrementTick>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d003      	beq.n	8009cd8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cd0:	4b06      	ldr	r3, [pc, #24]	@ (8009cec <SysTick_Handler+0x44>)
 8009cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cd6:	601a      	str	r2, [r3, #0]
 8009cd8:	2300      	movs	r3, #0
 8009cda:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	f383 8811 	msr	BASEPRI, r3
}
 8009ce2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ce4:	bf00      	nop
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	e000ed04 	.word	0xe000ed04

08009cf0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cf6:	f3ef 8305 	mrs	r3, IPSR
 8009cfa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2b0f      	cmp	r3, #15
 8009d00:	d917      	bls.n	8009d32 <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d02:	4a1a      	ldr	r2, [pc, #104]	@ (8009d6c <vPortValidateInterruptPriority+0x7c>)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	4413      	add	r3, r2
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d0c:	4b18      	ldr	r3, [pc, #96]	@ (8009d70 <vPortValidateInterruptPriority+0x80>)
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	7afa      	ldrb	r2, [r7, #11]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d20d      	bcs.n	8009d32 <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1a:	b672      	cpsid	i
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	b662      	cpsie	i
 8009d2a:	607b      	str	r3, [r7, #4]
}
 8009d2c:	bf00      	nop
 8009d2e:	bf00      	nop
 8009d30:	e7fd      	b.n	8009d2e <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d32:	4b10      	ldr	r3, [pc, #64]	@ (8009d74 <vPortValidateInterruptPriority+0x84>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8009d78 <vPortValidateInterruptPriority+0x88>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d90d      	bls.n	8009d5e <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d46:	b672      	cpsid	i
 8009d48:	f383 8811 	msr	BASEPRI, r3
 8009d4c:	f3bf 8f6f 	isb	sy
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	b662      	cpsie	i
 8009d56:	603b      	str	r3, [r7, #0]
}
 8009d58:	bf00      	nop
 8009d5a:	bf00      	nop
 8009d5c:	e7fd      	b.n	8009d5a <vPortValidateInterruptPriority+0x6a>
	}
 8009d5e:	bf00      	nop
 8009d60:	3714      	adds	r7, #20
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	e000e3f0 	.word	0xe000e3f0
 8009d70:	20000680 	.word	0x20000680
 8009d74:	e000ed0c 	.word	0xe000ed0c
 8009d78:	20000684 	.word	0x20000684

08009d7c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7fe fe72 	bl	8008a74 <USBH_LL_IncTimer>
}
 8009d90:	bf00      	nop
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe feb6 	bl	8008b18 <USBH_LL_Connect>
}
 8009dac:	bf00      	nop
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe fecb 	bl	8008b5e <USBH_LL_Disconnect>
}
 8009dc8:	bf00      	nop
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	70fb      	strb	r3, [r7, #3]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fe feeb 	bl	8008bc2 <USBH_LL_NotifyURBChange>
#endif
}
 8009dec:	bf00      	nop
 8009dee:	3708      	adds	r7, #8
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fe fe60 	bl	8008ac8 <USBH_LL_PortEnabled>
}
 8009e08:	bf00      	nop
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fe fe6c 	bl	8008afc <USBH_LL_PortDisabled>
}
 8009e24:	bf00      	nop
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7f9 fb3d 	bl	80034c2 <HAL_HCD_Stop>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 f808 	bl	8009e64 <USBH_Get_USB_Status>
 8009e54:	4603      	mov	r3, r0
 8009e56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
	...

08009e64 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e72:	79fb      	ldrb	r3, [r7, #7]
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d817      	bhi.n	8009ea8 <USBH_Get_USB_Status+0x44>
 8009e78:	a201      	add	r2, pc, #4	@ (adr r2, 8009e80 <USBH_Get_USB_Status+0x1c>)
 8009e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7e:	bf00      	nop
 8009e80:	08009e91 	.word	0x08009e91
 8009e84:	08009e97 	.word	0x08009e97
 8009e88:	08009e9d 	.word	0x08009e9d
 8009e8c:	08009ea3 	.word	0x08009ea3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	73fb      	strb	r3, [r7, #15]
    break;
 8009e94:	e00b      	b.n	8009eae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009e96:	2302      	movs	r3, #2
 8009e98:	73fb      	strb	r3, [r7, #15]
    break;
 8009e9a:	e008      	b.n	8009eae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea0:	e005      	b.n	8009eae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea6:	e002      	b.n	8009eae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	73fb      	strb	r3, [r7, #15]
    break;
 8009eac:	bf00      	nop
  }
  return usb_status;
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <islower>:
 8009ebc:	4b04      	ldr	r3, [pc, #16]	@ (8009ed0 <islower+0x14>)
 8009ebe:	4403      	add	r3, r0
 8009ec0:	7858      	ldrb	r0, [r3, #1]
 8009ec2:	f000 0003 	and.w	r0, r0, #3
 8009ec6:	1e83      	subs	r3, r0, #2
 8009ec8:	4258      	negs	r0, r3
 8009eca:	4158      	adcs	r0, r3
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	0800bf7c 	.word	0x0800bf7c

08009ed4 <toupper>:
 8009ed4:	4b03      	ldr	r3, [pc, #12]	@ (8009ee4 <toupper+0x10>)
 8009ed6:	5c1b      	ldrb	r3, [r3, r0]
 8009ed8:	f003 0303 	and.w	r3, r3, #3
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	bf08      	it	eq
 8009ee0:	3820      	subeq	r0, #32
 8009ee2:	4770      	bx	lr
 8009ee4:	0800bf7d 	.word	0x0800bf7d

08009ee8 <memset>:
 8009ee8:	4402      	add	r2, r0
 8009eea:	4603      	mov	r3, r0
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d100      	bne.n	8009ef2 <memset+0xa>
 8009ef0:	4770      	bx	lr
 8009ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ef6:	e7f9      	b.n	8009eec <memset+0x4>

08009ef8 <strchr>:
 8009ef8:	b2c9      	uxtb	r1, r1
 8009efa:	4603      	mov	r3, r0
 8009efc:	4618      	mov	r0, r3
 8009efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f02:	b112      	cbz	r2, 8009f0a <strchr+0x12>
 8009f04:	428a      	cmp	r2, r1
 8009f06:	d1f9      	bne.n	8009efc <strchr+0x4>
 8009f08:	4770      	bx	lr
 8009f0a:	2900      	cmp	r1, #0
 8009f0c:	bf18      	it	ne
 8009f0e:	2000      	movne	r0, #0
 8009f10:	4770      	bx	lr

08009f12 <strncpy>:
 8009f12:	b510      	push	{r4, lr}
 8009f14:	3901      	subs	r1, #1
 8009f16:	4603      	mov	r3, r0
 8009f18:	b132      	cbz	r2, 8009f28 <strncpy+0x16>
 8009f1a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009f1e:	f803 4b01 	strb.w	r4, [r3], #1
 8009f22:	3a01      	subs	r2, #1
 8009f24:	2c00      	cmp	r4, #0
 8009f26:	d1f7      	bne.n	8009f18 <strncpy+0x6>
 8009f28:	441a      	add	r2, r3
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d100      	bne.n	8009f32 <strncpy+0x20>
 8009f30:	bd10      	pop	{r4, pc}
 8009f32:	f803 1b01 	strb.w	r1, [r3], #1
 8009f36:	e7f9      	b.n	8009f2c <strncpy+0x1a>

08009f38 <strstr>:
 8009f38:	780a      	ldrb	r2, [r1, #0]
 8009f3a:	b570      	push	{r4, r5, r6, lr}
 8009f3c:	b96a      	cbnz	r2, 8009f5a <strstr+0x22>
 8009f3e:	bd70      	pop	{r4, r5, r6, pc}
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d109      	bne.n	8009f58 <strstr+0x20>
 8009f44:	460c      	mov	r4, r1
 8009f46:	4605      	mov	r5, r0
 8009f48:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d0f6      	beq.n	8009f3e <strstr+0x6>
 8009f50:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009f54:	429e      	cmp	r6, r3
 8009f56:	d0f7      	beq.n	8009f48 <strstr+0x10>
 8009f58:	3001      	adds	r0, #1
 8009f5a:	7803      	ldrb	r3, [r0, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1ef      	bne.n	8009f40 <strstr+0x8>
 8009f60:	4618      	mov	r0, r3
 8009f62:	e7ec      	b.n	8009f3e <strstr+0x6>

08009f64 <__libc_init_array>:
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	4d0d      	ldr	r5, [pc, #52]	@ (8009f9c <__libc_init_array+0x38>)
 8009f68:	4c0d      	ldr	r4, [pc, #52]	@ (8009fa0 <__libc_init_array+0x3c>)
 8009f6a:	1b64      	subs	r4, r4, r5
 8009f6c:	10a4      	asrs	r4, r4, #2
 8009f6e:	2600      	movs	r6, #0
 8009f70:	42a6      	cmp	r6, r4
 8009f72:	d109      	bne.n	8009f88 <__libc_init_array+0x24>
 8009f74:	4d0b      	ldr	r5, [pc, #44]	@ (8009fa4 <__libc_init_array+0x40>)
 8009f76:	4c0c      	ldr	r4, [pc, #48]	@ (8009fa8 <__libc_init_array+0x44>)
 8009f78:	f000 f826 	bl	8009fc8 <_init>
 8009f7c:	1b64      	subs	r4, r4, r5
 8009f7e:	10a4      	asrs	r4, r4, #2
 8009f80:	2600      	movs	r6, #0
 8009f82:	42a6      	cmp	r6, r4
 8009f84:	d105      	bne.n	8009f92 <__libc_init_array+0x2e>
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
 8009f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f8c:	4798      	blx	r3
 8009f8e:	3601      	adds	r6, #1
 8009f90:	e7ee      	b.n	8009f70 <__libc_init_array+0xc>
 8009f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f96:	4798      	blx	r3
 8009f98:	3601      	adds	r6, #1
 8009f9a:	e7f2      	b.n	8009f82 <__libc_init_array+0x1e>
 8009f9c:	0800c088 	.word	0x0800c088
 8009fa0:	0800c088 	.word	0x0800c088
 8009fa4:	0800c088 	.word	0x0800c088
 8009fa8:	0800c08c 	.word	0x0800c08c

08009fac <memcpy>:
 8009fac:	440a      	add	r2, r1
 8009fae:	4291      	cmp	r1, r2
 8009fb0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009fb4:	d100      	bne.n	8009fb8 <memcpy+0xc>
 8009fb6:	4770      	bx	lr
 8009fb8:	b510      	push	{r4, lr}
 8009fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fc2:	4291      	cmp	r1, r2
 8009fc4:	d1f9      	bne.n	8009fba <memcpy+0xe>
 8009fc6:	bd10      	pop	{r4, pc}

08009fc8 <_init>:
 8009fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fca:	bf00      	nop
 8009fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fce:	bc08      	pop	{r3}
 8009fd0:	469e      	mov	lr, r3
 8009fd2:	4770      	bx	lr

08009fd4 <_fini>:
 8009fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd6:	bf00      	nop
 8009fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fda:	bc08      	pop	{r3}
 8009fdc:	469e      	mov	lr, r3
 8009fde:	4770      	bx	lr
