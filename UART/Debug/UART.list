
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a300  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002120  0800a4d0  0800a4d0  0000b4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5f0  0800c5f0  0000e02c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5f0  0800c5f0  0000d5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5f8  0800c5f8  0000e02c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5f8  0800c5f8  0000d5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5fc  0800c5fc  0000d5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  0800c600  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a4c  2000002c  0800c62c  0000e02c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a78  0800c62c  0000ea78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e02c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c946  00000000  00000000  0000e05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053f9  00000000  00000000  0003a9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d8  00000000  00000000  0003fda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001971  00000000  00000000  00041e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030e11  00000000  00000000  000437e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029684  00000000  00000000  000745fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00127103  00000000  00000000  0009dc7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c4d81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bdc  00000000  00000000  001c4dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001cd9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000002c 	.word	0x2000002c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a4b8 	.word	0x0800a4b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000030 	.word	0x20000030
 800020c:	0800a4b8 	.word	0x0800a4b8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <debug_log>:

#include "debug.h"

uint16_t debug_row = 0;

void debug_log(uint8_t new_page, const char *message, uint8_t error) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	6039      	str	r1, [r7, #0]
 800051a:	71fb      	strb	r3, [r7, #7]
 800051c:	4613      	mov	r3, r2
 800051e:	71bb      	strb	r3, [r7, #6]
	BSP_LCD_SetFont(DEBUG_FONT);
 8000520:	4817      	ldr	r0, [pc, #92]	@ (8000580 <debug_log+0x70>)
 8000522:	f001 fa8d 	bl	8001a40 <BSP_LCD_SetFont>
	if (new_page != 0)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d00a      	beq.n	8000542 <debug_log+0x32>
	{
		 BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800052c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000530:	f001 fa6c 	bl	8001a0c <BSP_LCD_SetBackColor>
		 BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000534:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000538:	f001 fa9c 	bl	8001a74 <BSP_LCD_Clear>
		 debug_row = 0;
 800053c:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <debug_log+0x74>)
 800053e:	2200      	movs	r2, #0
 8000540:	801a      	strh	r2, [r3, #0]
	}
	if (error != 0)
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d003      	beq.n	8000550 <debug_log+0x40>
	{
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000548:	480f      	ldr	r0, [pc, #60]	@ (8000588 <debug_log+0x78>)
 800054a:	f001 fa47 	bl	80019dc <BSP_LCD_SetTextColor>
 800054e:	e003      	b.n	8000558 <debug_log+0x48>
	}
	else
	{
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000550:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000554:	f001 fa42 	bl	80019dc <BSP_LCD_SetTextColor>
	}
	BSP_LCD_DisplayStringAt(0, DEBUG_FONT_SIZE * debug_row++, (uint8_t*)message, LEFT_MODE);
 8000558:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <debug_log+0x74>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	1c5a      	adds	r2, r3, #1
 800055e:	b291      	uxth	r1, r2
 8000560:	4a08      	ldr	r2, [pc, #32]	@ (8000584 <debug_log+0x74>)
 8000562:	8011      	strh	r1, [r2, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	0052      	lsls	r2, r2, #1
 8000568:	4413      	add	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	b299      	uxth	r1, r3
 800056e:	2303      	movs	r3, #3
 8000570:	683a      	ldr	r2, [r7, #0]
 8000572:	2000      	movs	r0, #0
 8000574:	f001 faea 	bl	8001b4c <BSP_LCD_DisplayStringAt>
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000014 	.word	0x20000014
 8000584:	20000048 	.word	0x20000048
 8000588:	ffff0000 	.word	0xffff0000

0800058c <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <HAL_UART_RxCpltCallback>:
uint8_t rx_buffer[RX_BUFFER_SIZE];
volatile uint16_t rx_index = 0;
uint8_t received_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000620 <HAL_UART_RxCpltCallback+0x7c>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d12f      	bne.n	8000616 <HAL_UART_RxCpltCallback+0x72>
    {
        if (rx_index < RX_BUFFER_SIZE - 1)
 80005b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <HAL_UART_RxCpltCallback+0x80>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80005be:	d825      	bhi.n	800060c <HAL_UART_RxCpltCallback+0x68>
        {
            rx_buffer[rx_index++] = received_data;
 80005c0:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <HAL_UART_RxCpltCallback+0x80>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	b291      	uxth	r1, r2
 80005ca:	4a16      	ldr	r2, [pc, #88]	@ (8000624 <HAL_UART_RxCpltCallback+0x80>)
 80005cc:	8011      	strh	r1, [r2, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <HAL_UART_RxCpltCallback+0x84>)
 80005d2:	7819      	ldrb	r1, [r3, #0]
 80005d4:	4b15      	ldr	r3, [pc, #84]	@ (800062c <HAL_UART_RxCpltCallback+0x88>)
 80005d6:	5499      	strb	r1, [r3, r2]

            if (received_data == '\n' || received_data == '\r' || rx_index == RX_BUFFER_SIZE - 1)
 80005d8:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <HAL_UART_RxCpltCallback+0x84>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b0a      	cmp	r3, #10
 80005de:	d008      	beq.n	80005f2 <HAL_UART_RxCpltCallback+0x4e>
 80005e0:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <HAL_UART_RxCpltCallback+0x84>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b0d      	cmp	r3, #13
 80005e6:	d004      	beq.n	80005f2 <HAL_UART_RxCpltCallback+0x4e>
 80005e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <HAL_UART_RxCpltCallback+0x80>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	2bff      	cmp	r3, #255	@ 0xff
 80005f0:	d10c      	bne.n	800060c <HAL_UART_RxCpltCallback+0x68>
            {
                rx_buffer[rx_index-1] = '\0';
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <HAL_UART_RxCpltCallback+0x80>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	3b01      	subs	r3, #1
 80005fa:	4a0c      	ldr	r2, [pc, #48]	@ (800062c <HAL_UART_RxCpltCallback+0x88>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	54d1      	strb	r1, [r2, r3]
                process_stream((char*)rx_buffer);
 8000600:	480a      	ldr	r0, [pc, #40]	@ (800062c <HAL_UART_RxCpltCallback+0x88>)
 8000602:	f000 fdf7 	bl	80011f4 <process_stream>
                //debug_log(0, (char*)rx_buffer, 0);
                rx_index = 0;
 8000606:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <HAL_UART_RxCpltCallback+0x80>)
 8000608:	2200      	movs	r2, #0
 800060a:	801a      	strh	r2, [r3, #0]
            }
        }

        HAL_UART_Receive_IT(&huart1, &received_data, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	4906      	ldr	r1, [pc, #24]	@ (8000628 <HAL_UART_RxCpltCallback+0x84>)
 8000610:	4807      	ldr	r0, [pc, #28]	@ (8000630 <HAL_UART_RxCpltCallback+0x8c>)
 8000612:	f006 fe73 	bl	80072fc <HAL_UART_Receive_IT>
    }
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40011000 	.word	0x40011000
 8000624:	200002bc 	.word	0x200002bc
 8000628:	200002be 	.word	0x200002be
 800062c:	200001bc 	.word	0x200001bc
 8000630:	20000134 	.word	0x20000134

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f001 ffc2 	bl	80025c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f81e 	bl	800067c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000640:	f000 f88e 	bl	8000760 <PeriphCommonClock_Config>
  MX_USART6_UART_Init();
  MX_FATFS_Init();
  */
  //MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000644:	f001 f8c2 	bl	80017cc <BSP_LCD_Init>
  /* Initialize the LCD Layers */
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FB_START_ADDRESS);
 8000648:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800064c:	2001      	movs	r0, #1
 800064e:	f001 f955 	bl	80018fc <BSP_LCD_LayerDefaultInit>
  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8000652:	2001      	movs	r0, #1
 8000654:	f001 f9b2 	bl	80019bc <BSP_LCD_SelectLayer>
  debug_log(1, "LCD Initialized", 0);
 8000658:	2200      	movs	r2, #0
 800065a:	4907      	ldr	r1, [pc, #28]	@ (8000678 <main+0x44>)
 800065c:	2001      	movs	r0, #1
 800065e:	f7ff ff57 	bl	8000510 <debug_log>
  init_board_state();
 8000662:	f001 f84d 	bl	8001700 <init_board_state>
  MX_USART1_UART_Init();
 8000666:	f000 f8ad 	bl	80007c4 <MX_USART1_UART_Init>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800066a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800066e:	f001 fa01 	bl	8001a74 <BSP_LCD_Clear>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000672:	bf00      	nop
 8000674:	e7fd      	b.n	8000672 <main+0x3e>
 8000676:	bf00      	nop
 8000678:	0800a4d0 	.word	0x0800a4d0

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	@ 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	@ 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f009 fea4 	bl	800a3d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a0:	f005 f978 	bl	8005994 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000758 <SystemClock_Config+0xdc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	4a2b      	ldr	r2, [pc, #172]	@ (8000758 <SystemClock_Config+0xdc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b0:	4b29      	ldr	r3, [pc, #164]	@ (8000758 <SystemClock_Config+0xdc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	4b27      	ldr	r3, [pc, #156]	@ (800075c <SystemClock_Config+0xe0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a26      	ldr	r2, [pc, #152]	@ (800075c <SystemClock_Config+0xe0>)
 80006c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b24      	ldr	r3, [pc, #144]	@ (800075c <SystemClock_Config+0xe0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006d4:	2309      	movs	r3, #9
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006de:	2301      	movs	r3, #1
 80006e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006ec:	2319      	movs	r3, #25
 80006ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80006f0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80006f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006fa:	2309      	movs	r3, #9
 80006fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	4618      	mov	r0, r3
 8000704:	f005 f9a6 	bl	8005a54 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800070e:	f000 f8af 	bl	8000870 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000712:	f005 f94f 	bl	80059b4 <HAL_PWREx_EnableOverDrive>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800071c:	f000 f8a8 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2106      	movs	r1, #6
 800073e:	4618      	mov	r0, r3
 8000740:	f005 fc2c 	bl	8005f9c <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800074a:	f000 f891 	bl	8000870 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	@ 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b0a2      	sub	sp, #136	@ 0x88
 8000764:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2284      	movs	r2, #132	@ 0x84
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f009 fe33 	bl	800a3d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8000772:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <PeriphCommonClock_Config+0x60>)
 8000774:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000776:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800077a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800077c:	2305      	movs	r3, #5
 800077e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000784:	2303      	movs	r3, #3
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000788:	2301      	movs	r3, #1
 800078a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800078c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000790:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000792:	2300      	movs	r3, #0
 8000794:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000796:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800079a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4618      	mov	r0, r3
 80007a8:	f005 fe10 	bl	80063cc <HAL_RCCEx_PeriphCLKConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80007b2:	f000 f85d 	bl	8000870 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3788      	adds	r7, #136	@ 0x88
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	00b00008 	.word	0x00b00008

080007c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <MX_USART1_UART_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	@ (800083c <MX_USART1_UART_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <MX_USART1_UART_Init+0x74>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <MX_USART1_UART_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <MX_USART1_UART_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <MX_USART1_UART_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <MX_USART1_UART_Init+0x74>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <MX_USART1_UART_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <MX_USART1_UART_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_USART1_UART_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000800:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <MX_USART1_UART_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000806:	480c      	ldr	r0, [pc, #48]	@ (8000838 <MX_USART1_UART_Init+0x74>)
 8000808:	f006 fd2a 	bl	8007260 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d006      	beq.n	8000820 <MX_USART1_UART_Init+0x5c>
  {
	debug_log(0, "USART/UART Initialization error", 1);
 8000812:	2201      	movs	r2, #1
 8000814:	490a      	ldr	r1, [pc, #40]	@ (8000840 <MX_USART1_UART_Init+0x7c>)
 8000816:	2000      	movs	r0, #0
 8000818:	f7ff fe7a 	bl	8000510 <debug_log>
    Error_Handler();
 800081c:	f000 f828 	bl	8000870 <Error_Handler>
  }
  debug_log(0, "USART/UART Initialized", 0);
 8000820:	2200      	movs	r2, #0
 8000822:	4908      	ldr	r1, [pc, #32]	@ (8000844 <MX_USART1_UART_Init+0x80>)
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff fe73 	bl	8000510 <debug_log>

  HAL_UART_Receive_IT(&huart1, &received_data, 1);
 800082a:	2201      	movs	r2, #1
 800082c:	4906      	ldr	r1, [pc, #24]	@ (8000848 <MX_USART1_UART_Init+0x84>)
 800082e:	4802      	ldr	r0, [pc, #8]	@ (8000838 <MX_USART1_UART_Init+0x74>)
 8000830:	f006 fd64 	bl	80072fc <HAL_UART_Receive_IT>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000134 	.word	0x20000134
 800083c:	40011000 	.word	0x40011000
 8000840:	0800a4e0 	.word	0x0800a4e0
 8000844:	0800a500 	.word	0x0800a500
 8000848:	200002be 	.word	0x200002be

0800084c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a04      	ldr	r2, [pc, #16]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d101      	bne.n	8000862 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800085e:	f001 febd 	bl	80025dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40001000 	.word	0x40001000

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <Error_Handler+0x8>

0800087c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000886:	4a10      	ldr	r2, [pc, #64]	@ (80008c8 <HAL_MspInit+0x4c>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088c:	6413      	str	r3, [r2, #64]	@ 0x40
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <HAL_MspInit+0x4c>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089e:	4a0a      	ldr	r2, [pc, #40]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	210f      	movs	r1, #15
 80008b6:	f06f 0001 	mvn.w	r0, #1
 80008ba:	f001 ff8b 	bl	80027d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000910 <HAL_DMA2D_MspInit+0x44>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d113      	bne.n	8000906 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80008de:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <HAL_DMA2D_MspInit+0x48>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000914 <HAL_DMA2D_MspInit+0x48>)
 80008e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <HAL_DMA2D_MspInit+0x48>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2105      	movs	r1, #5
 80008fa:	205a      	movs	r0, #90	@ 0x5a
 80008fc:	f001 ff6a 	bl	80027d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000900:	205a      	movs	r0, #90	@ 0x5a
 8000902:	f001 ff83 	bl	800280c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	4002b000 	.word	0x4002b000
 8000914:	40023800 	.word	0x40023800

08000918 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08e      	sub	sp, #56	@ 0x38
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a55      	ldr	r2, [pc, #340]	@ (8000a8c <HAL_LTDC_MspInit+0x174>)
 8000936:	4293      	cmp	r3, r2
 8000938:	f040 80a3 	bne.w	8000a82 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800093c:	4b54      	ldr	r3, [pc, #336]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 800093e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000940:	4a53      	ldr	r2, [pc, #332]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 8000942:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000946:	6453      	str	r3, [r2, #68]	@ 0x44
 8000948:	4b51      	ldr	r3, [pc, #324]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 800094a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000950:	623b      	str	r3, [r7, #32]
 8000952:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000954:	4b4e      	ldr	r3, [pc, #312]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000958:	4a4d      	ldr	r2, [pc, #308]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000960:	4b4b      	ldr	r3, [pc, #300]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000964:	f003 0310 	and.w	r3, r3, #16
 8000968:	61fb      	str	r3, [r7, #28]
 800096a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800096c:	4b48      	ldr	r3, [pc, #288]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000970:	4a47      	ldr	r2, [pc, #284]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 8000972:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000976:	6313      	str	r3, [r2, #48]	@ 0x30
 8000978:	4b45      	ldr	r3, [pc, #276]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000980:	61bb      	str	r3, [r7, #24]
 8000982:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000984:	4b42      	ldr	r3, [pc, #264]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000988:	4a41      	ldr	r2, [pc, #260]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 800098a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800098e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000990:	4b3f      	ldr	r3, [pc, #252]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800099c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a0:	4a3b      	ldr	r2, [pc, #236]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 80009a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a8:	4b39      	ldr	r3, [pc, #228]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80009b4:	4b36      	ldr	r3, [pc, #216]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b8:	4a35      	ldr	r2, [pc, #212]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 80009ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009be:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c0:	4b33      	ldr	r3, [pc, #204]	@ (8000a90 <HAL_LTDC_MspInit+0x178>)
 80009c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80009cc:	2310      	movs	r3, #16
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009dc:	230e      	movs	r3, #14
 80009de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e4:	4619      	mov	r1, r3
 80009e6:	482b      	ldr	r0, [pc, #172]	@ (8000a94 <HAL_LTDC_MspInit+0x17c>)
 80009e8:	f002 fd0a 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80009ec:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009fe:	230e      	movs	r3, #14
 8000a00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	4823      	ldr	r0, [pc, #140]	@ (8000a98 <HAL_LTDC_MspInit+0x180>)
 8000a0a:	f002 fcf9 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a0e:	23f7      	movs	r3, #247	@ 0xf7
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a1e:	230e      	movs	r3, #14
 8000a20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	481c      	ldr	r0, [pc, #112]	@ (8000a9c <HAL_LTDC_MspInit+0x184>)
 8000a2a:	f002 fce9 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a40:	2309      	movs	r3, #9
 8000a42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4815      	ldr	r0, [pc, #84]	@ (8000aa0 <HAL_LTDC_MspInit+0x188>)
 8000a4c:	f002 fcd8 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000a50:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a62:	230e      	movs	r3, #14
 8000a64:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <HAL_LTDC_MspInit+0x18c>)
 8000a6e:	f002 fcc7 	bl	8003400 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2105      	movs	r1, #5
 8000a76:	2058      	movs	r0, #88	@ 0x58
 8000a78:	f001 feac 	bl	80027d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000a7c:	2058      	movs	r0, #88	@ 0x58
 8000a7e:	f001 fec5 	bl	800280c <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8000a82:	bf00      	nop
 8000a84:	3738      	adds	r7, #56	@ 0x38
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40016800 	.word	0x40016800
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40022400 	.word	0x40022400
 8000a9c:	40022800 	.word	0x40022800
 8000aa0:	40021800 	.word	0x40021800
 8000aa4:	40022000 	.word	0x40022000

08000aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	@ 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a2e      	ldr	r2, [pc, #184]	@ (8000b70 <HAL_TIM_Base_MspInit+0xc8>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d10c      	bne.n	8000ad4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aba:	4b2e      	ldr	r3, [pc, #184]	@ (8000b74 <HAL_TIM_Base_MspInit+0xcc>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	4a2d      	ldr	r2, [pc, #180]	@ (8000b74 <HAL_TIM_Base_MspInit+0xcc>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b74 <HAL_TIM_Base_MspInit+0xcc>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000ad2:	e046      	b.n	8000b62 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000adc:	d10c      	bne.n	8000af8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ade:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <HAL_TIM_Base_MspInit+0xcc>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	4a24      	ldr	r2, [pc, #144]	@ (8000b74 <HAL_TIM_Base_MspInit+0xcc>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aea:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <HAL_TIM_Base_MspInit+0xcc>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	61bb      	str	r3, [r7, #24]
 8000af4:	69bb      	ldr	r3, [r7, #24]
}
 8000af6:	e034      	b.n	8000b62 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a1e      	ldr	r2, [pc, #120]	@ (8000b78 <HAL_TIM_Base_MspInit+0xd0>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d10c      	bne.n	8000b1c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b02:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <HAL_TIM_Base_MspInit+0xcc>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	4a1b      	ldr	r2, [pc, #108]	@ (8000b74 <HAL_TIM_Base_MspInit+0xcc>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0e:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <HAL_TIM_Base_MspInit+0xcc>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697b      	ldr	r3, [r7, #20]
}
 8000b1a:	e022      	b.n	8000b62 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a16      	ldr	r2, [pc, #88]	@ (8000b7c <HAL_TIM_Base_MspInit+0xd4>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d10c      	bne.n	8000b40 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000b26:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <HAL_TIM_Base_MspInit+0xcc>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <HAL_TIM_Base_MspInit+0xcc>)
 8000b2c:	f043 0308 	orr.w	r3, r3, #8
 8000b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <HAL_TIM_Base_MspInit+0xcc>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	f003 0308 	and.w	r3, r3, #8
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
}
 8000b3e:	e010      	b.n	8000b62 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0e      	ldr	r2, [pc, #56]	@ (8000b80 <HAL_TIM_Base_MspInit+0xd8>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d10b      	bne.n	8000b62 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <HAL_TIM_Base_MspInit+0xcc>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	4a09      	ldr	r2, [pc, #36]	@ (8000b74 <HAL_TIM_Base_MspInit+0xcc>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <HAL_TIM_Base_MspInit+0xcc>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
}
 8000b62:	bf00      	nop
 8000b64:	3724      	adds	r7, #36	@ 0x24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40010000 	.word	0x40010000
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40000400 	.word	0x40000400
 8000b7c:	40000c00 	.word	0x40000c00
 8000b80:	40010400 	.word	0x40010400

08000b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b0ae      	sub	sp, #184	@ 0xb8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b9c:	f107 0320 	add.w	r3, r7, #32
 8000ba0:	2284      	movs	r2, #132	@ 0x84
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f009 fc17 	bl	800a3d8 <memset>
  if(huart->Instance==USART1)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a57      	ldr	r2, [pc, #348]	@ (8000d0c <HAL_UART_MspInit+0x188>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d165      	bne.n	8000c80 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bb4:	2340      	movs	r3, #64	@ 0x40
 8000bb6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bbc:	f107 0320 	add.w	r3, r7, #32
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f005 fc03 	bl	80063cc <HAL_RCCEx_PeriphCLKConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bcc:	f7ff fe50 	bl	8000870 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bd0:	4b4f      	ldr	r3, [pc, #316]	@ (8000d10 <HAL_UART_MspInit+0x18c>)
 8000bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd4:	4a4e      	ldr	r2, [pc, #312]	@ (8000d10 <HAL_UART_MspInit+0x18c>)
 8000bd6:	f043 0310 	orr.w	r3, r3, #16
 8000bda:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bdc:	4b4c      	ldr	r3, [pc, #304]	@ (8000d10 <HAL_UART_MspInit+0x18c>)
 8000bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be0:	f003 0310 	and.w	r3, r3, #16
 8000be4:	61fb      	str	r3, [r7, #28]
 8000be6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be8:	4b49      	ldr	r3, [pc, #292]	@ (8000d10 <HAL_UART_MspInit+0x18c>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bec:	4a48      	ldr	r2, [pc, #288]	@ (8000d10 <HAL_UART_MspInit+0x18c>)
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf4:	4b46      	ldr	r3, [pc, #280]	@ (8000d10 <HAL_UART_MspInit+0x18c>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b43      	ldr	r3, [pc, #268]	@ (8000d10 <HAL_UART_MspInit+0x18c>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c04:	4a42      	ldr	r2, [pc, #264]	@ (8000d10 <HAL_UART_MspInit+0x18c>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0c:	4b40      	ldr	r3, [pc, #256]	@ (8000d10 <HAL_UART_MspInit+0x18c>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c18:	2380      	movs	r3, #128	@ 0x80
 8000c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c30:	2307      	movs	r3, #7
 8000c32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4835      	ldr	r0, [pc, #212]	@ (8000d14 <HAL_UART_MspInit+0x190>)
 8000c3e:	f002 fbdf 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c5c:	2307      	movs	r3, #7
 8000c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c66:	4619      	mov	r1, r3
 8000c68:	482b      	ldr	r0, [pc, #172]	@ (8000d18 <HAL_UART_MspInit+0x194>)
 8000c6a:	f002 fbc9 	bl	8003400 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2105      	movs	r1, #5
 8000c72:	2025      	movs	r0, #37	@ 0x25
 8000c74:	f001 fdae 	bl	80027d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c78:	2025      	movs	r0, #37	@ 0x25
 8000c7a:	f001 fdc7 	bl	800280c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000c7e:	e040      	b.n	8000d02 <HAL_UART_MspInit+0x17e>
  else if(huart->Instance==USART6)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a25      	ldr	r2, [pc, #148]	@ (8000d1c <HAL_UART_MspInit+0x198>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d13b      	bne.n	8000d02 <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000c8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c8e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c90:	2300      	movs	r3, #0
 8000c92:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c94:	f107 0320 	add.w	r3, r7, #32
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f005 fb97 	bl	80063cc <HAL_RCCEx_PeriphCLKConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8000ca4:	f7ff fde4 	bl	8000870 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ca8:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <HAL_UART_MspInit+0x18c>)
 8000caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cac:	4a18      	ldr	r2, [pc, #96]	@ (8000d10 <HAL_UART_MspInit+0x18c>)
 8000cae:	f043 0320 	orr.w	r3, r3, #32
 8000cb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cb4:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <HAL_UART_MspInit+0x18c>)
 8000cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb8:	f003 0320 	and.w	r3, r3, #32
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc0:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <HAL_UART_MspInit+0x18c>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc4:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <HAL_UART_MspInit+0x18c>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ccc:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <HAL_UART_MspInit+0x18c>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cd8:	23c0      	movs	r3, #192	@ 0xc0
 8000cda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4808      	ldr	r0, [pc, #32]	@ (8000d20 <HAL_UART_MspInit+0x19c>)
 8000cfe:	f002 fb7f 	bl	8003400 <HAL_GPIO_Init>
}
 8000d02:	bf00      	nop
 8000d04:	37b8      	adds	r7, #184	@ 0xb8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40011000 	.word	0x40011000
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020400 	.word	0x40020400
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40011400 	.word	0x40011400
 8000d20:	40020800 	.word	0x40020800

08000d24 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000d38:	4b3a      	ldr	r3, [pc, #232]	@ (8000e24 <HAL_FMC_MspInit+0x100>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d16d      	bne.n	8000e1c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000d40:	4b38      	ldr	r3, [pc, #224]	@ (8000e24 <HAL_FMC_MspInit+0x100>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d46:	4b38      	ldr	r3, [pc, #224]	@ (8000e28 <HAL_FMC_MspInit+0x104>)
 8000d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d4a:	4a37      	ldr	r2, [pc, #220]	@ (8000e28 <HAL_FMC_MspInit+0x104>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d52:	4b35      	ldr	r3, [pc, #212]	@ (8000e28 <HAL_FMC_MspInit+0x104>)
 8000d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000d5e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000d62:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d70:	230c      	movs	r3, #12
 8000d72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	4619      	mov	r1, r3
 8000d78:	482c      	ldr	r0, [pc, #176]	@ (8000e2c <HAL_FMC_MspInit+0x108>)
 8000d7a:	f002 fb41 	bl	8003400 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000d7e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000d82:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d90:	230c      	movs	r3, #12
 8000d92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	4619      	mov	r1, r3
 8000d98:	4825      	ldr	r0, [pc, #148]	@ (8000e30 <HAL_FMC_MspInit+0x10c>)
 8000d9a:	f002 fb31 	bl	8003400 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000d9e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000da2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000db0:	230c      	movs	r3, #12
 8000db2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	4619      	mov	r1, r3
 8000db8:	481e      	ldr	r0, [pc, #120]	@ (8000e34 <HAL_FMC_MspInit+0x110>)
 8000dba:	f002 fb21 	bl	8003400 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000dbe:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000dc2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dd0:	230c      	movs	r3, #12
 8000dd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4817      	ldr	r0, [pc, #92]	@ (8000e38 <HAL_FMC_MspInit+0x114>)
 8000dda:	f002 fb11 	bl	8003400 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000dde:	2328      	movs	r3, #40	@ 0x28
 8000de0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dee:	230c      	movs	r3, #12
 8000df0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4619      	mov	r1, r3
 8000df6:	4811      	ldr	r0, [pc, #68]	@ (8000e3c <HAL_FMC_MspInit+0x118>)
 8000df8:	f002 fb02 	bl	8003400 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e0c:	230c      	movs	r3, #12
 8000e0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	4619      	mov	r1, r3
 8000e14:	480a      	ldr	r0, [pc, #40]	@ (8000e40 <HAL_FMC_MspInit+0x11c>)
 8000e16:	f002 faf3 	bl	8003400 <HAL_GPIO_Init>
 8000e1a:	e000      	b.n	8000e1e <HAL_FMC_MspInit+0xfa>
    return;
 8000e1c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200002c0 	.word	0x200002c0
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40021800 	.word	0x40021800
 8000e34:	40020c00 	.word	0x40020c00
 8000e38:	40021400 	.word	0x40021400
 8000e3c:	40021c00 	.word	0x40021c00
 8000e40:	40020800 	.word	0x40020800

08000e44 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000e4c:	f7ff ff6a 	bl	8000d24 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08e      	sub	sp, #56	@ 0x38
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e68:	4b33      	ldr	r3, [pc, #204]	@ (8000f38 <HAL_InitTick+0xe0>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6c:	4a32      	ldr	r2, [pc, #200]	@ (8000f38 <HAL_InitTick+0xe0>)
 8000e6e:	f043 0310 	orr.w	r3, r3, #16
 8000e72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e74:	4b30      	ldr	r3, [pc, #192]	@ (8000f38 <HAL_InitTick+0xe0>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e78:	f003 0310 	and.w	r3, r3, #16
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e80:	f107 0210 	add.w	r2, r7, #16
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f005 fa6c 	bl	8006368 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d103      	bne.n	8000ea2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e9a:	f005 fa3d 	bl	8006318 <HAL_RCC_GetPCLK1Freq>
 8000e9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ea0:	e004      	b.n	8000eac <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ea2:	f005 fa39 	bl	8006318 <HAL_RCC_GetPCLK1Freq>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eae:	4a23      	ldr	r2, [pc, #140]	@ (8000f3c <HAL_InitTick+0xe4>)
 8000eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb4:	0c9b      	lsrs	r3, r3, #18
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000eba:	4b21      	ldr	r3, [pc, #132]	@ (8000f40 <HAL_InitTick+0xe8>)
 8000ebc:	4a21      	ldr	r2, [pc, #132]	@ (8000f44 <HAL_InitTick+0xec>)
 8000ebe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <HAL_InitTick+0xe8>)
 8000ec2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ec6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f40 <HAL_InitTick+0xe8>)
 8000eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ecc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ece:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <HAL_InitTick+0xe8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <HAL_InitTick+0xe8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eda:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <HAL_InitTick+0xe8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ee0:	4817      	ldr	r0, [pc, #92]	@ (8000f40 <HAL_InitTick+0xe8>)
 8000ee2:	f005 fef4 	bl	8006cce <HAL_TIM_Base_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000eec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d11b      	bne.n	8000f2c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ef4:	4812      	ldr	r0, [pc, #72]	@ (8000f40 <HAL_InitTick+0xe8>)
 8000ef6:	f005 ff41 	bl	8006d7c <HAL_TIM_Base_Start_IT>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d111      	bne.n	8000f2c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f08:	2036      	movs	r0, #54	@ 0x36
 8000f0a:	f001 fc7f 	bl	800280c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d808      	bhi.n	8000f26 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	2036      	movs	r0, #54	@ 0x36
 8000f1a:	f001 fc5b 	bl	80027d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <HAL_InitTick+0xf0>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	e002      	b.n	8000f2c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3738      	adds	r7, #56	@ 0x38
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	431bde83 	.word	0x431bde83
 8000f40:	200002c4 	.word	0x200002c4
 8000f44:	40001000 	.word	0x40001000
 8000f48:	20000020 	.word	0x20000020

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <NMI_Handler+0x4>

08000f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <MemManage_Handler+0x4>

08000f64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart1);
 8000f88:	4802      	ldr	r0, [pc, #8]	@ (8000f94 <USART1_IRQHandler+0x10>)
 8000f8a:	f006 f9fb 	bl	8007384 <HAL_UART_IRQHandler>
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000134 	.word	0x20000134

08000f98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f9c:	4802      	ldr	r0, [pc, #8]	@ (8000fa8 <TIM6_DAC_IRQHandler+0x10>)
 8000f9e:	f005 ff65 	bl	8006e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200002c4 	.word	0x200002c4

08000fac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fb0:	4802      	ldr	r0, [pc, #8]	@ (8000fbc <OTG_FS_IRQHandler+0x10>)
 8000fb2:	f002 fbea 	bl	800378a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000698 	.word	0x20000698

08000fc0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <LTDC_IRQHandler+0x10>)
 8000fc6:	f004 fa3d 	bl	8005444 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000008c 	.word	0x2000008c

08000fd4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8000fd8:	4802      	ldr	r0, [pc, #8]	@ (8000fe4 <DMA2D_IRQHandler+0x10>)
 8000fda:	f001 ffd3 	bl	8002f84 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000004c 	.word	0x2000004c

08000fe8 <draw_board>:
int y_center = (272 / 2) - (4 * 24);
int lm_col_from, lm_row_from, lm_col_to, lm_row_to;

static char previous_board[BOARD_SIZE][BOARD_SIZE];

void draw_board(const char piece, int row, int col) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	73fb      	strb	r3, [r7, #15]
	if (previous_board[row][col] == piece)
 8000ff6:	4a4e      	ldr	r2, [pc, #312]	@ (8001130 <draw_board+0x148>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	441a      	add	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	429a      	cmp	r2, r3
 8001008:	f000 808e 	beq.w	8001128 <draw_board+0x140>
		return;
	BSP_LCD_SetFont(PIECE_FONT);
 800100c:	4849      	ldr	r0, [pc, #292]	@ (8001134 <draw_board+0x14c>)
 800100e:	f000 fd17 	bl	8001a40 <BSP_LCD_SetFont>

	// Définir la taille des cases
	const int SQUARE_SIZE = PIECE_FONT_SIZE;
 8001012:	2318      	movs	r3, #24
 8001014:	617b      	str	r3, [r7, #20]

	// Déterminer la couleur de la case
	uint32_t square_color;

	if (row == lm_row_from && col == lm_col_from)
 8001016:	4b48      	ldr	r3, [pc, #288]	@ (8001138 <draw_board+0x150>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	429a      	cmp	r2, r3
 800101e:	d107      	bne.n	8001030 <draw_board+0x48>
 8001020:	4b46      	ldr	r3, [pc, #280]	@ (800113c <draw_board+0x154>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	429a      	cmp	r2, r3
 8001028:	d102      	bne.n	8001030 <draw_board+0x48>
		square_color = LCD_COLOR_DARKGREEN;
 800102a:	4b45      	ldr	r3, [pc, #276]	@ (8001140 <draw_board+0x158>)
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	e018      	b.n	8001062 <draw_board+0x7a>
	else if (row == lm_row_to && col == lm_col_to)
 8001030:	4b44      	ldr	r3, [pc, #272]	@ (8001144 <draw_board+0x15c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	429a      	cmp	r2, r3
 8001038:	d108      	bne.n	800104c <draw_board+0x64>
 800103a:	4b43      	ldr	r3, [pc, #268]	@ (8001148 <draw_board+0x160>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	429a      	cmp	r2, r3
 8001042:	d103      	bne.n	800104c <draw_board+0x64>
		square_color = LCD_COLOR_GREEN;
 8001044:	f04f 23ff 	mov.w	r3, #4278255360	@ 0xff00ff00
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e00a      	b.n	8001062 <draw_board+0x7a>
	else
		square_color =
				((row + col) % 2 == 0) ? LCD_COLOR_LIGHTGRAY : LCD_COLOR_BROWN;
 800104c:	68ba      	ldr	r2, [r7, #8]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <draw_board+0x76>
 800105a:	4b3c      	ldr	r3, [pc, #240]	@ (800114c <draw_board+0x164>)
 800105c:	e000      	b.n	8001060 <draw_board+0x78>
 800105e:	4b3c      	ldr	r3, [pc, #240]	@ (8001150 <draw_board+0x168>)
		square_color =
 8001060:	61fb      	str	r3, [r7, #28]

	// Dessiner le carré de la case
	BSP_LCD_SetBackColor(square_color);
 8001062:	69f8      	ldr	r0, [r7, #28]
 8001064:	f000 fcd2 	bl	8001a0c <BSP_LCD_SetBackColor>
	BSP_LCD_FillRect(col * SQUARE_SIZE + x_center, row * SQUARE_SIZE + y_center,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	b29a      	uxth	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	b29b      	uxth	r3, r3
 8001070:	fb12 f303 	smulbb	r3, r2, r3
 8001074:	b29a      	uxth	r2, r3
 8001076:	4b37      	ldr	r3, [pc, #220]	@ (8001154 <draw_board+0x16c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	b29b      	uxth	r3, r3
 800107c:	4413      	add	r3, r2
 800107e:	b298      	uxth	r0, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	b29a      	uxth	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	b29b      	uxth	r3, r3
 8001088:	fb12 f303 	smulbb	r3, r2, r3
 800108c:	b29a      	uxth	r2, r3
 800108e:	4b32      	ldr	r3, [pc, #200]	@ (8001158 <draw_board+0x170>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	b29b      	uxth	r3, r3
 8001094:	4413      	add	r3, r2
 8001096:	b299      	uxth	r1, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	b29a      	uxth	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	f000 fe64 	bl	8001d6c <BSP_LCD_FillRect>
			SQUARE_SIZE, SQUARE_SIZE);

	// Déterminer la couleur de la pièce
	char display_piece = piece;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	76fb      	strb	r3, [r7, #27]
	if (islower(piece)) {
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f009 f97e 	bl	800a3ac <islower>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00a      	beq.n	80010cc <draw_board+0xe4>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80010b6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80010ba:	f000 fc8f 	bl	80019dc <BSP_LCD_SetTextColor>
		display_piece = toupper(piece);
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f009 f97f 	bl	800a3c4 <toupper>
 80010c6:	4603      	mov	r3, r0
 80010c8:	76fb      	strb	r3, [r7, #27]
 80010ca:	e003      	b.n	80010d4 <draw_board+0xec>
	} else {
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010d0:	f000 fc84 	bl	80019dc <BSP_LCD_SetTextColor>
	}

	// Afficher la pièce
	char piece_str[2] = { display_piece, '\0' };
 80010d4:	7efb      	ldrb	r3, [r7, #27]
 80010d6:	743b      	strb	r3, [r7, #16]
 80010d8:	2300      	movs	r3, #0
 80010da:	747b      	strb	r3, [r7, #17]
	BSP_LCD_DisplayStringAt(col * SQUARE_SIZE + x_center,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	b29a      	uxth	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	fb12 f303 	smulbb	r3, r2, r3
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <draw_board+0x16c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	4413      	add	r3, r2
 80010f2:	b298      	uxth	r0, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	fb12 f303 	smulbb	r3, r2, r3
 8001100:	b29a      	uxth	r2, r3
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <draw_board+0x170>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	4413      	add	r3, r2
 800110a:	b299      	uxth	r1, r3
 800110c:	f107 0210 	add.w	r2, r7, #16
 8001110:	2303      	movs	r3, #3
 8001112:	f000 fd1b 	bl	8001b4c <BSP_LCD_DisplayStringAt>
			row * SQUARE_SIZE + y_center, (uint8_t*) piece_str, LEFT_MODE);
	previous_board[row][col] = piece;
 8001116:	4a06      	ldr	r2, [pc, #24]	@ (8001130 <draw_board+0x148>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	441a      	add	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	e000      	b.n	800112a <draw_board+0x142>
		return;
 8001128:	bf00      	nop
}
 800112a:	3720      	adds	r7, #32
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000320 	.word	0x20000320
 8001134:	2000000c 	.word	0x2000000c
 8001138:	20000314 	.word	0x20000314
 800113c:	20000310 	.word	0x20000310
 8001140:	ff008000 	.word	0xff008000
 8001144:	2000031c 	.word	0x2000031c
 8001148:	20000318 	.word	0x20000318
 800114c:	ffd3d3d3 	.word	0xffd3d3d3
 8001150:	ffa52a2a 	.word	0xffa52a2a
 8001154:	20000000 	.word	0x20000000
 8001158:	20000004 	.word	0x20000004

0800115c <parse_fen>:

void parse_fen(const char *fen) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	int row = 0, col = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	2300      	movs	r3, #0
 800116a:	613b      	str	r3, [r7, #16]

	while (*fen && *fen != ' ') {
 800116c:	e035      	b.n	80011da <parse_fen+0x7e>
		if (*fen == '/') {
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b2f      	cmp	r3, #47	@ 0x2f
 8001174:	d105      	bne.n	8001182 <parse_fen+0x26>
			row++;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
			col = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	e028      	b.n	80011d4 <parse_fen+0x78>
		} else if (*fen >= '1' && *fen <= '8') {
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b30      	cmp	r3, #48	@ 0x30
 8001188:	d91a      	bls.n	80011c0 <parse_fen+0x64>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b38      	cmp	r3, #56	@ 0x38
 8001190:	d816      	bhi.n	80011c0 <parse_fen+0x64>
			int empty_squares = *fen - '0';
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	3b30      	subs	r3, #48	@ 0x30
 8001198:	60bb      	str	r3, [r7, #8]
			for (int i = 0; i < empty_squares; i++) {
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	e00a      	b.n	80011b6 <parse_fen+0x5a>
				draw_board(' ', row, col);
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	6979      	ldr	r1, [r7, #20]
 80011a4:	2020      	movs	r0, #32
 80011a6:	f7ff ff1f 	bl	8000fe8 <draw_board>
				col++;
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	3301      	adds	r3, #1
 80011ae:	613b      	str	r3, [r7, #16]
			for (int i = 0; i < empty_squares; i++) {
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	3301      	adds	r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	dbf0      	blt.n	80011a0 <parse_fen+0x44>
		} else if (*fen >= '1' && *fen <= '8') {
 80011be:	e009      	b.n	80011d4 <parse_fen+0x78>
			}
		} else {
			draw_board(*fen, row, col);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	6979      	ldr	r1, [r7, #20]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff0d 	bl	8000fe8 <draw_board>
			col++;
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	3301      	adds	r3, #1
 80011d2:	613b      	str	r3, [r7, #16]
		}
		fen++;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3301      	adds	r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
	while (*fen && *fen != ' ') {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <parse_fen+0x8e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b20      	cmp	r3, #32
 80011e8:	d1c1      	bne.n	800116e <parse_fen+0x12>
	}
}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <process_stream>:

void process_stream(const char *buffer) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0f6      	sub	sp, #472	@ 0x1d8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80011fe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001202:	6018      	str	r0, [r3, #0]
	const char *lm_start = strstr(buffer, "lm\":\"");
 8001204:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8001208:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800120c:	49c5      	ldr	r1, [pc, #788]	@ (8001524 <process_stream+0x330>)
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	f009 f90a 	bl	800a428 <strstr>
 8001214:	f8c7 01d4 	str.w	r0, [r7, #468]	@ 0x1d4
	if (lm_start) {
 8001218:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d078      	beq.n	8001312 <process_stream+0x11e>
		lm_start += 5;
 8001220:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001224:	3305      	adds	r3, #5
 8001226:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
		const char *lm_end = strchr(lm_start, '"');
 800122a:	2122      	movs	r1, #34	@ 0x22
 800122c:	f8d7 01d4 	ldr.w	r0, [r7, #468]	@ 0x1d4
 8001230:	f009 f8da 	bl	800a3e8 <strchr>
 8001234:	f8c7 01d0 	str.w	r0, [r7, #464]	@ 0x1d0
		if (lm_end) {
 8001238:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d068      	beq.n	8001312 <process_stream+0x11e>
			char lm[128];
			int lm_length = lm_end - lm_start;
 8001240:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8001244:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
			strncpy(lm, lm_start, lm_length);
 800124e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	f8d7 11d4 	ldr.w	r1, [r7, #468]	@ 0x1d4
 800125a:	4618      	mov	r0, r3
 800125c:	f009 f8d1 	bl	800a402 <strncpy>
			lm[lm_length] = '\0';
 8001260:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8001264:	f5a3 72e8 	sub.w	r2, r3, #464	@ 0x1d0
 8001268:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800126c:	4413      	add	r3, r2
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
			//debug_log(0, (char*)lm, 0);
			if (strlen(lm) == 4) { // Vérifier que la chaîne contient exactement 4 caractères
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	4618      	mov	r0, r3
 8001278:	f7fe ffca 	bl	8000210 <strlen>
 800127c:	4603      	mov	r3, r0
 800127e:	2b04      	cmp	r3, #4
 8001280:	d142      	bne.n	8001308 <process_stream+0x114>
				if (lm_row_from >= 0 && lm_col_from >= 0) {
 8001282:	4ba9      	ldr	r3, [pc, #676]	@ (8001528 <process_stream+0x334>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	db0b      	blt.n	80012a2 <process_stream+0xae>
 800128a:	4ba8      	ldr	r3, [pc, #672]	@ (800152c <process_stream+0x338>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db07      	blt.n	80012a2 <process_stream+0xae>
					draw_board('!', lm_row_from, lm_col_from);
 8001292:	4ba5      	ldr	r3, [pc, #660]	@ (8001528 <process_stream+0x334>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4aa5      	ldr	r2, [pc, #660]	@ (800152c <process_stream+0x338>)
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	4619      	mov	r1, r3
 800129c:	2021      	movs	r0, #33	@ 0x21
 800129e:	f7ff fea3 	bl	8000fe8 <draw_board>
				}
				if (lm_row_to >= 0 && lm_col_to >= 0) {
 80012a2:	4ba3      	ldr	r3, [pc, #652]	@ (8001530 <process_stream+0x33c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <process_stream+0xce>
 80012aa:	4ba2      	ldr	r3, [pc, #648]	@ (8001534 <process_stream+0x340>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db07      	blt.n	80012c2 <process_stream+0xce>
					draw_board('!', lm_row_to, lm_col_to);
 80012b2:	4b9f      	ldr	r3, [pc, #636]	@ (8001530 <process_stream+0x33c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a9f      	ldr	r2, [pc, #636]	@ (8001534 <process_stream+0x340>)
 80012b8:	6812      	ldr	r2, [r2, #0]
 80012ba:	4619      	mov	r1, r3
 80012bc:	2021      	movs	r0, #33	@ 0x21
 80012be:	f7ff fe93 	bl	8000fe8 <draw_board>
				}
				lm_col_from = lm[0] - 'a';
 80012c2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80012c6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	3b61      	subs	r3, #97	@ 0x61
 80012ce:	4a97      	ldr	r2, [pc, #604]	@ (800152c <process_stream+0x338>)
 80012d0:	6013      	str	r3, [r2, #0]
				lm_row_from = 7 - (lm[1] - '1');
 80012d2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80012d6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80012da:	785b      	ldrb	r3, [r3, #1]
 80012dc:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80012e0:	4a91      	ldr	r2, [pc, #580]	@ (8001528 <process_stream+0x334>)
 80012e2:	6013      	str	r3, [r2, #0]
				lm_col_to = lm[2] - 'a';
 80012e4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80012e8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80012ec:	789b      	ldrb	r3, [r3, #2]
 80012ee:	3b61      	subs	r3, #97	@ 0x61
 80012f0:	4a90      	ldr	r2, [pc, #576]	@ (8001534 <process_stream+0x340>)
 80012f2:	6013      	str	r3, [r2, #0]
				lm_row_to = 7 - (lm[3] - '1');
 80012f4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80012f8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80012fc:	78db      	ldrb	r3, [r3, #3]
 80012fe:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8001302:	4a8b      	ldr	r2, [pc, #556]	@ (8001530 <process_stream+0x33c>)
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e004      	b.n	8001312 <process_stream+0x11e>
				//draw_board('f', file_from, rank_from);

			} else {
				debug_log(0, "Error : invalid move", 1);
 8001308:	2201      	movs	r2, #1
 800130a:	498b      	ldr	r1, [pc, #556]	@ (8001538 <process_stream+0x344>)
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff f8ff 	bl	8000510 <debug_log>
			}
		}
	}
	const char *fen_start = strstr(buffer, "\"fen\":\"");
 8001312:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8001316:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800131a:	4988      	ldr	r1, [pc, #544]	@ (800153c <process_stream+0x348>)
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	f009 f883 	bl	800a428 <strstr>
 8001322:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8
	if (fen_start) {
 8001326:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d02d      	beq.n	800138a <process_stream+0x196>
		fen_start += 7; // Sauter "fen":"
 800132e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001332:	3307      	adds	r3, #7
 8001334:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
		const char *fen_end = strchr(fen_start, '"');
 8001338:	2122      	movs	r1, #34	@ 0x22
 800133a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 800133e:	f009 f853 	bl	800a3e8 <strchr>
 8001342:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
		if (fen_end) {
 8001346:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800134a:	2b00      	cmp	r3, #0
 800134c:	d01d      	beq.n	800138a <process_stream+0x196>
			char fen[128];
			int fen_length = fen_end - fen_start;
 800134e:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8001352:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
			strncpy(fen, fen_start, fen_length);
 800135c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	f8d7 11c8 	ldr.w	r1, [r7, #456]	@ 0x1c8
 8001368:	4618      	mov	r0, r3
 800136a:	f009 f84a 	bl	800a402 <strncpy>
			fen[fen_length] = '\0';
 800136e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8001372:	f5a3 72e8 	sub.w	r2, r3, #464	@ 0x1d0
 8001376:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800137a:	4413      	add	r3, r2
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
			//debug_log(0, (char*)fen, 0);
			parse_fen(fen);
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fee9 	bl	800115c <parse_fen>
		}
	}

	const char *w_turn = strstr(buffer, " w ");
 800138a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800138e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001392:	496b      	ldr	r1, [pc, #428]	@ (8001540 <process_stream+0x34c>)
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	f009 f847 	bl	800a428 <strstr>
 800139a:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc
	const char *b_turn = strstr(buffer, " b ");
 800139e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80013a2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80013a6:	4967      	ldr	r1, [pc, #412]	@ (8001544 <process_stream+0x350>)
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	f009 f83d 	bl	800a428 <strstr>
 80013ae:	f8c7 01b8 	str.w	r0, [r7, #440]	@ 0x1b8

	char wc[128] = "";
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80013b8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80013bc:	227c      	movs	r2, #124	@ 0x7c
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f009 f809 	bl	800a3d8 <memset>
	char bc[128] = "";
 80013c6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80013ca:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	3304      	adds	r3, #4
 80013d4:	227c      	movs	r2, #124	@ 0x7c
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f008 fffd 	bl	800a3d8 <memset>

	// Extraction du timer des blancs ("wc")
	const char *wc_start = strstr(buffer, "\"wc\":");
 80013de:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80013e2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80013e6:	4958      	ldr	r1, [pc, #352]	@ (8001548 <process_stream+0x354>)
 80013e8:	6818      	ldr	r0, [r3, #0]
 80013ea:	f009 f81d 	bl	800a428 <strstr>
 80013ee:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
	if (wc_start) {
 80013f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d026      	beq.n	8001448 <process_stream+0x254>
	    wc_start += 5;
 80013fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80013fe:	3305      	adds	r3, #5
 8001400:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
	    const char *wc_end = strchr(wc_start, ',');
 8001404:	212c      	movs	r1, #44	@ 0x2c
 8001406:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 800140a:	f008 ffed 	bl	800a3e8 <strchr>
 800140e:	f8c7 01b0 	str.w	r0, [r7, #432]	@ 0x1b0
	    if (wc_end) {
 8001412:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d016      	beq.n	8001448 <process_stream+0x254>
	        int wc_length = wc_end - wc_start;
 800141a:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 800141e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
	        strncpy(wc, wc_start, wc_length);
 8001428:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 800142c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001430:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 8001434:	4618      	mov	r0, r3
 8001436:	f008 ffe4 	bl	800a402 <strncpy>
	        wc[wc_length] = '\0';
 800143a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800143e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001442:	4413      	add	r3, r2
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
	    }
	}

	// Extraction du timer des noirs ("bc")
	const char *bc_start = strstr(buffer, "\"bc\":");
 8001448:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800144c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001450:	493e      	ldr	r1, [pc, #248]	@ (800154c <process_stream+0x358>)
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	f008 ffe8 	bl	800a428 <strstr>
 8001458:	f8c7 01a8 	str.w	r0, [r7, #424]	@ 0x1a8
	if (bc_start) {
 800145c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001460:	2b00      	cmp	r3, #0
 8001462:	d028      	beq.n	80014b6 <process_stream+0x2c2>
	    bc_start += 5;
 8001464:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001468:	3305      	adds	r3, #5
 800146a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	    const char *bc_end = strchr(bc_start, '}');
 800146e:	217d      	movs	r1, #125	@ 0x7d
 8001470:	f8d7 01a8 	ldr.w	r0, [r7, #424]	@ 0x1a8
 8001474:	f008 ffb8 	bl	800a3e8 <strchr>
 8001478:	f8c7 01a4 	str.w	r0, [r7, #420]	@ 0x1a4
	    if (bc_end) {
 800147c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d018      	beq.n	80014b6 <process_stream+0x2c2>
	        int bc_length = bc_end - bc_start;
 8001484:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8001488:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	        strncpy(bc, bc_start, bc_length);
 8001492:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8001496:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800149a:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 800149e:	4618      	mov	r0, r3
 80014a0:	f008 ffaf 	bl	800a402 <strncpy>
	        bc[bc_length] = '\0';
 80014a4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80014a8:	f5a3 72a8 	sub.w	r2, r3, #336	@ 0x150
 80014ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80014b0:	4413      	add	r3, r2
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
	    }
	}

	// Affichage en fonction du joueur actif
	if (w_turn) {
 80014b6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d04a      	beq.n	8001554 <process_stream+0x360>
	    BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 80014be:	4824      	ldr	r0, [pc, #144]	@ (8001550 <process_stream+0x35c>)
 80014c0:	f000 fa8c 	bl	80019dc <BSP_LCD_SetTextColor>
	    BSP_LCD_FillRect(0, (272 / 2) - 50, 100, 100);
 80014c4:	2364      	movs	r3, #100	@ 0x64
 80014c6:	2264      	movs	r2, #100	@ 0x64
 80014c8:	2156      	movs	r1, #86	@ 0x56
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 fc4e 	bl	8001d6c <BSP_LCD_FillRect>
	    BSP_LCD_SetBackColor(LCD_COLOR_DARKGRAY);
 80014d0:	481f      	ldr	r0, [pc, #124]	@ (8001550 <process_stream+0x35c>)
 80014d2:	f000 fa9b 	bl	8001a0c <BSP_LCD_SetBackColor>
	    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80014d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014da:	f000 fa7f 	bl	80019dc <BSP_LCD_SetTextColor>
	    BSP_LCD_DisplayStringAt(24, (272 / 2) - 12, (uint8_t*)wc, LEFT_MODE);
 80014de:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80014e2:	2303      	movs	r3, #3
 80014e4:	217c      	movs	r1, #124	@ 0x7c
 80014e6:	2018      	movs	r0, #24
 80014e8:	f000 fb30 	bl	8001b4c <BSP_LCD_DisplayStringAt>

	    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80014ec:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80014f0:	f000 fa74 	bl	80019dc <BSP_LCD_SetTextColor>
	    BSP_LCD_FillRect(380, (272 / 2) - 50, 100, 100);
 80014f4:	2364      	movs	r3, #100	@ 0x64
 80014f6:	2264      	movs	r2, #100	@ 0x64
 80014f8:	2156      	movs	r1, #86	@ 0x56
 80014fa:	f44f 70be 	mov.w	r0, #380	@ 0x17c
 80014fe:	f000 fc35 	bl	8001d6c <BSP_LCD_FillRect>
	    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001502:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001506:	f000 fa81 	bl	8001a0c <BSP_LCD_SetBackColor>
	    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800150a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800150e:	f000 fa65 	bl	80019dc <BSP_LCD_SetTextColor>
	    BSP_LCD_DisplayStringAt(24, (272 / 2) - 12, (uint8_t*)bc, RIGHT_MODE);
 8001512:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8001516:	2302      	movs	r3, #2
 8001518:	217c      	movs	r1, #124	@ 0x7c
 800151a:	2018      	movs	r0, #24
 800151c:	f000 fb16 	bl	8001b4c <BSP_LCD_DisplayStringAt>
 8001520:	e04d      	b.n	80015be <process_stream+0x3ca>
 8001522:	bf00      	nop
 8001524:	0800a518 	.word	0x0800a518
 8001528:	20000314 	.word	0x20000314
 800152c:	20000310 	.word	0x20000310
 8001530:	2000031c 	.word	0x2000031c
 8001534:	20000318 	.word	0x20000318
 8001538:	0800a520 	.word	0x0800a520
 800153c:	0800a538 	.word	0x0800a538
 8001540:	0800a540 	.word	0x0800a540
 8001544:	0800a544 	.word	0x0800a544
 8001548:	0800a548 	.word	0x0800a548
 800154c:	0800a550 	.word	0x0800a550
 8001550:	ff404040 	.word	0xff404040
	}
	else if (b_turn) {
 8001554:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001558:	2b00      	cmp	r3, #0
 800155a:	d030      	beq.n	80015be <process_stream+0x3ca>
	    BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 800155c:	4863      	ldr	r0, [pc, #396]	@ (80016ec <process_stream+0x4f8>)
 800155e:	f000 fa3d 	bl	80019dc <BSP_LCD_SetTextColor>
	    BSP_LCD_FillRect(380, (272 / 2) - 50, 100, 100);
 8001562:	2364      	movs	r3, #100	@ 0x64
 8001564:	2264      	movs	r2, #100	@ 0x64
 8001566:	2156      	movs	r1, #86	@ 0x56
 8001568:	f44f 70be 	mov.w	r0, #380	@ 0x17c
 800156c:	f000 fbfe 	bl	8001d6c <BSP_LCD_FillRect>
	    BSP_LCD_SetBackColor(LCD_COLOR_DARKGRAY);
 8001570:	485e      	ldr	r0, [pc, #376]	@ (80016ec <process_stream+0x4f8>)
 8001572:	f000 fa4b 	bl	8001a0c <BSP_LCD_SetBackColor>
	    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001576:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800157a:	f000 fa2f 	bl	80019dc <BSP_LCD_SetTextColor>
	    BSP_LCD_DisplayStringAt(24, (272 / 2) - 12, (uint8_t*)bc, RIGHT_MODE);
 800157e:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8001582:	2302      	movs	r3, #2
 8001584:	217c      	movs	r1, #124	@ 0x7c
 8001586:	2018      	movs	r0, #24
 8001588:	f000 fae0 	bl	8001b4c <BSP_LCD_DisplayStringAt>

	    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800158c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001590:	f000 fa24 	bl	80019dc <BSP_LCD_SetTextColor>
	    BSP_LCD_FillRect(0, (272 / 2) - 50, 100, 100);
 8001594:	2364      	movs	r3, #100	@ 0x64
 8001596:	2264      	movs	r2, #100	@ 0x64
 8001598:	2156      	movs	r1, #86	@ 0x56
 800159a:	2000      	movs	r0, #0
 800159c:	f000 fbe6 	bl	8001d6c <BSP_LCD_FillRect>
	    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80015a0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80015a4:	f000 fa32 	bl	8001a0c <BSP_LCD_SetBackColor>
	    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015ac:	f000 fa16 	bl	80019dc <BSP_LCD_SetTextColor>
	    BSP_LCD_DisplayStringAt(24, (272 / 2) - 12, (uint8_t*)wc, LEFT_MODE);
 80015b0:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80015b4:	2303      	movs	r3, #3
 80015b6:	217c      	movs	r1, #124	@ 0x7c
 80015b8:	2018      	movs	r0, #24
 80015ba:	f000 fac7 	bl	8001b4c <BSP_LCD_DisplayStringAt>
	}



	const char *w_player_start = strstr(buffer,
 80015be:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80015c2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80015c6:	494a      	ldr	r1, [pc, #296]	@ (80016f0 <process_stream+0x4fc>)
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	f008 ff2d 	bl	800a428 <strstr>
 80015ce:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
			"[{\"color\":\"white\",\"user\":{\"name\":\"");
	if (w_player_start) {
 80015d2:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d03a      	beq.n	8001650 <process_stream+0x45c>
		w_player_start += 34;
 80015da:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80015de:	3322      	adds	r3, #34	@ 0x22
 80015e0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
		const char *w_player_end = strchr(w_player_start, '"');
 80015e4:	2122      	movs	r1, #34	@ 0x22
 80015e6:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 80015ea:	f008 fefd 	bl	800a3e8 <strchr>
 80015ee:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198
		if (w_player_end) {
 80015f2:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d02a      	beq.n	8001650 <process_stream+0x45c>
			char w_player[128];
			int w_player_length = w_player_end - w_player_start;
 80015fa:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80015fe:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
			strncpy(w_player, w_player_start, w_player_length);
 8001608:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 8001614:	4618      	mov	r0, r3
 8001616:	f008 fef4 	bl	800a402 <strncpy>
			w_player[w_player_length] = '\0';
 800161a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800161e:	f5a3 72e8 	sub.w	r2, r3, #464	@ 0x1d0
 8001622:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001626:	4413      	add	r3, r2
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
			BSP_LCD_SetFont(&Font12);
 800162c:	4831      	ldr	r0, [pc, #196]	@ (80016f4 <process_stream+0x500>)
 800162e:	f000 fa07 	bl	8001a40 <BSP_LCD_SetFont>
			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001632:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001636:	f000 f9e9 	bl	8001a0c <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800163a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800163e:	f000 f9cd 	bl	80019dc <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) w_player, LEFT_MODE);
 8001642:	f107 0208 	add.w	r2, r7, #8
 8001646:	2303      	movs	r3, #3
 8001648:	2100      	movs	r1, #0
 800164a:	2000      	movs	r0, #0
 800164c:	f000 fa7e 	bl	8001b4c <BSP_LCD_DisplayStringAt>
		}
	}

	const char *b_player_start = strstr(buffer,
 8001650:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8001654:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001658:	4927      	ldr	r1, [pc, #156]	@ (80016f8 <process_stream+0x504>)
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	f008 fee4 	bl	800a428 <strstr>
 8001660:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
			"},{\"color\":\"black\",\"user\":{\"name\":\"");
	if (b_player_start) {
 8001664:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001668:	2b00      	cmp	r3, #0
 800166a:	d039      	beq.n	80016e0 <process_stream+0x4ec>
		b_player_start += 35; // Sauter jusqu'au début du nom
 800166c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001670:	3323      	adds	r3, #35	@ 0x23
 8001672:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
		const char *b_player_end = strchr(b_player_start, '"');
 8001676:	2122      	movs	r1, #34	@ 0x22
 8001678:	f8d7 0190 	ldr.w	r0, [r7, #400]	@ 0x190
 800167c:	f008 feb4 	bl	800a3e8 <strchr>
 8001680:	f8c7 018c 	str.w	r0, [r7, #396]	@ 0x18c
		if (b_player_end) {
 8001684:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001688:	2b00      	cmp	r3, #0
 800168a:	d029      	beq.n	80016e0 <process_stream+0x4ec>
			char b_player[128];
			int b_player_length = b_player_end - b_player_start;
 800168c:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8001690:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
			strncpy(b_player, b_player_start, b_player_length);
 800169a:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 800169e:	f107 0308 	add.w	r3, r7, #8
 80016a2:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 80016a6:	4618      	mov	r0, r3
 80016a8:	f008 feab 	bl	800a402 <strncpy>
			b_player[b_player_length] = '\0';
 80016ac:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80016b0:	f5a3 72e8 	sub.w	r2, r3, #464	@ 0x1d0
 80016b4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80016b8:	4413      	add	r3, r2
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
			// Affichage du nom du joueur noir
			BSP_LCD_SetFont(&Font12);
 80016be:	480d      	ldr	r0, [pc, #52]	@ (80016f4 <process_stream+0x500>)
 80016c0:	f000 f9be 	bl	8001a40 <BSP_LCD_SetFont>
			BSP_LCD_SetBackColor(LCD_COLOR_BROWN);
 80016c4:	480d      	ldr	r0, [pc, #52]	@ (80016fc <process_stream+0x508>)
 80016c6:	f000 f9a1 	bl	8001a0c <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80016ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016ce:	f000 f985 	bl	80019dc <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) b_player, RIGHT_MODE);
 80016d2:	f107 0208 	add.w	r2, r7, #8
 80016d6:	2302      	movs	r3, #2
 80016d8:	2100      	movs	r1, #0
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 fa36 	bl	8001b4c <BSP_LCD_DisplayStringAt>
		}
	}
}
 80016e0:	bf00      	nop
 80016e2:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	ff404040 	.word	0xff404040
 80016f0:	0800a558 	.word	0x0800a558
 80016f4:	20000014 	.word	0x20000014
 80016f8:	0800a57c 	.word	0x0800a57c
 80016fc:	ffa52a2a 	.word	0xffa52a2a

08001700 <init_board_state>:

void init_board_state() {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
	for (int i = 0; i < BOARD_SIZE; i++) {
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	e018      	b.n	800173e <init_board_state+0x3e>
		for (int j = 0; j < BOARD_SIZE; j++) {
 800170c:	2300      	movs	r3, #0
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	e00f      	b.n	8001732 <init_board_state+0x32>
			previous_board[i][j] = ' ';
 8001712:	4a0f      	ldr	r2, [pc, #60]	@ (8001750 <init_board_state+0x50>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	441a      	add	r2, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	4413      	add	r3, r2
 800171e:	2220      	movs	r2, #32
 8001720:	701a      	strb	r2, [r3, #0]
			draw_board('!', i, j);
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	2021      	movs	r0, #33	@ 0x21
 8001728:	f7ff fc5e 	bl	8000fe8 <draw_board>
		for (int j = 0; j < BOARD_SIZE; j++) {
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2b07      	cmp	r3, #7
 8001736:	ddec      	ble.n	8001712 <init_board_state+0x12>
	for (int i = 0; i < BOARD_SIZE; i++) {
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3301      	adds	r3, #1
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b07      	cmp	r3, #7
 8001742:	dde3      	ble.n	800170c <init_board_state+0xc>
		}
	}
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000320 	.word	0x20000320

08001754 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <SystemInit+0x20>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800175e:	4a05      	ldr	r2, [pc, #20]	@ (8001774 <SystemInit+0x20>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001778:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800177c:	f7ff ffea 	bl	8001754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001780:	480c      	ldr	r0, [pc, #48]	@ (80017b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001782:	490d      	ldr	r1, [pc, #52]	@ (80017b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001784:	4a0d      	ldr	r2, [pc, #52]	@ (80017bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001788:	e002      	b.n	8001790 <LoopCopyDataInit>

0800178a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800178c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178e:	3304      	adds	r3, #4

08001790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001794:	d3f9      	bcc.n	800178a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001796:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001798:	4c0a      	ldr	r4, [pc, #40]	@ (80017c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800179c:	e001      	b.n	80017a2 <LoopFillZerobss>

0800179e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a0:	3204      	adds	r2, #4

080017a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a4:	d3fb      	bcc.n	800179e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017a6:	f008 fe55 	bl	800a454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017aa:	f7fe ff43 	bl	8000634 <main>
  bx  lr    
 80017ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80017bc:	0800c600 	.word	0x0800c600
  ldr r2, =_sbss
 80017c0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80017c4:	20000a78 	.word	0x20000a78

080017c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC_IRQHandler>
	...

080017cc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80017d0:	4b31      	ldr	r3, [pc, #196]	@ (8001898 <BSP_LCD_Init+0xcc>)
 80017d2:	2228      	movs	r2, #40	@ 0x28
 80017d4:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80017d6:	4b30      	ldr	r3, [pc, #192]	@ (8001898 <BSP_LCD_Init+0xcc>)
 80017d8:	2209      	movs	r2, #9
 80017da:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80017dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001898 <BSP_LCD_Init+0xcc>)
 80017de:	2235      	movs	r2, #53	@ 0x35
 80017e0:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80017e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001898 <BSP_LCD_Init+0xcc>)
 80017e4:	220b      	movs	r2, #11
 80017e6:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80017e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001898 <BSP_LCD_Init+0xcc>)
 80017ea:	f240 121b 	movw	r2, #283	@ 0x11b
 80017ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80017f0:	4b29      	ldr	r3, [pc, #164]	@ (8001898 <BSP_LCD_Init+0xcc>)
 80017f2:	f240 2215 	movw	r2, #533	@ 0x215
 80017f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80017f8:	4b27      	ldr	r3, [pc, #156]	@ (8001898 <BSP_LCD_Init+0xcc>)
 80017fa:	f240 121d 	movw	r2, #285	@ 0x11d
 80017fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001800:	4b25      	ldr	r3, [pc, #148]	@ (8001898 <BSP_LCD_Init+0xcc>)
 8001802:	f240 2235 	movw	r2, #565	@ 0x235
 8001806:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001808:	2100      	movs	r1, #0
 800180a:	4823      	ldr	r0, [pc, #140]	@ (8001898 <BSP_LCD_Init+0xcc>)
 800180c:	f000 fc02 	bl	8002014 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001810:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <BSP_LCD_Init+0xcc>)
 8001812:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001816:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001818:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <BSP_LCD_Init+0xcc>)
 800181a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800181e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001820:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <BSP_LCD_Init+0xcc>)
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8001828:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <BSP_LCD_Init+0xcc>)
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001830:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <BSP_LCD_Init+0xcc>)
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <BSP_LCD_Init+0xcc>)
 800183a:	2200      	movs	r2, #0
 800183c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <BSP_LCD_Init+0xcc>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001844:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <BSP_LCD_Init+0xcc>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800184a:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <BSP_LCD_Init+0xcc>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8001850:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <BSP_LCD_Init+0xcc>)
 8001852:	4a12      	ldr	r2, [pc, #72]	@ (800189c <BSP_LCD_Init+0xd0>)
 8001854:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001856:	4810      	ldr	r0, [pc, #64]	@ (8001898 <BSP_LCD_Init+0xcc>)
 8001858:	f003 fef4 	bl	8005644 <HAL_LTDC_GetState>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d103      	bne.n	800186a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8001862:	2100      	movs	r1, #0
 8001864:	480c      	ldr	r0, [pc, #48]	@ (8001898 <BSP_LCD_Init+0xcc>)
 8001866:	f000 fafb 	bl	8001e60 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800186a:	480b      	ldr	r0, [pc, #44]	@ (8001898 <BSP_LCD_Init+0xcc>)
 800186c:	f003 fd1a 	bl	80052a4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001870:	2201      	movs	r2, #1
 8001872:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001876:	480a      	ldr	r0, [pc, #40]	@ (80018a0 <BSP_LCD_Init+0xd4>)
 8001878:	f001 ff6e 	bl	8003758 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	2108      	movs	r1, #8
 8001880:	4808      	ldr	r0, [pc, #32]	@ (80018a4 <BSP_LCD_Init+0xd8>)
 8001882:	f001 ff69 	bl	8003758 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001886:	f000 fce5 	bl	8002254 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800188a:	4807      	ldr	r0, [pc, #28]	@ (80018a8 <BSP_LCD_Init+0xdc>)
 800188c:	f000 f8d8 	bl	8001a40 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000360 	.word	0x20000360
 800189c:	40016800 	.word	0x40016800
 80018a0:	40022000 	.word	0x40022000
 80018a4:	40022800 	.word	0x40022800
 80018a8:	2000000c 	.word	0x2000000c

080018ac <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <BSP_LCD_GetXSize+0x20>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a06      	ldr	r2, [pc, #24]	@ (80018d0 <BSP_LCD_GetXSize+0x24>)
 80018b6:	2134      	movs	r1, #52	@ 0x34
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4413      	add	r3, r2
 80018be:	3360      	adds	r3, #96	@ 0x60
 80018c0:	681b      	ldr	r3, [r3, #0]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	20000448 	.word	0x20000448
 80018d0:	20000360 	.word	0x20000360

080018d4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <BSP_LCD_GetYSize+0x20>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a06      	ldr	r2, [pc, #24]	@ (80018f8 <BSP_LCD_GetYSize+0x24>)
 80018de:	2134      	movs	r1, #52	@ 0x34
 80018e0:	fb01 f303 	mul.w	r3, r1, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	3364      	adds	r3, #100	@ 0x64
 80018e8:	681b      	ldr	r3, [r3, #0]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	20000448 	.word	0x20000448
 80018f8:	20000360 	.word	0x20000360

080018fc <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b090      	sub	sp, #64	@ 0x40
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800190c:	f7ff ffce 	bl	80018ac <BSP_LCD_GetXSize>
 8001910:	4603      	mov	r3, r0
 8001912:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001918:	f7ff ffdc 	bl	80018d4 <BSP_LCD_GetYSize>
 800191c:	4603      	mov	r3, r0
 800191e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8001928:	23ff      	movs	r3, #255	@ 0xff
 800192a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001942:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001946:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001948:	2307      	movs	r3, #7
 800194a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800194c:	f7ff ffae 	bl	80018ac <BSP_LCD_GetXSize>
 8001950:	4603      	mov	r3, r0
 8001952:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001954:	f7ff ffbe 	bl	80018d4 <BSP_LCD_GetYSize>
 8001958:	4603      	mov	r3, r0
 800195a:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800195c:	88fa      	ldrh	r2, [r7, #6]
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	4619      	mov	r1, r3
 8001964:	4812      	ldr	r0, [pc, #72]	@ (80019b0 <BSP_LCD_LayerDefaultInit+0xb4>)
 8001966:	f003 fe2f 	bl	80055c8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800196a:	88fa      	ldrh	r2, [r7, #6]
 800196c:	4911      	ldr	r1, [pc, #68]	@ (80019b4 <BSP_LCD_LayerDefaultInit+0xb8>)
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	3304      	adds	r3, #4
 800197a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800197e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001980:	88fa      	ldrh	r2, [r7, #6]
 8001982:	490c      	ldr	r1, [pc, #48]	@ (80019b4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	3308      	adds	r3, #8
 8001990:	4a09      	ldr	r2, [pc, #36]	@ (80019b8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001992:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001994:	88fa      	ldrh	r2, [r7, #6]
 8001996:	4907      	ldr	r1, [pc, #28]	@ (80019b4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80019a6:	601a      	str	r2, [r3, #0]
}
 80019a8:	bf00      	nop
 80019aa:	3740      	adds	r7, #64	@ 0x40
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000360 	.word	0x20000360
 80019b4:	2000044c 	.word	0x2000044c
 80019b8:	2000000c 	.word	0x2000000c

080019bc <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80019c4:	4a04      	ldr	r2, [pc, #16]	@ (80019d8 <BSP_LCD_SelectLayer+0x1c>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6013      	str	r3, [r2, #0]
} 
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000448 	.word	0x20000448

080019dc <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80019e4:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <BSP_LCD_SetTextColor+0x28>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4907      	ldr	r1, [pc, #28]	@ (8001a08 <BSP_LCD_SetTextColor+0x2c>)
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	601a      	str	r2, [r3, #0]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	20000448 	.word	0x20000448
 8001a08:	2000044c 	.word	0x2000044c

08001a0c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <BSP_LCD_SetBackColor+0x2c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4908      	ldr	r1, [pc, #32]	@ (8001a3c <BSP_LCD_SetBackColor+0x30>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	3304      	adds	r3, #4
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	601a      	str	r2, [r3, #0]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000448 	.word	0x20000448
 8001a3c:	2000044c 	.word	0x2000044c

08001a40 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <BSP_LCD_SetFont+0x2c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4908      	ldr	r1, [pc, #32]	@ (8001a70 <BSP_LCD_SetFont+0x30>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	3308      	adds	r3, #8
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	601a      	str	r2, [r3, #0]
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000448 	.word	0x20000448
 8001a70:	2000044c 	.word	0x2000044c

08001a74 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <BSP_LCD_Clear+0x48>)
 8001a7e:	681c      	ldr	r4, [r3, #0]
 8001a80:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <BSP_LCD_Clear+0x48>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac0 <BSP_LCD_Clear+0x4c>)
 8001a86:	2134      	movs	r1, #52	@ 0x34
 8001a88:	fb01 f303 	mul.w	r3, r1, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	335c      	adds	r3, #92	@ 0x5c
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	461e      	mov	r6, r3
 8001a94:	f7ff ff0a 	bl	80018ac <BSP_LCD_GetXSize>
 8001a98:	4605      	mov	r5, r0
 8001a9a:	f7ff ff1b 	bl	80018d4 <BSP_LCD_GetYSize>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	462a      	mov	r2, r5
 8001aac:	4631      	mov	r1, r6
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f000 fb84 	bl	80021bc <LL_FillBuffer>
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001abc:	20000448 	.word	0x20000448
 8001ac0:	20000360 	.word	0x20000360

08001ac4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	80fb      	strh	r3, [r7, #6]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	80bb      	strh	r3, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b44 <BSP_LCD_DisplayChar+0x80>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	491b      	ldr	r1, [pc, #108]	@ (8001b48 <BSP_LCD_DisplayChar+0x84>)
 8001adc:	4613      	mov	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3308      	adds	r3, #8
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6819      	ldr	r1, [r3, #0]
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001af2:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <BSP_LCD_DisplayChar+0x80>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4c14      	ldr	r4, [pc, #80]	@ (8001b48 <BSP_LCD_DisplayChar+0x84>)
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4423      	add	r3, r4
 8001b02:	3308      	adds	r3, #8
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001b08:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b44 <BSP_LCD_DisplayChar+0x80>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4c0d      	ldr	r4, [pc, #52]	@ (8001b48 <BSP_LCD_DisplayChar+0x84>)
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4423      	add	r3, r4
 8001b1c:	3308      	adds	r3, #8
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	889b      	ldrh	r3, [r3, #4]
 8001b22:	3307      	adds	r3, #7
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	da00      	bge.n	8001b2a <BSP_LCD_DisplayChar+0x66>
 8001b28:	3307      	adds	r3, #7
 8001b2a:	10db      	asrs	r3, r3, #3
 8001b2c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001b30:	18ca      	adds	r2, r1, r3
 8001b32:	88b9      	ldrh	r1, [r7, #4]
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 fa88 	bl	800204c <DrawChar>
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd90      	pop	{r4, r7, pc}
 8001b44:	20000448 	.word	0x20000448
 8001b48:	2000044c 	.word	0x2000044c

08001b4c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001b4c:	b5b0      	push	{r4, r5, r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60ba      	str	r2, [r7, #8]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	81fb      	strh	r3, [r7, #14]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	81bb      	strh	r3, [r7, #12]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8001b62:	2301      	movs	r3, #1
 8001b64:	83fb      	strh	r3, [r7, #30]
 8001b66:	2300      	movs	r3, #0
 8001b68:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001b76:	e002      	b.n	8001b7e <BSP_LCD_DisplayStringAt+0x32>
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	617a      	str	r2, [r7, #20]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f6      	bne.n	8001b78 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001b8a:	f7ff fe8f 	bl	80018ac <BSP_LCD_GetXSize>
 8001b8e:	4601      	mov	r1, r0
 8001b90:	4b50      	ldr	r3, [pc, #320]	@ (8001cd4 <BSP_LCD_DisplayStringAt+0x188>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4850      	ldr	r0, [pc, #320]	@ (8001cd8 <BSP_LCD_DisplayStringAt+0x18c>)
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4403      	add	r3, r0
 8001ba0:	3308      	adds	r3, #8
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	889b      	ldrh	r3, [r3, #4]
 8001ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001baa:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d01c      	beq.n	8001bec <BSP_LCD_DisplayStringAt+0xa0>
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	dc33      	bgt.n	8001c1e <BSP_LCD_DisplayStringAt+0xd2>
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d002      	beq.n	8001bc0 <BSP_LCD_DisplayStringAt+0x74>
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d019      	beq.n	8001bf2 <BSP_LCD_DisplayStringAt+0xa6>
 8001bbe:	e02e      	b.n	8001c1e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	1ad1      	subs	r1, r2, r3
 8001bc6:	4b43      	ldr	r3, [pc, #268]	@ (8001cd4 <BSP_LCD_DisplayStringAt+0x188>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4843      	ldr	r0, [pc, #268]	@ (8001cd8 <BSP_LCD_DisplayStringAt+0x18c>)
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4403      	add	r3, r0
 8001bd6:	3308      	adds	r3, #8
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	889b      	ldrh	r3, [r3, #4]
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	085b      	lsrs	r3, r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	89fb      	ldrh	r3, [r7, #14]
 8001be6:	4413      	add	r3, r2
 8001be8:	83fb      	strh	r3, [r7, #30]
      break;
 8001bea:	e01b      	b.n	8001c24 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8001bec:	89fb      	ldrh	r3, [r7, #14]
 8001bee:	83fb      	strh	r3, [r7, #30]
      break;
 8001bf0:	e018      	b.n	8001c24 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	b299      	uxth	r1, r3
 8001bfa:	4b36      	ldr	r3, [pc, #216]	@ (8001cd4 <BSP_LCD_DisplayStringAt+0x188>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4836      	ldr	r0, [pc, #216]	@ (8001cd8 <BSP_LCD_DisplayStringAt+0x18c>)
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4403      	add	r3, r0
 8001c0a:	3308      	adds	r3, #8
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	889b      	ldrh	r3, [r3, #4]
 8001c10:	fb11 f303 	smulbb	r3, r1, r3
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	89fb      	ldrh	r3, [r7, #14]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	83fb      	strh	r3, [r7, #30]
      break;
 8001c1c:	e002      	b.n	8001c24 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8001c1e:	89fb      	ldrh	r3, [r7, #14]
 8001c20:	83fb      	strh	r3, [r7, #30]
      break;
 8001c22:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001c24:	8bfb      	ldrh	r3, [r7, #30]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <BSP_LCD_DisplayStringAt+0xe6>
 8001c2a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	da1d      	bge.n	8001c6e <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8001c32:	2301      	movs	r3, #1
 8001c34:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001c36:	e01a      	b.n	8001c6e <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	781a      	ldrb	r2, [r3, #0]
 8001c3c:	89b9      	ldrh	r1, [r7, #12]
 8001c3e:	8bfb      	ldrh	r3, [r7, #30]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff3f 	bl	8001ac4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001c46:	4b23      	ldr	r3, [pc, #140]	@ (8001cd4 <BSP_LCD_DisplayStringAt+0x188>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4923      	ldr	r1, [pc, #140]	@ (8001cd8 <BSP_LCD_DisplayStringAt+0x18c>)
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	3308      	adds	r3, #8
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	889a      	ldrh	r2, [r3, #4]
 8001c5c:	8bfb      	ldrh	r3, [r7, #30]
 8001c5e:	4413      	add	r3, r2
 8001c60:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	3301      	adds	r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
    i++;
 8001c68:	8bbb      	ldrh	r3, [r7, #28]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf14      	ite	ne
 8001c76:	2301      	movne	r3, #1
 8001c78:	2300      	moveq	r3, #0
 8001c7a:	b2dc      	uxtb	r4, r3
 8001c7c:	f7ff fe16 	bl	80018ac <BSP_LCD_GetXSize>
 8001c80:	8bb9      	ldrh	r1, [r7, #28]
 8001c82:	4b14      	ldr	r3, [pc, #80]	@ (8001cd4 <BSP_LCD_DisplayStringAt+0x188>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	4d14      	ldr	r5, [pc, #80]	@ (8001cd8 <BSP_LCD_DisplayStringAt+0x18c>)
 8001c88:	4613      	mov	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4413      	add	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	442b      	add	r3, r5
 8001c92:	3308      	adds	r3, #8
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	889b      	ldrh	r3, [r3, #4]
 8001c98:	fb01 f303 	mul.w	r3, r1, r3
 8001c9c:	1ac3      	subs	r3, r0, r3
 8001c9e:	b299      	uxth	r1, r3
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <BSP_LCD_DisplayStringAt+0x188>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	480c      	ldr	r0, [pc, #48]	@ (8001cd8 <BSP_LCD_DisplayStringAt+0x18c>)
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4403      	add	r3, r0
 8001cb0:	3308      	adds	r3, #8
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	889b      	ldrh	r3, [r3, #4]
 8001cb6:	4299      	cmp	r1, r3
 8001cb8:	bf2c      	ite	cs
 8001cba:	2301      	movcs	r3, #1
 8001cbc:	2300      	movcc	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4023      	ands	r3, r4
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1b7      	bne.n	8001c38 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3720      	adds	r7, #32
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000448 	.word	0x20000448
 8001cd8:	2000044c 	.word	0x2000044c

08001cdc <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001cdc:	b5b0      	push	{r4, r5, r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	603a      	str	r2, [r7, #0]
 8001ce6:	80fb      	strh	r3, [r7, #6]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001cec:	4b1d      	ldr	r3, [pc, #116]	@ (8001d64 <BSP_LCD_DrawPixel+0x88>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d68 <BSP_LCD_DrawPixel+0x8c>)
 8001cf2:	2134      	movs	r1, #52	@ 0x34
 8001cf4:	fb01 f303 	mul.w	r3, r1, r3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3348      	adds	r3, #72	@ 0x48
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d116      	bne.n	8001d30 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001d02:	4b18      	ldr	r3, [pc, #96]	@ (8001d64 <BSP_LCD_DrawPixel+0x88>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a18      	ldr	r2, [pc, #96]	@ (8001d68 <BSP_LCD_DrawPixel+0x8c>)
 8001d08:	2134      	movs	r1, #52	@ 0x34
 8001d0a:	fb01 f303 	mul.w	r3, r1, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	335c      	adds	r3, #92	@ 0x5c
 8001d12:	681c      	ldr	r4, [r3, #0]
 8001d14:	88bd      	ldrh	r5, [r7, #4]
 8001d16:	f7ff fdc9 	bl	80018ac <BSP_LCD_GetXSize>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	fb03 f205 	mul.w	r2, r3, r5
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	4413      	add	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4423      	add	r3, r4
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	b292      	uxth	r2, r2
 8001d2c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8001d2e:	e015      	b.n	8001d5c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <BSP_LCD_DrawPixel+0x88>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0c      	ldr	r2, [pc, #48]	@ (8001d68 <BSP_LCD_DrawPixel+0x8c>)
 8001d36:	2134      	movs	r1, #52	@ 0x34
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	335c      	adds	r3, #92	@ 0x5c
 8001d40:	681c      	ldr	r4, [r3, #0]
 8001d42:	88bd      	ldrh	r5, [r7, #4]
 8001d44:	f7ff fdb2 	bl	80018ac <BSP_LCD_GetXSize>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	fb03 f205 	mul.w	r2, r3, r5
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4423      	add	r3, r4
 8001d56:	461a      	mov	r2, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bdb0      	pop	{r4, r5, r7, pc}
 8001d64:	20000448 	.word	0x20000448
 8001d68:	20000360 	.word	0x20000360

08001d6c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af02      	add	r7, sp, #8
 8001d74:	4604      	mov	r4, r0
 8001d76:	4608      	mov	r0, r1
 8001d78:	4611      	mov	r1, r2
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4623      	mov	r3, r4
 8001d7e:	80fb      	strh	r3, [r7, #6]
 8001d80:	4603      	mov	r3, r0
 8001d82:	80bb      	strh	r3, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001d90:	4b30      	ldr	r3, [pc, #192]	@ (8001e54 <BSP_LCD_FillRect+0xe8>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4930      	ldr	r1, [pc, #192]	@ (8001e58 <BSP_LCD_FillRect+0xec>)
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fe1a 	bl	80019dc <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001da8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e54 <BSP_LCD_FillRect+0xe8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2b      	ldr	r2, [pc, #172]	@ (8001e5c <BSP_LCD_FillRect+0xf0>)
 8001dae:	2134      	movs	r1, #52	@ 0x34
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	4413      	add	r3, r2
 8001db6:	3348      	adds	r3, #72	@ 0x48
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d114      	bne.n	8001de8 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001dbe:	4b25      	ldr	r3, [pc, #148]	@ (8001e54 <BSP_LCD_FillRect+0xe8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a26      	ldr	r2, [pc, #152]	@ (8001e5c <BSP_LCD_FillRect+0xf0>)
 8001dc4:	2134      	movs	r1, #52	@ 0x34
 8001dc6:	fb01 f303 	mul.w	r3, r1, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	335c      	adds	r3, #92	@ 0x5c
 8001dce:	681c      	ldr	r4, [r3, #0]
 8001dd0:	f7ff fd6c 	bl	80018ac <BSP_LCD_GetXSize>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	88bb      	ldrh	r3, [r7, #4]
 8001dd8:	fb03 f202 	mul.w	r2, r3, r2
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	4413      	add	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4423      	add	r3, r4
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	e013      	b.n	8001e10 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001de8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <BSP_LCD_FillRect+0xe8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1b      	ldr	r2, [pc, #108]	@ (8001e5c <BSP_LCD_FillRect+0xf0>)
 8001dee:	2134      	movs	r1, #52	@ 0x34
 8001df0:	fb01 f303 	mul.w	r3, r1, r3
 8001df4:	4413      	add	r3, r2
 8001df6:	335c      	adds	r3, #92	@ 0x5c
 8001df8:	681c      	ldr	r4, [r3, #0]
 8001dfa:	f7ff fd57 	bl	80018ac <BSP_LCD_GetXSize>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	fb03 f202 	mul.w	r2, r3, r2
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4423      	add	r3, r4
 8001e0e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001e10:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <BSP_LCD_FillRect+0xe8>)
 8001e12:	681c      	ldr	r4, [r3, #0]
 8001e14:	68fd      	ldr	r5, [r7, #12]
 8001e16:	887e      	ldrh	r6, [r7, #2]
 8001e18:	f8b7 8000 	ldrh.w	r8, [r7]
 8001e1c:	f7ff fd46 	bl	80018ac <BSP_LCD_GetXSize>
 8001e20:	4602      	mov	r2, r0
 8001e22:	887b      	ldrh	r3, [r7, #2]
 8001e24:	1ad1      	subs	r1, r2, r3
 8001e26:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <BSP_LCD_FillRect+0xe8>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	480b      	ldr	r0, [pc, #44]	@ (8001e58 <BSP_LCD_FillRect+0xec>)
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4403      	add	r3, r0
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	9100      	str	r1, [sp, #0]
 8001e3c:	4643      	mov	r3, r8
 8001e3e:	4632      	mov	r2, r6
 8001e40:	4629      	mov	r1, r5
 8001e42:	4620      	mov	r0, r4
 8001e44:	f000 f9ba 	bl	80021bc <LL_FillBuffer>
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e52:	bf00      	nop
 8001e54:	20000448 	.word	0x20000448
 8001e58:	2000044c 	.word	0x2000044c
 8001e5c:	20000360 	.word	0x20000360

08001e60 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b090      	sub	sp, #64	@ 0x40
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001e6a:	4b64      	ldr	r3, [pc, #400]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	4a63      	ldr	r2, [pc, #396]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001e70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e76:	4b61      	ldr	r3, [pc, #388]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e82:	4b5e      	ldr	r3, [pc, #376]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	4a5d      	ldr	r2, [pc, #372]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001e88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8e:	4b5b      	ldr	r3, [pc, #364]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e9a:	4b58      	ldr	r3, [pc, #352]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	4a57      	ldr	r2, [pc, #348]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001ea0:	f043 0310 	orr.w	r3, r3, #16
 8001ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea6:	4b55      	ldr	r3, [pc, #340]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	623b      	str	r3, [r7, #32]
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001eb2:	4b52      	ldr	r3, [pc, #328]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	4a51      	ldr	r2, [pc, #324]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001eb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ebe:	4b4f      	ldr	r3, [pc, #316]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001eca:	4b4c      	ldr	r3, [pc, #304]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	4a4b      	ldr	r2, [pc, #300]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed6:	4b49      	ldr	r3, [pc, #292]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001ee2:	4b46      	ldr	r3, [pc, #280]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a45      	ldr	r2, [pc, #276]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001ee8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b43      	ldr	r3, [pc, #268]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001efa:	4b40      	ldr	r3, [pc, #256]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	4a3f      	ldr	r2, [pc, #252]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001f00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f06:	4b3d      	ldr	r3, [pc, #244]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8001f12:	4b3a      	ldr	r3, [pc, #232]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4a39      	ldr	r2, [pc, #228]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b37      	ldr	r3, [pc, #220]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001f2a:	4b34      	ldr	r3, [pc, #208]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	4a33      	ldr	r2, [pc, #204]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001f30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f36:	4b31      	ldr	r3, [pc, #196]	@ (8001ffc <BSP_LCD_MspInit+0x19c>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8001f42:	2310      	movs	r3, #16
 8001f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001f52:	230e      	movs	r3, #14
 8001f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001f56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4828      	ldr	r0, [pc, #160]	@ (8002000 <BSP_LCD_MspInit+0x1a0>)
 8001f5e:	f001 fa4f 	bl	8003400 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001f62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001f6c:	2309      	movs	r3, #9
 8001f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001f70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f74:	4619      	mov	r1, r3
 8001f76:	4823      	ldr	r0, [pc, #140]	@ (8002004 <BSP_LCD_MspInit+0x1a4>)
 8001f78:	f001 fa42 	bl	8003400 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8001f7c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001f86:	230e      	movs	r3, #14
 8001f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001f8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f8e:	4619      	mov	r1, r3
 8001f90:	481d      	ldr	r0, [pc, #116]	@ (8002008 <BSP_LCD_MspInit+0x1a8>)
 8001f92:	f001 fa35 	bl	8003400 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001f96:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001fa0:	230e      	movs	r3, #14
 8001fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001fa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4818      	ldr	r0, [pc, #96]	@ (800200c <BSP_LCD_MspInit+0x1ac>)
 8001fac:	f001 fa28 	bl	8003400 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001fb0:	23f7      	movs	r3, #247	@ 0xf7
 8001fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001fb8:	230e      	movs	r3, #14
 8001fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001fbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4813      	ldr	r0, [pc, #76]	@ (8002010 <BSP_LCD_MspInit+0x1b0>)
 8001fc4:	f001 fa1c 	bl	8003400 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001fd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	480b      	ldr	r0, [pc, #44]	@ (8002008 <BSP_LCD_MspInit+0x1a8>)
 8001fda:	f001 fa11 	bl	8003400 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001fde:	2308      	movs	r3, #8
 8001fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001fe6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fea:	4619      	mov	r1, r3
 8001fec:	4808      	ldr	r0, [pc, #32]	@ (8002010 <BSP_LCD_MspInit+0x1b0>)
 8001fee:	f001 fa07 	bl	8003400 <HAL_GPIO_Init>
}
 8001ff2:	bf00      	nop
 8001ff4:	3740      	adds	r7, #64	@ 0x40
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40021000 	.word	0x40021000
 8002004:	40021800 	.word	0x40021800
 8002008:	40022000 	.word	0x40022000
 800200c:	40022400 	.word	0x40022400
 8002010:	40022800 	.word	0x40022800

08002014 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800201e:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <BSP_LCD_ClockConfig+0x34>)
 8002020:	2208      	movs	r2, #8
 8002022:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <BSP_LCD_ClockConfig+0x34>)
 8002026:	22c0      	movs	r2, #192	@ 0xc0
 8002028:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800202a:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <BSP_LCD_ClockConfig+0x34>)
 800202c:	2205      	movs	r2, #5
 800202e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002030:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <BSP_LCD_ClockConfig+0x34>)
 8002032:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002036:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002038:	4803      	ldr	r0, [pc, #12]	@ (8002048 <BSP_LCD_ClockConfig+0x34>)
 800203a:	f004 f9c7 	bl	80063cc <HAL_RCCEx_PeriphCLKConfig>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000464 	.word	0x20000464

0800204c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	603a      	str	r2, [r7, #0]
 8002056:	80fb      	strh	r3, [r7, #6]
 8002058:	460b      	mov	r3, r1
 800205a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8002064:	4b53      	ldr	r3, [pc, #332]	@ (80021b4 <DrawChar+0x168>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4953      	ldr	r1, [pc, #332]	@ (80021b8 <DrawChar+0x16c>)
 800206a:	4613      	mov	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	3308      	adds	r3, #8
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	88db      	ldrh	r3, [r3, #6]
 800207a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800207c:	4b4d      	ldr	r3, [pc, #308]	@ (80021b4 <DrawChar+0x168>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	494d      	ldr	r1, [pc, #308]	@ (80021b8 <DrawChar+0x16c>)
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	3308      	adds	r3, #8
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	889b      	ldrh	r3, [r3, #4]
 8002092:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002094:	8a3b      	ldrh	r3, [r7, #16]
 8002096:	3307      	adds	r3, #7
 8002098:	2b00      	cmp	r3, #0
 800209a:	da00      	bge.n	800209e <DrawChar+0x52>
 800209c:	3307      	adds	r3, #7
 800209e:	10db      	asrs	r3, r3, #3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	8a3b      	ldrh	r3, [r7, #16]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	e076      	b.n	80021a2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80020b4:	8a3b      	ldrh	r3, [r7, #16]
 80020b6:	3307      	adds	r3, #7
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	da00      	bge.n	80020be <DrawChar+0x72>
 80020bc:	3307      	adds	r3, #7
 80020be:	10db      	asrs	r3, r3, #3
 80020c0:	461a      	mov	r2, r3
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80020ce:	8a3b      	ldrh	r3, [r7, #16]
 80020d0:	3307      	adds	r3, #7
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	da00      	bge.n	80020d8 <DrawChar+0x8c>
 80020d6:	3307      	adds	r3, #7
 80020d8:	10db      	asrs	r3, r3, #3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d002      	beq.n	80020e4 <DrawChar+0x98>
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d004      	beq.n	80020ec <DrawChar+0xa0>
 80020e2:	e00c      	b.n	80020fe <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	617b      	str	r3, [r7, #20]
      break;
 80020ea:	e016      	b.n	800211a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	3201      	adds	r2, #1
 80020f6:	7812      	ldrb	r2, [r2, #0]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]
      break;
 80020fc:	e00d      	b.n	800211a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	041a      	lsls	r2, r3, #16
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	3301      	adds	r3, #1
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	4313      	orrs	r3, r2
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	3202      	adds	r2, #2
 8002112:	7812      	ldrb	r2, [r2, #0]
 8002114:	4313      	orrs	r3, r2
 8002116:	617b      	str	r3, [r7, #20]
      break;
 8002118:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
 800211e:	e036      	b.n	800218e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002120:	8a3a      	ldrh	r2, [r7, #16]
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	1ad2      	subs	r2, r2, r3
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	4413      	add	r3, r2
 800212a:	3b01      	subs	r3, #1
 800212c:	2201      	movs	r2, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	461a      	mov	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d012      	beq.n	8002162 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	b29a      	uxth	r2, r3
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	4413      	add	r3, r2
 8002144:	b298      	uxth	r0, r3
 8002146:	4b1b      	ldr	r3, [pc, #108]	@ (80021b4 <DrawChar+0x168>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	491b      	ldr	r1, [pc, #108]	@ (80021b8 <DrawChar+0x16c>)
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	88bb      	ldrh	r3, [r7, #4]
 800215a:	4619      	mov	r1, r3
 800215c:	f7ff fdbe 	bl	8001cdc <BSP_LCD_DrawPixel>
 8002160:	e012      	b.n	8002188 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	b29a      	uxth	r2, r3
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	4413      	add	r3, r2
 800216a:	b298      	uxth	r0, r3
 800216c:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <DrawChar+0x168>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4911      	ldr	r1, [pc, #68]	@ (80021b8 <DrawChar+0x16c>)
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	3304      	adds	r3, #4
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	88bb      	ldrh	r3, [r7, #4]
 8002182:	4619      	mov	r1, r3
 8002184:	f7ff fdaa 	bl	8001cdc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	3301      	adds	r3, #1
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	8a3b      	ldrh	r3, [r7, #16]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	429a      	cmp	r2, r3
 8002194:	d3c4      	bcc.n	8002120 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8002196:	88bb      	ldrh	r3, [r7, #4]
 8002198:	3301      	adds	r3, #1
 800219a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	3301      	adds	r3, #1
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	8a7b      	ldrh	r3, [r7, #18]
 80021a4:	69fa      	ldr	r2, [r7, #28]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d384      	bcc.n	80020b4 <DrawChar+0x68>
  }
}
 80021aa:	bf00      	nop
 80021ac:	bf00      	nop
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000448 	.word	0x20000448
 80021b8:	2000044c 	.word	0x2000044c

080021bc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80021ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002244 <LL_FillBuffer+0x88>)
 80021cc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80021d0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80021d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002248 <LL_FillBuffer+0x8c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1d      	ldr	r2, [pc, #116]	@ (800224c <LL_FillBuffer+0x90>)
 80021d8:	2134      	movs	r1, #52	@ 0x34
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	3348      	adds	r3, #72	@ 0x48
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d103      	bne.n	80021f0 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80021e8:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <LL_FillBuffer+0x88>)
 80021ea:	2202      	movs	r2, #2
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	e002      	b.n	80021f6 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80021f0:	4b14      	ldr	r3, [pc, #80]	@ (8002244 <LL_FillBuffer+0x88>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80021f6:	4a13      	ldr	r2, [pc, #76]	@ (8002244 <LL_FillBuffer+0x88>)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80021fc:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <LL_FillBuffer+0x88>)
 80021fe:	4a14      	ldr	r2, [pc, #80]	@ (8002250 <LL_FillBuffer+0x94>)
 8002200:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002202:	4810      	ldr	r0, [pc, #64]	@ (8002244 <LL_FillBuffer+0x88>)
 8002204:	f000 fd60 	bl	8002cc8 <HAL_DMA2D_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d115      	bne.n	800223a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800220e:	68f9      	ldr	r1, [r7, #12]
 8002210:	480c      	ldr	r0, [pc, #48]	@ (8002244 <LL_FillBuffer+0x88>)
 8002212:	f000 ffc7 	bl	80031a4 <HAL_DMA2D_ConfigLayer>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10e      	bne.n	800223a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69f9      	ldr	r1, [r7, #28]
 8002226:	4807      	ldr	r0, [pc, #28]	@ (8002244 <LL_FillBuffer+0x88>)
 8002228:	f000 fd98 	bl	8002d5c <HAL_DMA2D_Start>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d103      	bne.n	800223a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002232:	210a      	movs	r1, #10
 8002234:	4803      	ldr	r0, [pc, #12]	@ (8002244 <LL_FillBuffer+0x88>)
 8002236:	f000 fdbc 	bl	8002db2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000408 	.word	0x20000408
 8002248:	20000448 	.word	0x20000448
 800224c:	20000360 	.word	0x20000360
 8002250:	4002b000 	.word	0x4002b000

08002254 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002258:	4b29      	ldr	r3, [pc, #164]	@ (8002300 <BSP_SDRAM_Init+0xac>)
 800225a:	4a2a      	ldr	r2, [pc, #168]	@ (8002304 <BSP_SDRAM_Init+0xb0>)
 800225c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800225e:	4b2a      	ldr	r3, [pc, #168]	@ (8002308 <BSP_SDRAM_Init+0xb4>)
 8002260:	2202      	movs	r2, #2
 8002262:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002264:	4b28      	ldr	r3, [pc, #160]	@ (8002308 <BSP_SDRAM_Init+0xb4>)
 8002266:	2207      	movs	r2, #7
 8002268:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800226a:	4b27      	ldr	r3, [pc, #156]	@ (8002308 <BSP_SDRAM_Init+0xb4>)
 800226c:	2204      	movs	r2, #4
 800226e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002270:	4b25      	ldr	r3, [pc, #148]	@ (8002308 <BSP_SDRAM_Init+0xb4>)
 8002272:	2207      	movs	r2, #7
 8002274:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002276:	4b24      	ldr	r3, [pc, #144]	@ (8002308 <BSP_SDRAM_Init+0xb4>)
 8002278:	2202      	movs	r2, #2
 800227a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800227c:	4b22      	ldr	r3, [pc, #136]	@ (8002308 <BSP_SDRAM_Init+0xb4>)
 800227e:	2202      	movs	r2, #2
 8002280:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002282:	4b21      	ldr	r3, [pc, #132]	@ (8002308 <BSP_SDRAM_Init+0xb4>)
 8002284:	2202      	movs	r2, #2
 8002286:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002288:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <BSP_SDRAM_Init+0xac>)
 800228a:	2200      	movs	r2, #0
 800228c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800228e:	4b1c      	ldr	r3, [pc, #112]	@ (8002300 <BSP_SDRAM_Init+0xac>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002294:	4b1a      	ldr	r3, [pc, #104]	@ (8002300 <BSP_SDRAM_Init+0xac>)
 8002296:	2204      	movs	r2, #4
 8002298:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800229a:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <BSP_SDRAM_Init+0xac>)
 800229c:	2210      	movs	r2, #16
 800229e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80022a0:	4b17      	ldr	r3, [pc, #92]	@ (8002300 <BSP_SDRAM_Init+0xac>)
 80022a2:	2240      	movs	r2, #64	@ 0x40
 80022a4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80022a6:	4b16      	ldr	r3, [pc, #88]	@ (8002300 <BSP_SDRAM_Init+0xac>)
 80022a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022ac:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80022ae:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <BSP_SDRAM_Init+0xac>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80022b4:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <BSP_SDRAM_Init+0xac>)
 80022b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022ba:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80022bc:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <BSP_SDRAM_Init+0xac>)
 80022be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022c2:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80022c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <BSP_SDRAM_Init+0xac>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80022ca:	2100      	movs	r1, #0
 80022cc:	480c      	ldr	r0, [pc, #48]	@ (8002300 <BSP_SDRAM_Init+0xac>)
 80022ce:	f000 f87f 	bl	80023d0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80022d2:	490d      	ldr	r1, [pc, #52]	@ (8002308 <BSP_SDRAM_Init+0xb4>)
 80022d4:	480a      	ldr	r0, [pc, #40]	@ (8002300 <BSP_SDRAM_Init+0xac>)
 80022d6:	f004 fc69 	bl	8006bac <HAL_SDRAM_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80022e0:	4b0a      	ldr	r3, [pc, #40]	@ (800230c <BSP_SDRAM_Init+0xb8>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	e002      	b.n	80022ee <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80022e8:	4b08      	ldr	r3, [pc, #32]	@ (800230c <BSP_SDRAM_Init+0xb8>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80022ee:	f240 6003 	movw	r0, #1539	@ 0x603
 80022f2:	f000 f80d 	bl	8002310 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80022f6:	4b05      	ldr	r3, [pc, #20]	@ (800230c <BSP_SDRAM_Init+0xb8>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200004e8 	.word	0x200004e8
 8002304:	a0000140 	.word	0xa0000140
 8002308:	2000051c 	.word	0x2000051c
 800230c:	2000001c 	.word	0x2000001c

08002310 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800231c:	4b2a      	ldr	r3, [pc, #168]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800231e:	2201      	movs	r2, #1
 8002320:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002322:	4b29      	ldr	r3, [pc, #164]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002324:	2210      	movs	r2, #16
 8002326:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002328:	4b27      	ldr	r3, [pc, #156]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800232a:	2201      	movs	r2, #1
 800232c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800232e:	4b26      	ldr	r3, [pc, #152]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002334:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002338:	4923      	ldr	r1, [pc, #140]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800233a:	4824      	ldr	r0, [pc, #144]	@ (80023cc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800233c:	f004 fc6a 	bl	8006c14 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002340:	2001      	movs	r0, #1
 8002342:	f000 f96b 	bl	800261c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002346:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002348:	2202      	movs	r2, #2
 800234a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800234c:	4b1e      	ldr	r3, [pc, #120]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800234e:	2210      	movs	r2, #16
 8002350:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002352:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002354:	2201      	movs	r2, #1
 8002356:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002358:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800235a:	2200      	movs	r2, #0
 800235c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800235e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002362:	4919      	ldr	r1, [pc, #100]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002364:	4819      	ldr	r0, [pc, #100]	@ (80023cc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002366:	f004 fc55 	bl	8006c14 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800236a:	4b17      	ldr	r3, [pc, #92]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800236c:	2203      	movs	r2, #3
 800236e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002370:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002372:	2210      	movs	r2, #16
 8002374:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002376:	4b14      	ldr	r3, [pc, #80]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002378:	2208      	movs	r2, #8
 800237a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800237c:	4b12      	ldr	r3, [pc, #72]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800237e:	2200      	movs	r2, #0
 8002380:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002382:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002386:	4910      	ldr	r1, [pc, #64]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002388:	4810      	ldr	r0, [pc, #64]	@ (80023cc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800238a:	f004 fc43 	bl	8006c14 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800238e:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8002392:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002394:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002396:	2204      	movs	r2, #4
 8002398:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800239a:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800239c:	2210      	movs	r2, #16
 800239e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4a07      	ldr	r2, [pc, #28]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023aa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80023ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023b0:	4905      	ldr	r1, [pc, #20]	@ (80023c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023b2:	4806      	ldr	r0, [pc, #24]	@ (80023cc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80023b4:	f004 fc2e 	bl	8006c14 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4804      	ldr	r0, [pc, #16]	@ (80023cc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80023bc:	f004 fc5f 	bl	8006c7e <HAL_SDRAM_ProgramRefreshRate>
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000538 	.word	0x20000538
 80023cc:	200004e8 	.word	0x200004e8

080023d0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b090      	sub	sp, #64	@ 0x40
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80023da:	4b70      	ldr	r3, [pc, #448]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 80023dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023de:	4a6f      	ldr	r2, [pc, #444]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6393      	str	r3, [r2, #56]	@ 0x38
 80023e6:	4b6d      	ldr	r3, [pc, #436]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 80023e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80023f2:	4b6a      	ldr	r3, [pc, #424]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	4a69      	ldr	r2, [pc, #420]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 80023f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fe:	4b67      	ldr	r3, [pc, #412]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800240a:	4b64      	ldr	r3, [pc, #400]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	4a63      	ldr	r2, [pc, #396]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	6313      	str	r3, [r2, #48]	@ 0x30
 8002416:	4b61      	ldr	r3, [pc, #388]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	623b      	str	r3, [r7, #32]
 8002420:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002422:	4b5e      	ldr	r3, [pc, #376]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	4a5d      	ldr	r2, [pc, #372]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	6313      	str	r3, [r2, #48]	@ 0x30
 800242e:	4b5b      	ldr	r3, [pc, #364]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800243a:	4b58      	ldr	r3, [pc, #352]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	4a57      	ldr	r2, [pc, #348]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 8002440:	f043 0310 	orr.w	r3, r3, #16
 8002444:	6313      	str	r3, [r2, #48]	@ 0x30
 8002446:	4b55      	ldr	r3, [pc, #340]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002452:	4b52      	ldr	r3, [pc, #328]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	4a51      	ldr	r2, [pc, #324]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 8002458:	f043 0320 	orr.w	r3, r3, #32
 800245c:	6313      	str	r3, [r2, #48]	@ 0x30
 800245e:	4b4f      	ldr	r3, [pc, #316]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800246a:	4b4c      	ldr	r3, [pc, #304]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	4a4b      	ldr	r2, [pc, #300]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 8002470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002474:	6313      	str	r3, [r2, #48]	@ 0x30
 8002476:	4b49      	ldr	r3, [pc, #292]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002482:	4b46      	ldr	r3, [pc, #280]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	4a45      	ldr	r2, [pc, #276]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 8002488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800248c:	6313      	str	r3, [r2, #48]	@ 0x30
 800248e:	4b43      	ldr	r3, [pc, #268]	@ (800259c <BSP_SDRAM_MspInit+0x1cc>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800249e:	2301      	movs	r3, #1
 80024a0:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80024a2:	2302      	movs	r3, #2
 80024a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80024a6:	230c      	movs	r3, #12
 80024a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80024aa:	2308      	movs	r3, #8
 80024ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80024ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024b2:	4619      	mov	r1, r3
 80024b4:	483a      	ldr	r0, [pc, #232]	@ (80025a0 <BSP_SDRAM_MspInit+0x1d0>)
 80024b6:	f000 ffa3 	bl	8003400 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80024ba:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80024be:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80024c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024c4:	4619      	mov	r1, r3
 80024c6:	4837      	ldr	r0, [pc, #220]	@ (80025a4 <BSP_SDRAM_MspInit+0x1d4>)
 80024c8:	f000 ff9a 	bl	8003400 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80024cc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80024d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80024d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024d6:	4619      	mov	r1, r3
 80024d8:	4833      	ldr	r0, [pc, #204]	@ (80025a8 <BSP_SDRAM_MspInit+0x1d8>)
 80024da:	f000 ff91 	bl	8003400 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80024de:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80024e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80024e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024e8:	4619      	mov	r1, r3
 80024ea:	4830      	ldr	r0, [pc, #192]	@ (80025ac <BSP_SDRAM_MspInit+0x1dc>)
 80024ec:	f000 ff88 	bl	8003400 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80024f0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80024f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80024f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024fa:	4619      	mov	r1, r3
 80024fc:	482c      	ldr	r0, [pc, #176]	@ (80025b0 <BSP_SDRAM_MspInit+0x1e0>)
 80024fe:	f000 ff7f 	bl	8003400 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002502:	2328      	movs	r3, #40	@ 0x28
 8002504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002506:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800250a:	4619      	mov	r1, r3
 800250c:	4829      	ldr	r0, [pc, #164]	@ (80025b4 <BSP_SDRAM_MspInit+0x1e4>)
 800250e:	f000 ff77 	bl	8003400 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002512:	4b29      	ldr	r3, [pc, #164]	@ (80025b8 <BSP_SDRAM_MspInit+0x1e8>)
 8002514:	2200      	movs	r2, #0
 8002516:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002518:	4b27      	ldr	r3, [pc, #156]	@ (80025b8 <BSP_SDRAM_MspInit+0x1e8>)
 800251a:	2280      	movs	r2, #128	@ 0x80
 800251c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800251e:	4b26      	ldr	r3, [pc, #152]	@ (80025b8 <BSP_SDRAM_MspInit+0x1e8>)
 8002520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002524:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002526:	4b24      	ldr	r3, [pc, #144]	@ (80025b8 <BSP_SDRAM_MspInit+0x1e8>)
 8002528:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800252c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800252e:	4b22      	ldr	r3, [pc, #136]	@ (80025b8 <BSP_SDRAM_MspInit+0x1e8>)
 8002530:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002534:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002536:	4b20      	ldr	r3, [pc, #128]	@ (80025b8 <BSP_SDRAM_MspInit+0x1e8>)
 8002538:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800253c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800253e:	4b1e      	ldr	r3, [pc, #120]	@ (80025b8 <BSP_SDRAM_MspInit+0x1e8>)
 8002540:	2200      	movs	r2, #0
 8002542:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002544:	4b1c      	ldr	r3, [pc, #112]	@ (80025b8 <BSP_SDRAM_MspInit+0x1e8>)
 8002546:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800254a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800254c:	4b1a      	ldr	r3, [pc, #104]	@ (80025b8 <BSP_SDRAM_MspInit+0x1e8>)
 800254e:	2200      	movs	r2, #0
 8002550:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002552:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <BSP_SDRAM_MspInit+0x1e8>)
 8002554:	2203      	movs	r2, #3
 8002556:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002558:	4b17      	ldr	r3, [pc, #92]	@ (80025b8 <BSP_SDRAM_MspInit+0x1e8>)
 800255a:	2200      	movs	r2, #0
 800255c:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800255e:	4b16      	ldr	r3, [pc, #88]	@ (80025b8 <BSP_SDRAM_MspInit+0x1e8>)
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <BSP_SDRAM_MspInit+0x1e8>)
 8002566:	4a15      	ldr	r2, [pc, #84]	@ (80025bc <BSP_SDRAM_MspInit+0x1ec>)
 8002568:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a12      	ldr	r2, [pc, #72]	@ (80025b8 <BSP_SDRAM_MspInit+0x1e8>)
 800256e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002570:	4a11      	ldr	r2, [pc, #68]	@ (80025b8 <BSP_SDRAM_MspInit+0x1e8>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002576:	4810      	ldr	r0, [pc, #64]	@ (80025b8 <BSP_SDRAM_MspInit+0x1e8>)
 8002578:	f000 fa04 	bl	8002984 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800257c:	480e      	ldr	r0, [pc, #56]	@ (80025b8 <BSP_SDRAM_MspInit+0x1e8>)
 800257e:	f000 f953 	bl	8002828 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002582:	2200      	movs	r2, #0
 8002584:	210f      	movs	r1, #15
 8002586:	2038      	movs	r0, #56	@ 0x38
 8002588:	f000 f924 	bl	80027d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800258c:	2038      	movs	r0, #56	@ 0x38
 800258e:	f000 f93d 	bl	800280c <HAL_NVIC_EnableIRQ>
}
 8002592:	bf00      	nop
 8002594:	3740      	adds	r7, #64	@ 0x40
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	40020800 	.word	0x40020800
 80025a4:	40020c00 	.word	0x40020c00
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40021400 	.word	0x40021400
 80025b0:	40021800 	.word	0x40021800
 80025b4:	40021c00 	.word	0x40021c00
 80025b8:	20000548 	.word	0x20000548
 80025bc:	40026410 	.word	0x40026410

080025c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c4:	2003      	movs	r0, #3
 80025c6:	f000 f8fa 	bl	80027be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7fe fc44 	bl	8000e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025d0:	f7fe f954 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e0:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <HAL_IncTick+0x20>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_IncTick+0x24>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	4a04      	ldr	r2, [pc, #16]	@ (8002600 <HAL_IncTick+0x24>)
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000024 	.word	0x20000024
 8002600:	200005a8 	.word	0x200005a8

08002604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return uwTick;
 8002608:	4b03      	ldr	r3, [pc, #12]	@ (8002618 <HAL_GetTick+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	200005a8 	.word	0x200005a8

0800261c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff ffee 	bl	8002604 <HAL_GetTick>
 8002628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002634:	d005      	beq.n	8002642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002636:	4b0a      	ldr	r3, [pc, #40]	@ (8002660 <HAL_Delay+0x44>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002642:	bf00      	nop
 8002644:	f7ff ffde 	bl	8002604 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	429a      	cmp	r2, r3
 8002652:	d8f7      	bhi.n	8002644 <HAL_Delay+0x28>
  {
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000024 	.word	0x20000024

08002664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002674:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002680:	4013      	ands	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800268c:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 800268e:	4313      	orrs	r3, r2
 8002690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002692:	4a04      	ldr	r2, [pc, #16]	@ (80026a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	60d3      	str	r3, [r2, #12]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00
 80026a8:	05fa0000 	.word	0x05fa0000

080026ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b0:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <__NVIC_GetPriorityGrouping+0x18>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0307 	and.w	r3, r3, #7
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	db0b      	blt.n	80026f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4907      	ldr	r1, [pc, #28]	@ (8002700 <__NVIC_EnableIRQ+0x38>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2001      	movs	r0, #1
 80026ea:	fa00 f202 	lsl.w	r2, r0, r2
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000e100 	.word	0xe000e100

08002704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db0a      	blt.n	800272e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	490c      	ldr	r1, [pc, #48]	@ (8002750 <__NVIC_SetPriority+0x4c>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	0112      	lsls	r2, r2, #4
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	440b      	add	r3, r1
 8002728:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800272c:	e00a      	b.n	8002744 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4908      	ldr	r1, [pc, #32]	@ (8002754 <__NVIC_SetPriority+0x50>)
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3b04      	subs	r3, #4
 800273c:	0112      	lsls	r2, r2, #4
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	440b      	add	r3, r1
 8002742:	761a      	strb	r2, [r3, #24]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000e100 	.word	0xe000e100
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	@ 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f1c3 0307 	rsb	r3, r3, #7
 8002772:	2b04      	cmp	r3, #4
 8002774:	bf28      	it	cs
 8002776:	2304      	movcs	r3, #4
 8002778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3304      	adds	r3, #4
 800277e:	2b06      	cmp	r3, #6
 8002780:	d902      	bls.n	8002788 <NVIC_EncodePriority+0x30>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3b03      	subs	r3, #3
 8002786:	e000      	b.n	800278a <NVIC_EncodePriority+0x32>
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	401a      	ands	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	4313      	orrs	r3, r2
         );
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3724      	adds	r7, #36	@ 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ff4c 	bl	8002664 <__NVIC_SetPriorityGrouping>
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e6:	f7ff ff61 	bl	80026ac <__NVIC_GetPriorityGrouping>
 80027ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	6978      	ldr	r0, [r7, #20]
 80027f2:	f7ff ffb1 	bl	8002758 <NVIC_EncodePriority>
 80027f6:	4602      	mov	r2, r0
 80027f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ff80 	bl	8002704 <__NVIC_SetPriority>
}
 8002804:	bf00      	nop
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ff54 	bl	80026c8 <__NVIC_EnableIRQ>
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002834:	f7ff fee6 	bl	8002604 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e099      	b.n	8002978 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002864:	e00f      	b.n	8002886 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002866:	f7ff fecd 	bl	8002604 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b05      	cmp	r3, #5
 8002872:	d908      	bls.n	8002886 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2203      	movs	r2, #3
 800287e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e078      	b.n	8002978 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1e8      	bne.n	8002866 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4b38      	ldr	r3, [pc, #224]	@ (8002980 <HAL_DMA_Init+0x158>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d107      	bne.n	80028f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e8:	4313      	orrs	r3, r2
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f023 0307 	bic.w	r3, r3, #7
 8002906:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002916:	2b04      	cmp	r3, #4
 8002918:	d117      	bne.n	800294a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00e      	beq.n	800294a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f94f 	bl	8002bd0 <DMA_CheckFifoParam>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2240      	movs	r2, #64	@ 0x40
 800293c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002946:	2301      	movs	r3, #1
 8002948:	e016      	b.n	8002978 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f906 	bl	8002b64 <DMA_CalcBaseAndBitshift>
 8002958:	4603      	mov	r3, r0
 800295a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002960:	223f      	movs	r2, #63	@ 0x3f
 8002962:	409a      	lsls	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	f010803f 	.word	0xf010803f

08002984 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e050      	b.n	8002a38 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d101      	bne.n	80029a6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80029a2:	2302      	movs	r3, #2
 80029a4:	e048      	b.n	8002a38 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0201 	bic.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2200      	movs	r2, #0
 80029c4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2200      	movs	r2, #0
 80029d4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2221      	movs	r2, #33	@ 0x21
 80029e4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8bc 	bl	8002b64 <DMA_CalcBaseAndBitshift>
 80029ec:	4603      	mov	r3, r0
 80029ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f4:	223f      	movs	r2, #63	@ 0x3f
 80029f6:	409a      	lsls	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a4e:	f7ff fdd9 	bl	8002604 <HAL_GetTick>
 8002a52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d008      	beq.n	8002a72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2280      	movs	r2, #128	@ 0x80
 8002a64:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e052      	b.n	8002b18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0216 	bic.w	r2, r2, #22
 8002a80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695a      	ldr	r2, [r3, #20]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d103      	bne.n	8002aa2 <HAL_DMA_Abort+0x62>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0208 	bic.w	r2, r2, #8
 8002ab0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0201 	bic.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac2:	e013      	b.n	8002aec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ac4:	f7ff fd9e 	bl	8002604 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b05      	cmp	r3, #5
 8002ad0:	d90c      	bls.n	8002aec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2203      	movs	r2, #3
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e015      	b.n	8002b18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1e4      	bne.n	8002ac4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afe:	223f      	movs	r2, #63	@ 0x3f
 8002b00:	409a      	lsls	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d004      	beq.n	8002b3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2280      	movs	r2, #128	@ 0x80
 8002b38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e00c      	b.n	8002b58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2205      	movs	r2, #5
 8002b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	3b10      	subs	r3, #16
 8002b74:	4a13      	ldr	r2, [pc, #76]	@ (8002bc4 <DMA_CalcBaseAndBitshift+0x60>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b7e:	4a12      	ldr	r2, [pc, #72]	@ (8002bc8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d908      	bls.n	8002ba4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	4b0c      	ldr	r3, [pc, #48]	@ (8002bcc <DMA_CalcBaseAndBitshift+0x68>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	1d1a      	adds	r2, r3, #4
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ba2:	e006      	b.n	8002bb2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b08      	ldr	r3, [pc, #32]	@ (8002bcc <DMA_CalcBaseAndBitshift+0x68>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	aaaaaaab 	.word	0xaaaaaaab
 8002bc8:	0800c4e4 	.word	0x0800c4e4
 8002bcc:	fffffc00 	.word	0xfffffc00

08002bd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d11f      	bne.n	8002c2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d856      	bhi.n	8002c9e <DMA_CheckFifoParam+0xce>
 8002bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf8 <DMA_CheckFifoParam+0x28>)
 8002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf6:	bf00      	nop
 8002bf8:	08002c09 	.word	0x08002c09
 8002bfc:	08002c1b 	.word	0x08002c1b
 8002c00:	08002c09 	.word	0x08002c09
 8002c04:	08002c9f 	.word	0x08002c9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d046      	beq.n	8002ca2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c18:	e043      	b.n	8002ca2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c22:	d140      	bne.n	8002ca6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c28:	e03d      	b.n	8002ca6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c32:	d121      	bne.n	8002c78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d837      	bhi.n	8002caa <DMA_CheckFifoParam+0xda>
 8002c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c40 <DMA_CheckFifoParam+0x70>)
 8002c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c40:	08002c51 	.word	0x08002c51
 8002c44:	08002c57 	.word	0x08002c57
 8002c48:	08002c51 	.word	0x08002c51
 8002c4c:	08002c69 	.word	0x08002c69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
      break;
 8002c54:	e030      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d025      	beq.n	8002cae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c66:	e022      	b.n	8002cae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c70:	d11f      	bne.n	8002cb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c76:	e01c      	b.n	8002cb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d903      	bls.n	8002c86 <DMA_CheckFifoParam+0xb6>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d003      	beq.n	8002c8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c84:	e018      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8a:	e015      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00e      	beq.n	8002cb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c9c:	e00b      	b.n	8002cb6 <DMA_CheckFifoParam+0xe6>
      break;
 8002c9e:	bf00      	nop
 8002ca0:	e00a      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e008      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e006      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002caa:	bf00      	nop
 8002cac:	e004      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e002      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cb2:	bf00      	nop
 8002cb4:	e000      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cb6:	bf00      	nop
    }
  } 
  
  return status; 
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop

08002cc8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e039      	b.n	8002d4e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fd fdec 	bl	80008cc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d18:	f023 0107 	bic.w	r1, r3, #7
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <HAL_DMA2D_Init+0x90>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68d1      	ldr	r1, [r2, #12]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	ffffc000 	.word	0xffffc000

08002d5c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_DMA2D_Start+0x1c>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e018      	b.n	8002daa <HAL_DMA2D_Start+0x4e>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fa98 	bl	80032c8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d056      	beq.n	8002e7c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dce:	f7ff fc19 	bl	8002604 <HAL_GetTick>
 8002dd2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002dd4:	e04b      	b.n	8002e6e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d023      	beq.n	8002e30 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df6:	f043 0202 	orr.w	r2, r3, #2
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0c:	f043 0201 	orr.w	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2221      	movs	r2, #33	@ 0x21
 8002e1a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2204      	movs	r2, #4
 8002e20:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0a5      	b.n	8002f7c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e36:	d01a      	beq.n	8002e6e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e38:	f7ff fbe4 	bl	8002604 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d302      	bcc.n	8002e4e <HAL_DMA2D_PollForTransfer+0x9c>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10f      	bne.n	8002e6e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e52:	f043 0220 	orr.w	r2, r3, #32
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e086      	b.n	8002f7c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0ac      	beq.n	8002dd6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d061      	beq.n	8002f62 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e9e:	f7ff fbb1 	bl	8002604 <HAL_GetTick>
 8002ea2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002ea4:	e056      	b.n	8002f54 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d02e      	beq.n	8002f16 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec6:	f043 0204 	orr.w	r2, r3, #4
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002edc:	f043 0202 	orr.w	r2, r3, #2
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef2:	f043 0201 	orr.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2229      	movs	r2, #41	@ 0x29
 8002f00:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2204      	movs	r2, #4
 8002f06:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e032      	b.n	8002f7c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f1c:	d01a      	beq.n	8002f54 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f1e:	f7ff fb71 	bl	8002604 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d302      	bcc.n	8002f34 <HAL_DMA2D_PollForTransfer+0x182>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10f      	bne.n	8002f54 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f38:	f043 0220 	orr.w	r2, r3, #32
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2203      	movs	r2, #3
 8002f44:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e013      	b.n	8002f7c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0a1      	beq.n	8002ea6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2212      	movs	r2, #18
 8002f68:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d026      	beq.n	8002ff4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d021      	beq.n	8002ff4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fbe:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc4:	f043 0201 	orr.w	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d026      	beq.n	800304c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d021      	beq.n	800304c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003016:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2220      	movs	r2, #32
 800301e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003024:	f043 0202 	orr.w	r2, r3, #2
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2204      	movs	r2, #4
 8003030:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d026      	beq.n	80030a4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800305c:	2b00      	cmp	r3, #0
 800305e:	d021      	beq.n	80030a4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800306e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2208      	movs	r2, #8
 8003076:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307c:	f043 0204 	orr.w	r2, r3, #4
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2204      	movs	r2, #4
 8003088:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d013      	beq.n	80030d6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00e      	beq.n	80030d6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030c6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2204      	movs	r2, #4
 80030ce:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f853 	bl	800317c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d024      	beq.n	800312a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01f      	beq.n	800312a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030f8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2202      	movs	r2, #2
 8003100:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01f      	beq.n	8003174 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01a      	beq.n	8003174 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800314c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2210      	movs	r2, #16
 8003154:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f80e 	bl	8003190 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_DMA2D_ConfigLayer+0x20>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e079      	b.n	80032b8 <HAL_DMA2D_ConfigLayer+0x114>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	3318      	adds	r3, #24
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4413      	add	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	041b      	lsls	r3, r3, #16
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80031ee:	4b35      	ldr	r3, [pc, #212]	@ (80032c4 <HAL_DMA2D_ConfigLayer+0x120>)
 80031f0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b0a      	cmp	r3, #10
 80031f8:	d003      	beq.n	8003202 <HAL_DMA2D_ConfigLayer+0x5e>
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b09      	cmp	r3, #9
 8003200:	d107      	bne.n	8003212 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4313      	orrs	r3, r2
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	e005      	b.n	800321e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	061b      	lsls	r3, r3, #24
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d120      	bne.n	8003266 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	43db      	mvns	r3, r3
 800322e:	ea02 0103 	and.w	r1, r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	430a      	orrs	r2, r1
 800323a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b0a      	cmp	r3, #10
 800324c:	d003      	beq.n	8003256 <HAL_DMA2D_ConfigLayer+0xb2>
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b09      	cmp	r3, #9
 8003254:	d127      	bne.n	80032a6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003262:	629a      	str	r2, [r3, #40]	@ 0x28
 8003264:	e01f      	b.n	80032a6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69da      	ldr	r2, [r3, #28]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	43db      	mvns	r3, r3
 8003270:	ea02 0103 	and.w	r1, r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	430a      	orrs	r2, r1
 800327c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b0a      	cmp	r3, #10
 800328e:	d003      	beq.n	8003298 <HAL_DMA2D_ConfigLayer+0xf4>
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b09      	cmp	r3, #9
 8003296:	d106      	bne.n	80032a6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80032a4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	371c      	adds	r7, #28
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	ff03000f 	.word	0xff03000f

080032c8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b08b      	sub	sp, #44	@ 0x2c
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032dc:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	041a      	lsls	r2, r3, #16
 80032e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e6:	431a      	orrs	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003300:	d174      	bne.n	80033ec <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003308:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003310:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003318:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d108      	bne.n	800333a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	431a      	orrs	r2, r3
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	4313      	orrs	r3, r2
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	627b      	str	r3, [r7, #36]	@ 0x24
 8003338:	e053      	b.n	80033e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d106      	bne.n	8003350 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	4313      	orrs	r3, r2
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	627b      	str	r3, [r7, #36]	@ 0x24
 800334e:	e048      	b.n	80033e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d111      	bne.n	800337c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	0cdb      	lsrs	r3, r3, #19
 800335c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	0a9b      	lsrs	r3, r3, #10
 8003362:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	08db      	lsrs	r3, r3, #3
 8003368:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	02db      	lsls	r3, r3, #11
 8003372:	4313      	orrs	r3, r2
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	4313      	orrs	r3, r2
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24
 800337a:	e032      	b.n	80033e2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d117      	bne.n	80033b4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	0fdb      	lsrs	r3, r3, #31
 8003388:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	0cdb      	lsrs	r3, r3, #19
 800338e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	0adb      	lsrs	r3, r3, #11
 8003394:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	08db      	lsrs	r3, r3, #3
 800339a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	029b      	lsls	r3, r3, #10
 80033a4:	431a      	orrs	r2, r3
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	03db      	lsls	r3, r3, #15
 80033aa:	4313      	orrs	r3, r2
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b2:	e016      	b.n	80033e2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	0f1b      	lsrs	r3, r3, #28
 80033b8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	0d1b      	lsrs	r3, r3, #20
 80033be:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	0b1b      	lsrs	r3, r3, #12
 80033c4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	011a      	lsls	r2, r3, #4
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	431a      	orrs	r2, r3
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	031b      	lsls	r3, r3, #12
 80033da:	4313      	orrs	r3, r2
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e8:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80033ea:	e003      	b.n	80033f4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	60da      	str	r2, [r3, #12]
}
 80033f4:	bf00      	nop
 80033f6:	372c      	adds	r7, #44	@ 0x2c
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	@ 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003416:	2300      	movs	r3, #0
 8003418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
 800341e:	e175      	b.n	800370c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003420:	2201      	movs	r2, #1
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	429a      	cmp	r2, r3
 800343a:	f040 8164 	bne.w	8003706 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b01      	cmp	r3, #1
 8003448:	d005      	beq.n	8003456 <HAL_GPIO_Init+0x56>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d130      	bne.n	80034b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	2203      	movs	r2, #3
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800348c:	2201      	movs	r2, #1
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 0201 	and.w	r2, r3, #1
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d017      	beq.n	80034f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	2203      	movs	r2, #3
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d123      	bne.n	8003548 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	08da      	lsrs	r2, r3, #3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3208      	adds	r2, #8
 8003508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800350c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	220f      	movs	r2, #15
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	08da      	lsrs	r2, r3, #3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3208      	adds	r2, #8
 8003542:	69b9      	ldr	r1, [r7, #24]
 8003544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2203      	movs	r2, #3
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0203 	and.w	r2, r3, #3
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80be 	beq.w	8003706 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358a:	4b66      	ldr	r3, [pc, #408]	@ (8003724 <HAL_GPIO_Init+0x324>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358e:	4a65      	ldr	r2, [pc, #404]	@ (8003724 <HAL_GPIO_Init+0x324>)
 8003590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003594:	6453      	str	r3, [r2, #68]	@ 0x44
 8003596:	4b63      	ldr	r3, [pc, #396]	@ (8003724 <HAL_GPIO_Init+0x324>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80035a2:	4a61      	ldr	r2, [pc, #388]	@ (8003728 <HAL_GPIO_Init+0x328>)
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	089b      	lsrs	r3, r3, #2
 80035a8:	3302      	adds	r3, #2
 80035aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	220f      	movs	r2, #15
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a58      	ldr	r2, [pc, #352]	@ (800372c <HAL_GPIO_Init+0x32c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d037      	beq.n	800363e <HAL_GPIO_Init+0x23e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a57      	ldr	r2, [pc, #348]	@ (8003730 <HAL_GPIO_Init+0x330>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d031      	beq.n	800363a <HAL_GPIO_Init+0x23a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a56      	ldr	r2, [pc, #344]	@ (8003734 <HAL_GPIO_Init+0x334>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d02b      	beq.n	8003636 <HAL_GPIO_Init+0x236>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a55      	ldr	r2, [pc, #340]	@ (8003738 <HAL_GPIO_Init+0x338>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d025      	beq.n	8003632 <HAL_GPIO_Init+0x232>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a54      	ldr	r2, [pc, #336]	@ (800373c <HAL_GPIO_Init+0x33c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01f      	beq.n	800362e <HAL_GPIO_Init+0x22e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a53      	ldr	r2, [pc, #332]	@ (8003740 <HAL_GPIO_Init+0x340>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d019      	beq.n	800362a <HAL_GPIO_Init+0x22a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a52      	ldr	r2, [pc, #328]	@ (8003744 <HAL_GPIO_Init+0x344>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_GPIO_Init+0x226>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a51      	ldr	r2, [pc, #324]	@ (8003748 <HAL_GPIO_Init+0x348>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00d      	beq.n	8003622 <HAL_GPIO_Init+0x222>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a50      	ldr	r2, [pc, #320]	@ (800374c <HAL_GPIO_Init+0x34c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d007      	beq.n	800361e <HAL_GPIO_Init+0x21e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4f      	ldr	r2, [pc, #316]	@ (8003750 <HAL_GPIO_Init+0x350>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d101      	bne.n	800361a <HAL_GPIO_Init+0x21a>
 8003616:	2309      	movs	r3, #9
 8003618:	e012      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800361a:	230a      	movs	r3, #10
 800361c:	e010      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800361e:	2308      	movs	r3, #8
 8003620:	e00e      	b.n	8003640 <HAL_GPIO_Init+0x240>
 8003622:	2307      	movs	r3, #7
 8003624:	e00c      	b.n	8003640 <HAL_GPIO_Init+0x240>
 8003626:	2306      	movs	r3, #6
 8003628:	e00a      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800362a:	2305      	movs	r3, #5
 800362c:	e008      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800362e:	2304      	movs	r3, #4
 8003630:	e006      	b.n	8003640 <HAL_GPIO_Init+0x240>
 8003632:	2303      	movs	r3, #3
 8003634:	e004      	b.n	8003640 <HAL_GPIO_Init+0x240>
 8003636:	2302      	movs	r3, #2
 8003638:	e002      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800363e:	2300      	movs	r3, #0
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	f002 0203 	and.w	r2, r2, #3
 8003646:	0092      	lsls	r2, r2, #2
 8003648:	4093      	lsls	r3, r2
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003650:	4935      	ldr	r1, [pc, #212]	@ (8003728 <HAL_GPIO_Init+0x328>)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	3302      	adds	r3, #2
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800365e:	4b3d      	ldr	r3, [pc, #244]	@ (8003754 <HAL_GPIO_Init+0x354>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003682:	4a34      	ldr	r2, [pc, #208]	@ (8003754 <HAL_GPIO_Init+0x354>)
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003688:	4b32      	ldr	r3, [pc, #200]	@ (8003754 <HAL_GPIO_Init+0x354>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036ac:	4a29      	ldr	r2, [pc, #164]	@ (8003754 <HAL_GPIO_Init+0x354>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036b2:	4b28      	ldr	r3, [pc, #160]	@ (8003754 <HAL_GPIO_Init+0x354>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	43db      	mvns	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4013      	ands	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003754 <HAL_GPIO_Init+0x354>)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003754 <HAL_GPIO_Init+0x354>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003700:	4a14      	ldr	r2, [pc, #80]	@ (8003754 <HAL_GPIO_Init+0x354>)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3301      	adds	r3, #1
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b0f      	cmp	r3, #15
 8003710:	f67f ae86 	bls.w	8003420 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	3724      	adds	r7, #36	@ 0x24
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40023800 	.word	0x40023800
 8003728:	40013800 	.word	0x40013800
 800372c:	40020000 	.word	0x40020000
 8003730:	40020400 	.word	0x40020400
 8003734:	40020800 	.word	0x40020800
 8003738:	40020c00 	.word	0x40020c00
 800373c:	40021000 	.word	0x40021000
 8003740:	40021400 	.word	0x40021400
 8003744:	40021800 	.word	0x40021800
 8003748:	40021c00 	.word	0x40021c00
 800374c:	40022000 	.word	0x40022000
 8003750:	40022400 	.word	0x40022400
 8003754:	40013c00 	.word	0x40013c00

08003758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	807b      	strh	r3, [r7, #2]
 8003764:	4613      	mov	r3, r2
 8003766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003768:	787b      	ldrb	r3, [r7, #1]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003774:	e003      	b.n	800377e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003776:	887b      	ldrh	r3, [r7, #2]
 8003778:	041a      	lsls	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	619a      	str	r2, [r3, #24]
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b086      	sub	sp, #24
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f005 f9cd 	bl	8008b40 <USB_GetMode>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f040 80fb 	bne.w	80039a4 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f005 f990 	bl	8008ad8 <USB_ReadInterrupts>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80f1 	beq.w	80039a2 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f005 f987 	bl	8008ad8 <USB_ReadInterrupts>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037d4:	d104      	bne.n	80037e0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80037de:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f005 f977 	bl	8008ad8 <USB_ReadInterrupts>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037f4:	d104      	bne.n	8003800 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80037fe:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f005 f967 	bl	8008ad8 <USB_ReadInterrupts>
 800380a:	4603      	mov	r3, r0
 800380c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003810:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003814:	d104      	bne.n	8003820 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800381e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f005 f957 	bl	8008ad8 <USB_ReadInterrupts>
 800382a:	4603      	mov	r3, r0
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b02      	cmp	r3, #2
 8003832:	d103      	bne.n	800383c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2202      	movs	r2, #2
 800383a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f005 f949 	bl	8008ad8 <USB_ReadInterrupts>
 8003846:	4603      	mov	r3, r0
 8003848:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800384c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003850:	d120      	bne.n	8003894 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800385a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d113      	bne.n	8003894 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800386c:	2110      	movs	r1, #16
 800386e:	6938      	ldr	r0, [r7, #16]
 8003870:	f005 f87a 	bl	8008968 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003874:	6938      	ldr	r0, [r7, #16]
 8003876:	f005 f8a9 	bl	80089cc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	7a5b      	ldrb	r3, [r3, #9]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d105      	bne.n	800388e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2101      	movs	r1, #1
 8003888:	4618      	mov	r0, r3
 800388a:	f005 f967 	bl	8008b5c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f006 fd08 	bl	800a2a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f005 f91d 	bl	8008ad8 <USB_ReadInterrupts>
 800389e:	4603      	mov	r3, r0
 80038a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038a8:	d102      	bne.n	80038b0 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f001 fc87 	bl	80051be <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f005 f90f 	bl	8008ad8 <USB_ReadInterrupts>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d106      	bne.n	80038d2 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f006 fcd1 	bl	800a26c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2208      	movs	r2, #8
 80038d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f005 f8fe 	bl	8008ad8 <USB_ReadInterrupts>
 80038dc:	4603      	mov	r3, r0
 80038de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038e6:	d139      	bne.n	800395c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f005 f972 	bl	8008bd6 <USB_HC_ReadInterrupt>
 80038f2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	e025      	b.n	8003946 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	fa22 f303 	lsr.w	r3, r2, r3
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d018      	beq.n	8003940 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4413      	add	r3, r2
 8003916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003920:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003924:	d106      	bne.n	8003934 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	4619      	mov	r1, r3
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f859 	bl	80039e4 <HCD_HC_IN_IRQHandler>
 8003932:	e005      	b.n	8003940 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	4619      	mov	r1, r3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 febb 	bl	80046b6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	3301      	adds	r3, #1
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	795b      	ldrb	r3, [r3, #5]
 800394a:	461a      	mov	r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	4293      	cmp	r3, r2
 8003950:	d3d3      	bcc.n	80038fa <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800395a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f005 f8b9 	bl	8008ad8 <USB_ReadInterrupts>
 8003966:	4603      	mov	r3, r0
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b10      	cmp	r3, #16
 800396e:	d101      	bne.n	8003974 <HAL_HCD_IRQHandler+0x1ea>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <HAL_HCD_IRQHandler+0x1ec>
 8003974:	2300      	movs	r3, #0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d014      	beq.n	80039a4 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0210 	bic.w	r2, r2, #16
 8003988:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f001 fb38 	bl	8005000 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0210 	orr.w	r2, r2, #16
 800399e:	619a      	str	r2, [r3, #24]
 80039a0:	e000      	b.n	80039a4 <HAL_HCD_IRQHandler+0x21a>
      return;
 80039a2:	bf00      	nop
    }
  }
}
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_HCD_Stop+0x16>
 80039bc:	2302      	movs	r3, #2
 80039be:	e00d      	b.n	80039dc <HAL_HCD_Stop+0x32>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f005 fa33 	bl	8008e38 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	78fa      	ldrb	r2, [r7, #3]
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f005 f87b 	bl	8008afe <USB_ReadChInterrupts>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d11a      	bne.n	8003a48 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2304      	movs	r3, #4
 8003a22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	334d      	adds	r3, #77	@ 0x4d
 8003a34:	2207      	movs	r2, #7
 8003a36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	4611      	mov	r1, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f005 f8d9 	bl	8008bf8 <USB_HC_Halt>
 8003a46:	e09e      	b.n	8003b86 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f005 f854 	bl	8008afe <USB_ReadChInterrupts>
 8003a56:	4603      	mov	r3, r0
 8003a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a60:	d11b      	bne.n	8003a9a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	334d      	adds	r3, #77	@ 0x4d
 8003a86:	2208      	movs	r2, #8
 8003a88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f005 f8b0 	bl	8008bf8 <USB_HC_Halt>
 8003a98:	e075      	b.n	8003b86 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f005 f82b 	bl	8008afe <USB_ReadChInterrupts>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d11a      	bne.n	8003ae8 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003abe:	461a      	mov	r2, r3
 8003ac0:	2308      	movs	r3, #8
 8003ac2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003ac4:	78fa      	ldrb	r2, [r7, #3]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	334d      	adds	r3, #77	@ 0x4d
 8003ad4:	2206      	movs	r2, #6
 8003ad6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	78fa      	ldrb	r2, [r7, #3]
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f005 f889 	bl	8008bf8 <USB_HC_Halt>
 8003ae6:	e04e      	b.n	8003b86 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f005 f804 	bl	8008afe <USB_ReadChInterrupts>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003afc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b00:	d11b      	bne.n	8003b3a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b14:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003b16:	78fa      	ldrb	r2, [r7, #3]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	1a9b      	subs	r3, r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	334d      	adds	r3, #77	@ 0x4d
 8003b26:	2209      	movs	r2, #9
 8003b28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	4611      	mov	r1, r2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f005 f860 	bl	8008bf8 <USB_HC_Halt>
 8003b38:	e025      	b.n	8003b86 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f004 ffdb 	bl	8008afe <USB_ReadChInterrupts>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4e:	2b80      	cmp	r3, #128	@ 0x80
 8003b50:	d119      	bne.n	8003b86 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b5e:	461a      	mov	r2, r3
 8003b60:	2380      	movs	r3, #128	@ 0x80
 8003b62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	334d      	adds	r3, #77	@ 0x4d
 8003b74:	2207      	movs	r2, #7
 8003b76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f005 f839 	bl	8008bf8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f004 ffb5 	bl	8008afe <USB_ReadChInterrupts>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b9e:	d112      	bne.n	8003bc6 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	78fa      	ldrb	r2, [r7, #3]
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f005 f825 	bl	8008bf8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003bae:	78fb      	ldrb	r3, [r7, #3]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bc0:	6093      	str	r3, [r2, #8]
 8003bc2:	f000 bd75 	b.w	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	78fa      	ldrb	r2, [r7, #3]
 8003bcc:	4611      	mov	r1, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f004 ff95 	bl	8008afe <USB_ReadChInterrupts>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	f040 8128 	bne.w	8003e30 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bec:	461a      	mov	r2, r3
 8003bee:	2320      	movs	r3, #32
 8003bf0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	331b      	adds	r3, #27
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d119      	bne.n	8003c3c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c08:	78fa      	ldrb	r2, [r7, #3]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	331b      	adds	r3, #27
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	78fa      	ldrb	r2, [r7, #3]
 8003c2c:	0151      	lsls	r1, r2, #5
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	440a      	add	r2, r1
 8003c32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c3a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	799b      	ldrb	r3, [r3, #6]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01b      	beq.n	8003c7c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	3330      	adds	r3, #48	@ 0x30
 8003c54:	6819      	ldr	r1, [r3, #0]
 8003c56:	78fb      	ldrb	r3, [r7, #3]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	1ac9      	subs	r1, r1, r3
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4403      	add	r3, r0
 8003c78:	3338      	adds	r3, #56	@ 0x38
 8003c7a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	334d      	adds	r3, #77	@ 0x4d
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	3344      	adds	r3, #68	@ 0x44
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	3326      	adds	r3, #38	@ 0x26
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	3326      	adds	r3, #38	@ 0x26
 8003cdc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d110      	bne.n	8003d04 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	78fa      	ldrb	r2, [r7, #3]
 8003ce8:	4611      	mov	r1, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f004 ff84 	bl	8008bf8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2310      	movs	r3, #16
 8003d00:	6093      	str	r3, [r2, #8]
 8003d02:	e03d      	b.n	8003d80 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	3326      	adds	r3, #38	@ 0x26
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d00a      	beq.n	8003d30 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3326      	adds	r3, #38	@ 0x26
 8003d2a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d127      	bne.n	8003d80 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003d30:	78fb      	ldrb	r3, [r7, #3]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	0151      	lsls	r1, r2, #5
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	440a      	add	r2, r1
 8003d46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d4a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d4e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003d50:	78fa      	ldrb	r2, [r7, #3]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	334c      	adds	r3, #76	@ 0x4c
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	334c      	adds	r3, #76	@ 0x4c
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f006 faa0 	bl	800a2c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	799b      	ldrb	r3, [r3, #6]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d13b      	bne.n	8003e00 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003d88:	78fa      	ldrb	r2, [r7, #3]
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	3338      	adds	r3, #56	@ 0x38
 8003d98:	6819      	ldr	r1, [r3, #0]
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4403      	add	r3, r0
 8003da8:	3328      	adds	r3, #40	@ 0x28
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	440b      	add	r3, r1
 8003dae:	1e59      	subs	r1, r3, #1
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4403      	add	r3, r0
 8003dbe:	3328      	adds	r3, #40	@ 0x28
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8470 	beq.w	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003dd0:	78fa      	ldrb	r2, [r7, #3]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	333c      	adds	r3, #60	@ 0x3c
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	f083 0301 	eor.w	r3, r3, #1
 8003de8:	b2d8      	uxtb	r0, r3
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	1a9b      	subs	r3, r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	333c      	adds	r3, #60	@ 0x3c
 8003df8:	4602      	mov	r2, r0
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	f000 bc58 	b.w	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003e00:	78fa      	ldrb	r2, [r7, #3]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	333c      	adds	r3, #60	@ 0x3c
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	78fa      	ldrb	r2, [r7, #3]
 8003e14:	f083 0301 	eor.w	r3, r3, #1
 8003e18:	b2d8      	uxtb	r0, r3
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	333c      	adds	r3, #60	@ 0x3c
 8003e28:	4602      	mov	r2, r0
 8003e2a:	701a      	strb	r2, [r3, #0]
 8003e2c:	f000 bc40 	b.w	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	4611      	mov	r1, r2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f004 fe60 	bl	8008afe <USB_ReadChInterrupts>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d131      	bne.n	8003eac <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e54:	461a      	mov	r2, r3
 8003e56:	2320      	movs	r3, #32
 8003e58:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	331a      	adds	r3, #26
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	f040 841f 	bne.w	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003e72:	78fa      	ldrb	r2, [r7, #3]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	331b      	adds	r3, #27
 8003e82:	2201      	movs	r2, #1
 8003e84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003e86:	78fa      	ldrb	r2, [r7, #3]
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	334d      	adds	r3, #77	@ 0x4d
 8003e96:	2203      	movs	r2, #3
 8003e98:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f004 fea8 	bl	8008bf8 <USB_HC_Halt>
 8003ea8:	f000 bc02 	b.w	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f004 fe22 	bl	8008afe <USB_ReadChInterrupts>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	f040 8305 	bne.w	80044d0 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003ec6:	78fb      	ldrb	r3, [r7, #3]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	334d      	adds	r3, #77	@ 0x4d
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d114      	bne.n	8003f18 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	334d      	adds	r3, #77	@ 0x4d
 8003efe:	2202      	movs	r2, #2
 8003f00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	334c      	adds	r3, #76	@ 0x4c
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e2cc      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	334d      	adds	r3, #77	@ 0x4d
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d114      	bne.n	8003f58 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f2e:	78fa      	ldrb	r2, [r7, #3]
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	334d      	adds	r3, #77	@ 0x4d
 8003f3e:	2202      	movs	r2, #2
 8003f40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	334c      	adds	r3, #76	@ 0x4c
 8003f52:	2205      	movs	r2, #5
 8003f54:	701a      	strb	r2, [r3, #0]
 8003f56:	e2ac      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	334d      	adds	r3, #77	@ 0x4d
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b07      	cmp	r3, #7
 8003f6c:	d00b      	beq.n	8003f86 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	334d      	adds	r3, #77	@ 0x4d
 8003f7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f80:	2b09      	cmp	r3, #9
 8003f82:	f040 80a6 	bne.w	80040d2 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	334d      	adds	r3, #77	@ 0x4d
 8003f96:	2202      	movs	r2, #2
 8003f98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f9a:	78fa      	ldrb	r2, [r7, #3]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	3344      	adds	r3, #68	@ 0x44
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	1c59      	adds	r1, r3, #1
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4403      	add	r3, r0
 8003fba:	3344      	adds	r3, #68	@ 0x44
 8003fbc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fbe:	78fa      	ldrb	r2, [r7, #3]
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	3344      	adds	r3, #68	@ 0x44
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d943      	bls.n	800405c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003fd4:	78fa      	ldrb	r2, [r7, #3]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3344      	adds	r3, #68	@ 0x44
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003fe8:	78fa      	ldrb	r2, [r7, #3]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	331a      	adds	r3, #26
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d123      	bne.n	8004046 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	331b      	adds	r3, #27
 800400e:	2200      	movs	r2, #0
 8004010:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	331c      	adds	r3, #28
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4413      	add	r3, r2
 800402e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	0151      	lsls	r1, r2, #5
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	440a      	add	r2, r1
 800403c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004040:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004044:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004046:	78fa      	ldrb	r2, [r7, #3]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	334c      	adds	r3, #76	@ 0x4c
 8004056:	2204      	movs	r2, #4
 8004058:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800405a:	e229      	b.n	80044b0 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	334c      	adds	r3, #76	@ 0x4c
 800406c:	2202      	movs	r2, #2
 800406e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004070:	78fa      	ldrb	r2, [r7, #3]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	3326      	adds	r3, #38	@ 0x26
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	3326      	adds	r3, #38	@ 0x26
 8004096:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004098:	2b02      	cmp	r3, #2
 800409a:	f040 8209 	bne.w	80044b0 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040b4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040bc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ca:	461a      	mov	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80040d0:	e1ee      	b.n	80044b0 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80040d2:	78fa      	ldrb	r2, [r7, #3]
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	334d      	adds	r3, #77	@ 0x4d
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b05      	cmp	r3, #5
 80040e6:	f040 80c8 	bne.w	800427a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040ea:	78fa      	ldrb	r2, [r7, #3]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	334d      	adds	r3, #77	@ 0x4d
 80040fa:	2202      	movs	r2, #2
 80040fc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80040fe:	78fa      	ldrb	r2, [r7, #3]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	331b      	adds	r3, #27
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b01      	cmp	r3, #1
 8004112:	f040 81ce 	bne.w	80044b2 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004116:	78fa      	ldrb	r2, [r7, #3]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	3326      	adds	r3, #38	@ 0x26
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b03      	cmp	r3, #3
 800412a:	d16b      	bne.n	8004204 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	3348      	adds	r3, #72	@ 0x48
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	1c59      	adds	r1, r3, #1
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4403      	add	r3, r0
 800414c:	3348      	adds	r3, #72	@ 0x48
 800414e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004150:	78fa      	ldrb	r2, [r7, #3]
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	3348      	adds	r3, #72	@ 0x48
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d943      	bls.n	80041ee <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004166:	78fa      	ldrb	r2, [r7, #3]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	3348      	adds	r3, #72	@ 0x48
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800417a:	78fa      	ldrb	r2, [r7, #3]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	331b      	adds	r3, #27
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800418e:	78fa      	ldrb	r2, [r7, #3]
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	3344      	adds	r3, #68	@ 0x44
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d809      	bhi.n	80041b8 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	331c      	adds	r3, #28
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	0151      	lsls	r1, r2, #5
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	440a      	add	r2, r1
 80041ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041d6:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	334c      	adds	r3, #76	@ 0x4c
 80041e8:	2204      	movs	r2, #4
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	e014      	b.n	8004218 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041ee:	78fa      	ldrb	r2, [r7, #3]
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	334c      	adds	r3, #76	@ 0x4c
 80041fe:	2202      	movs	r2, #2
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	e009      	b.n	8004218 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004204:	78fa      	ldrb	r2, [r7, #3]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	334c      	adds	r3, #76	@ 0x4c
 8004214:	2202      	movs	r2, #2
 8004216:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	3326      	adds	r3, #38	@ 0x26
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00b      	beq.n	8004246 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800422e:	78fa      	ldrb	r2, [r7, #3]
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	3326      	adds	r3, #38	@ 0x26
 800423e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004240:	2b02      	cmp	r3, #2
 8004242:	f040 8136 	bne.w	80044b2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4413      	add	r3, r2
 800424e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800425c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004264:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4413      	add	r3, r2
 800426e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	e11b      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	1a9b      	subs	r3, r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	334d      	adds	r3, #77	@ 0x4d
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b03      	cmp	r3, #3
 800428e:	f040 8081 	bne.w	8004394 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004292:	78fa      	ldrb	r2, [r7, #3]
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	334d      	adds	r3, #77	@ 0x4d
 80042a2:	2202      	movs	r2, #2
 80042a4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	331b      	adds	r3, #27
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	f040 80fa 	bne.w	80044b2 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	334c      	adds	r3, #76	@ 0x4c
 80042ce:	2202      	movs	r2, #2
 80042d0:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	78fa      	ldrb	r2, [r7, #3]
 80042e2:	0151      	lsls	r1, r2, #5
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	440a      	add	r2, r1
 80042e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f0:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80042f2:	78fb      	ldrb	r3, [r7, #3]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	78fa      	ldrb	r2, [r7, #3]
 8004302:	0151      	lsls	r1, r2, #5
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	440a      	add	r2, r1
 8004308:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800430c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004310:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	4413      	add	r3, r2
 800431a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	0151      	lsls	r1, r2, #5
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	440a      	add	r2, r1
 8004328:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800432c:	f023 0320 	bic.w	r3, r3, #32
 8004330:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004332:	78fa      	ldrb	r2, [r7, #3]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	3326      	adds	r3, #38	@ 0x26
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004348:	78fa      	ldrb	r2, [r7, #3]
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	1a9b      	subs	r3, r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	3326      	adds	r3, #38	@ 0x26
 8004358:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800435a:	2b02      	cmp	r3, #2
 800435c:	f040 80a9 	bne.w	80044b2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	4413      	add	r3, r2
 8004368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004376:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800437e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4413      	add	r3, r2
 8004388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800438c:	461a      	mov	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e08e      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	334d      	adds	r3, #77	@ 0x4d
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d143      	bne.n	8004432 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043aa:	78fa      	ldrb	r2, [r7, #3]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	334d      	adds	r3, #77	@ 0x4d
 80043ba:	2202      	movs	r2, #2
 80043bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	334c      	adds	r3, #76	@ 0x4c
 80043ce:	2202      	movs	r2, #2
 80043d0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043d2:	78fa      	ldrb	r2, [r7, #3]
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	3326      	adds	r3, #38	@ 0x26
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	3326      	adds	r3, #38	@ 0x26
 80043f8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d159      	bne.n	80044b2 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4413      	add	r3, r2
 8004406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004414:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800441c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800441e:	78fb      	ldrb	r3, [r7, #3]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4413      	add	r3, r2
 8004426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800442a:	461a      	mov	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	e03f      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	334d      	adds	r3, #77	@ 0x4d
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b08      	cmp	r3, #8
 8004446:	d126      	bne.n	8004496 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	334d      	adds	r3, #77	@ 0x4d
 8004458:	2202      	movs	r2, #2
 800445a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800445c:	78fa      	ldrb	r2, [r7, #3]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	3344      	adds	r3, #68	@ 0x44
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	1c59      	adds	r1, r3, #1
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4403      	add	r3, r0
 800447c:	3344      	adds	r3, #68	@ 0x44
 800447e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004480:	78fa      	ldrb	r2, [r7, #3]
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	4613      	mov	r3, r2
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	1a9b      	subs	r3, r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	334c      	adds	r3, #76	@ 0x4c
 8004490:	2204      	movs	r2, #4
 8004492:	701a      	strb	r2, [r3, #0]
 8004494:	e00d      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004496:	78fa      	ldrb	r2, [r7, #3]
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	334d      	adds	r3, #77	@ 0x4d
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	f000 8100 	beq.w	80046ae <HCD_HC_IN_IRQHandler+0xcca>
 80044ae:	e000      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044b0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80044b2:	78fa      	ldrb	r2, [r7, #3]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	334c      	adds	r3, #76	@ 0x4c
 80044c2:	781a      	ldrb	r2, [r3, #0]
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f005 fef9 	bl	800a2c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80044ce:	e0ef      	b.n	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	78fa      	ldrb	r2, [r7, #3]
 80044d6:	4611      	mov	r1, r2
 80044d8:	4618      	mov	r0, r3
 80044da:	f004 fb10 	bl	8008afe <USB_ReadChInterrupts>
 80044de:	4603      	mov	r3, r0
 80044e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e4:	2b40      	cmp	r3, #64	@ 0x40
 80044e6:	d12f      	bne.n	8004548 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044f4:	461a      	mov	r2, r3
 80044f6:	2340      	movs	r3, #64	@ 0x40
 80044f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80044fa:	78fa      	ldrb	r2, [r7, #3]
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	1a9b      	subs	r3, r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	334d      	adds	r3, #77	@ 0x4d
 800450a:	2205      	movs	r2, #5
 800450c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800450e:	78fa      	ldrb	r2, [r7, #3]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	1a9b      	subs	r3, r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	331a      	adds	r3, #26
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004524:	78fa      	ldrb	r2, [r7, #3]
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	3344      	adds	r3, #68	@ 0x44
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	4611      	mov	r1, r2
 8004540:	4618      	mov	r0, r3
 8004542:	f004 fb59 	bl	8008bf8 <USB_HC_Halt>
 8004546:	e0b3      	b.n	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	78fa      	ldrb	r2, [r7, #3]
 800454e:	4611      	mov	r1, r2
 8004550:	4618      	mov	r0, r3
 8004552:	f004 fad4 	bl	8008afe <USB_ReadChInterrupts>
 8004556:	4603      	mov	r3, r0
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b10      	cmp	r3, #16
 800455e:	f040 80a7 	bne.w	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004562:	78fa      	ldrb	r2, [r7, #3]
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	4613      	mov	r3, r2
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	1a9b      	subs	r3, r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	3326      	adds	r3, #38	@ 0x26
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b03      	cmp	r3, #3
 8004576:	d11b      	bne.n	80045b0 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004578:	78fa      	ldrb	r2, [r7, #3]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	3344      	adds	r3, #68	@ 0x44
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	334d      	adds	r3, #77	@ 0x4d
 800459c:	2204      	movs	r2, #4
 800459e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	4611      	mov	r1, r2
 80045a8:	4618      	mov	r0, r3
 80045aa:	f004 fb25 	bl	8008bf8 <USB_HC_Halt>
 80045ae:	e03f      	b.n	8004630 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045b0:	78fa      	ldrb	r2, [r7, #3]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	3326      	adds	r3, #38	@ 0x26
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80045c6:	78fa      	ldrb	r2, [r7, #3]
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	3326      	adds	r3, #38	@ 0x26
 80045d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d129      	bne.n	8004630 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	3344      	adds	r3, #68	@ 0x44
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	799b      	ldrb	r3, [r3, #6]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HCD_HC_IN_IRQHandler+0xc2a>
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	331b      	adds	r3, #27
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d110      	bne.n	8004630 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	334d      	adds	r3, #77	@ 0x4d
 800461e:	2204      	movs	r2, #4
 8004620:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	78fa      	ldrb	r2, [r7, #3]
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f004 fae4 	bl	8008bf8 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004630:	78fa      	ldrb	r2, [r7, #3]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	331b      	adds	r3, #27
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d129      	bne.n	800469a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004646:	78fa      	ldrb	r2, [r7, #3]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	331b      	adds	r3, #27
 8004656:	2200      	movs	r2, #0
 8004658:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4413      	add	r3, r2
 8004662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	78fa      	ldrb	r2, [r7, #3]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	440a      	add	r2, r1
 8004670:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004678:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800467a:	78fb      	ldrb	r3, [r7, #3]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4413      	add	r3, r2
 8004682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	0151      	lsls	r1, r2, #5
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	440a      	add	r2, r1
 8004690:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004694:	f043 0320 	orr.w	r3, r3, #32
 8004698:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800469a:	78fb      	ldrb	r3, [r7, #3]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046a6:	461a      	mov	r2, r3
 80046a8:	2310      	movs	r3, #16
 80046aa:	6093      	str	r3, [r2, #8]
 80046ac:	e000      	b.n	80046b0 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80046ae:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b086      	sub	sp, #24
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	460b      	mov	r3, r1
 80046c0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	78fa      	ldrb	r2, [r7, #3]
 80046d2:	4611      	mov	r1, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f004 fa12 	bl	8008afe <USB_ReadChInterrupts>
 80046da:	4603      	mov	r3, r0
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d11b      	bne.n	800471c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046f0:	461a      	mov	r2, r3
 80046f2:	2304      	movs	r3, #4
 80046f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80046f6:	78fa      	ldrb	r2, [r7, #3]
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	334d      	adds	r3, #77	@ 0x4d
 8004706:	2207      	movs	r2, #7
 8004708:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	4611      	mov	r1, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f004 fa70 	bl	8008bf8 <USB_HC_Halt>
 8004718:	f000 bc6f 	b.w	8004ffa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	4611      	mov	r1, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f004 f9ea 	bl	8008afe <USB_ReadChInterrupts>
 800472a:	4603      	mov	r3, r0
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b20      	cmp	r3, #32
 8004732:	f040 8082 	bne.w	800483a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4413      	add	r3, r2
 800473e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004742:	461a      	mov	r2, r3
 8004744:	2320      	movs	r3, #32
 8004746:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004748:	78fa      	ldrb	r2, [r7, #3]
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	3319      	adds	r3, #25
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d124      	bne.n	80047a8 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800475e:	78fa      	ldrb	r2, [r7, #3]
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	3319      	adds	r3, #25
 800476e:	2200      	movs	r2, #0
 8004770:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004772:	78fa      	ldrb	r2, [r7, #3]
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	440b      	add	r3, r1
 8004780:	334c      	adds	r3, #76	@ 0x4c
 8004782:	2202      	movs	r2, #2
 8004784:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004786:	78fa      	ldrb	r2, [r7, #3]
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	4613      	mov	r3, r2
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	440b      	add	r3, r1
 8004794:	334d      	adds	r3, #77	@ 0x4d
 8004796:	2203      	movs	r2, #3
 8004798:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	78fa      	ldrb	r2, [r7, #3]
 80047a0:	4611      	mov	r1, r2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f004 fa28 	bl	8008bf8 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80047a8:	78fa      	ldrb	r2, [r7, #3]
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	331a      	adds	r3, #26
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	f040 841d 	bne.w	8004ffa <HCD_HC_OUT_IRQHandler+0x944>
 80047c0:	78fa      	ldrb	r2, [r7, #3]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	331b      	adds	r3, #27
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f040 8411 	bne.w	8004ffa <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80047d8:	78fa      	ldrb	r2, [r7, #3]
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	3326      	adds	r3, #38	@ 0x26
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d009      	beq.n	8004802 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80047ee:	78fa      	ldrb	r2, [r7, #3]
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	331b      	adds	r3, #27
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004802:	78fa      	ldrb	r2, [r7, #3]
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	334d      	adds	r3, #77	@ 0x4d
 8004812:	2203      	movs	r2, #3
 8004814:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f004 f9ea 	bl	8008bf8 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004824:	78fa      	ldrb	r2, [r7, #3]
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	3344      	adds	r3, #68	@ 0x44
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	e3df      	b.n	8004ffa <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	78fa      	ldrb	r2, [r7, #3]
 8004840:	4611      	mov	r1, r2
 8004842:	4618      	mov	r0, r3
 8004844:	f004 f95b 	bl	8008afe <USB_ReadChInterrupts>
 8004848:	4603      	mov	r3, r0
 800484a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800484e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004852:	d111      	bne.n	8004878 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4413      	add	r3, r2
 800485c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004860:	461a      	mov	r2, r3
 8004862:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004866:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	78fa      	ldrb	r2, [r7, #3]
 800486e:	4611      	mov	r1, r2
 8004870:	4618      	mov	r0, r3
 8004872:	f004 f9c1 	bl	8008bf8 <USB_HC_Halt>
 8004876:	e3c0      	b.n	8004ffa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	78fa      	ldrb	r2, [r7, #3]
 800487e:	4611      	mov	r1, r2
 8004880:	4618      	mov	r0, r3
 8004882:	f004 f93c 	bl	8008afe <USB_ReadChInterrupts>
 8004886:	4603      	mov	r3, r0
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b01      	cmp	r3, #1
 800488e:	d168      	bne.n	8004962 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	3344      	adds	r3, #68	@ 0x44
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	4611      	mov	r1, r2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f004 f926 	bl	8008afe <USB_ReadChInterrupts>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b8:	2b40      	cmp	r3, #64	@ 0x40
 80048ba:	d112      	bne.n	80048e2 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	3319      	adds	r3, #25
 80048cc:	2201      	movs	r2, #1
 80048ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048dc:	461a      	mov	r2, r3
 80048de:	2340      	movs	r3, #64	@ 0x40
 80048e0:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80048e2:	78fa      	ldrb	r2, [r7, #3]
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	1a9b      	subs	r3, r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	440b      	add	r3, r1
 80048f0:	331b      	adds	r3, #27
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d019      	beq.n	800492c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80048f8:	78fa      	ldrb	r2, [r7, #3]
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	331b      	adds	r3, #27
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800490c:	78fb      	ldrb	r3, [r7, #3]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4413      	add	r3, r2
 8004914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	78fa      	ldrb	r2, [r7, #3]
 800491c:	0151      	lsls	r1, r2, #5
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	440a      	add	r2, r1
 8004922:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800492a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4413      	add	r3, r2
 8004934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004938:	461a      	mov	r2, r3
 800493a:	2301      	movs	r3, #1
 800493c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	334d      	adds	r3, #77	@ 0x4d
 800494e:	2201      	movs	r2, #1
 8004950:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	78fa      	ldrb	r2, [r7, #3]
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f004 f94c 	bl	8008bf8 <USB_HC_Halt>
 8004960:	e34b      	b.n	8004ffa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	78fa      	ldrb	r2, [r7, #3]
 8004968:	4611      	mov	r1, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f004 f8c7 	bl	8008afe <USB_ReadChInterrupts>
 8004970:	4603      	mov	r3, r0
 8004972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004976:	2b40      	cmp	r3, #64	@ 0x40
 8004978:	d139      	bne.n	80049ee <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800497a:	78fa      	ldrb	r2, [r7, #3]
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	4613      	mov	r3, r2
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	1a9b      	subs	r3, r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	440b      	add	r3, r1
 8004988:	334d      	adds	r3, #77	@ 0x4d
 800498a:	2205      	movs	r2, #5
 800498c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800498e:	78fa      	ldrb	r2, [r7, #3]
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	1a9b      	subs	r3, r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	331a      	adds	r3, #26
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d109      	bne.n	80049b8 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	3319      	adds	r3, #25
 80049b4:	2201      	movs	r2, #1
 80049b6:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80049b8:	78fa      	ldrb	r2, [r7, #3]
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	3344      	adds	r3, #68	@ 0x44
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	78fa      	ldrb	r2, [r7, #3]
 80049d2:	4611      	mov	r1, r2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f004 f90f 	bl	8008bf8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049e6:	461a      	mov	r2, r3
 80049e8:	2340      	movs	r3, #64	@ 0x40
 80049ea:	6093      	str	r3, [r2, #8]
 80049ec:	e305      	b.n	8004ffa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	78fa      	ldrb	r2, [r7, #3]
 80049f4:	4611      	mov	r1, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f004 f881 	bl	8008afe <USB_ReadChInterrupts>
 80049fc:	4603      	mov	r3, r0
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d11a      	bne.n	8004a3c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004a06:	78fb      	ldrb	r3, [r7, #3]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a12:	461a      	mov	r2, r3
 8004a14:	2308      	movs	r3, #8
 8004a16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004a18:	78fa      	ldrb	r2, [r7, #3]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	334d      	adds	r3, #77	@ 0x4d
 8004a28:	2206      	movs	r2, #6
 8004a2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	78fa      	ldrb	r2, [r7, #3]
 8004a32:	4611      	mov	r1, r2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f004 f8df 	bl	8008bf8 <USB_HC_Halt>
 8004a3a:	e2de      	b.n	8004ffa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	78fa      	ldrb	r2, [r7, #3]
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f004 f85a 	bl	8008afe <USB_ReadChInterrupts>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d144      	bne.n	8004ade <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004a54:	78fa      	ldrb	r2, [r7, #3]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	3344      	adds	r3, #68	@ 0x44
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004a68:	78fa      	ldrb	r2, [r7, #3]
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	1a9b      	subs	r3, r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	334d      	adds	r3, #77	@ 0x4d
 8004a78:	2204      	movs	r2, #4
 8004a7a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004a7c:	78fa      	ldrb	r2, [r7, #3]
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	3319      	adds	r3, #25
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d114      	bne.n	8004abc <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	3318      	adds	r3, #24
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d109      	bne.n	8004abc <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004aa8:	78fa      	ldrb	r2, [r7, #3]
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	3319      	adds	r3, #25
 8004ab8:	2201      	movs	r2, #1
 8004aba:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f004 f897 	bl	8008bf8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	2310      	movs	r3, #16
 8004ada:	6093      	str	r3, [r2, #8]
 8004adc:	e28d      	b.n	8004ffa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	78fa      	ldrb	r2, [r7, #3]
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f004 f809 	bl	8008afe <USB_ReadChInterrupts>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af2:	2b80      	cmp	r3, #128	@ 0x80
 8004af4:	d169      	bne.n	8004bca <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	799b      	ldrb	r3, [r3, #6]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d111      	bne.n	8004b22 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004afe:	78fa      	ldrb	r2, [r7, #3]
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	334d      	adds	r3, #77	@ 0x4d
 8004b0e:	2207      	movs	r2, #7
 8004b10:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	4611      	mov	r1, r2
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f004 f86c 	bl	8008bf8 <USB_HC_Halt>
 8004b20:	e049      	b.n	8004bb6 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004b22:	78fa      	ldrb	r2, [r7, #3]
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	4613      	mov	r3, r2
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	1a9b      	subs	r3, r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	440b      	add	r3, r1
 8004b30:	3344      	adds	r3, #68	@ 0x44
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	1c59      	adds	r1, r3, #1
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4403      	add	r3, r0
 8004b42:	3344      	adds	r3, #68	@ 0x44
 8004b44:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b46:	78fa      	ldrb	r2, [r7, #3]
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	3344      	adds	r3, #68	@ 0x44
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d922      	bls.n	8004ba2 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004b5c:	78fa      	ldrb	r2, [r7, #3]
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	3344      	adds	r3, #68	@ 0x44
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b70:	78fa      	ldrb	r2, [r7, #3]
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	1a9b      	subs	r3, r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	334c      	adds	r3, #76	@ 0x4c
 8004b80:	2204      	movs	r2, #4
 8004b82:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b84:	78fa      	ldrb	r2, [r7, #3]
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	334c      	adds	r3, #76	@ 0x4c
 8004b94:	781a      	ldrb	r2, [r3, #0]
 8004b96:	78fb      	ldrb	r3, [r7, #3]
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f005 fb90 	bl	800a2c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ba0:	e009      	b.n	8004bb6 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	334c      	adds	r3, #76	@ 0x4c
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004bb6:	78fb      	ldrb	r3, [r7, #3]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	2380      	movs	r3, #128	@ 0x80
 8004bc6:	6093      	str	r3, [r2, #8]
 8004bc8:	e217      	b.n	8004ffa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	78fa      	ldrb	r2, [r7, #3]
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f003 ff93 	bl	8008afe <USB_ReadChInterrupts>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004be2:	d11b      	bne.n	8004c1c <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004be4:	78fa      	ldrb	r2, [r7, #3]
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4613      	mov	r3, r2
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	1a9b      	subs	r3, r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	334d      	adds	r3, #77	@ 0x4d
 8004bf4:	2209      	movs	r2, #9
 8004bf6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	78fa      	ldrb	r2, [r7, #3]
 8004bfe:	4611      	mov	r1, r2
 8004c00:	4618      	mov	r0, r3
 8004c02:	f003 fff9 	bl	8008bf8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c12:	461a      	mov	r2, r3
 8004c14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c18:	6093      	str	r3, [r2, #8]
 8004c1a:	e1ee      	b.n	8004ffa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	78fa      	ldrb	r2, [r7, #3]
 8004c22:	4611      	mov	r1, r2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f003 ff6a 	bl	8008afe <USB_ReadChInterrupts>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	f040 81df 	bne.w	8004ff4 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c42:	461a      	mov	r2, r3
 8004c44:	2302      	movs	r3, #2
 8004c46:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004c48:	78fa      	ldrb	r2, [r7, #3]
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	1a9b      	subs	r3, r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	334d      	adds	r3, #77	@ 0x4d
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	f040 8093 	bne.w	8004d86 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c60:	78fa      	ldrb	r2, [r7, #3]
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	4613      	mov	r3, r2
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	334d      	adds	r3, #77	@ 0x4d
 8004c70:	2202      	movs	r2, #2
 8004c72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004c74:	78fa      	ldrb	r2, [r7, #3]
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	011b      	lsls	r3, r3, #4
 8004c7c:	1a9b      	subs	r3, r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	334c      	adds	r3, #76	@ 0x4c
 8004c84:	2201      	movs	r2, #1
 8004c86:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004c88:	78fa      	ldrb	r2, [r7, #3]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	3326      	adds	r3, #38	@ 0x26
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d00b      	beq.n	8004cb6 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004c9e:	78fa      	ldrb	r2, [r7, #3]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	3326      	adds	r3, #38	@ 0x26
 8004cae:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	f040 8190 	bne.w	8004fd6 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	799b      	ldrb	r3, [r3, #6]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d115      	bne.n	8004cea <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004cbe:	78fa      	ldrb	r2, [r7, #3]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	333d      	adds	r3, #61	@ 0x3d
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	78fa      	ldrb	r2, [r7, #3]
 8004cd2:	f083 0301 	eor.w	r3, r3, #1
 8004cd6:	b2d8      	uxtb	r0, r3
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	1a9b      	subs	r3, r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	333d      	adds	r3, #61	@ 0x3d
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	799b      	ldrb	r3, [r3, #6]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	f040 8171 	bne.w	8004fd6 <HCD_HC_OUT_IRQHandler+0x920>
 8004cf4:	78fa      	ldrb	r2, [r7, #3]
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	3334      	adds	r3, #52	@ 0x34
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 8165 	beq.w	8004fd6 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004d0c:	78fa      	ldrb	r2, [r7, #3]
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	3334      	adds	r3, #52	@ 0x34
 8004d1c:	6819      	ldr	r1, [r3, #0]
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4403      	add	r3, r0
 8004d2c:	3328      	adds	r3, #40	@ 0x28
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	440b      	add	r3, r1
 8004d32:	1e59      	subs	r1, r3, #1
 8004d34:	78fa      	ldrb	r2, [r7, #3]
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4403      	add	r3, r0
 8004d42:	3328      	adds	r3, #40	@ 0x28
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d4a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 813f 	beq.w	8004fd6 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004d58:	78fa      	ldrb	r2, [r7, #3]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	333d      	adds	r3, #61	@ 0x3d
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	f083 0301 	eor.w	r3, r3, #1
 8004d70:	b2d8      	uxtb	r0, r3
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	333d      	adds	r3, #61	@ 0x3d
 8004d80:	4602      	mov	r2, r0
 8004d82:	701a      	strb	r2, [r3, #0]
 8004d84:	e127      	b.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004d86:	78fa      	ldrb	r2, [r7, #3]
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	1a9b      	subs	r3, r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	440b      	add	r3, r1
 8004d94:	334d      	adds	r3, #77	@ 0x4d
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d120      	bne.n	8004dde <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d9c:	78fa      	ldrb	r2, [r7, #3]
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	334d      	adds	r3, #77	@ 0x4d
 8004dac:	2202      	movs	r2, #2
 8004dae:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004db0:	78fa      	ldrb	r2, [r7, #3]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	331b      	adds	r3, #27
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	f040 8107 	bne.w	8004fd6 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	334c      	adds	r3, #76	@ 0x4c
 8004dd8:	2202      	movs	r2, #2
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	e0fb      	b.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004dde:	78fa      	ldrb	r2, [r7, #3]
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	334d      	adds	r3, #77	@ 0x4d
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d13a      	bne.n	8004e6a <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004df4:	78fa      	ldrb	r2, [r7, #3]
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	334d      	adds	r3, #77	@ 0x4d
 8004e04:	2202      	movs	r2, #2
 8004e06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e08:	78fa      	ldrb	r2, [r7, #3]
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	1a9b      	subs	r3, r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	334c      	adds	r3, #76	@ 0x4c
 8004e18:	2202      	movs	r2, #2
 8004e1a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004e1c:	78fa      	ldrb	r2, [r7, #3]
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4613      	mov	r3, r2
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	331b      	adds	r3, #27
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	f040 80d1 	bne.w	8004fd6 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004e34:	78fa      	ldrb	r2, [r7, #3]
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	1a9b      	subs	r3, r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	331b      	adds	r3, #27
 8004e44:	2200      	movs	r2, #0
 8004e46:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	78fa      	ldrb	r2, [r7, #3]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e66:	6053      	str	r3, [r2, #4]
 8004e68:	e0b5      	b.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004e6a:	78fa      	ldrb	r2, [r7, #3]
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	1a9b      	subs	r3, r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	334d      	adds	r3, #77	@ 0x4d
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b05      	cmp	r3, #5
 8004e7e:	d114      	bne.n	8004eaa <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e80:	78fa      	ldrb	r2, [r7, #3]
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	4613      	mov	r3, r2
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	1a9b      	subs	r3, r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	334d      	adds	r3, #77	@ 0x4d
 8004e90:	2202      	movs	r2, #2
 8004e92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	1a9b      	subs	r3, r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	334c      	adds	r3, #76	@ 0x4c
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	701a      	strb	r2, [r3, #0]
 8004ea8:	e095      	b.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	1a9b      	subs	r3, r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	334d      	adds	r3, #77	@ 0x4d
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b06      	cmp	r3, #6
 8004ebe:	d114      	bne.n	8004eea <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ec0:	78fa      	ldrb	r2, [r7, #3]
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	1a9b      	subs	r3, r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	334d      	adds	r3, #77	@ 0x4d
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004ed4:	78fa      	ldrb	r2, [r7, #3]
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	1a9b      	subs	r3, r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	334c      	adds	r3, #76	@ 0x4c
 8004ee4:	2205      	movs	r2, #5
 8004ee6:	701a      	strb	r2, [r3, #0]
 8004ee8:	e075      	b.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004eea:	78fa      	ldrb	r2, [r7, #3]
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	334d      	adds	r3, #77	@ 0x4d
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b07      	cmp	r3, #7
 8004efe:	d00a      	beq.n	8004f16 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004f00:	78fa      	ldrb	r2, [r7, #3]
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	334d      	adds	r3, #77	@ 0x4d
 8004f10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004f12:	2b09      	cmp	r3, #9
 8004f14:	d170      	bne.n	8004ff8 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f16:	78fa      	ldrb	r2, [r7, #3]
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	1a9b      	subs	r3, r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	440b      	add	r3, r1
 8004f24:	334d      	adds	r3, #77	@ 0x4d
 8004f26:	2202      	movs	r2, #2
 8004f28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004f2a:	78fa      	ldrb	r2, [r7, #3]
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	1a9b      	subs	r3, r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	3344      	adds	r3, #68	@ 0x44
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	1c59      	adds	r1, r3, #1
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4403      	add	r3, r0
 8004f4a:	3344      	adds	r3, #68	@ 0x44
 8004f4c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	3344      	adds	r3, #68	@ 0x44
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d914      	bls.n	8004f8e <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004f64:	78fa      	ldrb	r2, [r7, #3]
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	3344      	adds	r3, #68	@ 0x44
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004f78:	78fa      	ldrb	r2, [r7, #3]
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	1a9b      	subs	r3, r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	334c      	adds	r3, #76	@ 0x4c
 8004f88:	2204      	movs	r2, #4
 8004f8a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f8c:	e022      	b.n	8004fd4 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f8e:	78fa      	ldrb	r2, [r7, #3]
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	1a9b      	subs	r3, r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	334c      	adds	r3, #76	@ 0x4c
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004fa2:	78fb      	ldrb	r3, [r7, #3]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004fb8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004fc0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004fd4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004fd6:	78fa      	ldrb	r2, [r7, #3]
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	1a9b      	subs	r3, r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	334c      	adds	r3, #76	@ 0x4c
 8004fe6:	781a      	ldrb	r2, [r3, #0]
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	4619      	mov	r1, r3
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f005 f967 	bl	800a2c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ff2:	e002      	b.n	8004ffa <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004ff4:	bf00      	nop
 8004ff6:	e000      	b.n	8004ffa <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004ff8:	bf00      	nop
  }
}
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	@ 0x28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	0c5b      	lsrs	r3, r3, #17
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	091b      	lsrs	r3, r3, #4
 8005030:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005034:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b02      	cmp	r3, #2
 800503a:	d004      	beq.n	8005046 <HCD_RXQLVL_IRQHandler+0x46>
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2b05      	cmp	r3, #5
 8005040:	f000 80b6 	beq.w	80051b0 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005044:	e0b7      	b.n	80051b6 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 80b3 	beq.w	80051b4 <HCD_RXQLVL_IRQHandler+0x1b4>
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	4613      	mov	r3, r2
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	332c      	adds	r3, #44	@ 0x2c
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 80a7 	beq.w	80051b4 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4613      	mov	r3, r2
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	440b      	add	r3, r1
 8005074:	3338      	adds	r3, #56	@ 0x38
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	18d1      	adds	r1, r2, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4613      	mov	r3, r2
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4403      	add	r3, r0
 800508a:	3334      	adds	r3, #52	@ 0x34
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4299      	cmp	r1, r3
 8005090:	f200 8083 	bhi.w	800519a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6818      	ldr	r0, [r3, #0]
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	4613      	mov	r3, r2
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	332c      	adds	r3, #44	@ 0x2c
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	b292      	uxth	r2, r2
 80050ae:	4619      	mov	r1, r3
 80050b0:	f003 fcba 	bl	8008a28 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	4613      	mov	r3, r2
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	1a9b      	subs	r3, r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	332c      	adds	r3, #44	@ 0x2c
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	18d1      	adds	r1, r2, r3
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4613      	mov	r3, r2
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4403      	add	r3, r0
 80050d8:	332c      	adds	r3, #44	@ 0x2c
 80050da:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4613      	mov	r3, r2
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	1a9b      	subs	r3, r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	440b      	add	r3, r1
 80050ea:	3338      	adds	r3, #56	@ 0x38
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	18d1      	adds	r1, r2, r3
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4613      	mov	r3, r2
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4403      	add	r3, r0
 8005100:	3338      	adds	r3, #56	@ 0x38
 8005102:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	4413      	add	r3, r2
 800510c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	0cdb      	lsrs	r3, r3, #19
 8005114:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005118:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800511a:	6879      	ldr	r1, [r7, #4]
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	4613      	mov	r3, r2
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	3328      	adds	r3, #40	@ 0x28
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4293      	cmp	r3, r2
 8005132:	d13f      	bne.n	80051b4 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d03c      	beq.n	80051b4 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	4413      	add	r3, r2
 8005142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005150:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005158:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	4413      	add	r3, r2
 8005162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005166:	461a      	mov	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	4613      	mov	r3, r2
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	333c      	adds	r3, #60	@ 0x3c
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	f083 0301 	eor.w	r3, r3, #1
 8005182:	b2d8      	uxtb	r0, r3
 8005184:	6879      	ldr	r1, [r7, #4]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4613      	mov	r3, r2
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	1a9b      	subs	r3, r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	333c      	adds	r3, #60	@ 0x3c
 8005194:	4602      	mov	r2, r0
 8005196:	701a      	strb	r2, [r3, #0]
      break;
 8005198:	e00c      	b.n	80051b4 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4613      	mov	r3, r2
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	1a9b      	subs	r3, r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	334c      	adds	r3, #76	@ 0x4c
 80051aa:	2204      	movs	r2, #4
 80051ac:	701a      	strb	r2, [r3, #0]
      break;
 80051ae:	e001      	b.n	80051b4 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80051b0:	bf00      	nop
 80051b2:	e000      	b.n	80051b6 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80051b4:	bf00      	nop
  }
}
 80051b6:	bf00      	nop
 80051b8:	3728      	adds	r7, #40	@ 0x28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b086      	sub	sp, #24
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80051ea:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d10b      	bne.n	800520e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d102      	bne.n	8005206 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f005 f841 	bl	800a288 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f043 0302 	orr.w	r3, r3, #2
 800520c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b08      	cmp	r3, #8
 8005216:	d132      	bne.n	800527e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f043 0308 	orr.w	r3, r3, #8
 800521e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b04      	cmp	r3, #4
 8005228:	d126      	bne.n	8005278 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	7a5b      	ldrb	r3, [r3, #9]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d113      	bne.n	800525a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005238:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800523c:	d106      	bne.n	800524c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2102      	movs	r1, #2
 8005244:	4618      	mov	r0, r3
 8005246:	f003 fc89 	bl	8008b5c <USB_InitFSLSPClkSel>
 800524a:	e011      	b.n	8005270 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2101      	movs	r1, #1
 8005252:	4618      	mov	r0, r3
 8005254:	f003 fc82 	bl	8008b5c <USB_InitFSLSPClkSel>
 8005258:	e00a      	b.n	8005270 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	79db      	ldrb	r3, [r3, #7]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d106      	bne.n	8005270 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005268:	461a      	mov	r2, r3
 800526a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800526e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f005 f837 	bl	800a2e4 <HAL_HCD_PortEnabled_Callback>
 8005276:	e002      	b.n	800527e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f005 f841 	bl	800a300 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b20      	cmp	r3, #32
 8005286:	d103      	bne.n	8005290 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f043 0320 	orr.w	r3, r3, #32
 800528e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005296:	461a      	mov	r2, r3
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	6013      	str	r3, [r2, #0]
}
 800529c:	bf00      	nop
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e0bf      	b.n	8005436 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fb fb24 	bl	8000918 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80052e6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6999      	ldr	r1, [r3, #24]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80052fc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6899      	ldr	r1, [r3, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b4a      	ldr	r3, [pc, #296]	@ (8005440 <HAL_LTDC_Init+0x19c>)
 8005318:	400b      	ands	r3, r1
 800531a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	041b      	lsls	r3, r3, #16
 8005322:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6899      	ldr	r1, [r3, #8]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699a      	ldr	r2, [r3, #24]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68d9      	ldr	r1, [r3, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	4b3e      	ldr	r3, [pc, #248]	@ (8005440 <HAL_LTDC_Init+0x19c>)
 8005346:	400b      	ands	r3, r1
 8005348:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	041b      	lsls	r3, r3, #16
 8005350:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68d9      	ldr	r1, [r3, #12]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1a      	ldr	r2, [r3, #32]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6919      	ldr	r1, [r3, #16]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b33      	ldr	r3, [pc, #204]	@ (8005440 <HAL_LTDC_Init+0x19c>)
 8005374:	400b      	ands	r3, r1
 8005376:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537c:	041b      	lsls	r3, r3, #16
 800537e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6919      	ldr	r1, [r3, #16]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6959      	ldr	r1, [r3, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	4b27      	ldr	r3, [pc, #156]	@ (8005440 <HAL_LTDC_Init+0x19c>)
 80053a2:	400b      	ands	r3, r1
 80053a4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	041b      	lsls	r3, r3, #16
 80053ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6959      	ldr	r1, [r3, #20]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80053d4:	041b      	lsls	r3, r3, #16
 80053d6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80053e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0206 	orr.w	r2, r2, #6
 8005412:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	f000f800 	.word	0xf000f800

08005444 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005452:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800545a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	d023      	beq.n	80054ae <HAL_LTDC_IRQHandler+0x6a>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01e      	beq.n	80054ae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0204 	bic.w	r2, r2, #4
 800547e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2204      	movs	r2, #4
 8005486:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800548e:	f043 0201 	orr.w	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2204      	movs	r2, #4
 800549c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f86f 	bl	800558c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d023      	beq.n	8005500 <HAL_LTDC_IRQHandler+0xbc>
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d01e      	beq.n	8005500 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0202 	bic.w	r2, r2, #2
 80054d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2202      	movs	r2, #2
 80054d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054e0:	f043 0202 	orr.w	r2, r3, #2
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2204      	movs	r2, #4
 80054ee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f846 	bl	800558c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01b      	beq.n	8005542 <HAL_LTDC_IRQHandler+0xfe>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d016      	beq.n	8005542 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0201 	bic.w	r2, r2, #1
 8005522:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2201      	movs	r2, #1
 800552a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f82f 	bl	80055a0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d01b      	beq.n	8005584 <HAL_LTDC_IRQHandler+0x140>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f003 0308 	and.w	r3, r3, #8
 8005552:	2b00      	cmp	r3, #0
 8005554:	d016      	beq.n	8005584 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0208 	bic.w	r2, r2, #8
 8005564:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2208      	movs	r2, #8
 800556c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f818 	bl	80055b4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005584:	bf00      	nop
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80055c8:	b5b0      	push	{r4, r5, r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_LTDC_ConfigLayer+0x1a>
 80055de:	2302      	movs	r3, #2
 80055e0:	e02c      	b.n	800563c <HAL_LTDC_ConfigLayer+0x74>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2134      	movs	r1, #52	@ 0x34
 80055f8:	fb01 f303 	mul.w	r3, r1, r3
 80055fc:	4413      	add	r3, r2
 80055fe:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	4614      	mov	r4, r2
 8005606:	461d      	mov	r5, r3
 8005608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800560a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800560c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800560e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f81f 	bl	8005660 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2201      	movs	r2, #1
 8005628:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bdb0      	pop	{r4, r5, r7, pc}

08005644 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005652:	b2db      	uxtb	r3, r3
}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005660:	b480      	push	{r7}
 8005662:	b089      	sub	sp, #36	@ 0x24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	0c1b      	lsrs	r3, r3, #16
 8005678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800567c:	4413      	add	r3, r2
 800567e:	041b      	lsls	r3, r3, #16
 8005680:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	01db      	lsls	r3, r3, #7
 800568c:	4413      	add	r3, r2
 800568e:	3384      	adds	r3, #132	@ 0x84
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	4611      	mov	r1, r2
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	01d2      	lsls	r2, r2, #7
 800569c:	440a      	add	r2, r1
 800569e:	3284      	adds	r2, #132	@ 0x84
 80056a0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80056a4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	0c1b      	lsrs	r3, r3, #16
 80056b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056b6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056b8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4619      	mov	r1, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	01db      	lsls	r3, r3, #7
 80056c4:	440b      	add	r3, r1
 80056c6:	3384      	adds	r3, #132	@ 0x84
 80056c8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056ce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056de:	4413      	add	r3, r2
 80056e0:	041b      	lsls	r3, r3, #16
 80056e2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	461a      	mov	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	01db      	lsls	r3, r3, #7
 80056ee:	4413      	add	r3, r2
 80056f0:	3384      	adds	r3, #132	@ 0x84
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	4611      	mov	r1, r2
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	01d2      	lsls	r2, r2, #7
 80056fe:	440a      	add	r2, r1
 8005700:	3284      	adds	r2, #132	@ 0x84
 8005702:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005706:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005716:	4413      	add	r3, r2
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4619      	mov	r1, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	01db      	lsls	r3, r3, #7
 8005724:	440b      	add	r3, r1
 8005726:	3384      	adds	r3, #132	@ 0x84
 8005728:	4619      	mov	r1, r3
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	4313      	orrs	r3, r2
 800572e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	01db      	lsls	r3, r3, #7
 800573a:	4413      	add	r3, r2
 800573c:	3384      	adds	r3, #132	@ 0x84
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	6812      	ldr	r2, [r2, #0]
 8005744:	4611      	mov	r1, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	01d2      	lsls	r2, r2, #7
 800574a:	440a      	add	r2, r1
 800574c:	3284      	adds	r2, #132	@ 0x84
 800574e:	f023 0307 	bic.w	r3, r3, #7
 8005752:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	01db      	lsls	r3, r3, #7
 800575e:	4413      	add	r3, r2
 8005760:	3384      	adds	r3, #132	@ 0x84
 8005762:	461a      	mov	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800577a:	041b      	lsls	r3, r3, #16
 800577c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	061b      	lsls	r3, r3, #24
 8005784:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	01db      	lsls	r3, r3, #7
 8005790:	4413      	add	r3, r2
 8005792:	3384      	adds	r3, #132	@ 0x84
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	01db      	lsls	r3, r3, #7
 80057a0:	4413      	add	r3, r2
 80057a2:	3384      	adds	r3, #132	@ 0x84
 80057a4:	461a      	mov	r2, r3
 80057a6:	2300      	movs	r3, #0
 80057a8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80057b0:	461a      	mov	r2, r3
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	431a      	orrs	r2, r3
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	431a      	orrs	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4619      	mov	r1, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	01db      	lsls	r3, r3, #7
 80057c4:	440b      	add	r3, r1
 80057c6:	3384      	adds	r3, #132	@ 0x84
 80057c8:	4619      	mov	r1, r3
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	01db      	lsls	r3, r3, #7
 80057da:	4413      	add	r3, r2
 80057dc:	3384      	adds	r3, #132	@ 0x84
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	6812      	ldr	r2, [r2, #0]
 80057e4:	4611      	mov	r1, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	01d2      	lsls	r2, r2, #7
 80057ea:	440a      	add	r2, r1
 80057ec:	3284      	adds	r2, #132	@ 0x84
 80057ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80057f2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	01db      	lsls	r3, r3, #7
 80057fe:	4413      	add	r3, r2
 8005800:	3384      	adds	r3, #132	@ 0x84
 8005802:	461a      	mov	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	461a      	mov	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	01db      	lsls	r3, r3, #7
 8005814:	4413      	add	r3, r2
 8005816:	3384      	adds	r3, #132	@ 0x84
 8005818:	69da      	ldr	r2, [r3, #28]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4619      	mov	r1, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	01db      	lsls	r3, r3, #7
 8005824:	440b      	add	r3, r1
 8005826:	3384      	adds	r3, #132	@ 0x84
 8005828:	4619      	mov	r1, r3
 800582a:	4b58      	ldr	r3, [pc, #352]	@ (800598c <LTDC_SetConfig+0x32c>)
 800582c:	4013      	ands	r3, r2
 800582e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	68f9      	ldr	r1, [r7, #12]
 800583a:	6809      	ldr	r1, [r1, #0]
 800583c:	4608      	mov	r0, r1
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	01c9      	lsls	r1, r1, #7
 8005842:	4401      	add	r1, r0
 8005844:	3184      	adds	r1, #132	@ 0x84
 8005846:	4313      	orrs	r3, r2
 8005848:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	01db      	lsls	r3, r3, #7
 8005854:	4413      	add	r3, r2
 8005856:	3384      	adds	r3, #132	@ 0x84
 8005858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	01db      	lsls	r3, r3, #7
 8005864:	4413      	add	r3, r2
 8005866:	3384      	adds	r3, #132	@ 0x84
 8005868:	461a      	mov	r2, r3
 800586a:	2300      	movs	r3, #0
 800586c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	01db      	lsls	r3, r3, #7
 8005878:	4413      	add	r3, r2
 800587a:	3384      	adds	r3, #132	@ 0x84
 800587c:	461a      	mov	r2, r3
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005882:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d102      	bne.n	8005892 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800588c:	2304      	movs	r3, #4
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	e01b      	b.n	80058ca <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d102      	bne.n	80058a0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800589a:	2303      	movs	r3, #3
 800589c:	61fb      	str	r3, [r7, #28]
 800589e:	e014      	b.n	80058ca <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d00b      	beq.n	80058c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d007      	beq.n	80058c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d003      	beq.n	80058c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80058bc:	2b07      	cmp	r3, #7
 80058be:	d102      	bne.n	80058c6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80058c0:	2302      	movs	r3, #2
 80058c2:	61fb      	str	r3, [r7, #28]
 80058c4:	e001      	b.n	80058ca <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80058c6:	2301      	movs	r3, #1
 80058c8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	01db      	lsls	r3, r3, #7
 80058d4:	4413      	add	r3, r2
 80058d6:	3384      	adds	r3, #132	@ 0x84
 80058d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	4611      	mov	r1, r2
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	01d2      	lsls	r2, r2, #7
 80058e4:	440a      	add	r2, r1
 80058e6:	3284      	adds	r2, #132	@ 0x84
 80058e8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80058ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f2:	69fa      	ldr	r2, [r7, #28]
 80058f4:	fb02 f303 	mul.w	r3, r2, r3
 80058f8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	6859      	ldr	r1, [r3, #4]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	1acb      	subs	r3, r1, r3
 8005904:	69f9      	ldr	r1, [r7, #28]
 8005906:	fb01 f303 	mul.w	r3, r1, r3
 800590a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800590c:	68f9      	ldr	r1, [r7, #12]
 800590e:	6809      	ldr	r1, [r1, #0]
 8005910:	4608      	mov	r0, r1
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	01c9      	lsls	r1, r1, #7
 8005916:	4401      	add	r1, r0
 8005918:	3184      	adds	r1, #132	@ 0x84
 800591a:	4313      	orrs	r3, r2
 800591c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	461a      	mov	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	01db      	lsls	r3, r3, #7
 8005928:	4413      	add	r3, r2
 800592a:	3384      	adds	r3, #132	@ 0x84
 800592c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4619      	mov	r1, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	01db      	lsls	r3, r3, #7
 8005938:	440b      	add	r3, r1
 800593a:	3384      	adds	r3, #132	@ 0x84
 800593c:	4619      	mov	r1, r3
 800593e:	4b14      	ldr	r3, [pc, #80]	@ (8005990 <LTDC_SetConfig+0x330>)
 8005940:	4013      	ands	r3, r2
 8005942:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	01db      	lsls	r3, r3, #7
 800594e:	4413      	add	r3, r2
 8005950:	3384      	adds	r3, #132	@ 0x84
 8005952:	461a      	mov	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005958:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	01db      	lsls	r3, r3, #7
 8005964:	4413      	add	r3, r2
 8005966:	3384      	adds	r3, #132	@ 0x84
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	6812      	ldr	r2, [r2, #0]
 800596e:	4611      	mov	r1, r2
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	01d2      	lsls	r2, r2, #7
 8005974:	440a      	add	r2, r1
 8005976:	3284      	adds	r2, #132	@ 0x84
 8005978:	f043 0301 	orr.w	r3, r3, #1
 800597c:	6013      	str	r3, [r2, #0]
}
 800597e:	bf00      	nop
 8005980:	3724      	adds	r7, #36	@ 0x24
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	fffff8f8 	.word	0xfffff8f8
 8005990:	fffff800 	.word	0xfffff800

08005994 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005998:	4b05      	ldr	r3, [pc, #20]	@ (80059b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a04      	ldr	r2, [pc, #16]	@ (80059b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800599e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059a2:	6013      	str	r3, [r2, #0]
}
 80059a4:	bf00      	nop
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40007000 	.word	0x40007000

080059b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80059be:	4b23      	ldr	r3, [pc, #140]	@ (8005a4c <HAL_PWREx_EnableOverDrive+0x98>)
 80059c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c2:	4a22      	ldr	r2, [pc, #136]	@ (8005a4c <HAL_PWREx_EnableOverDrive+0x98>)
 80059c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80059ca:	4b20      	ldr	r3, [pc, #128]	@ (8005a4c <HAL_PWREx_EnableOverDrive+0x98>)
 80059cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80059d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a1d      	ldr	r2, [pc, #116]	@ (8005a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059e2:	f7fc fe0f 	bl	8002604 <HAL_GetTick>
 80059e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80059e8:	e009      	b.n	80059fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059ea:	f7fc fe0b 	bl	8002604 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059f8:	d901      	bls.n	80059fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e022      	b.n	8005a44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80059fe:	4b14      	ldr	r3, [pc, #80]	@ (8005a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a0a:	d1ee      	bne.n	80059ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005a0c:	4b10      	ldr	r3, [pc, #64]	@ (8005a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a0f      	ldr	r2, [pc, #60]	@ (8005a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a18:	f7fc fdf4 	bl	8002604 <HAL_GetTick>
 8005a1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a1e:	e009      	b.n	8005a34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a20:	f7fc fdf0 	bl	8002604 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a2e:	d901      	bls.n	8005a34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e007      	b.n	8005a44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a34:	4b06      	ldr	r3, [pc, #24]	@ (8005a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a40:	d1ee      	bne.n	8005a20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	40007000 	.word	0x40007000

08005a54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e291      	b.n	8005f8e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 8087 	beq.w	8005b86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a78:	4b96      	ldr	r3, [pc, #600]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 030c 	and.w	r3, r3, #12
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d00c      	beq.n	8005a9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a84:	4b93      	ldr	r3, [pc, #588]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 030c 	and.w	r3, r3, #12
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d112      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x62>
 8005a90:	4b90      	ldr	r3, [pc, #576]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a9c:	d10b      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a9e:	4b8d      	ldr	r3, [pc, #564]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d06c      	beq.n	8005b84 <HAL_RCC_OscConfig+0x130>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d168      	bne.n	8005b84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e26b      	b.n	8005f8e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005abe:	d106      	bne.n	8005ace <HAL_RCC_OscConfig+0x7a>
 8005ac0:	4b84      	ldr	r3, [pc, #528]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a83      	ldr	r2, [pc, #524]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	e02e      	b.n	8005b2c <HAL_RCC_OscConfig+0xd8>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10c      	bne.n	8005af0 <HAL_RCC_OscConfig+0x9c>
 8005ad6:	4b7f      	ldr	r3, [pc, #508]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a7e      	ldr	r2, [pc, #504]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005adc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	4b7c      	ldr	r3, [pc, #496]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a7b      	ldr	r2, [pc, #492]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005ae8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	e01d      	b.n	8005b2c <HAL_RCC_OscConfig+0xd8>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005af8:	d10c      	bne.n	8005b14 <HAL_RCC_OscConfig+0xc0>
 8005afa:	4b76      	ldr	r3, [pc, #472]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a75      	ldr	r2, [pc, #468]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	4b73      	ldr	r3, [pc, #460]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a72      	ldr	r2, [pc, #456]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	e00b      	b.n	8005b2c <HAL_RCC_OscConfig+0xd8>
 8005b14:	4b6f      	ldr	r3, [pc, #444]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a6e      	ldr	r2, [pc, #440]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	4b6c      	ldr	r3, [pc, #432]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a6b      	ldr	r2, [pc, #428]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d013      	beq.n	8005b5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b34:	f7fc fd66 	bl	8002604 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b3c:	f7fc fd62 	bl	8002604 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b64      	cmp	r3, #100	@ 0x64
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e21f      	b.n	8005f8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b4e:	4b61      	ldr	r3, [pc, #388]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0f0      	beq.n	8005b3c <HAL_RCC_OscConfig+0xe8>
 8005b5a:	e014      	b.n	8005b86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5c:	f7fc fd52 	bl	8002604 <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b64:	f7fc fd4e 	bl	8002604 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b64      	cmp	r3, #100	@ 0x64
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e20b      	b.n	8005f8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b76:	4b57      	ldr	r3, [pc, #348]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1f0      	bne.n	8005b64 <HAL_RCC_OscConfig+0x110>
 8005b82:	e000      	b.n	8005b86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d069      	beq.n	8005c66 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b92:	4b50      	ldr	r3, [pc, #320]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 030c 	and.w	r3, r3, #12
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00b      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b9e:	4b4d      	ldr	r3, [pc, #308]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d11c      	bne.n	8005be4 <HAL_RCC_OscConfig+0x190>
 8005baa:	4b4a      	ldr	r3, [pc, #296]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d116      	bne.n	8005be4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bb6:	4b47      	ldr	r3, [pc, #284]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d005      	beq.n	8005bce <HAL_RCC_OscConfig+0x17a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d001      	beq.n	8005bce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e1df      	b.n	8005f8e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bce:	4b41      	ldr	r3, [pc, #260]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	493d      	ldr	r1, [pc, #244]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005be2:	e040      	b.n	8005c66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d023      	beq.n	8005c34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bec:	4b39      	ldr	r3, [pc, #228]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a38      	ldr	r2, [pc, #224]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005bf2:	f043 0301 	orr.w	r3, r3, #1
 8005bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf8:	f7fc fd04 	bl	8002604 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c00:	f7fc fd00 	bl	8002604 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e1bd      	b.n	8005f8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c12:	4b30      	ldr	r3, [pc, #192]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0f0      	beq.n	8005c00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	4929      	ldr	r1, [pc, #164]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	600b      	str	r3, [r1, #0]
 8005c32:	e018      	b.n	8005c66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c34:	4b27      	ldr	r3, [pc, #156]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a26      	ldr	r2, [pc, #152]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005c3a:	f023 0301 	bic.w	r3, r3, #1
 8005c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c40:	f7fc fce0 	bl	8002604 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c46:	e008      	b.n	8005c5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c48:	f7fc fcdc 	bl	8002604 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e199      	b.n	8005f8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1f0      	bne.n	8005c48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d038      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d019      	beq.n	8005cae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c7a:	4b16      	ldr	r3, [pc, #88]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c7e:	4a15      	ldr	r2, [pc, #84]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005c80:	f043 0301 	orr.w	r3, r3, #1
 8005c84:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c86:	f7fc fcbd 	bl	8002604 <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c8e:	f7fc fcb9 	bl	8002604 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e176      	b.n	8005f8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0f0      	beq.n	8005c8e <HAL_RCC_OscConfig+0x23a>
 8005cac:	e01a      	b.n	8005ce4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cae:	4b09      	ldr	r3, [pc, #36]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cb2:	4a08      	ldr	r2, [pc, #32]	@ (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cba:	f7fc fca3 	bl	8002604 <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cc0:	e00a      	b.n	8005cd8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cc2:	f7fc fc9f 	bl	8002604 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d903      	bls.n	8005cd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e15c      	b.n	8005f8e <HAL_RCC_OscConfig+0x53a>
 8005cd4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd8:	4b91      	ldr	r3, [pc, #580]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1ee      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 80a4 	beq.w	8005e3a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cf2:	4b8b      	ldr	r3, [pc, #556]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10d      	bne.n	8005d1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cfe:	4b88      	ldr	r3, [pc, #544]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d02:	4a87      	ldr	r2, [pc, #540]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d0a:	4b85      	ldr	r3, [pc, #532]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d12:	60bb      	str	r3, [r7, #8]
 8005d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d16:	2301      	movs	r3, #1
 8005d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d1a:	4b82      	ldr	r3, [pc, #520]	@ (8005f24 <HAL_RCC_OscConfig+0x4d0>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d118      	bne.n	8005d58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005d26:	4b7f      	ldr	r3, [pc, #508]	@ (8005f24 <HAL_RCC_OscConfig+0x4d0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a7e      	ldr	r2, [pc, #504]	@ (8005f24 <HAL_RCC_OscConfig+0x4d0>)
 8005d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d32:	f7fc fc67 	bl	8002604 <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d38:	e008      	b.n	8005d4c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d3a:	f7fc fc63 	bl	8002604 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b64      	cmp	r3, #100	@ 0x64
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e120      	b.n	8005f8e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d4c:	4b75      	ldr	r3, [pc, #468]	@ (8005f24 <HAL_RCC_OscConfig+0x4d0>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0f0      	beq.n	8005d3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d106      	bne.n	8005d6e <HAL_RCC_OscConfig+0x31a>
 8005d60:	4b6f      	ldr	r3, [pc, #444]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d64:	4a6e      	ldr	r2, [pc, #440]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005d66:	f043 0301 	orr.w	r3, r3, #1
 8005d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d6c:	e02d      	b.n	8005dca <HAL_RCC_OscConfig+0x376>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10c      	bne.n	8005d90 <HAL_RCC_OscConfig+0x33c>
 8005d76:	4b6a      	ldr	r3, [pc, #424]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d7a:	4a69      	ldr	r2, [pc, #420]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005d7c:	f023 0301 	bic.w	r3, r3, #1
 8005d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d82:	4b67      	ldr	r3, [pc, #412]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d86:	4a66      	ldr	r2, [pc, #408]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005d88:	f023 0304 	bic.w	r3, r3, #4
 8005d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d8e:	e01c      	b.n	8005dca <HAL_RCC_OscConfig+0x376>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	2b05      	cmp	r3, #5
 8005d96:	d10c      	bne.n	8005db2 <HAL_RCC_OscConfig+0x35e>
 8005d98:	4b61      	ldr	r3, [pc, #388]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d9c:	4a60      	ldr	r2, [pc, #384]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005d9e:	f043 0304 	orr.w	r3, r3, #4
 8005da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005da4:	4b5e      	ldr	r3, [pc, #376]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005da8:	4a5d      	ldr	r2, [pc, #372]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005daa:	f043 0301 	orr.w	r3, r3, #1
 8005dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8005db0:	e00b      	b.n	8005dca <HAL_RCC_OscConfig+0x376>
 8005db2:	4b5b      	ldr	r3, [pc, #364]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db6:	4a5a      	ldr	r2, [pc, #360]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005db8:	f023 0301 	bic.w	r3, r3, #1
 8005dbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dbe:	4b58      	ldr	r3, [pc, #352]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dc2:	4a57      	ldr	r2, [pc, #348]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005dc4:	f023 0304 	bic.w	r3, r3, #4
 8005dc8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d015      	beq.n	8005dfe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd2:	f7fc fc17 	bl	8002604 <HAL_GetTick>
 8005dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd8:	e00a      	b.n	8005df0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dda:	f7fc fc13 	bl	8002604 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e0ce      	b.n	8005f8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df0:	4b4b      	ldr	r3, [pc, #300]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0ee      	beq.n	8005dda <HAL_RCC_OscConfig+0x386>
 8005dfc:	e014      	b.n	8005e28 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dfe:	f7fc fc01 	bl	8002604 <HAL_GetTick>
 8005e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e04:	e00a      	b.n	8005e1c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e06:	f7fc fbfd 	bl	8002604 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e0b8      	b.n	8005f8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e1c:	4b40      	ldr	r3, [pc, #256]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1ee      	bne.n	8005e06 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e28:	7dfb      	ldrb	r3, [r7, #23]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d105      	bne.n	8005e3a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e2e:	4b3c      	ldr	r3, [pc, #240]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e32:	4a3b      	ldr	r2, [pc, #236]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005e34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e38:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 80a4 	beq.w	8005f8c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e44:	4b36      	ldr	r3, [pc, #216]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f003 030c 	and.w	r3, r3, #12
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d06b      	beq.n	8005f28 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d149      	bne.n	8005eec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e58:	4b31      	ldr	r3, [pc, #196]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a30      	ldr	r2, [pc, #192]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005e5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e64:	f7fc fbce 	bl	8002604 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e6c:	f7fc fbca 	bl	8002604 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e087      	b.n	8005f8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e7e:	4b28      	ldr	r3, [pc, #160]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1f0      	bne.n	8005e6c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	69da      	ldr	r2, [r3, #28]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e98:	019b      	lsls	r3, r3, #6
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea0:	085b      	lsrs	r3, r3, #1
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	041b      	lsls	r3, r3, #16
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eac:	061b      	lsls	r3, r3, #24
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005eb2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005eb6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eb8:	4b19      	ldr	r3, [pc, #100]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a18      	ldr	r2, [pc, #96]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec4:	f7fc fb9e 	bl	8002604 <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ecc:	f7fc fb9a 	bl	8002604 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e057      	b.n	8005f8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ede:	4b10      	ldr	r3, [pc, #64]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0f0      	beq.n	8005ecc <HAL_RCC_OscConfig+0x478>
 8005eea:	e04f      	b.n	8005f8c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eec:	4b0c      	ldr	r3, [pc, #48]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005ef2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef8:	f7fc fb84 	bl	8002604 <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005efe:	e008      	b.n	8005f12 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f00:	f7fc fb80 	bl	8002604 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e03d      	b.n	8005f8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f12:	4b03      	ldr	r3, [pc, #12]	@ (8005f20 <HAL_RCC_OscConfig+0x4cc>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1f0      	bne.n	8005f00 <HAL_RCC_OscConfig+0x4ac>
 8005f1e:	e035      	b.n	8005f8c <HAL_RCC_OscConfig+0x538>
 8005f20:	40023800 	.word	0x40023800
 8005f24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005f28:	4b1b      	ldr	r3, [pc, #108]	@ (8005f98 <HAL_RCC_OscConfig+0x544>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d028      	beq.n	8005f88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d121      	bne.n	8005f88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d11a      	bne.n	8005f88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005f58:	4013      	ands	r3, r2
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f5e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d111      	bne.n	8005f88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6e:	085b      	lsrs	r3, r3, #1
 8005f70:	3b01      	subs	r3, #1
 8005f72:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d107      	bne.n	8005f88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f82:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d001      	beq.n	8005f8c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	40023800 	.word	0x40023800

08005f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e0d0      	b.n	8006156 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fb4:	4b6a      	ldr	r3, [pc, #424]	@ (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 030f 	and.w	r3, r3, #15
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d910      	bls.n	8005fe4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc2:	4b67      	ldr	r3, [pc, #412]	@ (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f023 020f 	bic.w	r2, r3, #15
 8005fca:	4965      	ldr	r1, [pc, #404]	@ (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd2:	4b63      	ldr	r3, [pc, #396]	@ (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 030f 	and.w	r3, r3, #15
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d001      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e0b8      	b.n	8006156 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d020      	beq.n	8006032 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d005      	beq.n	8006008 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ffc:	4b59      	ldr	r3, [pc, #356]	@ (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	4a58      	ldr	r2, [pc, #352]	@ (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 8006002:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006006:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b00      	cmp	r3, #0
 8006012:	d005      	beq.n	8006020 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006014:	4b53      	ldr	r3, [pc, #332]	@ (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	4a52      	ldr	r2, [pc, #328]	@ (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 800601a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800601e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006020:	4b50      	ldr	r3, [pc, #320]	@ (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	494d      	ldr	r1, [pc, #308]	@ (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 800602e:	4313      	orrs	r3, r2
 8006030:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d040      	beq.n	80060c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d107      	bne.n	8006056 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006046:	4b47      	ldr	r3, [pc, #284]	@ (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d115      	bne.n	800607e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e07f      	b.n	8006156 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2b02      	cmp	r3, #2
 800605c:	d107      	bne.n	800606e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800605e:	4b41      	ldr	r3, [pc, #260]	@ (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d109      	bne.n	800607e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e073      	b.n	8006156 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800606e:	4b3d      	ldr	r3, [pc, #244]	@ (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e06b      	b.n	8006156 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800607e:	4b39      	ldr	r3, [pc, #228]	@ (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f023 0203 	bic.w	r2, r3, #3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	4936      	ldr	r1, [pc, #216]	@ (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 800608c:	4313      	orrs	r3, r2
 800608e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006090:	f7fc fab8 	bl	8002604 <HAL_GetTick>
 8006094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006096:	e00a      	b.n	80060ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006098:	f7fc fab4 	bl	8002604 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e053      	b.n	8006156 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ae:	4b2d      	ldr	r3, [pc, #180]	@ (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 020c 	and.w	r2, r3, #12
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	429a      	cmp	r2, r3
 80060be:	d1eb      	bne.n	8006098 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060c0:	4b27      	ldr	r3, [pc, #156]	@ (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 030f 	and.w	r3, r3, #15
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d210      	bcs.n	80060f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ce:	4b24      	ldr	r3, [pc, #144]	@ (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f023 020f 	bic.w	r2, r3, #15
 80060d6:	4922      	ldr	r1, [pc, #136]	@ (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	4313      	orrs	r3, r2
 80060dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060de:	4b20      	ldr	r3, [pc, #128]	@ (8006160 <HAL_RCC_ClockConfig+0x1c4>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d001      	beq.n	80060f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e032      	b.n	8006156 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d008      	beq.n	800610e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060fc:	4b19      	ldr	r3, [pc, #100]	@ (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	4916      	ldr	r1, [pc, #88]	@ (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 800610a:	4313      	orrs	r3, r2
 800610c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0308 	and.w	r3, r3, #8
 8006116:	2b00      	cmp	r3, #0
 8006118:	d009      	beq.n	800612e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800611a:	4b12      	ldr	r3, [pc, #72]	@ (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	490e      	ldr	r1, [pc, #56]	@ (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 800612a:	4313      	orrs	r3, r2
 800612c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800612e:	f000 f821 	bl	8006174 <HAL_RCC_GetSysClockFreq>
 8006132:	4602      	mov	r2, r0
 8006134:	4b0b      	ldr	r3, [pc, #44]	@ (8006164 <HAL_RCC_ClockConfig+0x1c8>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	091b      	lsrs	r3, r3, #4
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	490a      	ldr	r1, [pc, #40]	@ (8006168 <HAL_RCC_ClockConfig+0x1cc>)
 8006140:	5ccb      	ldrb	r3, [r1, r3]
 8006142:	fa22 f303 	lsr.w	r3, r2, r3
 8006146:	4a09      	ldr	r2, [pc, #36]	@ (800616c <HAL_RCC_ClockConfig+0x1d0>)
 8006148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800614a:	4b09      	ldr	r3, [pc, #36]	@ (8006170 <HAL_RCC_ClockConfig+0x1d4>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f7fa fe82 	bl	8000e58 <HAL_InitTick>

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	40023c00 	.word	0x40023c00
 8006164:	40023800 	.word	0x40023800
 8006168:	0800a5a0 	.word	0x0800a5a0
 800616c:	20000008 	.word	0x20000008
 8006170:	20000020 	.word	0x20000020

08006174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006178:	b090      	sub	sp, #64	@ 0x40
 800617a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800617c:	2300      	movs	r3, #0
 800617e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006180:	2300      	movs	r3, #0
 8006182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006184:	2300      	movs	r3, #0
 8006186:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006188:	2300      	movs	r3, #0
 800618a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800618c:	4b59      	ldr	r3, [pc, #356]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 030c 	and.w	r3, r3, #12
 8006194:	2b08      	cmp	r3, #8
 8006196:	d00d      	beq.n	80061b4 <HAL_RCC_GetSysClockFreq+0x40>
 8006198:	2b08      	cmp	r3, #8
 800619a:	f200 80a1 	bhi.w	80062e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <HAL_RCC_GetSysClockFreq+0x34>
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d003      	beq.n	80061ae <HAL_RCC_GetSysClockFreq+0x3a>
 80061a6:	e09b      	b.n	80062e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061a8:	4b53      	ldr	r3, [pc, #332]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80061aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80061ac:	e09b      	b.n	80062e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061ae:	4b53      	ldr	r3, [pc, #332]	@ (80062fc <HAL_RCC_GetSysClockFreq+0x188>)
 80061b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80061b2:	e098      	b.n	80062e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061b4:	4b4f      	ldr	r3, [pc, #316]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80061be:	4b4d      	ldr	r3, [pc, #308]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d028      	beq.n	800621c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061ca:	4b4a      	ldr	r3, [pc, #296]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	099b      	lsrs	r3, r3, #6
 80061d0:	2200      	movs	r2, #0
 80061d2:	623b      	str	r3, [r7, #32]
 80061d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80061dc:	2100      	movs	r1, #0
 80061de:	4b47      	ldr	r3, [pc, #284]	@ (80062fc <HAL_RCC_GetSysClockFreq+0x188>)
 80061e0:	fb03 f201 	mul.w	r2, r3, r1
 80061e4:	2300      	movs	r3, #0
 80061e6:	fb00 f303 	mul.w	r3, r0, r3
 80061ea:	4413      	add	r3, r2
 80061ec:	4a43      	ldr	r2, [pc, #268]	@ (80062fc <HAL_RCC_GetSysClockFreq+0x188>)
 80061ee:	fba0 1202 	umull	r1, r2, r0, r2
 80061f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061f4:	460a      	mov	r2, r1
 80061f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80061f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061fa:	4413      	add	r3, r2
 80061fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006200:	2200      	movs	r2, #0
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	61fa      	str	r2, [r7, #28]
 8006206:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800620a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800620e:	f7fa f807 	bl	8000220 <__aeabi_uldivmod>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4613      	mov	r3, r2
 8006218:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800621a:	e053      	b.n	80062c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800621c:	4b35      	ldr	r3, [pc, #212]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	099b      	lsrs	r3, r3, #6
 8006222:	2200      	movs	r2, #0
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	617a      	str	r2, [r7, #20]
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800622e:	f04f 0b00 	mov.w	fp, #0
 8006232:	4652      	mov	r2, sl
 8006234:	465b      	mov	r3, fp
 8006236:	f04f 0000 	mov.w	r0, #0
 800623a:	f04f 0100 	mov.w	r1, #0
 800623e:	0159      	lsls	r1, r3, #5
 8006240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006244:	0150      	lsls	r0, r2, #5
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	ebb2 080a 	subs.w	r8, r2, sl
 800624e:	eb63 090b 	sbc.w	r9, r3, fp
 8006252:	f04f 0200 	mov.w	r2, #0
 8006256:	f04f 0300 	mov.w	r3, #0
 800625a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800625e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006262:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006266:	ebb2 0408 	subs.w	r4, r2, r8
 800626a:	eb63 0509 	sbc.w	r5, r3, r9
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	00eb      	lsls	r3, r5, #3
 8006278:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800627c:	00e2      	lsls	r2, r4, #3
 800627e:	4614      	mov	r4, r2
 8006280:	461d      	mov	r5, r3
 8006282:	eb14 030a 	adds.w	r3, r4, sl
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	eb45 030b 	adc.w	r3, r5, fp
 800628c:	607b      	str	r3, [r7, #4]
 800628e:	f04f 0200 	mov.w	r2, #0
 8006292:	f04f 0300 	mov.w	r3, #0
 8006296:	e9d7 4500 	ldrd	r4, r5, [r7]
 800629a:	4629      	mov	r1, r5
 800629c:	028b      	lsls	r3, r1, #10
 800629e:	4621      	mov	r1, r4
 80062a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062a4:	4621      	mov	r1, r4
 80062a6:	028a      	lsls	r2, r1, #10
 80062a8:	4610      	mov	r0, r2
 80062aa:	4619      	mov	r1, r3
 80062ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ae:	2200      	movs	r2, #0
 80062b0:	60bb      	str	r3, [r7, #8]
 80062b2:	60fa      	str	r2, [r7, #12]
 80062b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062b8:	f7f9 ffb2 	bl	8000220 <__aeabi_uldivmod>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4613      	mov	r3, r2
 80062c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80062c4:	4b0b      	ldr	r3, [pc, #44]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	0c1b      	lsrs	r3, r3, #16
 80062ca:	f003 0303 	and.w	r3, r3, #3
 80062ce:	3301      	adds	r3, #1
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80062d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80062d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80062de:	e002      	b.n	80062e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062e0:	4b05      	ldr	r3, [pc, #20]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80062e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80062e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3740      	adds	r7, #64	@ 0x40
 80062ec:	46bd      	mov	sp, r7
 80062ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062f2:	bf00      	nop
 80062f4:	40023800 	.word	0x40023800
 80062f8:	00f42400 	.word	0x00f42400
 80062fc:	017d7840 	.word	0x017d7840

08006300 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006304:	4b03      	ldr	r3, [pc, #12]	@ (8006314 <HAL_RCC_GetHCLKFreq+0x14>)
 8006306:	681b      	ldr	r3, [r3, #0]
}
 8006308:	4618      	mov	r0, r3
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	20000008 	.word	0x20000008

08006318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800631c:	f7ff fff0 	bl	8006300 <HAL_RCC_GetHCLKFreq>
 8006320:	4602      	mov	r2, r0
 8006322:	4b05      	ldr	r3, [pc, #20]	@ (8006338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	0a9b      	lsrs	r3, r3, #10
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	4903      	ldr	r1, [pc, #12]	@ (800633c <HAL_RCC_GetPCLK1Freq+0x24>)
 800632e:	5ccb      	ldrb	r3, [r1, r3]
 8006330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006334:	4618      	mov	r0, r3
 8006336:	bd80      	pop	{r7, pc}
 8006338:	40023800 	.word	0x40023800
 800633c:	0800a5b0 	.word	0x0800a5b0

08006340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006344:	f7ff ffdc 	bl	8006300 <HAL_RCC_GetHCLKFreq>
 8006348:	4602      	mov	r2, r0
 800634a:	4b05      	ldr	r3, [pc, #20]	@ (8006360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	0b5b      	lsrs	r3, r3, #13
 8006350:	f003 0307 	and.w	r3, r3, #7
 8006354:	4903      	ldr	r1, [pc, #12]	@ (8006364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006356:	5ccb      	ldrb	r3, [r1, r3]
 8006358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800635c:	4618      	mov	r0, r3
 800635e:	bd80      	pop	{r7, pc}
 8006360:	40023800 	.word	0x40023800
 8006364:	0800a5b0 	.word	0x0800a5b0

08006368 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	220f      	movs	r2, #15
 8006376:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006378:	4b12      	ldr	r3, [pc, #72]	@ (80063c4 <HAL_RCC_GetClockConfig+0x5c>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f003 0203 	and.w	r2, r3, #3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006384:	4b0f      	ldr	r3, [pc, #60]	@ (80063c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006390:	4b0c      	ldr	r3, [pc, #48]	@ (80063c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800639c:	4b09      	ldr	r3, [pc, #36]	@ (80063c4 <HAL_RCC_GetClockConfig+0x5c>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	08db      	lsrs	r3, r3, #3
 80063a2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80063aa:	4b07      	ldr	r3, [pc, #28]	@ (80063c8 <HAL_RCC_GetClockConfig+0x60>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 020f 	and.w	r2, r3, #15
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	601a      	str	r2, [r3, #0]
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40023800 	.word	0x40023800
 80063c8:	40023c00 	.word	0x40023c00

080063cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80063d8:	2300      	movs	r3, #0
 80063da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80063e0:	2300      	movs	r3, #0
 80063e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80063e4:	2300      	movs	r3, #0
 80063e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d012      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063f4:	4b69      	ldr	r3, [pc, #420]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	4a68      	ldr	r2, [pc, #416]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063fa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80063fe:	6093      	str	r3, [r2, #8]
 8006400:	4b66      	ldr	r3, [pc, #408]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006408:	4964      	ldr	r1, [pc, #400]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800640a:	4313      	orrs	r3, r2
 800640c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006416:	2301      	movs	r3, #1
 8006418:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d017      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006426:	4b5d      	ldr	r3, [pc, #372]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006428:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800642c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006434:	4959      	ldr	r1, [pc, #356]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006436:	4313      	orrs	r3, r2
 8006438:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006440:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006444:	d101      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006446:	2301      	movs	r3, #1
 8006448:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006452:	2301      	movs	r3, #1
 8006454:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d017      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006462:	4b4e      	ldr	r3, [pc, #312]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006468:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006470:	494a      	ldr	r1, [pc, #296]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006480:	d101      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006482:	2301      	movs	r3, #1
 8006484:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800648e:	2301      	movs	r3, #1
 8006490:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800649e:	2301      	movs	r3, #1
 80064a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 808b 	beq.w	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064b0:	4b3a      	ldr	r3, [pc, #232]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b4:	4a39      	ldr	r2, [pc, #228]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80064bc:	4b37      	ldr	r3, [pc, #220]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064c4:	60bb      	str	r3, [r7, #8]
 80064c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064c8:	4b35      	ldr	r3, [pc, #212]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a34      	ldr	r2, [pc, #208]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064d4:	f7fc f896 	bl	8002604 <HAL_GetTick>
 80064d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064da:	e008      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064dc:	f7fc f892 	bl	8002604 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b64      	cmp	r3, #100	@ 0x64
 80064e8:	d901      	bls.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e357      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064ee:	4b2c      	ldr	r3, [pc, #176]	@ (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0f0      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064fa:	4b28      	ldr	r3, [pc, #160]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006502:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d035      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	429a      	cmp	r2, r3
 8006516:	d02e      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006518:	4b20      	ldr	r3, [pc, #128]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800651a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006520:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006522:	4b1e      	ldr	r3, [pc, #120]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006526:	4a1d      	ldr	r2, [pc, #116]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800652c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800652e:	4b1b      	ldr	r3, [pc, #108]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006532:	4a1a      	ldr	r2, [pc, #104]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006538:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800653a:	4a18      	ldr	r2, [pc, #96]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006540:	4b16      	ldr	r3, [pc, #88]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b01      	cmp	r3, #1
 800654a:	d114      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654c:	f7fc f85a 	bl	8002604 <HAL_GetTick>
 8006550:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006552:	e00a      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006554:	f7fc f856 	bl	8002604 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006562:	4293      	cmp	r3, r2
 8006564:	d901      	bls.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e319      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800656a:	4b0c      	ldr	r3, [pc, #48]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0ee      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800657e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006582:	d111      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006584:	4b05      	ldr	r3, [pc, #20]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006590:	4b04      	ldr	r3, [pc, #16]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006592:	400b      	ands	r3, r1
 8006594:	4901      	ldr	r1, [pc, #4]	@ (800659c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006596:	4313      	orrs	r3, r2
 8006598:	608b      	str	r3, [r1, #8]
 800659a:	e00b      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800659c:	40023800 	.word	0x40023800
 80065a0:	40007000 	.word	0x40007000
 80065a4:	0ffffcff 	.word	0x0ffffcff
 80065a8:	4baa      	ldr	r3, [pc, #680]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	4aa9      	ldr	r2, [pc, #676]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065ae:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80065b2:	6093      	str	r3, [r2, #8]
 80065b4:	4ba7      	ldr	r3, [pc, #668]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065c0:	49a4      	ldr	r1, [pc, #656]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0310 	and.w	r3, r3, #16
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d010      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065d2:	4ba0      	ldr	r3, [pc, #640]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065d8:	4a9e      	ldr	r2, [pc, #632]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80065e2:	4b9c      	ldr	r3, [pc, #624]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ec:	4999      	ldr	r1, [pc, #612]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00a      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006600:	4b94      	ldr	r3, [pc, #592]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006606:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800660e:	4991      	ldr	r1, [pc, #580]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006610:	4313      	orrs	r3, r2
 8006612:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00a      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006622:	4b8c      	ldr	r3, [pc, #560]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006628:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006630:	4988      	ldr	r1, [pc, #544]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006632:	4313      	orrs	r3, r2
 8006634:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00a      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006644:	4b83      	ldr	r3, [pc, #524]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800664a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006652:	4980      	ldr	r1, [pc, #512]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006654:	4313      	orrs	r3, r2
 8006656:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006666:	4b7b      	ldr	r3, [pc, #492]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800666c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006674:	4977      	ldr	r1, [pc, #476]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006676:	4313      	orrs	r3, r2
 8006678:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00a      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006688:	4b72      	ldr	r3, [pc, #456]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800668a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800668e:	f023 0203 	bic.w	r2, r3, #3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006696:	496f      	ldr	r1, [pc, #444]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006698:	4313      	orrs	r3, r2
 800669a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066aa:	4b6a      	ldr	r3, [pc, #424]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066b0:	f023 020c 	bic.w	r2, r3, #12
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066b8:	4966      	ldr	r1, [pc, #408]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00a      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066cc:	4b61      	ldr	r3, [pc, #388]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066d2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066da:	495e      	ldr	r1, [pc, #376]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00a      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066ee:	4b59      	ldr	r3, [pc, #356]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066f4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066fc:	4955      	ldr	r1, [pc, #340]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00a      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006710:	4b50      	ldr	r3, [pc, #320]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006716:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671e:	494d      	ldr	r1, [pc, #308]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006720:	4313      	orrs	r3, r2
 8006722:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006732:	4b48      	ldr	r3, [pc, #288]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006738:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006740:	4944      	ldr	r1, [pc, #272]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006742:	4313      	orrs	r3, r2
 8006744:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00a      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006754:	4b3f      	ldr	r3, [pc, #252]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800675a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006762:	493c      	ldr	r1, [pc, #240]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006764:	4313      	orrs	r3, r2
 8006766:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00a      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006776:	4b37      	ldr	r3, [pc, #220]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800677c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006784:	4933      	ldr	r1, [pc, #204]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006786:	4313      	orrs	r3, r2
 8006788:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00a      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006798:	4b2e      	ldr	r3, [pc, #184]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800679a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800679e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067a6:	492b      	ldr	r1, [pc, #172]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d011      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80067ba:	4b26      	ldr	r3, [pc, #152]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067c0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067c8:	4922      	ldr	r1, [pc, #136]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067d8:	d101      	bne.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80067da:	2301      	movs	r3, #1
 80067dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0308 	and.w	r3, r3, #8
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80067ea:	2301      	movs	r3, #1
 80067ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067fa:	4b16      	ldr	r3, [pc, #88]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006800:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006808:	4912      	ldr	r1, [pc, #72]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800680a:	4313      	orrs	r3, r2
 800680c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00b      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800681c:	4b0d      	ldr	r3, [pc, #52]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800681e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006822:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800682c:	4909      	ldr	r1, [pc, #36]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d006      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 80d9 	beq.w	80069fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006848:	4b02      	ldr	r3, [pc, #8]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a01      	ldr	r2, [pc, #4]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800684e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006852:	e001      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006854:	40023800 	.word	0x40023800
 8006858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800685a:	f7fb fed3 	bl	8002604 <HAL_GetTick>
 800685e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006860:	e008      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006862:	f7fb fecf 	bl	8002604 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b64      	cmp	r3, #100	@ 0x64
 800686e:	d901      	bls.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e194      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006874:	4b6c      	ldr	r3, [pc, #432]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1f0      	bne.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d021      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006890:	2b00      	cmp	r3, #0
 8006892:	d11d      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006894:	4b64      	ldr	r3, [pc, #400]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006896:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800689a:	0c1b      	lsrs	r3, r3, #16
 800689c:	f003 0303 	and.w	r3, r3, #3
 80068a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80068a2:	4b61      	ldr	r3, [pc, #388]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068a8:	0e1b      	lsrs	r3, r3, #24
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	019a      	lsls	r2, r3, #6
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	041b      	lsls	r3, r3, #16
 80068ba:	431a      	orrs	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	061b      	lsls	r3, r3, #24
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	071b      	lsls	r3, r3, #28
 80068c8:	4957      	ldr	r1, [pc, #348]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d004      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068e4:	d00a      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d02e      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068fa:	d129      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80068fc:	4b4a      	ldr	r3, [pc, #296]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006902:	0c1b      	lsrs	r3, r3, #16
 8006904:	f003 0303 	and.w	r3, r3, #3
 8006908:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800690a:	4b47      	ldr	r3, [pc, #284]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800690c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006910:	0f1b      	lsrs	r3, r3, #28
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	019a      	lsls	r2, r3, #6
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	041b      	lsls	r3, r3, #16
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	061b      	lsls	r3, r3, #24
 800692a:	431a      	orrs	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	071b      	lsls	r3, r3, #28
 8006930:	493d      	ldr	r1, [pc, #244]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006932:	4313      	orrs	r3, r2
 8006934:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006938:	4b3b      	ldr	r3, [pc, #236]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800693a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800693e:	f023 021f 	bic.w	r2, r3, #31
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006946:	3b01      	subs	r3, #1
 8006948:	4937      	ldr	r1, [pc, #220]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800694a:	4313      	orrs	r3, r2
 800694c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01d      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800695c:	4b32      	ldr	r3, [pc, #200]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800695e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006962:	0e1b      	lsrs	r3, r3, #24
 8006964:	f003 030f 	and.w	r3, r3, #15
 8006968:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800696a:	4b2f      	ldr	r3, [pc, #188]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800696c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006970:	0f1b      	lsrs	r3, r3, #28
 8006972:	f003 0307 	and.w	r3, r3, #7
 8006976:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	019a      	lsls	r2, r3, #6
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	041b      	lsls	r3, r3, #16
 8006984:	431a      	orrs	r2, r3
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	061b      	lsls	r3, r3, #24
 800698a:	431a      	orrs	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	071b      	lsls	r3, r3, #28
 8006990:	4925      	ldr	r1, [pc, #148]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006992:	4313      	orrs	r3, r2
 8006994:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d011      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	019a      	lsls	r2, r3, #6
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	041b      	lsls	r3, r3, #16
 80069b0:	431a      	orrs	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	061b      	lsls	r3, r3, #24
 80069b8:	431a      	orrs	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	071b      	lsls	r3, r3, #28
 80069c0:	4919      	ldr	r1, [pc, #100]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069c8:	4b17      	ldr	r3, [pc, #92]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a16      	ldr	r2, [pc, #88]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069d4:	f7fb fe16 	bl	8002604 <HAL_GetTick>
 80069d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069da:	e008      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069dc:	f7fb fe12 	bl	8002604 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b64      	cmp	r3, #100	@ 0x64
 80069e8:	d901      	bls.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e0d7      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0f0      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	f040 80cd 	bne.w	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a02:	4b09      	ldr	r3, [pc, #36]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a08      	ldr	r2, [pc, #32]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a0e:	f7fb fdf9 	bl	8002604 <HAL_GetTick>
 8006a12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a14:	e00a      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a16:	f7fb fdf5 	bl	8002604 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b64      	cmp	r3, #100	@ 0x64
 8006a22:	d903      	bls.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e0ba      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006a28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a2c:	4b5e      	ldr	r3, [pc, #376]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a38:	d0ed      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d009      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d02e      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d12a      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006a62:	4b51      	ldr	r3, [pc, #324]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a68:	0c1b      	lsrs	r3, r3, #16
 8006a6a:	f003 0303 	and.w	r3, r3, #3
 8006a6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006a70:	4b4d      	ldr	r3, [pc, #308]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a76:	0f1b      	lsrs	r3, r3, #28
 8006a78:	f003 0307 	and.w	r3, r3, #7
 8006a7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	019a      	lsls	r2, r3, #6
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	041b      	lsls	r3, r3, #16
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	061b      	lsls	r3, r3, #24
 8006a90:	431a      	orrs	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	071b      	lsls	r3, r3, #28
 8006a96:	4944      	ldr	r1, [pc, #272]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006a9e:	4b42      	ldr	r3, [pc, #264]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006aa4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aac:	3b01      	subs	r3, #1
 8006aae:	021b      	lsls	r3, r3, #8
 8006ab0:	493d      	ldr	r1, [pc, #244]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d022      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ac8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006acc:	d11d      	bne.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ace:	4b36      	ldr	r3, [pc, #216]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad4:	0e1b      	lsrs	r3, r3, #24
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006adc:	4b32      	ldr	r3, [pc, #200]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae2:	0f1b      	lsrs	r3, r3, #28
 8006ae4:	f003 0307 	and.w	r3, r3, #7
 8006ae8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	019a      	lsls	r2, r3, #6
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	041b      	lsls	r3, r3, #16
 8006af6:	431a      	orrs	r2, r3
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	061b      	lsls	r3, r3, #24
 8006afc:	431a      	orrs	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	071b      	lsls	r3, r3, #28
 8006b02:	4929      	ldr	r1, [pc, #164]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d028      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b16:	4b24      	ldr	r3, [pc, #144]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1c:	0e1b      	lsrs	r3, r3, #24
 8006b1e:	f003 030f 	and.w	r3, r3, #15
 8006b22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b24:	4b20      	ldr	r3, [pc, #128]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b2a:	0c1b      	lsrs	r3, r3, #16
 8006b2c:	f003 0303 	and.w	r3, r3, #3
 8006b30:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	019a      	lsls	r2, r3, #6
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	041b      	lsls	r3, r3, #16
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	061b      	lsls	r3, r3, #24
 8006b42:	431a      	orrs	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	071b      	lsls	r3, r3, #28
 8006b4a:	4917      	ldr	r1, [pc, #92]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006b52:	4b15      	ldr	r3, [pc, #84]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b60:	4911      	ldr	r1, [pc, #68]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b68:	4b0f      	ldr	r3, [pc, #60]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a0e      	ldr	r2, [pc, #56]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b74:	f7fb fd46 	bl	8002604 <HAL_GetTick>
 8006b78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b7c:	f7fb fd42 	bl	8002604 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b64      	cmp	r3, #100	@ 0x64
 8006b88:	d901      	bls.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e007      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b8e:	4b06      	ldr	r3, [pc, #24]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b9a:	d1ef      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3720      	adds	r7, #32
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	40023800 	.word	0x40023800

08006bac <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e025      	b.n	8006c0c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7fa f935 	bl	8000e44 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	3304      	adds	r3, #4
 8006bea:	4619      	mov	r1, r3
 8006bec:	4610      	mov	r0, r2
 8006bee:	f001 fd97 	bl	8008720 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	f001 fdeb 	bl	80087d8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006c26:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d101      	bne.n	8006c32 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006c2e:	2302      	movs	r3, #2
 8006c30:	e021      	b.n	8006c76 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d002      	beq.n	8006c3e <HAL_SDRAM_SendCommand+0x2a>
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	2b05      	cmp	r3, #5
 8006c3c:	d118      	bne.n	8006c70 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2202      	movs	r2, #2
 8006c42:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	68b9      	ldr	r1, [r7, #8]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 fe2c 	bl	80088ac <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d104      	bne.n	8006c66 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2205      	movs	r2, #5
 8006c60:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006c64:	e006      	b.n	8006c74 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006c6e:	e001      	b.n	8006c74 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b082      	sub	sp, #8
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d101      	bne.n	8006c98 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006c94:	2302      	movs	r3, #2
 8006c96:	e016      	b.n	8006cc6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d10f      	bne.n	8006cc4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f001 fe1e 	bl	80088f4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e000      	b.n	8006cc6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b082      	sub	sp, #8
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e049      	b.n	8006d74 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d106      	bne.n	8006cfa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7f9 fed7 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3304      	adds	r3, #4
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	f000 f9dd 	bl	80070cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d001      	beq.n	8006d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e054      	b.n	8006e3e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68da      	ldr	r2, [r3, #12]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f042 0201 	orr.w	r2, r2, #1
 8006daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a26      	ldr	r2, [pc, #152]	@ (8006e4c <HAL_TIM_Base_Start_IT+0xd0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d022      	beq.n	8006dfc <HAL_TIM_Base_Start_IT+0x80>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dbe:	d01d      	beq.n	8006dfc <HAL_TIM_Base_Start_IT+0x80>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a22      	ldr	r2, [pc, #136]	@ (8006e50 <HAL_TIM_Base_Start_IT+0xd4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d018      	beq.n	8006dfc <HAL_TIM_Base_Start_IT+0x80>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a21      	ldr	r2, [pc, #132]	@ (8006e54 <HAL_TIM_Base_Start_IT+0xd8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d013      	beq.n	8006dfc <HAL_TIM_Base_Start_IT+0x80>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8006e58 <HAL_TIM_Base_Start_IT+0xdc>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00e      	beq.n	8006dfc <HAL_TIM_Base_Start_IT+0x80>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a1e      	ldr	r2, [pc, #120]	@ (8006e5c <HAL_TIM_Base_Start_IT+0xe0>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d009      	beq.n	8006dfc <HAL_TIM_Base_Start_IT+0x80>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a1c      	ldr	r2, [pc, #112]	@ (8006e60 <HAL_TIM_Base_Start_IT+0xe4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d004      	beq.n	8006dfc <HAL_TIM_Base_Start_IT+0x80>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a1b      	ldr	r2, [pc, #108]	@ (8006e64 <HAL_TIM_Base_Start_IT+0xe8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d115      	bne.n	8006e28 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	4b19      	ldr	r3, [pc, #100]	@ (8006e68 <HAL_TIM_Base_Start_IT+0xec>)
 8006e04:	4013      	ands	r3, r2
 8006e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b06      	cmp	r3, #6
 8006e0c:	d015      	beq.n	8006e3a <HAL_TIM_Base_Start_IT+0xbe>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e14:	d011      	beq.n	8006e3a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0201 	orr.w	r2, r2, #1
 8006e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e26:	e008      	b.n	8006e3a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f042 0201 	orr.w	r2, r2, #1
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	e000      	b.n	8006e3c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	40010000 	.word	0x40010000
 8006e50:	40000400 	.word	0x40000400
 8006e54:	40000800 	.word	0x40000800
 8006e58:	40000c00 	.word	0x40000c00
 8006e5c:	40010400 	.word	0x40010400
 8006e60:	40014000 	.word	0x40014000
 8006e64:	40001800 	.word	0x40001800
 8006e68:	00010007 	.word	0x00010007

08006e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d020      	beq.n	8006ed0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d01b      	beq.n	8006ed0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f06f 0202 	mvn.w	r2, #2
 8006ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	f003 0303 	and.w	r3, r3, #3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f8e9 	bl	800708e <HAL_TIM_IC_CaptureCallback>
 8006ebc:	e005      	b.n	8006eca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f8db 	bl	800707a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f8ec 	bl	80070a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f003 0304 	and.w	r3, r3, #4
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d020      	beq.n	8006f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d01b      	beq.n	8006f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f06f 0204 	mvn.w	r2, #4
 8006eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f8c3 	bl	800708e <HAL_TIM_IC_CaptureCallback>
 8006f08:	e005      	b.n	8006f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f8b5 	bl	800707a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f8c6 	bl	80070a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f003 0308 	and.w	r3, r3, #8
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d020      	beq.n	8006f68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f003 0308 	and.w	r3, r3, #8
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d01b      	beq.n	8006f68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f06f 0208 	mvn.w	r2, #8
 8006f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2204      	movs	r2, #4
 8006f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	f003 0303 	and.w	r3, r3, #3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f89d 	bl	800708e <HAL_TIM_IC_CaptureCallback>
 8006f54:	e005      	b.n	8006f62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f88f 	bl	800707a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f8a0 	bl	80070a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f003 0310 	and.w	r3, r3, #16
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d020      	beq.n	8006fb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f003 0310 	and.w	r3, r3, #16
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d01b      	beq.n	8006fb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f06f 0210 	mvn.w	r2, #16
 8006f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2208      	movs	r2, #8
 8006f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f877 	bl	800708e <HAL_TIM_IC_CaptureCallback>
 8006fa0:	e005      	b.n	8006fae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f869 	bl	800707a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f87a 	bl	80070a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00c      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d007      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f06f 0201 	mvn.w	r2, #1
 8006fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7f9 fc3a 	bl	800084c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d104      	bne.n	8006fec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00c      	beq.n	8007006 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d007      	beq.n	8007006 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f919 	bl	8007238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00c      	beq.n	800702a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007016:	2b00      	cmp	r3, #0
 8007018:	d007      	beq.n	800702a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f911 	bl	800724c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00c      	beq.n	800704e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800703a:	2b00      	cmp	r3, #0
 800703c:	d007      	beq.n	800704e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f834 	bl	80070b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	f003 0320 	and.w	r3, r3, #32
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00c      	beq.n	8007072 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f003 0320 	and.w	r3, r3, #32
 800705e:	2b00      	cmp	r3, #0
 8007060:	d007      	beq.n	8007072 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f06f 0220 	mvn.w	r2, #32
 800706a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f8d9 	bl	8007224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007072:	bf00      	nop
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007082:	bf00      	nop
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b083      	sub	sp, #12
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
	...

080070cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a46      	ldr	r2, [pc, #280]	@ (80071f8 <TIM_Base_SetConfig+0x12c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d013      	beq.n	800710c <TIM_Base_SetConfig+0x40>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ea:	d00f      	beq.n	800710c <TIM_Base_SetConfig+0x40>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a43      	ldr	r2, [pc, #268]	@ (80071fc <TIM_Base_SetConfig+0x130>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00b      	beq.n	800710c <TIM_Base_SetConfig+0x40>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a42      	ldr	r2, [pc, #264]	@ (8007200 <TIM_Base_SetConfig+0x134>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d007      	beq.n	800710c <TIM_Base_SetConfig+0x40>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a41      	ldr	r2, [pc, #260]	@ (8007204 <TIM_Base_SetConfig+0x138>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d003      	beq.n	800710c <TIM_Base_SetConfig+0x40>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a40      	ldr	r2, [pc, #256]	@ (8007208 <TIM_Base_SetConfig+0x13c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d108      	bne.n	800711e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a35      	ldr	r2, [pc, #212]	@ (80071f8 <TIM_Base_SetConfig+0x12c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d02b      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800712c:	d027      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a32      	ldr	r2, [pc, #200]	@ (80071fc <TIM_Base_SetConfig+0x130>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d023      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a31      	ldr	r2, [pc, #196]	@ (8007200 <TIM_Base_SetConfig+0x134>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d01f      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a30      	ldr	r2, [pc, #192]	@ (8007204 <TIM_Base_SetConfig+0x138>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d01b      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a2f      	ldr	r2, [pc, #188]	@ (8007208 <TIM_Base_SetConfig+0x13c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d017      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a2e      	ldr	r2, [pc, #184]	@ (800720c <TIM_Base_SetConfig+0x140>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d013      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a2d      	ldr	r2, [pc, #180]	@ (8007210 <TIM_Base_SetConfig+0x144>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00f      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a2c      	ldr	r2, [pc, #176]	@ (8007214 <TIM_Base_SetConfig+0x148>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00b      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a2b      	ldr	r2, [pc, #172]	@ (8007218 <TIM_Base_SetConfig+0x14c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d007      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a2a      	ldr	r2, [pc, #168]	@ (800721c <TIM_Base_SetConfig+0x150>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d003      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a29      	ldr	r2, [pc, #164]	@ (8007220 <TIM_Base_SetConfig+0x154>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d108      	bne.n	8007190 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a10      	ldr	r2, [pc, #64]	@ (80071f8 <TIM_Base_SetConfig+0x12c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d003      	beq.n	80071c4 <TIM_Base_SetConfig+0xf8>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a12      	ldr	r2, [pc, #72]	@ (8007208 <TIM_Base_SetConfig+0x13c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d103      	bne.n	80071cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	691a      	ldr	r2, [r3, #16]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d105      	bne.n	80071ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	f023 0201 	bic.w	r2, r3, #1
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	611a      	str	r2, [r3, #16]
  }
}
 80071ea:	bf00      	nop
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	40010000 	.word	0x40010000
 80071fc:	40000400 	.word	0x40000400
 8007200:	40000800 	.word	0x40000800
 8007204:	40000c00 	.word	0x40000c00
 8007208:	40010400 	.word	0x40010400
 800720c:	40014000 	.word	0x40014000
 8007210:	40014400 	.word	0x40014400
 8007214:	40014800 	.word	0x40014800
 8007218:	40001800 	.word	0x40001800
 800721c:	40001c00 	.word	0x40001c00
 8007220:	40002000 	.word	0x40002000

08007224 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e040      	b.n	80072f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007276:	2b00      	cmp	r3, #0
 8007278:	d106      	bne.n	8007288 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7f9 fc7e 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2224      	movs	r2, #36	@ 0x24
 800728c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 0201 	bic.w	r2, r2, #1
 800729c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fdc2 	bl	8007e30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fb5b 	bl	8007968 <UART_SetConfig>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d101      	bne.n	80072bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e01b      	b.n	80072f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	689a      	ldr	r2, [r3, #8]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0201 	orr.w	r2, r2, #1
 80072ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fe41 	bl	8007f74 <UART_CheckIdleState>
 80072f2:	4603      	mov	r3, r0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08a      	sub	sp, #40	@ 0x28
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	4613      	mov	r3, r2
 8007308:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007310:	2b20      	cmp	r3, #32
 8007312:	d132      	bne.n	800737a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d002      	beq.n	8007320 <HAL_UART_Receive_IT+0x24>
 800731a:	88fb      	ldrh	r3, [r7, #6]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e02b      	b.n	800737c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d018      	beq.n	800736a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	613b      	str	r3, [r7, #16]
   return(result);
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800734c:	627b      	str	r3, [r7, #36]	@ 0x24
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	623b      	str	r3, [r7, #32]
 8007358:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	69f9      	ldr	r1, [r7, #28]
 800735c:	6a3a      	ldr	r2, [r7, #32]
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	61bb      	str	r3, [r7, #24]
   return(result);
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e6      	bne.n	8007338 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800736a:	88fb      	ldrh	r3, [r7, #6]
 800736c:	461a      	mov	r2, r3
 800736e:	68b9      	ldr	r1, [r7, #8]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 fec3 	bl	80080fc <UART_Start_Receive_IT>
 8007376:	4603      	mov	r3, r0
 8007378:	e000      	b.n	800737c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800737a:	2302      	movs	r3, #2
  }
}
 800737c:	4618      	mov	r0, r3
 800737e:	3728      	adds	r7, #40	@ 0x28
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b0ba      	sub	sp, #232	@ 0xe8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80073ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80073b2:	4013      	ands	r3, r2
 80073b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80073b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d115      	bne.n	80073ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80073c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073c4:	f003 0320 	and.w	r3, r3, #32
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00f      	beq.n	80073ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80073cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073d0:	f003 0320 	and.w	r3, r3, #32
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d009      	beq.n	80073ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 8297 	beq.w	8007910 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
      }
      return;
 80073ea:	e291      	b.n	8007910 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 8117 	beq.w	8007624 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80073f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d106      	bne.n	8007410 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007402:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007406:	4b85      	ldr	r3, [pc, #532]	@ (800761c <HAL_UART_IRQHandler+0x298>)
 8007408:	4013      	ands	r3, r2
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 810a 	beq.w	8007624 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d011      	beq.n	8007440 <HAL_UART_IRQHandler+0xbc>
 800741c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00b      	beq.n	8007440 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2201      	movs	r2, #1
 800742e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007436:	f043 0201 	orr.w	r2, r3, #1
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d011      	beq.n	8007470 <HAL_UART_IRQHandler+0xec>
 800744c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00b      	beq.n	8007470 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2202      	movs	r2, #2
 800745e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007466:	f043 0204 	orr.w	r2, r3, #4
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007474:	f003 0304 	and.w	r3, r3, #4
 8007478:	2b00      	cmp	r3, #0
 800747a:	d011      	beq.n	80074a0 <HAL_UART_IRQHandler+0x11c>
 800747c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00b      	beq.n	80074a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2204      	movs	r2, #4
 800748e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007496:	f043 0202 	orr.w	r2, r3, #2
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074a4:	f003 0308 	and.w	r3, r3, #8
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d017      	beq.n	80074dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074b0:	f003 0320 	and.w	r3, r3, #32
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d105      	bne.n	80074c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80074b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00b      	beq.n	80074dc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2208      	movs	r2, #8
 80074ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074d2:	f043 0208 	orr.w	r2, r3, #8
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d012      	beq.n	800750e <HAL_UART_IRQHandler+0x18a>
 80074e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00c      	beq.n	800750e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007504:	f043 0220 	orr.w	r2, r3, #32
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 81fd 	beq.w	8007914 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800751a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800751e:	f003 0320 	and.w	r3, r3, #32
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00d      	beq.n	8007542 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800752a:	f003 0320 	and.w	r3, r3, #32
 800752e:	2b00      	cmp	r3, #0
 8007530:	d007      	beq.n	8007542 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007548:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007556:	2b40      	cmp	r3, #64	@ 0x40
 8007558:	d005      	beq.n	8007566 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800755a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800755e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007562:	2b00      	cmp	r3, #0
 8007564:	d04f      	beq.n	8007606 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fe8e 	bl	8008288 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007576:	2b40      	cmp	r3, #64	@ 0x40
 8007578:	d141      	bne.n	80075fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3308      	adds	r3, #8
 8007580:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007584:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007588:	e853 3f00 	ldrex	r3, [r3]
 800758c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007590:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007594:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007598:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3308      	adds	r3, #8
 80075a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80075a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80075aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80075b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80075b6:	e841 2300 	strex	r3, r2, [r1]
 80075ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80075be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1d9      	bne.n	800757a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d013      	beq.n	80075f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075d2:	4a13      	ldr	r2, [pc, #76]	@ (8007620 <HAL_UART_IRQHandler+0x29c>)
 80075d4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fb faa0 	bl	8002b20 <HAL_DMA_Abort_IT>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d017      	beq.n	8007616 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80075f0:	4610      	mov	r0, r2
 80075f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f4:	e00f      	b.n	8007616 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f9a0 	bl	800793c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075fc:	e00b      	b.n	8007616 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f99c 	bl	800793c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007604:	e007      	b.n	8007616 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f998 	bl	800793c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007614:	e17e      	b.n	8007914 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007616:	bf00      	nop
    return;
 8007618:	e17c      	b.n	8007914 <HAL_UART_IRQHandler+0x590>
 800761a:	bf00      	nop
 800761c:	04000120 	.word	0x04000120
 8007620:	08008351 	.word	0x08008351

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007628:	2b01      	cmp	r3, #1
 800762a:	f040 814c 	bne.w	80078c6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800762e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007632:	f003 0310 	and.w	r3, r3, #16
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 8145 	beq.w	80078c6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800763c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007640:	f003 0310 	and.w	r3, r3, #16
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 813e 	beq.w	80078c6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2210      	movs	r2, #16
 8007650:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800765c:	2b40      	cmp	r3, #64	@ 0x40
 800765e:	f040 80b6 	bne.w	80077ce <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800766e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 8150 	beq.w	8007918 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800767e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007682:	429a      	cmp	r2, r3
 8007684:	f080 8148 	bcs.w	8007918 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800768e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007696:	69db      	ldr	r3, [r3, #28]
 8007698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800769c:	f000 8086 	beq.w	80077ac <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80076b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80076ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80076ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80076d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80076e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1da      	bne.n	80076a0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3308      	adds	r3, #8
 80076f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076f4:	e853 3f00 	ldrex	r3, [r3]
 80076f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076fc:	f023 0301 	bic.w	r3, r3, #1
 8007700:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3308      	adds	r3, #8
 800770a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800770e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007712:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007716:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007720:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1e1      	bne.n	80076ea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3308      	adds	r3, #8
 800772c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007730:	e853 3f00 	ldrex	r3, [r3]
 8007734:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800773c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3308      	adds	r3, #8
 8007746:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800774a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800774c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007750:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007752:	e841 2300 	strex	r3, r2, [r1]
 8007756:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1e3      	bne.n	8007726 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2220      	movs	r2, #32
 8007762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800777a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800777c:	f023 0310 	bic.w	r3, r3, #16
 8007780:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	461a      	mov	r2, r3
 800778a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800778e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007790:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007794:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800779c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e4      	bne.n	800776c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fb f94a 	bl	8002a40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077be:	b29b      	uxth	r3, r3
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f8c2 	bl	8007950 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077cc:	e0a4      	b.n	8007918 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077da:	b29b      	uxth	r3, r3
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 8096 	beq.w	800791c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80077f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 8091 	beq.w	800791c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007802:	e853 3f00 	ldrex	r3, [r3]
 8007806:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800780a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800780e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800781c:	647b      	str	r3, [r7, #68]	@ 0x44
 800781e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007822:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800782a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e4      	bne.n	80077fa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3308      	adds	r3, #8
 8007836:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	623b      	str	r3, [r7, #32]
   return(result);
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	f023 0301 	bic.w	r3, r3, #1
 8007846:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3308      	adds	r3, #8
 8007850:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007854:	633a      	str	r2, [r7, #48]	@ 0x30
 8007856:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007858:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800785a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800785c:	e841 2300 	strex	r3, r2, [r1]
 8007860:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1e3      	bne.n	8007830 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2220      	movs	r2, #32
 800786c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	e853 3f00 	ldrex	r3, [r3]
 8007888:	60fb      	str	r3, [r7, #12]
   return(result);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f023 0310 	bic.w	r3, r3, #16
 8007890:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	461a      	mov	r2, r3
 800789a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800789e:	61fb      	str	r3, [r7, #28]
 80078a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	69b9      	ldr	r1, [r7, #24]
 80078a4:	69fa      	ldr	r2, [r7, #28]
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	617b      	str	r3, [r7, #20]
   return(result);
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e4      	bne.n	800787c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2202      	movs	r2, #2
 80078b6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f846 	bl	8007950 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078c4:	e02a      	b.n	800791c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80078c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00e      	beq.n	80078f0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80078d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d008      	beq.n	80078f0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d01c      	beq.n	8007920 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	4798      	blx	r3
    }
    return;
 80078ee:	e017      	b.n	8007920 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80078f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d012      	beq.n	8007922 <HAL_UART_IRQHandler+0x59e>
 80078fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00c      	beq.n	8007922 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fd37 	bl	800837c <UART_EndTransmit_IT>
    return;
 800790e:	e008      	b.n	8007922 <HAL_UART_IRQHandler+0x59e>
      return;
 8007910:	bf00      	nop
 8007912:	e006      	b.n	8007922 <HAL_UART_IRQHandler+0x59e>
    return;
 8007914:	bf00      	nop
 8007916:	e004      	b.n	8007922 <HAL_UART_IRQHandler+0x59e>
      return;
 8007918:	bf00      	nop
 800791a:	e002      	b.n	8007922 <HAL_UART_IRQHandler+0x59e>
      return;
 800791c:	bf00      	nop
 800791e:	e000      	b.n	8007922 <HAL_UART_IRQHandler+0x59e>
    return;
 8007920:	bf00      	nop
  }

}
 8007922:	37e8      	adds	r7, #232	@ 0xe8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	431a      	orrs	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	431a      	orrs	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	4313      	orrs	r3, r2
 800798a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4ba6      	ldr	r3, [pc, #664]	@ (8007c2c <UART_SetConfig+0x2c4>)
 8007994:	4013      	ands	r3, r2
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6812      	ldr	r2, [r2, #0]
 800799a:	6979      	ldr	r1, [r7, #20]
 800799c:	430b      	orrs	r3, r1
 800799e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68da      	ldr	r2, [r3, #12]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a94      	ldr	r2, [pc, #592]	@ (8007c30 <UART_SetConfig+0x2c8>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d120      	bne.n	8007a26 <UART_SetConfig+0xbe>
 80079e4:	4b93      	ldr	r3, [pc, #588]	@ (8007c34 <UART_SetConfig+0x2cc>)
 80079e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ea:	f003 0303 	and.w	r3, r3, #3
 80079ee:	2b03      	cmp	r3, #3
 80079f0:	d816      	bhi.n	8007a20 <UART_SetConfig+0xb8>
 80079f2:	a201      	add	r2, pc, #4	@ (adr r2, 80079f8 <UART_SetConfig+0x90>)
 80079f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f8:	08007a09 	.word	0x08007a09
 80079fc:	08007a15 	.word	0x08007a15
 8007a00:	08007a0f 	.word	0x08007a0f
 8007a04:	08007a1b 	.word	0x08007a1b
 8007a08:	2301      	movs	r3, #1
 8007a0a:	77fb      	strb	r3, [r7, #31]
 8007a0c:	e150      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a0e:	2302      	movs	r3, #2
 8007a10:	77fb      	strb	r3, [r7, #31]
 8007a12:	e14d      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a14:	2304      	movs	r3, #4
 8007a16:	77fb      	strb	r3, [r7, #31]
 8007a18:	e14a      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a1a:	2308      	movs	r3, #8
 8007a1c:	77fb      	strb	r3, [r7, #31]
 8007a1e:	e147      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a20:	2310      	movs	r3, #16
 8007a22:	77fb      	strb	r3, [r7, #31]
 8007a24:	e144      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a83      	ldr	r2, [pc, #524]	@ (8007c38 <UART_SetConfig+0x2d0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d132      	bne.n	8007a96 <UART_SetConfig+0x12e>
 8007a30:	4b80      	ldr	r3, [pc, #512]	@ (8007c34 <UART_SetConfig+0x2cc>)
 8007a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a36:	f003 030c 	and.w	r3, r3, #12
 8007a3a:	2b0c      	cmp	r3, #12
 8007a3c:	d828      	bhi.n	8007a90 <UART_SetConfig+0x128>
 8007a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a44 <UART_SetConfig+0xdc>)
 8007a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a44:	08007a79 	.word	0x08007a79
 8007a48:	08007a91 	.word	0x08007a91
 8007a4c:	08007a91 	.word	0x08007a91
 8007a50:	08007a91 	.word	0x08007a91
 8007a54:	08007a85 	.word	0x08007a85
 8007a58:	08007a91 	.word	0x08007a91
 8007a5c:	08007a91 	.word	0x08007a91
 8007a60:	08007a91 	.word	0x08007a91
 8007a64:	08007a7f 	.word	0x08007a7f
 8007a68:	08007a91 	.word	0x08007a91
 8007a6c:	08007a91 	.word	0x08007a91
 8007a70:	08007a91 	.word	0x08007a91
 8007a74:	08007a8b 	.word	0x08007a8b
 8007a78:	2300      	movs	r3, #0
 8007a7a:	77fb      	strb	r3, [r7, #31]
 8007a7c:	e118      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a7e:	2302      	movs	r3, #2
 8007a80:	77fb      	strb	r3, [r7, #31]
 8007a82:	e115      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a84:	2304      	movs	r3, #4
 8007a86:	77fb      	strb	r3, [r7, #31]
 8007a88:	e112      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a8a:	2308      	movs	r3, #8
 8007a8c:	77fb      	strb	r3, [r7, #31]
 8007a8e:	e10f      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a90:	2310      	movs	r3, #16
 8007a92:	77fb      	strb	r3, [r7, #31]
 8007a94:	e10c      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a68      	ldr	r2, [pc, #416]	@ (8007c3c <UART_SetConfig+0x2d4>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d120      	bne.n	8007ae2 <UART_SetConfig+0x17a>
 8007aa0:	4b64      	ldr	r3, [pc, #400]	@ (8007c34 <UART_SetConfig+0x2cc>)
 8007aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aa6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007aaa:	2b30      	cmp	r3, #48	@ 0x30
 8007aac:	d013      	beq.n	8007ad6 <UART_SetConfig+0x16e>
 8007aae:	2b30      	cmp	r3, #48	@ 0x30
 8007ab0:	d814      	bhi.n	8007adc <UART_SetConfig+0x174>
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	d009      	beq.n	8007aca <UART_SetConfig+0x162>
 8007ab6:	2b20      	cmp	r3, #32
 8007ab8:	d810      	bhi.n	8007adc <UART_SetConfig+0x174>
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <UART_SetConfig+0x15c>
 8007abe:	2b10      	cmp	r3, #16
 8007ac0:	d006      	beq.n	8007ad0 <UART_SetConfig+0x168>
 8007ac2:	e00b      	b.n	8007adc <UART_SetConfig+0x174>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	77fb      	strb	r3, [r7, #31]
 8007ac8:	e0f2      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007aca:	2302      	movs	r3, #2
 8007acc:	77fb      	strb	r3, [r7, #31]
 8007ace:	e0ef      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007ad0:	2304      	movs	r3, #4
 8007ad2:	77fb      	strb	r3, [r7, #31]
 8007ad4:	e0ec      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007ad6:	2308      	movs	r3, #8
 8007ad8:	77fb      	strb	r3, [r7, #31]
 8007ada:	e0e9      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007adc:	2310      	movs	r3, #16
 8007ade:	77fb      	strb	r3, [r7, #31]
 8007ae0:	e0e6      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a56      	ldr	r2, [pc, #344]	@ (8007c40 <UART_SetConfig+0x2d8>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d120      	bne.n	8007b2e <UART_SetConfig+0x1c6>
 8007aec:	4b51      	ldr	r3, [pc, #324]	@ (8007c34 <UART_SetConfig+0x2cc>)
 8007aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007af2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007af6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007af8:	d013      	beq.n	8007b22 <UART_SetConfig+0x1ba>
 8007afa:	2bc0      	cmp	r3, #192	@ 0xc0
 8007afc:	d814      	bhi.n	8007b28 <UART_SetConfig+0x1c0>
 8007afe:	2b80      	cmp	r3, #128	@ 0x80
 8007b00:	d009      	beq.n	8007b16 <UART_SetConfig+0x1ae>
 8007b02:	2b80      	cmp	r3, #128	@ 0x80
 8007b04:	d810      	bhi.n	8007b28 <UART_SetConfig+0x1c0>
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <UART_SetConfig+0x1a8>
 8007b0a:	2b40      	cmp	r3, #64	@ 0x40
 8007b0c:	d006      	beq.n	8007b1c <UART_SetConfig+0x1b4>
 8007b0e:	e00b      	b.n	8007b28 <UART_SetConfig+0x1c0>
 8007b10:	2300      	movs	r3, #0
 8007b12:	77fb      	strb	r3, [r7, #31]
 8007b14:	e0cc      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b16:	2302      	movs	r3, #2
 8007b18:	77fb      	strb	r3, [r7, #31]
 8007b1a:	e0c9      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b1c:	2304      	movs	r3, #4
 8007b1e:	77fb      	strb	r3, [r7, #31]
 8007b20:	e0c6      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b22:	2308      	movs	r3, #8
 8007b24:	77fb      	strb	r3, [r7, #31]
 8007b26:	e0c3      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b28:	2310      	movs	r3, #16
 8007b2a:	77fb      	strb	r3, [r7, #31]
 8007b2c:	e0c0      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a44      	ldr	r2, [pc, #272]	@ (8007c44 <UART_SetConfig+0x2dc>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d125      	bne.n	8007b84 <UART_SetConfig+0x21c>
 8007b38:	4b3e      	ldr	r3, [pc, #248]	@ (8007c34 <UART_SetConfig+0x2cc>)
 8007b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b46:	d017      	beq.n	8007b78 <UART_SetConfig+0x210>
 8007b48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b4c:	d817      	bhi.n	8007b7e <UART_SetConfig+0x216>
 8007b4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b52:	d00b      	beq.n	8007b6c <UART_SetConfig+0x204>
 8007b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b58:	d811      	bhi.n	8007b7e <UART_SetConfig+0x216>
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d003      	beq.n	8007b66 <UART_SetConfig+0x1fe>
 8007b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b62:	d006      	beq.n	8007b72 <UART_SetConfig+0x20a>
 8007b64:	e00b      	b.n	8007b7e <UART_SetConfig+0x216>
 8007b66:	2300      	movs	r3, #0
 8007b68:	77fb      	strb	r3, [r7, #31]
 8007b6a:	e0a1      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	77fb      	strb	r3, [r7, #31]
 8007b70:	e09e      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b72:	2304      	movs	r3, #4
 8007b74:	77fb      	strb	r3, [r7, #31]
 8007b76:	e09b      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b78:	2308      	movs	r3, #8
 8007b7a:	77fb      	strb	r3, [r7, #31]
 8007b7c:	e098      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b7e:	2310      	movs	r3, #16
 8007b80:	77fb      	strb	r3, [r7, #31]
 8007b82:	e095      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a2f      	ldr	r2, [pc, #188]	@ (8007c48 <UART_SetConfig+0x2e0>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d125      	bne.n	8007bda <UART_SetConfig+0x272>
 8007b8e:	4b29      	ldr	r3, [pc, #164]	@ (8007c34 <UART_SetConfig+0x2cc>)
 8007b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007b98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b9c:	d017      	beq.n	8007bce <UART_SetConfig+0x266>
 8007b9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ba2:	d817      	bhi.n	8007bd4 <UART_SetConfig+0x26c>
 8007ba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ba8:	d00b      	beq.n	8007bc2 <UART_SetConfig+0x25a>
 8007baa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bae:	d811      	bhi.n	8007bd4 <UART_SetConfig+0x26c>
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <UART_SetConfig+0x254>
 8007bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bb8:	d006      	beq.n	8007bc8 <UART_SetConfig+0x260>
 8007bba:	e00b      	b.n	8007bd4 <UART_SetConfig+0x26c>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	77fb      	strb	r3, [r7, #31]
 8007bc0:	e076      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	77fb      	strb	r3, [r7, #31]
 8007bc6:	e073      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007bc8:	2304      	movs	r3, #4
 8007bca:	77fb      	strb	r3, [r7, #31]
 8007bcc:	e070      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007bce:	2308      	movs	r3, #8
 8007bd0:	77fb      	strb	r3, [r7, #31]
 8007bd2:	e06d      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007bd4:	2310      	movs	r3, #16
 8007bd6:	77fb      	strb	r3, [r7, #31]
 8007bd8:	e06a      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a1b      	ldr	r2, [pc, #108]	@ (8007c4c <UART_SetConfig+0x2e4>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d138      	bne.n	8007c56 <UART_SetConfig+0x2ee>
 8007be4:	4b13      	ldr	r3, [pc, #76]	@ (8007c34 <UART_SetConfig+0x2cc>)
 8007be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bea:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007bee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007bf2:	d017      	beq.n	8007c24 <UART_SetConfig+0x2bc>
 8007bf4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007bf8:	d82a      	bhi.n	8007c50 <UART_SetConfig+0x2e8>
 8007bfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bfe:	d00b      	beq.n	8007c18 <UART_SetConfig+0x2b0>
 8007c00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c04:	d824      	bhi.n	8007c50 <UART_SetConfig+0x2e8>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <UART_SetConfig+0x2aa>
 8007c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c0e:	d006      	beq.n	8007c1e <UART_SetConfig+0x2b6>
 8007c10:	e01e      	b.n	8007c50 <UART_SetConfig+0x2e8>
 8007c12:	2300      	movs	r3, #0
 8007c14:	77fb      	strb	r3, [r7, #31]
 8007c16:	e04b      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	77fb      	strb	r3, [r7, #31]
 8007c1c:	e048      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007c1e:	2304      	movs	r3, #4
 8007c20:	77fb      	strb	r3, [r7, #31]
 8007c22:	e045      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007c24:	2308      	movs	r3, #8
 8007c26:	77fb      	strb	r3, [r7, #31]
 8007c28:	e042      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007c2a:	bf00      	nop
 8007c2c:	efff69f3 	.word	0xefff69f3
 8007c30:	40011000 	.word	0x40011000
 8007c34:	40023800 	.word	0x40023800
 8007c38:	40004400 	.word	0x40004400
 8007c3c:	40004800 	.word	0x40004800
 8007c40:	40004c00 	.word	0x40004c00
 8007c44:	40005000 	.word	0x40005000
 8007c48:	40011400 	.word	0x40011400
 8007c4c:	40007800 	.word	0x40007800
 8007c50:	2310      	movs	r3, #16
 8007c52:	77fb      	strb	r3, [r7, #31]
 8007c54:	e02c      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a72      	ldr	r2, [pc, #456]	@ (8007e24 <UART_SetConfig+0x4bc>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d125      	bne.n	8007cac <UART_SetConfig+0x344>
 8007c60:	4b71      	ldr	r3, [pc, #452]	@ (8007e28 <UART_SetConfig+0x4c0>)
 8007c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c66:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007c6a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007c6e:	d017      	beq.n	8007ca0 <UART_SetConfig+0x338>
 8007c70:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007c74:	d817      	bhi.n	8007ca6 <UART_SetConfig+0x33e>
 8007c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c7a:	d00b      	beq.n	8007c94 <UART_SetConfig+0x32c>
 8007c7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c80:	d811      	bhi.n	8007ca6 <UART_SetConfig+0x33e>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <UART_SetConfig+0x326>
 8007c86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c8a:	d006      	beq.n	8007c9a <UART_SetConfig+0x332>
 8007c8c:	e00b      	b.n	8007ca6 <UART_SetConfig+0x33e>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	77fb      	strb	r3, [r7, #31]
 8007c92:	e00d      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007c94:	2302      	movs	r3, #2
 8007c96:	77fb      	strb	r3, [r7, #31]
 8007c98:	e00a      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007c9a:	2304      	movs	r3, #4
 8007c9c:	77fb      	strb	r3, [r7, #31]
 8007c9e:	e007      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007ca0:	2308      	movs	r3, #8
 8007ca2:	77fb      	strb	r3, [r7, #31]
 8007ca4:	e004      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007ca6:	2310      	movs	r3, #16
 8007ca8:	77fb      	strb	r3, [r7, #31]
 8007caa:	e001      	b.n	8007cb0 <UART_SetConfig+0x348>
 8007cac:	2310      	movs	r3, #16
 8007cae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cb8:	d15b      	bne.n	8007d72 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007cba:	7ffb      	ldrb	r3, [r7, #31]
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d828      	bhi.n	8007d12 <UART_SetConfig+0x3aa>
 8007cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc8 <UART_SetConfig+0x360>)
 8007cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc6:	bf00      	nop
 8007cc8:	08007ced 	.word	0x08007ced
 8007ccc:	08007cf5 	.word	0x08007cf5
 8007cd0:	08007cfd 	.word	0x08007cfd
 8007cd4:	08007d13 	.word	0x08007d13
 8007cd8:	08007d03 	.word	0x08007d03
 8007cdc:	08007d13 	.word	0x08007d13
 8007ce0:	08007d13 	.word	0x08007d13
 8007ce4:	08007d13 	.word	0x08007d13
 8007ce8:	08007d0b 	.word	0x08007d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cec:	f7fe fb14 	bl	8006318 <HAL_RCC_GetPCLK1Freq>
 8007cf0:	61b8      	str	r0, [r7, #24]
        break;
 8007cf2:	e013      	b.n	8007d1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cf4:	f7fe fb24 	bl	8006340 <HAL_RCC_GetPCLK2Freq>
 8007cf8:	61b8      	str	r0, [r7, #24]
        break;
 8007cfa:	e00f      	b.n	8007d1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cfc:	4b4b      	ldr	r3, [pc, #300]	@ (8007e2c <UART_SetConfig+0x4c4>)
 8007cfe:	61bb      	str	r3, [r7, #24]
        break;
 8007d00:	e00c      	b.n	8007d1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d02:	f7fe fa37 	bl	8006174 <HAL_RCC_GetSysClockFreq>
 8007d06:	61b8      	str	r0, [r7, #24]
        break;
 8007d08:	e008      	b.n	8007d1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d0e:	61bb      	str	r3, [r7, #24]
        break;
 8007d10:	e004      	b.n	8007d1c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	77bb      	strb	r3, [r7, #30]
        break;
 8007d1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d074      	beq.n	8007e0c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	005a      	lsls	r2, r3, #1
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	085b      	lsrs	r3, r3, #1
 8007d2c:	441a      	add	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b0f      	cmp	r3, #15
 8007d3c:	d916      	bls.n	8007d6c <UART_SetConfig+0x404>
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d44:	d212      	bcs.n	8007d6c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	f023 030f 	bic.w	r3, r3, #15
 8007d4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	085b      	lsrs	r3, r3, #1
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	89fb      	ldrh	r3, [r7, #14]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	89fa      	ldrh	r2, [r7, #14]
 8007d68:	60da      	str	r2, [r3, #12]
 8007d6a:	e04f      	b.n	8007e0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	77bb      	strb	r3, [r7, #30]
 8007d70:	e04c      	b.n	8007e0c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d72:	7ffb      	ldrb	r3, [r7, #31]
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d828      	bhi.n	8007dca <UART_SetConfig+0x462>
 8007d78:	a201      	add	r2, pc, #4	@ (adr r2, 8007d80 <UART_SetConfig+0x418>)
 8007d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7e:	bf00      	nop
 8007d80:	08007da5 	.word	0x08007da5
 8007d84:	08007dad 	.word	0x08007dad
 8007d88:	08007db5 	.word	0x08007db5
 8007d8c:	08007dcb 	.word	0x08007dcb
 8007d90:	08007dbb 	.word	0x08007dbb
 8007d94:	08007dcb 	.word	0x08007dcb
 8007d98:	08007dcb 	.word	0x08007dcb
 8007d9c:	08007dcb 	.word	0x08007dcb
 8007da0:	08007dc3 	.word	0x08007dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007da4:	f7fe fab8 	bl	8006318 <HAL_RCC_GetPCLK1Freq>
 8007da8:	61b8      	str	r0, [r7, #24]
        break;
 8007daa:	e013      	b.n	8007dd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dac:	f7fe fac8 	bl	8006340 <HAL_RCC_GetPCLK2Freq>
 8007db0:	61b8      	str	r0, [r7, #24]
        break;
 8007db2:	e00f      	b.n	8007dd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007db4:	4b1d      	ldr	r3, [pc, #116]	@ (8007e2c <UART_SetConfig+0x4c4>)
 8007db6:	61bb      	str	r3, [r7, #24]
        break;
 8007db8:	e00c      	b.n	8007dd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dba:	f7fe f9db 	bl	8006174 <HAL_RCC_GetSysClockFreq>
 8007dbe:	61b8      	str	r0, [r7, #24]
        break;
 8007dc0:	e008      	b.n	8007dd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dc6:	61bb      	str	r3, [r7, #24]
        break;
 8007dc8:	e004      	b.n	8007dd4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	77bb      	strb	r3, [r7, #30]
        break;
 8007dd2:	bf00      	nop
    }

    if (pclk != 0U)
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d018      	beq.n	8007e0c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	085a      	lsrs	r2, r3, #1
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	441a      	add	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	2b0f      	cmp	r3, #15
 8007df2:	d909      	bls.n	8007e08 <UART_SetConfig+0x4a0>
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dfa:	d205      	bcs.n	8007e08 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	60da      	str	r2, [r3, #12]
 8007e06:	e001      	b.n	8007e0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007e18:	7fbb      	ldrb	r3, [r7, #30]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3720      	adds	r7, #32
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	40007c00 	.word	0x40007c00
 8007e28:	40023800 	.word	0x40023800
 8007e2c:	00f42400 	.word	0x00f42400

08007e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3c:	f003 0308 	and.w	r3, r3, #8
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00a      	beq.n	8007e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00a      	beq.n	8007e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00a      	beq.n	8007e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea2:	f003 0304 	and.w	r3, r3, #4
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00a      	beq.n	8007ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec4:	f003 0310 	and.w	r3, r3, #16
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00a      	beq.n	8007ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee6:	f003 0320 	and.w	r3, r3, #32
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00a      	beq.n	8007f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	430a      	orrs	r2, r1
 8007f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01a      	beq.n	8007f46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	430a      	orrs	r2, r1
 8007f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f2e:	d10a      	bne.n	8007f46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	430a      	orrs	r2, r1
 8007f66:	605a      	str	r2, [r3, #4]
  }
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08c      	sub	sp, #48	@ 0x30
 8007f78:	af02      	add	r7, sp, #8
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f84:	f7fa fb3e 	bl	8002604 <HAL_GetTick>
 8007f88:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0308 	and.w	r3, r3, #8
 8007f94:	2b08      	cmp	r3, #8
 8007f96:	d12e      	bne.n	8007ff6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f83b 	bl	8008022 <UART_WaitOnFlagUntilTimeout>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d021      	beq.n	8007ff6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	e853 3f00 	ldrex	r3, [r3]
 8007fbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fc6:	623b      	str	r3, [r7, #32]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	6a3b      	ldr	r3, [r7, #32]
 8007fd0:	61fb      	str	r3, [r7, #28]
 8007fd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	69b9      	ldr	r1, [r7, #24]
 8007fd6:	69fa      	ldr	r2, [r7, #28]
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	617b      	str	r3, [r7, #20]
   return(result);
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e6      	bne.n	8007fb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e011      	b.n	800801a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3728      	adds	r7, #40	@ 0x28
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b084      	sub	sp, #16
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	603b      	str	r3, [r7, #0]
 800802e:	4613      	mov	r3, r2
 8008030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008032:	e04f      	b.n	80080d4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800803a:	d04b      	beq.n	80080d4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800803c:	f7fa fae2 	bl	8002604 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	429a      	cmp	r2, r3
 800804a:	d302      	bcc.n	8008052 <UART_WaitOnFlagUntilTimeout+0x30>
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e04e      	b.n	80080f4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b00      	cmp	r3, #0
 8008062:	d037      	beq.n	80080d4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	2b80      	cmp	r3, #128	@ 0x80
 8008068:	d034      	beq.n	80080d4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2b40      	cmp	r3, #64	@ 0x40
 800806e:	d031      	beq.n	80080d4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	f003 0308 	and.w	r3, r3, #8
 800807a:	2b08      	cmp	r3, #8
 800807c:	d110      	bne.n	80080a0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2208      	movs	r2, #8
 8008084:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 f8fe 	bl	8008288 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2208      	movs	r2, #8
 8008090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e029      	b.n	80080f4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080ae:	d111      	bne.n	80080d4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 f8e4 	bl	8008288 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2220      	movs	r2, #32
 80080c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e00f      	b.n	80080f4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	69da      	ldr	r2, [r3, #28]
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	4013      	ands	r3, r2
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	bf0c      	ite	eq
 80080e4:	2301      	moveq	r3, #1
 80080e6:	2300      	movne	r3, #0
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	461a      	mov	r2, r3
 80080ec:	79fb      	ldrb	r3, [r7, #7]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d0a0      	beq.n	8008034 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b097      	sub	sp, #92	@ 0x5c
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	4613      	mov	r3, r2
 8008108:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	88fa      	ldrh	r2, [r7, #6]
 8008114:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	88fa      	ldrh	r2, [r7, #6]
 800811c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800812e:	d10e      	bne.n	800814e <UART_Start_Receive_IT+0x52>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d105      	bne.n	8008144 <UART_Start_Receive_IT+0x48>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800813e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008142:	e02d      	b.n	80081a0 <UART_Start_Receive_IT+0xa4>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	22ff      	movs	r2, #255	@ 0xff
 8008148:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800814c:	e028      	b.n	80081a0 <UART_Start_Receive_IT+0xa4>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10d      	bne.n	8008172 <UART_Start_Receive_IT+0x76>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d104      	bne.n	8008168 <UART_Start_Receive_IT+0x6c>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	22ff      	movs	r2, #255	@ 0xff
 8008162:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008166:	e01b      	b.n	80081a0 <UART_Start_Receive_IT+0xa4>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	227f      	movs	r2, #127	@ 0x7f
 800816c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008170:	e016      	b.n	80081a0 <UART_Start_Receive_IT+0xa4>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800817a:	d10d      	bne.n	8008198 <UART_Start_Receive_IT+0x9c>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d104      	bne.n	800818e <UART_Start_Receive_IT+0x92>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	227f      	movs	r2, #127	@ 0x7f
 8008188:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800818c:	e008      	b.n	80081a0 <UART_Start_Receive_IT+0xa4>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	223f      	movs	r2, #63	@ 0x3f
 8008192:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008196:	e003      	b.n	80081a0 <UART_Start_Receive_IT+0xa4>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2222      	movs	r2, #34	@ 0x22
 80081ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3308      	adds	r3, #8
 80081b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081ba:	e853 3f00 	ldrex	r3, [r3]
 80081be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c2:	f043 0301 	orr.w	r3, r3, #1
 80081c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3308      	adds	r3, #8
 80081ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80081d0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80081d2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081d8:	e841 2300 	strex	r3, r2, [r1]
 80081dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80081de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1e5      	bne.n	80081b0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ec:	d107      	bne.n	80081fe <UART_Start_Receive_IT+0x102>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d103      	bne.n	80081fe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4a21      	ldr	r2, [pc, #132]	@ (8008280 <UART_Start_Receive_IT+0x184>)
 80081fa:	669a      	str	r2, [r3, #104]	@ 0x68
 80081fc:	e002      	b.n	8008204 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	4a20      	ldr	r2, [pc, #128]	@ (8008284 <UART_Start_Receive_IT+0x188>)
 8008202:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d019      	beq.n	8008240 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008214:	e853 3f00 	ldrex	r3, [r3]
 8008218:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800821a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008220:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800822a:	637b      	str	r3, [r7, #52]	@ 0x34
 800822c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008230:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e6      	bne.n	800820c <UART_Start_Receive_IT+0x110>
 800823e:	e018      	b.n	8008272 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	e853 3f00 	ldrex	r3, [r3]
 800824c:	613b      	str	r3, [r7, #16]
   return(result);
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f043 0320 	orr.w	r3, r3, #32
 8008254:	653b      	str	r3, [r7, #80]	@ 0x50
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800825e:	623b      	str	r3, [r7, #32]
 8008260:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008262:	69f9      	ldr	r1, [r7, #28]
 8008264:	6a3a      	ldr	r2, [r7, #32]
 8008266:	e841 2300 	strex	r3, r2, [r1]
 800826a:	61bb      	str	r3, [r7, #24]
   return(result);
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1e6      	bne.n	8008240 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	375c      	adds	r7, #92	@ 0x5c
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	08008579 	.word	0x08008579
 8008284:	080083d1 	.word	0x080083d1

08008288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008288:	b480      	push	{r7}
 800828a:	b095      	sub	sp, #84	@ 0x54
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008298:	e853 3f00 	ldrex	r3, [r3]
 800829c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800829e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80082b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082b6:	e841 2300 	strex	r3, r2, [r1]
 80082ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80082bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1e6      	bne.n	8008290 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3308      	adds	r3, #8
 80082c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	e853 3f00 	ldrex	r3, [r3]
 80082d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	f023 0301 	bic.w	r3, r3, #1
 80082d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3308      	adds	r3, #8
 80082e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082ea:	e841 2300 	strex	r3, r2, [r1]
 80082ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e5      	bne.n	80082c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d118      	bne.n	8008330 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	e853 3f00 	ldrex	r3, [r3]
 800830a:	60bb      	str	r3, [r7, #8]
   return(result);
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f023 0310 	bic.w	r3, r3, #16
 8008312:	647b      	str	r3, [r7, #68]	@ 0x44
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	461a      	mov	r2, r3
 800831a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800831c:	61bb      	str	r3, [r7, #24]
 800831e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008320:	6979      	ldr	r1, [r7, #20]
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	e841 2300 	strex	r3, r2, [r1]
 8008328:	613b      	str	r3, [r7, #16]
   return(result);
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e6      	bne.n	80082fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2220      	movs	r2, #32
 8008334:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008344:	bf00      	nop
 8008346:	3754      	adds	r7, #84	@ 0x54
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800835c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f7ff fae4 	bl	800793c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008374:	bf00      	nop
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b088      	sub	sp, #32
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	60bb      	str	r3, [r7, #8]
   return(result);
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008398:	61fb      	str	r3, [r7, #28]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	61bb      	str	r3, [r7, #24]
 80083a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a6:	6979      	ldr	r1, [r7, #20]
 80083a8:	69ba      	ldr	r2, [r7, #24]
 80083aa:	e841 2300 	strex	r3, r2, [r1]
 80083ae:	613b      	str	r3, [r7, #16]
   return(result);
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1e6      	bne.n	8008384 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2220      	movs	r2, #32
 80083ba:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f7ff fab0 	bl	8007928 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083c8:	bf00      	nop
 80083ca:	3720      	adds	r7, #32
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b09c      	sub	sp, #112	@ 0x70
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083e8:	2b22      	cmp	r3, #34	@ 0x22
 80083ea:	f040 80b9 	bne.w	8008560 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80083f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80083fc:	b2d9      	uxtb	r1, r3
 80083fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008402:	b2da      	uxtb	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008408:	400a      	ands	r2, r1
 800840a:	b2d2      	uxtb	r2, r2
 800840c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008412:	1c5a      	adds	r2, r3, #1
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800841e:	b29b      	uxth	r3, r3
 8008420:	3b01      	subs	r3, #1
 8008422:	b29a      	uxth	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008430:	b29b      	uxth	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	f040 809c 	bne.w	8008570 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008440:	e853 3f00 	ldrex	r3, [r3]
 8008444:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008448:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800844c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008456:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008458:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800845c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008464:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1e6      	bne.n	8008438 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3308      	adds	r3, #8
 8008470:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800847a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800847c:	f023 0301 	bic.w	r3, r3, #1
 8008480:	667b      	str	r3, [r7, #100]	@ 0x64
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3308      	adds	r3, #8
 8008488:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800848a:	647a      	str	r2, [r7, #68]	@ 0x44
 800848c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008490:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008492:	e841 2300 	strex	r3, r2, [r1]
 8008496:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e5      	bne.n	800846a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2220      	movs	r2, #32
 80084a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d018      	beq.n	80084f2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c8:	e853 3f00 	ldrex	r3, [r3]
 80084cc:	623b      	str	r3, [r7, #32]
   return(result);
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80084d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	461a      	mov	r2, r3
 80084dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084de:	633b      	str	r3, [r7, #48]	@ 0x30
 80084e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084e6:	e841 2300 	strex	r3, r2, [r1]
 80084ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1e6      	bne.n	80084c0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d12e      	bne.n	8008558 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	e853 3f00 	ldrex	r3, [r3]
 800850c:	60fb      	str	r3, [r7, #12]
   return(result);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f023 0310 	bic.w	r3, r3, #16
 8008514:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800851e:	61fb      	str	r3, [r7, #28]
 8008520:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	69b9      	ldr	r1, [r7, #24]
 8008524:	69fa      	ldr	r2, [r7, #28]
 8008526:	e841 2300 	strex	r3, r2, [r1]
 800852a:	617b      	str	r3, [r7, #20]
   return(result);
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e6      	bne.n	8008500 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	69db      	ldr	r3, [r3, #28]
 8008538:	f003 0310 	and.w	r3, r3, #16
 800853c:	2b10      	cmp	r3, #16
 800853e:	d103      	bne.n	8008548 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2210      	movs	r2, #16
 8008546:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff f9fd 	bl	8007950 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008556:	e00b      	b.n	8008570 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7f8 f823 	bl	80005a4 <HAL_UART_RxCpltCallback>
}
 800855e:	e007      	b.n	8008570 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	699a      	ldr	r2, [r3, #24]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f042 0208 	orr.w	r2, r2, #8
 800856e:	619a      	str	r2, [r3, #24]
}
 8008570:	bf00      	nop
 8008572:	3770      	adds	r7, #112	@ 0x70
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b09c      	sub	sp, #112	@ 0x70
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008586:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008590:	2b22      	cmp	r3, #34	@ 0x22
 8008592:	f040 80b9 	bne.w	8008708 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800859c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80085a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80085aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80085ae:	4013      	ands	r3, r2
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80085b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ba:	1c9a      	adds	r2, r3, #2
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	3b01      	subs	r3, #1
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80085d8:	b29b      	uxth	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f040 809c 	bne.w	8008718 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085e8:	e853 3f00 	ldrex	r3, [r3]
 80085ec:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80085ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	461a      	mov	r2, r3
 80085fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8008600:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008602:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008604:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008606:	e841 2300 	strex	r3, r2, [r1]
 800860a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800860c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1e6      	bne.n	80085e0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3308      	adds	r3, #8
 8008618:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008624:	f023 0301 	bic.w	r3, r3, #1
 8008628:	663b      	str	r3, [r7, #96]	@ 0x60
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3308      	adds	r3, #8
 8008630:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008632:	643a      	str	r2, [r7, #64]	@ 0x40
 8008634:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008636:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008638:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1e5      	bne.n	8008612 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2220      	movs	r2, #32
 800864a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d018      	beq.n	800869a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866e:	6a3b      	ldr	r3, [r7, #32]
 8008670:	e853 3f00 	ldrex	r3, [r3]
 8008674:	61fb      	str	r3, [r7, #28]
   return(result);
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800867c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008686:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008688:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800868c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800868e:	e841 2300 	strex	r3, r2, [r1]
 8008692:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1e6      	bne.n	8008668 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d12e      	bne.n	8008700 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	e853 3f00 	ldrex	r3, [r3]
 80086b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	f023 0310 	bic.w	r3, r3, #16
 80086bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80086c6:	61bb      	str	r3, [r7, #24]
 80086c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ca:	6979      	ldr	r1, [r7, #20]
 80086cc:	69ba      	ldr	r2, [r7, #24]
 80086ce:	e841 2300 	strex	r3, r2, [r1]
 80086d2:	613b      	str	r3, [r7, #16]
   return(result);
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1e6      	bne.n	80086a8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	69db      	ldr	r3, [r3, #28]
 80086e0:	f003 0310 	and.w	r3, r3, #16
 80086e4:	2b10      	cmp	r3, #16
 80086e6:	d103      	bne.n	80086f0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2210      	movs	r2, #16
 80086ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80086f6:	4619      	mov	r1, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7ff f929 	bl	8007950 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086fe:	e00b      	b.n	8008718 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7f7 ff4f 	bl	80005a4 <HAL_UART_RxCpltCallback>
}
 8008706:	e007      	b.n	8008718 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	699a      	ldr	r2, [r3, #24]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f042 0208 	orr.w	r2, r2, #8
 8008716:	619a      	str	r2, [r3, #24]
}
 8008718:	bf00      	nop
 800871a:	3770      	adds	r7, #112	@ 0x70
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d121      	bne.n	8008776 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	4b27      	ldr	r3, [pc, #156]	@ (80087d4 <FMC_SDRAM_Init+0xb4>)
 8008738:	4013      	ands	r3, r2
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	6851      	ldr	r1, [r2, #4]
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	6892      	ldr	r2, [r2, #8]
 8008742:	4311      	orrs	r1, r2
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	68d2      	ldr	r2, [r2, #12]
 8008748:	4311      	orrs	r1, r2
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	6912      	ldr	r2, [r2, #16]
 800874e:	4311      	orrs	r1, r2
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	6952      	ldr	r2, [r2, #20]
 8008754:	4311      	orrs	r1, r2
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	6992      	ldr	r2, [r2, #24]
 800875a:	4311      	orrs	r1, r2
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	69d2      	ldr	r2, [r2, #28]
 8008760:	4311      	orrs	r1, r2
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	6a12      	ldr	r2, [r2, #32]
 8008766:	4311      	orrs	r1, r2
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800876c:	430a      	orrs	r2, r1
 800876e:	431a      	orrs	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	e026      	b.n	80087c4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	69d9      	ldr	r1, [r3, #28]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	4319      	orrs	r1, r3
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800878c:	430b      	orrs	r3, r1
 800878e:	431a      	orrs	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	4b0e      	ldr	r3, [pc, #56]	@ (80087d4 <FMC_SDRAM_Init+0xb4>)
 800879a:	4013      	ands	r3, r2
 800879c:	683a      	ldr	r2, [r7, #0]
 800879e:	6851      	ldr	r1, [r2, #4]
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	6892      	ldr	r2, [r2, #8]
 80087a4:	4311      	orrs	r1, r2
 80087a6:	683a      	ldr	r2, [r7, #0]
 80087a8:	68d2      	ldr	r2, [r2, #12]
 80087aa:	4311      	orrs	r1, r2
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	6912      	ldr	r2, [r2, #16]
 80087b0:	4311      	orrs	r1, r2
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	6952      	ldr	r2, [r2, #20]
 80087b6:	4311      	orrs	r1, r2
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	6992      	ldr	r2, [r2, #24]
 80087bc:	430a      	orrs	r2, r1
 80087be:	431a      	orrs	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	ffff8000 	.word	0xffff8000

080087d8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d128      	bne.n	800883c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	1e59      	subs	r1, r3, #1
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	3b01      	subs	r3, #1
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	4319      	orrs	r1, r3
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	3b01      	subs	r3, #1
 8008808:	021b      	lsls	r3, r3, #8
 800880a:	4319      	orrs	r1, r3
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	3b01      	subs	r3, #1
 8008812:	031b      	lsls	r3, r3, #12
 8008814:	4319      	orrs	r1, r3
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	3b01      	subs	r3, #1
 800881c:	041b      	lsls	r3, r3, #16
 800881e:	4319      	orrs	r1, r3
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	3b01      	subs	r3, #1
 8008826:	051b      	lsls	r3, r3, #20
 8008828:	4319      	orrs	r1, r3
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	3b01      	subs	r3, #1
 8008830:	061b      	lsls	r3, r3, #24
 8008832:	430b      	orrs	r3, r1
 8008834:	431a      	orrs	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	609a      	str	r2, [r3, #8]
 800883a:	e02d      	b.n	8008898 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	689a      	ldr	r2, [r3, #8]
 8008840:	4b19      	ldr	r3, [pc, #100]	@ (80088a8 <FMC_SDRAM_Timing_Init+0xd0>)
 8008842:	4013      	ands	r3, r2
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	68d2      	ldr	r2, [r2, #12]
 8008848:	3a01      	subs	r2, #1
 800884a:	0311      	lsls	r1, r2, #12
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	6952      	ldr	r2, [r2, #20]
 8008850:	3a01      	subs	r2, #1
 8008852:	0512      	lsls	r2, r2, #20
 8008854:	430a      	orrs	r2, r1
 8008856:	431a      	orrs	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	1e59      	subs	r1, r3, #1
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	3b01      	subs	r3, #1
 8008870:	011b      	lsls	r3, r3, #4
 8008872:	4319      	orrs	r1, r3
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	3b01      	subs	r3, #1
 800887a:	021b      	lsls	r3, r3, #8
 800887c:	4319      	orrs	r1, r3
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	3b01      	subs	r3, #1
 8008884:	041b      	lsls	r3, r3, #16
 8008886:	4319      	orrs	r1, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	3b01      	subs	r3, #1
 800888e:	061b      	lsls	r3, r3, #24
 8008890:	430b      	orrs	r3, r1
 8008892:	431a      	orrs	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	ff0f0fff 	.word	0xff0f0fff

080088ac <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	691a      	ldr	r2, [r3, #16]
 80088bc:	4b0c      	ldr	r3, [pc, #48]	@ (80088f0 <FMC_SDRAM_SendCommand+0x44>)
 80088be:	4013      	ands	r3, r2
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	6811      	ldr	r1, [r2, #0]
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	6852      	ldr	r2, [r2, #4]
 80088c8:	4311      	orrs	r1, r2
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	6892      	ldr	r2, [r2, #8]
 80088ce:	3a01      	subs	r2, #1
 80088d0:	0152      	lsls	r2, r2, #5
 80088d2:	4311      	orrs	r1, r2
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	68d2      	ldr	r2, [r2, #12]
 80088d8:	0252      	lsls	r2, r2, #9
 80088da:	430a      	orrs	r2, r1
 80088dc:	431a      	orrs	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	ffc00000 	.word	0xffc00000

080088f4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	695a      	ldr	r2, [r3, #20]
 8008902:	4b07      	ldr	r3, [pc, #28]	@ (8008920 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8008904:	4013      	ands	r3, r2
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	0052      	lsls	r2, r2, #1
 800890a:	431a      	orrs	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	ffffc001 	.word	0xffffc001

08008924 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f043 0201 	orr.w	r2, r3, #1
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008946:	b480      	push	{r7}
 8008948:	b083      	sub	sp, #12
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f023 0201 	bic.w	r2, r3, #1
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008972:	2300      	movs	r3, #0
 8008974:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3301      	adds	r3, #1
 800897a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008982:	d901      	bls.n	8008988 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e01b      	b.n	80089c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	daf2      	bge.n	8008976 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	019b      	lsls	r3, r3, #6
 8008998:	f043 0220 	orr.w	r2, r3, #32
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	3301      	adds	r3, #1
 80089a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089ac:	d901      	bls.n	80089b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e006      	b.n	80089c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	f003 0320 	and.w	r3, r3, #32
 80089ba:	2b20      	cmp	r3, #32
 80089bc:	d0f0      	beq.n	80089a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3301      	adds	r3, #1
 80089dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089e4:	d901      	bls.n	80089ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e018      	b.n	8008a1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	daf2      	bge.n	80089d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2210      	movs	r2, #16
 80089fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	3301      	adds	r3, #1
 8008a00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a08:	d901      	bls.n	8008a0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e006      	b.n	8008a1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	f003 0310 	and.w	r3, r3, #16
 8008a16:	2b10      	cmp	r3, #16
 8008a18:	d0f0      	beq.n	80089fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b08b      	sub	sp, #44	@ 0x2c
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	4613      	mov	r3, r2
 8008a34:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008a3e:	88fb      	ldrh	r3, [r7, #6]
 8008a40:	089b      	lsrs	r3, r3, #2
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008a46:	88fb      	ldrh	r3, [r7, #6]
 8008a48:	f003 0303 	and.w	r3, r3, #3
 8008a4c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008a4e:	2300      	movs	r3, #0
 8008a50:	623b      	str	r3, [r7, #32]
 8008a52:	e014      	b.n	8008a7e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a62:	3301      	adds	r3, #1
 8008a64:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a68:	3301      	adds	r3, #1
 8008a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6e:	3301      	adds	r3, #1
 8008a70:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a74:	3301      	adds	r3, #1
 8008a76:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	623b      	str	r3, [r7, #32]
 8008a7e:	6a3a      	ldr	r2, [r7, #32]
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d3e6      	bcc.n	8008a54 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a86:	8bfb      	ldrh	r3, [r7, #30]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d01e      	beq.n	8008aca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a96:	461a      	mov	r2, r3
 8008a98:	f107 0310 	add.w	r3, r7, #16
 8008a9c:	6812      	ldr	r2, [r2, #0]
 8008a9e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	00db      	lsls	r3, r3, #3
 8008aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab0:	701a      	strb	r2, [r3, #0]
      i++;
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	623b      	str	r3, [r7, #32]
      pDest++;
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aba:	3301      	adds	r3, #1
 8008abc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008abe:	8bfb      	ldrh	r3, [r7, #30]
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ac4:	8bfb      	ldrh	r3, [r7, #30]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1ea      	bne.n	8008aa0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	372c      	adds	r7, #44	@ 0x2c
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	4013      	ands	r3, r2
 8008aee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008af0:	68fb      	ldr	r3, [r7, #12]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3714      	adds	r7, #20
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b085      	sub	sp, #20
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	460b      	mov	r3, r1
 8008b08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008b0e:	78fb      	ldrb	r3, [r7, #3]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008b1e:	78fb      	ldrb	r3, [r7, #3]
 8008b20:	015a      	lsls	r2, r3, #5
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	4413      	add	r3, r2
 8008b26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	4013      	ands	r3, r2
 8008b30:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b32:	68bb      	ldr	r3, [r7, #8]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	695b      	ldr	r3, [r3, #20]
 8008b4c:	f003 0301 	and.w	r3, r3, #1
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008b7a:	f023 0303 	bic.w	r3, r3, #3
 8008b7e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	78fb      	ldrb	r3, [r7, #3]
 8008b8a:	f003 0303 	and.w	r3, r3, #3
 8008b8e:	68f9      	ldr	r1, [r7, #12]
 8008b90:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008b94:	4313      	orrs	r3, r2
 8008b96:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008b98:	78fb      	ldrb	r3, [r7, #3]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d107      	bne.n	8008bae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008baa:	6053      	str	r3, [r2, #4]
 8008bac:	e00c      	b.n	8008bc8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008bae:	78fb      	ldrb	r3, [r7, #3]
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d107      	bne.n	8008bc4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008bba:	461a      	mov	r2, r3
 8008bbc:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008bc0:	6053      	str	r3, [r2, #4]
 8008bc2:	e001      	b.n	8008bc8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e000      	b.n	8008bca <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b085      	sub	sp, #20
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	b29b      	uxth	r3, r3
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b089      	sub	sp, #36	@ 0x24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	460b      	mov	r3, r1
 8008c02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	015a      	lsls	r2, r3, #5
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	4413      	add	r3, r2
 8008c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	0c9b      	lsrs	r3, r3, #18
 8008c20:	f003 0303 	and.w	r3, r3, #3
 8008c24:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	015a      	lsls	r2, r3, #5
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	0fdb      	lsrs	r3, r3, #31
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	015a      	lsls	r2, r3, #5
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	4413      	add	r3, r2
 8008c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	0fdb      	lsrs	r3, r3, #31
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f003 0320 	and.w	r3, r3, #32
 8008c5a:	2b20      	cmp	r3, #32
 8008c5c:	d10d      	bne.n	8008c7a <USB_HC_Halt+0x82>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10a      	bne.n	8008c7a <USB_HC_Halt+0x82>
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d005      	beq.n	8008c76 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d002      	beq.n	8008c76 <USB_HC_Halt+0x7e>
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d101      	bne.n	8008c7a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	e0d8      	b.n	8008e2c <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <USB_HC_Halt+0x8e>
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d173      	bne.n	8008d6e <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	015a      	lsls	r2, r3, #5
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	0151      	lsls	r1, r2, #5
 8008c98:	69fa      	ldr	r2, [r7, #28]
 8008c9a:	440a      	add	r2, r1
 8008c9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ca0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ca4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f003 0320 	and.w	r3, r3, #32
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d14a      	bne.n	8008d48 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d133      	bne.n	8008d26 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	0151      	lsls	r1, r2, #5
 8008cd0:	69fa      	ldr	r2, [r7, #28]
 8008cd2:	440a      	add	r2, r1
 8008cd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cdc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	0151      	lsls	r1, r2, #5
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	440a      	add	r2, r1
 8008cf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cf8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008cfc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	3301      	adds	r3, #1
 8008d02:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d0a:	d82e      	bhi.n	8008d6a <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d22:	d0ec      	beq.n	8008cfe <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d24:	e081      	b.n	8008e2a <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	015a      	lsls	r2, r3, #5
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	0151      	lsls	r1, r2, #5
 8008d38:	69fa      	ldr	r2, [r7, #28]
 8008d3a:	440a      	add	r2, r1
 8008d3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d44:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d46:	e070      	b.n	8008e2a <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	0151      	lsls	r1, r2, #5
 8008d5a:	69fa      	ldr	r2, [r7, #28]
 8008d5c:	440a      	add	r2, r1
 8008d5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d66:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d68:	e05f      	b.n	8008e2a <USB_HC_Halt+0x232>
            break;
 8008d6a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d6c:	e05d      	b.n	8008e2a <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	0151      	lsls	r1, r2, #5
 8008d80:	69fa      	ldr	r2, [r7, #28]
 8008d82:	440a      	add	r2, r1
 8008d84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d8c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d133      	bne.n	8008e06 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	015a      	lsls	r2, r3, #5
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	4413      	add	r3, r2
 8008da6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	69ba      	ldr	r2, [r7, #24]
 8008dae:	0151      	lsls	r1, r2, #5
 8008db0:	69fa      	ldr	r2, [r7, #28]
 8008db2:	440a      	add	r2, r1
 8008db4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008db8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008dbc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	69ba      	ldr	r2, [r7, #24]
 8008dce:	0151      	lsls	r1, r2, #5
 8008dd0:	69fa      	ldr	r2, [r7, #28]
 8008dd2:	440a      	add	r2, r1
 8008dd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dd8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ddc:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	3301      	adds	r3, #1
 8008de2:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008dea:	d81d      	bhi.n	8008e28 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	015a      	lsls	r2, r3, #5
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e02:	d0ec      	beq.n	8008dde <USB_HC_Halt+0x1e6>
 8008e04:	e011      	b.n	8008e2a <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	69ba      	ldr	r2, [r7, #24]
 8008e16:	0151      	lsls	r1, r2, #5
 8008e18:	69fa      	ldr	r2, [r7, #28]
 8008e1a:	440a      	add	r2, r1
 8008e1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e24:	6013      	str	r3, [r2, #0]
 8008e26:	e000      	b.n	8008e2a <USB_HC_Halt+0x232>
          break;
 8008e28:	bf00      	nop
    }
  }

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3724      	adds	r7, #36	@ 0x24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b088      	sub	sp, #32
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7ff fd7a 	bl	8008946 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e52:	2110      	movs	r1, #16
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7ff fd87 	bl	8008968 <USB_FlushTxFifo>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff fdb1 	bl	80089cc <USB_FlushRxFifo>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d001      	beq.n	8008e74 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008e74:	2300      	movs	r3, #0
 8008e76:	61bb      	str	r3, [r7, #24]
 8008e78:	e01f      	b.n	8008eba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e90:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ea0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eae:	461a      	mov	r2, r3
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	61bb      	str	r3, [r7, #24]
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	2b0f      	cmp	r3, #15
 8008ebe:	d9dc      	bls.n	8008e7a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	61bb      	str	r3, [r7, #24]
 8008ec4:	e034      	b.n	8008f30 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008edc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ee4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008eec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008efa:	461a      	mov	r2, r3
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	3301      	adds	r3, #1
 8008f04:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f0c:	d80c      	bhi.n	8008f28 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f24:	d0ec      	beq.n	8008f00 <USB_StopHost+0xc8>
 8008f26:	e000      	b.n	8008f2a <USB_StopHost+0xf2>
        break;
 8008f28:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	61bb      	str	r3, [r7, #24]
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	2b0f      	cmp	r3, #15
 8008f34:	d9c7      	bls.n	8008ec6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f42:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f4a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff fce9 	bl	8008924 <USB_EnableGlobalInt>

  return ret;
 8008f52:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3720      	adds	r7, #32
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f804 	bl	8008f80 <USBH_HandleSof>
}
 8008f78:	bf00      	nop
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b0b      	cmp	r3, #11
 8008f90:	d10a      	bne.n	8008fa8 <USBH_HandleSof+0x28>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d005      	beq.n	8008fa8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	4798      	blx	r3
  }
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	f000 f8ae 	bl	8009138 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008fdc:	bf00      	nop
}
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008ff4:	bf00      	nop
}
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009034:	2200      	movs	r2, #0
 8009036:	4619      	mov	r1, r3
 8009038:	f000 f87e 	bl	8009138 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b082      	sub	sp, #8
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f001 f958 	bl	800a31c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	791b      	ldrb	r3, [r3, #4]
 8009070:	4619      	mov	r1, r3
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f830 	bl	80090d8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	795b      	ldrb	r3, [r3, #5]
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f82a 	bl	80090d8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009098:	2200      	movs	r2, #0
 800909a:	4619      	mov	r1, r3
 800909c:	f000 f84c 	bl	8009138 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b082      	sub	sp, #8
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80090c6:	2200      	movs	r2, #0
 80090c8:	4619      	mov	r1, r3
 80090ca:	f000 f835 	bl	8009138 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80090e4:	78fb      	ldrb	r3, [r7, #3]
 80090e6:	2b0f      	cmp	r3, #15
 80090e8:	d80d      	bhi.n	8009106 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80090ea:	78fb      	ldrb	r3, [r7, #3]
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	33e0      	adds	r3, #224	@ 0xe0
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4413      	add	r3, r2
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80090fc:	6879      	ldr	r1, [r7, #4]
 80090fe:	33e0      	adds	r3, #224	@ 0xe0
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	440b      	add	r3, r1
 8009104:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800911a:	f3ef 8305 	mrs	r3, IPSR
 800911e:	607b      	str	r3, [r7, #4]
  return(result);
 8009120:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009122:	2b00      	cmp	r3, #0
 8009124:	bf14      	ite	ne
 8009126:	2301      	movne	r3, #1
 8009128:	2300      	moveq	r3, #0
 800912a:	b2db      	uxtb	r3, r3
}
 800912c:	4618      	mov	r0, r3
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b086      	sub	sp, #24
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009144:	2300      	movs	r3, #0
 8009146:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <osMessagePut+0x1e>
    ticks = 1;
 8009152:	2301      	movs	r3, #1
 8009154:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009156:	f7ff ffdd 	bl	8009114 <inHandlerMode>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d018      	beq.n	8009192 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009160:	f107 0210 	add.w	r2, r7, #16
 8009164:	f107 0108 	add.w	r1, r7, #8
 8009168:	2300      	movs	r3, #0
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f000 f9b6 	bl	80094dc <xQueueGenericSendFromISR>
 8009170:	4603      	mov	r3, r0
 8009172:	2b01      	cmp	r3, #1
 8009174:	d001      	beq.n	800917a <osMessagePut+0x42>
      return osErrorOS;
 8009176:	23ff      	movs	r3, #255	@ 0xff
 8009178:	e018      	b.n	80091ac <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d014      	beq.n	80091aa <osMessagePut+0x72>
 8009180:	4b0c      	ldr	r3, [pc, #48]	@ (80091b4 <osMessagePut+0x7c>)
 8009182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	e00b      	b.n	80091aa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009192:	f107 0108 	add.w	r1, r7, #8
 8009196:	2300      	movs	r3, #0
 8009198:	697a      	ldr	r2, [r7, #20]
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 f894 	bl	80092c8 <xQueueGenericSend>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d001      	beq.n	80091aa <osMessagePut+0x72>
      return osErrorOS;
 80091a6:	23ff      	movs	r3, #255	@ 0xff
 80091a8:	e000      	b.n	80091ac <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3718      	adds	r7, #24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	e000ed04 	.word	0xe000ed04

080091b8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	689a      	ldr	r2, [r3, #8]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	1c5a      	adds	r2, r3, #1
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	601a      	str	r2, [r3, #0]
}
 80091f4:	bf00      	nop
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009216:	d103      	bne.n	8009220 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	60fb      	str	r3, [r7, #12]
 800921e:	e00c      	b.n	800923a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3308      	adds	r3, #8
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	e002      	b.n	800922e <vListInsert+0x2e>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	60fb      	str	r3, [r7, #12]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	429a      	cmp	r2, r3
 8009238:	d2f6      	bcs.n	8009228 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	685a      	ldr	r2, [r3, #4]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	1c5a      	adds	r2, r3, #1
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	601a      	str	r2, [r3, #0]
}
 8009266:	bf00      	nop
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009272:	b480      	push	{r7}
 8009274:	b085      	sub	sp, #20
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	6892      	ldr	r2, [r2, #8]
 8009288:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	6852      	ldr	r2, [r2, #4]
 8009292:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	429a      	cmp	r2, r3
 800929c:	d103      	bne.n	80092a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	689a      	ldr	r2, [r3, #8]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	1e5a      	subs	r2, r3, #1
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
	...

080092c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b08e      	sub	sp, #56	@ 0x38
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
 80092d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80092d6:	2300      	movs	r3, #0
 80092d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80092de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10d      	bne.n	8009300 <xQueueGenericSend+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e8:	b672      	cpsid	i
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	b662      	cpsie	i
 80092f8:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80092fa:	bf00      	nop
 80092fc:	bf00      	nop
 80092fe:	e7fd      	b.n	80092fc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d103      	bne.n	800930e <xQueueGenericSend+0x46>
 8009306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800930a:	2b00      	cmp	r3, #0
 800930c:	d101      	bne.n	8009312 <xQueueGenericSend+0x4a>
 800930e:	2301      	movs	r3, #1
 8009310:	e000      	b.n	8009314 <xQueueGenericSend+0x4c>
 8009312:	2300      	movs	r3, #0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10d      	bne.n	8009334 <xQueueGenericSend+0x6c>
	__asm volatile
 8009318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931c:	b672      	cpsid	i
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	b662      	cpsie	i
 800932c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800932e:	bf00      	nop
 8009330:	bf00      	nop
 8009332:	e7fd      	b.n	8009330 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	2b02      	cmp	r3, #2
 8009338:	d103      	bne.n	8009342 <xQueueGenericSend+0x7a>
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800933e:	2b01      	cmp	r3, #1
 8009340:	d101      	bne.n	8009346 <xQueueGenericSend+0x7e>
 8009342:	2301      	movs	r3, #1
 8009344:	e000      	b.n	8009348 <xQueueGenericSend+0x80>
 8009346:	2300      	movs	r3, #0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10d      	bne.n	8009368 <xQueueGenericSend+0xa0>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009350:	b672      	cpsid	i
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	b662      	cpsie	i
 8009360:	623b      	str	r3, [r7, #32]
}
 8009362:	bf00      	nop
 8009364:	bf00      	nop
 8009366:	e7fd      	b.n	8009364 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009368:	f000 fd56 	bl	8009e18 <xTaskGetSchedulerState>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d102      	bne.n	8009378 <xQueueGenericSend+0xb0>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d101      	bne.n	800937c <xQueueGenericSend+0xb4>
 8009378:	2301      	movs	r3, #1
 800937a:	e000      	b.n	800937e <xQueueGenericSend+0xb6>
 800937c:	2300      	movs	r3, #0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10d      	bne.n	800939e <xQueueGenericSend+0xd6>
	__asm volatile
 8009382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009386:	b672      	cpsid	i
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	b662      	cpsie	i
 8009396:	61fb      	str	r3, [r7, #28]
}
 8009398:	bf00      	nop
 800939a:	bf00      	nop
 800939c:	e7fd      	b.n	800939a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800939e:	f000 fe63 	bl	800a068 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d302      	bcc.n	80093b4 <xQueueGenericSend+0xec>
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d129      	bne.n	8009408 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093b4:	683a      	ldr	r2, [r7, #0]
 80093b6:	68b9      	ldr	r1, [r7, #8]
 80093b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093ba:	f000 f932 	bl	8009622 <prvCopyDataToQueue>
 80093be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d010      	beq.n	80093ea <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ca:	3324      	adds	r3, #36	@ 0x24
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 fc13 	bl	8009bf8 <xTaskRemoveFromEventList>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d013      	beq.n	8009400 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80093d8:	4b3f      	ldr	r3, [pc, #252]	@ (80094d8 <xQueueGenericSend+0x210>)
 80093da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	e00a      	b.n	8009400 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80093ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d007      	beq.n	8009400 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80093f0:	4b39      	ldr	r3, [pc, #228]	@ (80094d8 <xQueueGenericSend+0x210>)
 80093f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009400:	f000 fe68 	bl	800a0d4 <vPortExitCritical>
				return pdPASS;
 8009404:	2301      	movs	r3, #1
 8009406:	e063      	b.n	80094d0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d103      	bne.n	8009416 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800940e:	f000 fe61 	bl	800a0d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009412:	2300      	movs	r3, #0
 8009414:	e05c      	b.n	80094d0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009418:	2b00      	cmp	r3, #0
 800941a:	d106      	bne.n	800942a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800941c:	f107 0314 	add.w	r3, r7, #20
 8009420:	4618      	mov	r0, r3
 8009422:	f000 fc4f 	bl	8009cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009426:	2301      	movs	r3, #1
 8009428:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800942a:	f000 fe53 	bl	800a0d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800942e:	f000 f9cd 	bl	80097cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009432:	f000 fe19 	bl	800a068 <vPortEnterCritical>
 8009436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009438:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800943c:	b25b      	sxtb	r3, r3
 800943e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009442:	d103      	bne.n	800944c <xQueueGenericSend+0x184>
 8009444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009446:	2200      	movs	r2, #0
 8009448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800944c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009452:	b25b      	sxtb	r3, r3
 8009454:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009458:	d103      	bne.n	8009462 <xQueueGenericSend+0x19a>
 800945a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945c:	2200      	movs	r2, #0
 800945e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009462:	f000 fe37 	bl	800a0d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009466:	1d3a      	adds	r2, r7, #4
 8009468:	f107 0314 	add.w	r3, r7, #20
 800946c:	4611      	mov	r1, r2
 800946e:	4618      	mov	r0, r3
 8009470:	f000 fc3e 	bl	8009cf0 <xTaskCheckForTimeOut>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d124      	bne.n	80094c4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800947a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800947c:	f000 f98d 	bl	800979a <prvIsQueueFull>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d018      	beq.n	80094b8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009488:	3310      	adds	r3, #16
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	4611      	mov	r1, r2
 800948e:	4618      	mov	r0, r3
 8009490:	f000 fb8a 	bl	8009ba8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009494:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009496:	f000 f92e 	bl	80096f6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800949a:	f000 f9a5 	bl	80097e8 <xTaskResumeAll>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f47f af7c 	bne.w	800939e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80094a6:	4b0c      	ldr	r3, [pc, #48]	@ (80094d8 <xQueueGenericSend+0x210>)
 80094a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	e772      	b.n	800939e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80094b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094ba:	f000 f91c 	bl	80096f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094be:	f000 f993 	bl	80097e8 <xTaskResumeAll>
 80094c2:	e76c      	b.n	800939e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80094c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094c6:	f000 f916 	bl	80096f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094ca:	f000 f98d 	bl	80097e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80094ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3738      	adds	r7, #56	@ 0x38
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	e000ed04 	.word	0xe000ed04

080094dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08e      	sub	sp, #56	@ 0x38
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]
 80094e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80094ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10d      	bne.n	8009510 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80094f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f8:	b672      	cpsid	i
 80094fa:	f383 8811 	msr	BASEPRI, r3
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	b662      	cpsie	i
 8009508:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800950a:	bf00      	nop
 800950c:	bf00      	nop
 800950e:	e7fd      	b.n	800950c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d103      	bne.n	800951e <xQueueGenericSendFromISR+0x42>
 8009516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800951a:	2b00      	cmp	r3, #0
 800951c:	d101      	bne.n	8009522 <xQueueGenericSendFromISR+0x46>
 800951e:	2301      	movs	r3, #1
 8009520:	e000      	b.n	8009524 <xQueueGenericSendFromISR+0x48>
 8009522:	2300      	movs	r3, #0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10d      	bne.n	8009544 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800952c:	b672      	cpsid	i
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	b662      	cpsie	i
 800953c:	623b      	str	r3, [r7, #32]
}
 800953e:	bf00      	nop
 8009540:	bf00      	nop
 8009542:	e7fd      	b.n	8009540 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	2b02      	cmp	r3, #2
 8009548:	d103      	bne.n	8009552 <xQueueGenericSendFromISR+0x76>
 800954a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800954e:	2b01      	cmp	r3, #1
 8009550:	d101      	bne.n	8009556 <xQueueGenericSendFromISR+0x7a>
 8009552:	2301      	movs	r3, #1
 8009554:	e000      	b.n	8009558 <xQueueGenericSendFromISR+0x7c>
 8009556:	2300      	movs	r3, #0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10d      	bne.n	8009578 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800955c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009560:	b672      	cpsid	i
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	b662      	cpsie	i
 8009570:	61fb      	str	r3, [r7, #28]
}
 8009572:	bf00      	nop
 8009574:	bf00      	nop
 8009576:	e7fd      	b.n	8009574 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009578:	f000 fe32 	bl	800a1e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800957c:	f3ef 8211 	mrs	r2, BASEPRI
 8009580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009584:	b672      	cpsid	i
 8009586:	f383 8811 	msr	BASEPRI, r3
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	b662      	cpsie	i
 8009594:	61ba      	str	r2, [r7, #24]
 8009596:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009598:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800959a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800959c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d302      	bcc.n	80095ae <xQueueGenericSendFromISR+0xd2>
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d12c      	bne.n	8009608 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80095ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095b8:	683a      	ldr	r2, [r7, #0]
 80095ba:	68b9      	ldr	r1, [r7, #8]
 80095bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095be:	f000 f830 	bl	8009622 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80095c2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80095c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095ca:	d112      	bne.n	80095f2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d016      	beq.n	8009602 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d6:	3324      	adds	r3, #36	@ 0x24
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 fb0d 	bl	8009bf8 <xTaskRemoveFromEventList>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00e      	beq.n	8009602 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00b      	beq.n	8009602 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2201      	movs	r2, #1
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	e007      	b.n	8009602 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80095f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80095f6:	3301      	adds	r3, #1
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	b25a      	sxtb	r2, r3
 80095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009602:	2301      	movs	r3, #1
 8009604:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8009606:	e001      	b.n	800960c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009608:	2300      	movs	r3, #0
 800960a:	637b      	str	r3, [r7, #52]	@ 0x34
 800960c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800960e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009616:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800961a:	4618      	mov	r0, r3
 800961c:	3738      	adds	r7, #56	@ 0x38
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b086      	sub	sp, #24
 8009626:	af00      	add	r7, sp, #0
 8009628:	60f8      	str	r0, [r7, #12]
 800962a:	60b9      	str	r1, [r7, #8]
 800962c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800962e:	2300      	movs	r3, #0
 8009630:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009636:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10d      	bne.n	800965c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d14d      	bne.n	80096e4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	4618      	mov	r0, r3
 800964e:	f000 fc01 	bl	8009e54 <xTaskPriorityDisinherit>
 8009652:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	609a      	str	r2, [r3, #8]
 800965a:	e043      	b.n	80096e4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d119      	bne.n	8009696 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6858      	ldr	r0, [r3, #4]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966a:	461a      	mov	r2, r3
 800966c:	68b9      	ldr	r1, [r7, #8]
 800966e:	f000 ff15 	bl	800a49c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800967a:	441a      	add	r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	429a      	cmp	r2, r3
 800968a:	d32b      	bcc.n	80096e4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	605a      	str	r2, [r3, #4]
 8009694:	e026      	b.n	80096e4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	68d8      	ldr	r0, [r3, #12]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800969e:	461a      	mov	r2, r3
 80096a0:	68b9      	ldr	r1, [r7, #8]
 80096a2:	f000 fefb 	bl	800a49c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	68da      	ldr	r2, [r3, #12]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ae:	425b      	negs	r3, r3
 80096b0:	441a      	add	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	68da      	ldr	r2, [r3, #12]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d207      	bcs.n	80096d2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	689a      	ldr	r2, [r3, #8]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ca:	425b      	negs	r3, r3
 80096cc:	441a      	add	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d105      	bne.n	80096e4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	3b01      	subs	r3, #1
 80096e2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	1c5a      	adds	r2, r3, #1
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80096ec:	697b      	ldr	r3, [r7, #20]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80096fe:	f000 fcb3 	bl	800a068 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009708:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800970a:	e011      	b.n	8009730 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009710:	2b00      	cmp	r3, #0
 8009712:	d012      	beq.n	800973a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	3324      	adds	r3, #36	@ 0x24
 8009718:	4618      	mov	r0, r3
 800971a:	f000 fa6d 	bl	8009bf8 <xTaskRemoveFromEventList>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d001      	beq.n	8009728 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009724:	f000 fb4c 	bl	8009dc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009728:	7bfb      	ldrb	r3, [r7, #15]
 800972a:	3b01      	subs	r3, #1
 800972c:	b2db      	uxtb	r3, r3
 800972e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009734:	2b00      	cmp	r3, #0
 8009736:	dce9      	bgt.n	800970c <prvUnlockQueue+0x16>
 8009738:	e000      	b.n	800973c <prvUnlockQueue+0x46>
					break;
 800973a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	22ff      	movs	r2, #255	@ 0xff
 8009740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009744:	f000 fcc6 	bl	800a0d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009748:	f000 fc8e 	bl	800a068 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009752:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009754:	e011      	b.n	800977a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d012      	beq.n	8009784 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	3310      	adds	r3, #16
 8009762:	4618      	mov	r0, r3
 8009764:	f000 fa48 	bl	8009bf8 <xTaskRemoveFromEventList>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800976e:	f000 fb27 	bl	8009dc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009772:	7bbb      	ldrb	r3, [r7, #14]
 8009774:	3b01      	subs	r3, #1
 8009776:	b2db      	uxtb	r3, r3
 8009778:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800977a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800977e:	2b00      	cmp	r3, #0
 8009780:	dce9      	bgt.n	8009756 <prvUnlockQueue+0x60>
 8009782:	e000      	b.n	8009786 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009784:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	22ff      	movs	r2, #255	@ 0xff
 800978a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800978e:	f000 fca1 	bl	800a0d4 <vPortExitCritical>
}
 8009792:	bf00      	nop
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b084      	sub	sp, #16
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097a2:	f000 fc61 	bl	800a068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d102      	bne.n	80097b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80097b2:	2301      	movs	r3, #1
 80097b4:	60fb      	str	r3, [r7, #12]
 80097b6:	e001      	b.n	80097bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80097b8:	2300      	movs	r3, #0
 80097ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097bc:	f000 fc8a 	bl	800a0d4 <vPortExitCritical>

	return xReturn;
 80097c0:	68fb      	ldr	r3, [r7, #12]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
	...

080097cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80097cc:	b480      	push	{r7}
 80097ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80097d0:	4b04      	ldr	r3, [pc, #16]	@ (80097e4 <vTaskSuspendAll+0x18>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3301      	adds	r3, #1
 80097d6:	4a03      	ldr	r2, [pc, #12]	@ (80097e4 <vTaskSuspendAll+0x18>)
 80097d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80097da:	bf00      	nop
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	2000068c 	.word	0x2000068c

080097e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097f2:	2300      	movs	r3, #0
 80097f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097f6:	4b43      	ldr	r3, [pc, #268]	@ (8009904 <xTaskResumeAll+0x11c>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10d      	bne.n	800981a <xTaskResumeAll+0x32>
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009802:	b672      	cpsid	i
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	b662      	cpsie	i
 8009812:	603b      	str	r3, [r7, #0]
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop
 8009818:	e7fd      	b.n	8009816 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800981a:	f000 fc25 	bl	800a068 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800981e:	4b39      	ldr	r3, [pc, #228]	@ (8009904 <xTaskResumeAll+0x11c>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	3b01      	subs	r3, #1
 8009824:	4a37      	ldr	r2, [pc, #220]	@ (8009904 <xTaskResumeAll+0x11c>)
 8009826:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009828:	4b36      	ldr	r3, [pc, #216]	@ (8009904 <xTaskResumeAll+0x11c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d161      	bne.n	80098f4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009830:	4b35      	ldr	r3, [pc, #212]	@ (8009908 <xTaskResumeAll+0x120>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d05d      	beq.n	80098f4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009838:	e02e      	b.n	8009898 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800983a:	4b34      	ldr	r3, [pc, #208]	@ (800990c <xTaskResumeAll+0x124>)
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	3318      	adds	r3, #24
 8009846:	4618      	mov	r0, r3
 8009848:	f7ff fd13 	bl	8009272 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3304      	adds	r3, #4
 8009850:	4618      	mov	r0, r3
 8009852:	f7ff fd0e 	bl	8009272 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800985a:	2201      	movs	r2, #1
 800985c:	409a      	lsls	r2, r3
 800985e:	4b2c      	ldr	r3, [pc, #176]	@ (8009910 <xTaskResumeAll+0x128>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4313      	orrs	r3, r2
 8009864:	4a2a      	ldr	r2, [pc, #168]	@ (8009910 <xTaskResumeAll+0x128>)
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800986c:	4613      	mov	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4a27      	ldr	r2, [pc, #156]	@ (8009914 <xTaskResumeAll+0x12c>)
 8009876:	441a      	add	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	3304      	adds	r3, #4
 800987c:	4619      	mov	r1, r3
 800987e:	4610      	mov	r0, r2
 8009880:	f7ff fc9a 	bl	80091b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009888:	4b23      	ldr	r3, [pc, #140]	@ (8009918 <xTaskResumeAll+0x130>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800988e:	429a      	cmp	r2, r3
 8009890:	d302      	bcc.n	8009898 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8009892:	4b22      	ldr	r3, [pc, #136]	@ (800991c <xTaskResumeAll+0x134>)
 8009894:	2201      	movs	r2, #1
 8009896:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009898:	4b1c      	ldr	r3, [pc, #112]	@ (800990c <xTaskResumeAll+0x124>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1cc      	bne.n	800983a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80098a6:	f000 fa97 	bl	8009dd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80098aa:	4b1d      	ldr	r3, [pc, #116]	@ (8009920 <xTaskResumeAll+0x138>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d010      	beq.n	80098d8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80098b6:	f000 f837 	bl	8009928 <xTaskIncrementTick>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80098c0:	4b16      	ldr	r3, [pc, #88]	@ (800991c <xTaskResumeAll+0x134>)
 80098c2:	2201      	movs	r2, #1
 80098c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	3b01      	subs	r3, #1
 80098ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1f1      	bne.n	80098b6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80098d2:	4b13      	ldr	r3, [pc, #76]	@ (8009920 <xTaskResumeAll+0x138>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098d8:	4b10      	ldr	r3, [pc, #64]	@ (800991c <xTaskResumeAll+0x134>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d009      	beq.n	80098f4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098e0:	2301      	movs	r3, #1
 80098e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009924 <xTaskResumeAll+0x13c>)
 80098e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098ea:	601a      	str	r2, [r3, #0]
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098f4:	f000 fbee 	bl	800a0d4 <vPortExitCritical>

	return xAlreadyYielded;
 80098f8:	68bb      	ldr	r3, [r7, #8]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	2000068c 	.word	0x2000068c
 8009908:	2000066c 	.word	0x2000066c
 800990c:	20000644 	.word	0x20000644
 8009910:	20000674 	.word	0x20000674
 8009914:	200005b0 	.word	0x200005b0
 8009918:	200005ac 	.word	0x200005ac
 800991c:	20000680 	.word	0x20000680
 8009920:	2000067c 	.word	0x2000067c
 8009924:	e000ed04 	.word	0xe000ed04

08009928 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800992e:	2300      	movs	r3, #0
 8009930:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009932:	4b50      	ldr	r3, [pc, #320]	@ (8009a74 <xTaskIncrementTick+0x14c>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	f040 808b 	bne.w	8009a52 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800993c:	4b4e      	ldr	r3, [pc, #312]	@ (8009a78 <xTaskIncrementTick+0x150>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	3301      	adds	r3, #1
 8009942:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009944:	4a4c      	ldr	r2, [pc, #304]	@ (8009a78 <xTaskIncrementTick+0x150>)
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d123      	bne.n	8009998 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009950:	4b4a      	ldr	r3, [pc, #296]	@ (8009a7c <xTaskIncrementTick+0x154>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00d      	beq.n	8009976 <xTaskIncrementTick+0x4e>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995e:	b672      	cpsid	i
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	b662      	cpsie	i
 800996e:	603b      	str	r3, [r7, #0]
}
 8009970:	bf00      	nop
 8009972:	bf00      	nop
 8009974:	e7fd      	b.n	8009972 <xTaskIncrementTick+0x4a>
 8009976:	4b41      	ldr	r3, [pc, #260]	@ (8009a7c <xTaskIncrementTick+0x154>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	60fb      	str	r3, [r7, #12]
 800997c:	4b40      	ldr	r3, [pc, #256]	@ (8009a80 <xTaskIncrementTick+0x158>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a3e      	ldr	r2, [pc, #248]	@ (8009a7c <xTaskIncrementTick+0x154>)
 8009982:	6013      	str	r3, [r2, #0]
 8009984:	4a3e      	ldr	r2, [pc, #248]	@ (8009a80 <xTaskIncrementTick+0x158>)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	4b3e      	ldr	r3, [pc, #248]	@ (8009a84 <xTaskIncrementTick+0x15c>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	3301      	adds	r3, #1
 8009990:	4a3c      	ldr	r2, [pc, #240]	@ (8009a84 <xTaskIncrementTick+0x15c>)
 8009992:	6013      	str	r3, [r2, #0]
 8009994:	f000 fa20 	bl	8009dd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009998:	4b3b      	ldr	r3, [pc, #236]	@ (8009a88 <xTaskIncrementTick+0x160>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d348      	bcc.n	8009a34 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099a2:	4b36      	ldr	r3, [pc, #216]	@ (8009a7c <xTaskIncrementTick+0x154>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d104      	bne.n	80099b6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ac:	4b36      	ldr	r3, [pc, #216]	@ (8009a88 <xTaskIncrementTick+0x160>)
 80099ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80099b2:	601a      	str	r2, [r3, #0]
					break;
 80099b4:	e03e      	b.n	8009a34 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099b6:	4b31      	ldr	r3, [pc, #196]	@ (8009a7c <xTaskIncrementTick+0x154>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d203      	bcs.n	80099d6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099ce:	4a2e      	ldr	r2, [pc, #184]	@ (8009a88 <xTaskIncrementTick+0x160>)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80099d4:	e02e      	b.n	8009a34 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	3304      	adds	r3, #4
 80099da:	4618      	mov	r0, r3
 80099dc:	f7ff fc49 	bl	8009272 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d004      	beq.n	80099f2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	3318      	adds	r3, #24
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7ff fc40 	bl	8009272 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f6:	2201      	movs	r2, #1
 80099f8:	409a      	lsls	r2, r3
 80099fa:	4b24      	ldr	r3, [pc, #144]	@ (8009a8c <xTaskIncrementTick+0x164>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	4a22      	ldr	r2, [pc, #136]	@ (8009a8c <xTaskIncrementTick+0x164>)
 8009a02:	6013      	str	r3, [r2, #0]
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a08:	4613      	mov	r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	4413      	add	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4a1f      	ldr	r2, [pc, #124]	@ (8009a90 <xTaskIncrementTick+0x168>)
 8009a12:	441a      	add	r2, r3
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	3304      	adds	r3, #4
 8009a18:	4619      	mov	r1, r3
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	f7ff fbcc 	bl	80091b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a24:	4b1b      	ldr	r3, [pc, #108]	@ (8009a94 <xTaskIncrementTick+0x16c>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d3b9      	bcc.n	80099a2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a32:	e7b6      	b.n	80099a2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a34:	4b17      	ldr	r3, [pc, #92]	@ (8009a94 <xTaskIncrementTick+0x16c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a3a:	4915      	ldr	r1, [pc, #84]	@ (8009a90 <xTaskIncrementTick+0x168>)
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4413      	add	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	440b      	add	r3, r1
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d907      	bls.n	8009a5c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	617b      	str	r3, [r7, #20]
 8009a50:	e004      	b.n	8009a5c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009a52:	4b11      	ldr	r3, [pc, #68]	@ (8009a98 <xTaskIncrementTick+0x170>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3301      	adds	r3, #1
 8009a58:	4a0f      	ldr	r2, [pc, #60]	@ (8009a98 <xTaskIncrementTick+0x170>)
 8009a5a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8009a9c <xTaskIncrementTick+0x174>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009a64:	2301      	movs	r3, #1
 8009a66:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009a68:	697b      	ldr	r3, [r7, #20]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3718      	adds	r7, #24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	2000068c 	.word	0x2000068c
 8009a78:	20000670 	.word	0x20000670
 8009a7c:	2000063c 	.word	0x2000063c
 8009a80:	20000640 	.word	0x20000640
 8009a84:	20000684 	.word	0x20000684
 8009a88:	20000688 	.word	0x20000688
 8009a8c:	20000674 	.word	0x20000674
 8009a90:	200005b0 	.word	0x200005b0
 8009a94:	200005ac 	.word	0x200005ac
 8009a98:	2000067c 	.word	0x2000067c
 8009a9c:	20000680 	.word	0x20000680

08009aa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8009b94 <vTaskSwitchContext+0xf4>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009aae:	4b3a      	ldr	r3, [pc, #232]	@ (8009b98 <vTaskSwitchContext+0xf8>)
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ab4:	e069      	b.n	8009b8a <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8009ab6:	4b38      	ldr	r3, [pc, #224]	@ (8009b98 <vTaskSwitchContext+0xf8>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009abc:	4b37      	ldr	r3, [pc, #220]	@ (8009b9c <vTaskSwitchContext+0xfc>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ac2:	61fb      	str	r3, [r7, #28]
 8009ac4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8009ac8:	61bb      	str	r3, [r7, #24]
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	69ba      	ldr	r2, [r7, #24]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d111      	bne.n	8009af8 <vTaskSwitchContext+0x58>
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	69ba      	ldr	r2, [r7, #24]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d10b      	bne.n	8009af8 <vTaskSwitchContext+0x58>
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	3308      	adds	r3, #8
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	69ba      	ldr	r2, [r7, #24]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d105      	bne.n	8009af8 <vTaskSwitchContext+0x58>
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	330c      	adds	r3, #12
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	69ba      	ldr	r2, [r7, #24]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d008      	beq.n	8009b0a <vTaskSwitchContext+0x6a>
 8009af8:	4b28      	ldr	r3, [pc, #160]	@ (8009b9c <vTaskSwitchContext+0xfc>)
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	4b27      	ldr	r3, [pc, #156]	@ (8009b9c <vTaskSwitchContext+0xfc>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3334      	adds	r3, #52	@ 0x34
 8009b02:	4619      	mov	r1, r3
 8009b04:	4610      	mov	r0, r2
 8009b06:	f7f6 fd41 	bl	800058c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b0a:	4b25      	ldr	r3, [pc, #148]	@ (8009ba0 <vTaskSwitchContext+0x100>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	fab3 f383 	clz	r3, r3
 8009b16:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009b18:	7afb      	ldrb	r3, [r7, #11]
 8009b1a:	f1c3 031f 	rsb	r3, r3, #31
 8009b1e:	617b      	str	r3, [r7, #20]
 8009b20:	4920      	ldr	r1, [pc, #128]	@ (8009ba4 <vTaskSwitchContext+0x104>)
 8009b22:	697a      	ldr	r2, [r7, #20]
 8009b24:	4613      	mov	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	440b      	add	r3, r1
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10d      	bne.n	8009b50 <vTaskSwitchContext+0xb0>
	__asm volatile
 8009b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b38:	b672      	cpsid	i
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	b662      	cpsie	i
 8009b48:	607b      	str	r3, [r7, #4]
}
 8009b4a:	bf00      	nop
 8009b4c:	bf00      	nop
 8009b4e:	e7fd      	b.n	8009b4c <vTaskSwitchContext+0xac>
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	4613      	mov	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4a12      	ldr	r2, [pc, #72]	@ (8009ba4 <vTaskSwitchContext+0x104>)
 8009b5c:	4413      	add	r3, r2
 8009b5e:	613b      	str	r3, [r7, #16]
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	685a      	ldr	r2, [r3, #4]
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	605a      	str	r2, [r3, #4]
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	685a      	ldr	r2, [r3, #4]
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	3308      	adds	r3, #8
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d104      	bne.n	8009b80 <vTaskSwitchContext+0xe0>
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	685a      	ldr	r2, [r3, #4]
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	605a      	str	r2, [r3, #4]
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	4a05      	ldr	r2, [pc, #20]	@ (8009b9c <vTaskSwitchContext+0xfc>)
 8009b88:	6013      	str	r3, [r2, #0]
}
 8009b8a:	bf00      	nop
 8009b8c:	3720      	adds	r7, #32
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	2000068c 	.word	0x2000068c
 8009b98:	20000680 	.word	0x20000680
 8009b9c:	200005ac 	.word	0x200005ac
 8009ba0:	20000674 	.word	0x20000674
 8009ba4:	200005b0 	.word	0x200005b0

08009ba8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10d      	bne.n	8009bd4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bbc:	b672      	cpsid	i
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	b662      	cpsie	i
 8009bcc:	60fb      	str	r3, [r7, #12]
}
 8009bce:	bf00      	nop
 8009bd0:	bf00      	nop
 8009bd2:	e7fd      	b.n	8009bd0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bd4:	4b07      	ldr	r3, [pc, #28]	@ (8009bf4 <vTaskPlaceOnEventList+0x4c>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	3318      	adds	r3, #24
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7ff fb0f 	bl	8009200 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009be2:	2101      	movs	r1, #1
 8009be4:	6838      	ldr	r0, [r7, #0]
 8009be6:	f000 f9c1 	bl	8009f6c <prvAddCurrentTaskToDelayedList>
}
 8009bea:	bf00      	nop
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	200005ac 	.word	0x200005ac

08009bf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10d      	bne.n	8009c2a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c12:	b672      	cpsid	i
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	b662      	cpsie	i
 8009c22:	60fb      	str	r3, [r7, #12]
}
 8009c24:	bf00      	nop
 8009c26:	bf00      	nop
 8009c28:	e7fd      	b.n	8009c26 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	3318      	adds	r3, #24
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7ff fb1f 	bl	8009272 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c34:	4b1d      	ldr	r3, [pc, #116]	@ (8009cac <xTaskRemoveFromEventList+0xb4>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d11c      	bne.n	8009c76 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	3304      	adds	r3, #4
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7ff fb16 	bl	8009272 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	409a      	lsls	r2, r3
 8009c4e:	4b18      	ldr	r3, [pc, #96]	@ (8009cb0 <xTaskRemoveFromEventList+0xb8>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	4a16      	ldr	r2, [pc, #88]	@ (8009cb0 <xTaskRemoveFromEventList+0xb8>)
 8009c56:	6013      	str	r3, [r2, #0]
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	4413      	add	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4a13      	ldr	r2, [pc, #76]	@ (8009cb4 <xTaskRemoveFromEventList+0xbc>)
 8009c66:	441a      	add	r2, r3
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	3304      	adds	r3, #4
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	4610      	mov	r0, r2
 8009c70:	f7ff faa2 	bl	80091b8 <vListInsertEnd>
 8009c74:	e005      	b.n	8009c82 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	3318      	adds	r3, #24
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	480e      	ldr	r0, [pc, #56]	@ (8009cb8 <xTaskRemoveFromEventList+0xc0>)
 8009c7e:	f7ff fa9b 	bl	80091b8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c86:	4b0d      	ldr	r3, [pc, #52]	@ (8009cbc <xTaskRemoveFromEventList+0xc4>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d905      	bls.n	8009c9c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c90:	2301      	movs	r3, #1
 8009c92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c94:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc0 <xTaskRemoveFromEventList+0xc8>)
 8009c96:	2201      	movs	r2, #1
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	e001      	b.n	8009ca0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ca0:	697b      	ldr	r3, [r7, #20]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3718      	adds	r7, #24
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	2000068c 	.word	0x2000068c
 8009cb0:	20000674 	.word	0x20000674
 8009cb4:	200005b0 	.word	0x200005b0
 8009cb8:	20000644 	.word	0x20000644
 8009cbc:	200005ac 	.word	0x200005ac
 8009cc0:	20000680 	.word	0x20000680

08009cc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ccc:	4b06      	ldr	r3, [pc, #24]	@ (8009ce8 <vTaskInternalSetTimeOutState+0x24>)
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009cd4:	4b05      	ldr	r3, [pc, #20]	@ (8009cec <vTaskInternalSetTimeOutState+0x28>)
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	605a      	str	r2, [r3, #4]
}
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	20000684 	.word	0x20000684
 8009cec:	20000670 	.word	0x20000670

08009cf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b088      	sub	sp, #32
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10d      	bne.n	8009d1c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d04:	b672      	cpsid	i
 8009d06:	f383 8811 	msr	BASEPRI, r3
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	b662      	cpsie	i
 8009d14:	613b      	str	r3, [r7, #16]
}
 8009d16:	bf00      	nop
 8009d18:	bf00      	nop
 8009d1a:	e7fd      	b.n	8009d18 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10d      	bne.n	8009d3e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8009d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d26:	b672      	cpsid	i
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	b662      	cpsie	i
 8009d36:	60fb      	str	r3, [r7, #12]
}
 8009d38:	bf00      	nop
 8009d3a:	bf00      	nop
 8009d3c:	e7fd      	b.n	8009d3a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009d3e:	f000 f993 	bl	800a068 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d42:	4b1d      	ldr	r3, [pc, #116]	@ (8009db8 <xTaskCheckForTimeOut+0xc8>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	69ba      	ldr	r2, [r7, #24]
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d5a:	d102      	bne.n	8009d62 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	61fb      	str	r3, [r7, #28]
 8009d60:	e023      	b.n	8009daa <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	4b15      	ldr	r3, [pc, #84]	@ (8009dbc <xTaskCheckForTimeOut+0xcc>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d007      	beq.n	8009d7e <xTaskCheckForTimeOut+0x8e>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	69ba      	ldr	r2, [r7, #24]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d302      	bcc.n	8009d7e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	61fb      	str	r3, [r7, #28]
 8009d7c:	e015      	b.n	8009daa <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d20b      	bcs.n	8009da0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	1ad2      	subs	r2, r2, r3
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f7ff ff95 	bl	8009cc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	61fb      	str	r3, [r7, #28]
 8009d9e:	e004      	b.n	8009daa <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	2200      	movs	r2, #0
 8009da4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009da6:	2301      	movs	r3, #1
 8009da8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009daa:	f000 f993 	bl	800a0d4 <vPortExitCritical>

	return xReturn;
 8009dae:	69fb      	ldr	r3, [r7, #28]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3720      	adds	r7, #32
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	20000670 	.word	0x20000670
 8009dbc:	20000684 	.word	0x20000684

08009dc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009dc4:	4b03      	ldr	r3, [pc, #12]	@ (8009dd4 <vTaskMissedYield+0x14>)
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	601a      	str	r2, [r3, #0]
}
 8009dca:	bf00      	nop
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr
 8009dd4:	20000680 	.word	0x20000680

08009dd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dde:	4b0c      	ldr	r3, [pc, #48]	@ (8009e10 <prvResetNextTaskUnblockTime+0x38>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d104      	bne.n	8009df2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009de8:	4b0a      	ldr	r3, [pc, #40]	@ (8009e14 <prvResetNextTaskUnblockTime+0x3c>)
 8009dea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009dee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009df0:	e008      	b.n	8009e04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009df2:	4b07      	ldr	r3, [pc, #28]	@ (8009e10 <prvResetNextTaskUnblockTime+0x38>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	4a04      	ldr	r2, [pc, #16]	@ (8009e14 <prvResetNextTaskUnblockTime+0x3c>)
 8009e02:	6013      	str	r3, [r2, #0]
}
 8009e04:	bf00      	nop
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	2000063c 	.word	0x2000063c
 8009e14:	20000688 	.word	0x20000688

08009e18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e4c <xTaskGetSchedulerState+0x34>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d102      	bne.n	8009e2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e26:	2301      	movs	r3, #1
 8009e28:	607b      	str	r3, [r7, #4]
 8009e2a:	e008      	b.n	8009e3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e2c:	4b08      	ldr	r3, [pc, #32]	@ (8009e50 <xTaskGetSchedulerState+0x38>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d102      	bne.n	8009e3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e34:	2302      	movs	r3, #2
 8009e36:	607b      	str	r3, [r7, #4]
 8009e38:	e001      	b.n	8009e3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e3e:	687b      	ldr	r3, [r7, #4]
	}
 8009e40:	4618      	mov	r0, r3
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	20000678 	.word	0x20000678
 8009e50:	2000068c 	.word	0x2000068c

08009e54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e60:	2300      	movs	r3, #0
 8009e62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d074      	beq.n	8009f54 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8009f60 <xTaskPriorityDisinherit+0x10c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d00d      	beq.n	8009e90 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e78:	b672      	cpsid	i
 8009e7a:	f383 8811 	msr	BASEPRI, r3
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	b662      	cpsie	i
 8009e88:	60fb      	str	r3, [r7, #12]
}
 8009e8a:	bf00      	nop
 8009e8c:	bf00      	nop
 8009e8e:	e7fd      	b.n	8009e8c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10d      	bne.n	8009eb4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9c:	b672      	cpsid	i
 8009e9e:	f383 8811 	msr	BASEPRI, r3
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	b662      	cpsie	i
 8009eac:	60bb      	str	r3, [r7, #8]
}
 8009eae:	bf00      	nop
 8009eb0:	bf00      	nop
 8009eb2:	e7fd      	b.n	8009eb0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009eb8:	1e5a      	subs	r2, r3, #1
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d044      	beq.n	8009f54 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d140      	bne.n	8009f54 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7ff f9cb 	bl	8009272 <uxListRemove>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d115      	bne.n	8009f0e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ee6:	491f      	ldr	r1, [pc, #124]	@ (8009f64 <xTaskPriorityDisinherit+0x110>)
 8009ee8:	4613      	mov	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	440b      	add	r3, r1
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10a      	bne.n	8009f0e <xTaskPriorityDisinherit+0xba>
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009efc:	2201      	movs	r2, #1
 8009efe:	fa02 f303 	lsl.w	r3, r2, r3
 8009f02:	43da      	mvns	r2, r3
 8009f04:	4b18      	ldr	r3, [pc, #96]	@ (8009f68 <xTaskPriorityDisinherit+0x114>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4013      	ands	r3, r2
 8009f0a:	4a17      	ldr	r2, [pc, #92]	@ (8009f68 <xTaskPriorityDisinherit+0x114>)
 8009f0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f1a:	f1c3 0207 	rsb	r2, r3, #7
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f26:	2201      	movs	r2, #1
 8009f28:	409a      	lsls	r2, r3
 8009f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8009f68 <xTaskPriorityDisinherit+0x114>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	4a0d      	ldr	r2, [pc, #52]	@ (8009f68 <xTaskPriorityDisinherit+0x114>)
 8009f32:	6013      	str	r3, [r2, #0]
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f38:	4613      	mov	r3, r2
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4413      	add	r3, r2
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	4a08      	ldr	r2, [pc, #32]	@ (8009f64 <xTaskPriorityDisinherit+0x110>)
 8009f42:	441a      	add	r2, r3
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	3304      	adds	r3, #4
 8009f48:	4619      	mov	r1, r3
 8009f4a:	4610      	mov	r0, r2
 8009f4c:	f7ff f934 	bl	80091b8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f50:	2301      	movs	r3, #1
 8009f52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f54:	697b      	ldr	r3, [r7, #20]
	}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3718      	adds	r7, #24
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	200005ac 	.word	0x200005ac
 8009f64:	200005b0 	.word	0x200005b0
 8009f68:	20000674 	.word	0x20000674

08009f6c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f76:	4b29      	ldr	r3, [pc, #164]	@ (800a01c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f7c:	4b28      	ldr	r3, [pc, #160]	@ (800a020 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	3304      	adds	r3, #4
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7ff f975 	bl	8009272 <uxListRemove>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10b      	bne.n	8009fa6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009f8e:	4b24      	ldr	r3, [pc, #144]	@ (800a020 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f94:	2201      	movs	r2, #1
 8009f96:	fa02 f303 	lsl.w	r3, r2, r3
 8009f9a:	43da      	mvns	r2, r3
 8009f9c:	4b21      	ldr	r3, [pc, #132]	@ (800a024 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	4a20      	ldr	r2, [pc, #128]	@ (800a024 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009fa4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fac:	d10a      	bne.n	8009fc4 <prvAddCurrentTaskToDelayedList+0x58>
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d007      	beq.n	8009fc4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fb4:	4b1a      	ldr	r3, [pc, #104]	@ (800a020 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	3304      	adds	r3, #4
 8009fba:	4619      	mov	r1, r3
 8009fbc:	481a      	ldr	r0, [pc, #104]	@ (800a028 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009fbe:	f7ff f8fb 	bl	80091b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009fc2:	e026      	b.n	800a012 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4413      	add	r3, r2
 8009fca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009fcc:	4b14      	ldr	r3, [pc, #80]	@ (800a020 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d209      	bcs.n	8009ff0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fdc:	4b13      	ldr	r3, [pc, #76]	@ (800a02c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	4b0f      	ldr	r3, [pc, #60]	@ (800a020 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	4610      	mov	r0, r2
 8009fea:	f7ff f909 	bl	8009200 <vListInsert>
}
 8009fee:	e010      	b.n	800a012 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ff0:	4b0f      	ldr	r3, [pc, #60]	@ (800a030 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	4b0a      	ldr	r3, [pc, #40]	@ (800a020 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	4610      	mov	r0, r2
 8009ffe:	f7ff f8ff 	bl	8009200 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a002:	4b0c      	ldr	r3, [pc, #48]	@ (800a034 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d202      	bcs.n	800a012 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a00c:	4a09      	ldr	r2, [pc, #36]	@ (800a034 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	6013      	str	r3, [r2, #0]
}
 800a012:	bf00      	nop
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	20000670 	.word	0x20000670
 800a020:	200005ac 	.word	0x200005ac
 800a024:	20000674 	.word	0x20000674
 800a028:	20000658 	.word	0x20000658
 800a02c:	20000640 	.word	0x20000640
 800a030:	2000063c 	.word	0x2000063c
 800a034:	20000688 	.word	0x20000688
	...

0800a040 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a040:	4b07      	ldr	r3, [pc, #28]	@ (800a060 <pxCurrentTCBConst2>)
 800a042:	6819      	ldr	r1, [r3, #0]
 800a044:	6808      	ldr	r0, [r1, #0]
 800a046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04a:	f380 8809 	msr	PSP, r0
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f04f 0000 	mov.w	r0, #0
 800a056:	f380 8811 	msr	BASEPRI, r0
 800a05a:	4770      	bx	lr
 800a05c:	f3af 8000 	nop.w

0800a060 <pxCurrentTCBConst2>:
 800a060:	200005ac 	.word	0x200005ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a064:	bf00      	nop
 800a066:	bf00      	nop

0800a068 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a072:	b672      	cpsid	i
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	b662      	cpsie	i
 800a082:	607b      	str	r3, [r7, #4]
}
 800a084:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a086:	4b11      	ldr	r3, [pc, #68]	@ (800a0cc <vPortEnterCritical+0x64>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3301      	adds	r3, #1
 800a08c:	4a0f      	ldr	r2, [pc, #60]	@ (800a0cc <vPortEnterCritical+0x64>)
 800a08e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a090:	4b0e      	ldr	r3, [pc, #56]	@ (800a0cc <vPortEnterCritical+0x64>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b01      	cmp	r3, #1
 800a096:	d112      	bne.n	800a0be <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a098:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d0 <vPortEnterCritical+0x68>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00d      	beq.n	800a0be <vPortEnterCritical+0x56>
	__asm volatile
 800a0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a6:	b672      	cpsid	i
 800a0a8:	f383 8811 	msr	BASEPRI, r3
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	b662      	cpsie	i
 800a0b6:	603b      	str	r3, [r7, #0]
}
 800a0b8:	bf00      	nop
 800a0ba:	bf00      	nop
 800a0bc:	e7fd      	b.n	800a0ba <vPortEnterCritical+0x52>
	}
}
 800a0be:	bf00      	nop
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	20000028 	.word	0x20000028
 800a0d0:	e000ed04 	.word	0xe000ed04

0800a0d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0da:	4b13      	ldr	r3, [pc, #76]	@ (800a128 <vPortExitCritical+0x54>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10d      	bne.n	800a0fe <vPortExitCritical+0x2a>
	__asm volatile
 800a0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e6:	b672      	cpsid	i
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	b662      	cpsie	i
 800a0f6:	607b      	str	r3, [r7, #4]
}
 800a0f8:	bf00      	nop
 800a0fa:	bf00      	nop
 800a0fc:	e7fd      	b.n	800a0fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a0fe:	4b0a      	ldr	r3, [pc, #40]	@ (800a128 <vPortExitCritical+0x54>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3b01      	subs	r3, #1
 800a104:	4a08      	ldr	r2, [pc, #32]	@ (800a128 <vPortExitCritical+0x54>)
 800a106:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a108:	4b07      	ldr	r3, [pc, #28]	@ (800a128 <vPortExitCritical+0x54>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d105      	bne.n	800a11c <vPortExitCritical+0x48>
 800a110:	2300      	movs	r3, #0
 800a112:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	f383 8811 	msr	BASEPRI, r3
}
 800a11a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr
 800a128:	20000028 	.word	0x20000028
 800a12c:	00000000 	.word	0x00000000

0800a130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a130:	f3ef 8009 	mrs	r0, PSP
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	4b15      	ldr	r3, [pc, #84]	@ (800a190 <pxCurrentTCBConst>)
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	f01e 0f10 	tst.w	lr, #16
 800a140:	bf08      	it	eq
 800a142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14a:	6010      	str	r0, [r2, #0]
 800a14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a150:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a154:	b672      	cpsid	i
 800a156:	f380 8811 	msr	BASEPRI, r0
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	f3bf 8f6f 	isb	sy
 800a162:	b662      	cpsie	i
 800a164:	f7ff fc9c 	bl	8009aa0 <vTaskSwitchContext>
 800a168:	f04f 0000 	mov.w	r0, #0
 800a16c:	f380 8811 	msr	BASEPRI, r0
 800a170:	bc09      	pop	{r0, r3}
 800a172:	6819      	ldr	r1, [r3, #0]
 800a174:	6808      	ldr	r0, [r1, #0]
 800a176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17a:	f01e 0f10 	tst.w	lr, #16
 800a17e:	bf08      	it	eq
 800a180:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a184:	f380 8809 	msr	PSP, r0
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop

0800a190 <pxCurrentTCBConst>:
 800a190:	200005ac 	.word	0x200005ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop

0800a198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a2:	b672      	cpsid	i
 800a1a4:	f383 8811 	msr	BASEPRI, r3
 800a1a8:	f3bf 8f6f 	isb	sy
 800a1ac:	f3bf 8f4f 	dsb	sy
 800a1b0:	b662      	cpsie	i
 800a1b2:	607b      	str	r3, [r7, #4]
}
 800a1b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1b6:	f7ff fbb7 	bl	8009928 <xTaskIncrementTick>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d003      	beq.n	800a1c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1c0:	4b06      	ldr	r3, [pc, #24]	@ (800a1dc <SysTick_Handler+0x44>)
 800a1c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1c6:	601a      	str	r2, [r3, #0]
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	f383 8811 	msr	BASEPRI, r3
}
 800a1d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1d4:	bf00      	nop
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	e000ed04 	.word	0xe000ed04

0800a1e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1e6:	f3ef 8305 	mrs	r3, IPSR
 800a1ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2b0f      	cmp	r3, #15
 800a1f0:	d917      	bls.n	800a222 <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1f2:	4a1a      	ldr	r2, [pc, #104]	@ (800a25c <vPortValidateInterruptPriority+0x7c>)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1fc:	4b18      	ldr	r3, [pc, #96]	@ (800a260 <vPortValidateInterruptPriority+0x80>)
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	7afa      	ldrb	r2, [r7, #11]
 800a202:	429a      	cmp	r2, r3
 800a204:	d20d      	bcs.n	800a222 <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a20a:	b672      	cpsid	i
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	b662      	cpsie	i
 800a21a:	607b      	str	r3, [r7, #4]
}
 800a21c:	bf00      	nop
 800a21e:	bf00      	nop
 800a220:	e7fd      	b.n	800a21e <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a222:	4b10      	ldr	r3, [pc, #64]	@ (800a264 <vPortValidateInterruptPriority+0x84>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a22a:	4b0f      	ldr	r3, [pc, #60]	@ (800a268 <vPortValidateInterruptPriority+0x88>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d90d      	bls.n	800a24e <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a236:	b672      	cpsid	i
 800a238:	f383 8811 	msr	BASEPRI, r3
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	b662      	cpsie	i
 800a246:	603b      	str	r3, [r7, #0]
}
 800a248:	bf00      	nop
 800a24a:	bf00      	nop
 800a24c:	e7fd      	b.n	800a24a <vPortValidateInterruptPriority+0x6a>
	}
 800a24e:	bf00      	nop
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	e000e3f0 	.word	0xe000e3f0
 800a260:	20000690 	.word	0x20000690
 800a264:	e000ed0c 	.word	0xe000ed0c
 800a268:	20000694 	.word	0x20000694

0800a26c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7fe fe6e 	bl	8008f5c <USBH_LL_IncTimer>
}
 800a280:	bf00      	nop
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a296:	4618      	mov	r0, r3
 800a298:	f7fe feb2 	bl	8009000 <USBH_LL_Connect>
}
 800a29c:	bf00      	nop
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe fec7 	bl	8009046 <USBH_LL_Disconnect>
}
 800a2b8:	bf00      	nop
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	70fb      	strb	r3, [r7, #3]
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fe fee7 	bl	80090aa <USBH_LL_NotifyURBChange>
#endif
}
 800a2dc:	bf00      	nop
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fe fe5c 	bl	8008fb0 <USBH_LL_PortEnabled>
}
 800a2f8:	bf00      	nop
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe fe68 	bl	8008fe4 <USBH_LL_PortDisabled>
}
 800a314:	bf00      	nop
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a332:	4618      	mov	r0, r3
 800a334:	f7f9 fb39 	bl	80039aa <HAL_HCD_Stop>
 800a338:	4603      	mov	r3, r0
 800a33a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 f808 	bl	800a354 <USBH_Get_USB_Status>
 800a344:	4603      	mov	r3, r0
 800a346:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a348:	7bbb      	ldrb	r3, [r7, #14]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a362:	79fb      	ldrb	r3, [r7, #7]
 800a364:	2b03      	cmp	r3, #3
 800a366:	d817      	bhi.n	800a398 <USBH_Get_USB_Status+0x44>
 800a368:	a201      	add	r2, pc, #4	@ (adr r2, 800a370 <USBH_Get_USB_Status+0x1c>)
 800a36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36e:	bf00      	nop
 800a370:	0800a381 	.word	0x0800a381
 800a374:	0800a387 	.word	0x0800a387
 800a378:	0800a38d 	.word	0x0800a38d
 800a37c:	0800a393 	.word	0x0800a393
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a380:	2300      	movs	r3, #0
 800a382:	73fb      	strb	r3, [r7, #15]
    break;
 800a384:	e00b      	b.n	800a39e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a386:	2302      	movs	r3, #2
 800a388:	73fb      	strb	r3, [r7, #15]
    break;
 800a38a:	e008      	b.n	800a39e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a38c:	2301      	movs	r3, #1
 800a38e:	73fb      	strb	r3, [r7, #15]
    break;
 800a390:	e005      	b.n	800a39e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a392:	2302      	movs	r3, #2
 800a394:	73fb      	strb	r3, [r7, #15]
    break;
 800a396:	e002      	b.n	800a39e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a398:	2302      	movs	r3, #2
 800a39a:	73fb      	strb	r3, [r7, #15]
    break;
 800a39c:	bf00      	nop
  }
  return usb_status;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <islower>:
 800a3ac:	4b04      	ldr	r3, [pc, #16]	@ (800a3c0 <islower+0x14>)
 800a3ae:	4403      	add	r3, r0
 800a3b0:	7858      	ldrb	r0, [r3, #1]
 800a3b2:	f000 0003 	and.w	r0, r0, #3
 800a3b6:	1e83      	subs	r3, r0, #2
 800a3b8:	4258      	negs	r0, r3
 800a3ba:	4158      	adcs	r0, r3
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	0800c4ec 	.word	0x0800c4ec

0800a3c4 <toupper>:
 800a3c4:	4b03      	ldr	r3, [pc, #12]	@ (800a3d4 <toupper+0x10>)
 800a3c6:	5c1b      	ldrb	r3, [r3, r0]
 800a3c8:	f003 0303 	and.w	r3, r3, #3
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	bf08      	it	eq
 800a3d0:	3820      	subeq	r0, #32
 800a3d2:	4770      	bx	lr
 800a3d4:	0800c4ed 	.word	0x0800c4ed

0800a3d8 <memset>:
 800a3d8:	4402      	add	r2, r0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d100      	bne.n	800a3e2 <memset+0xa>
 800a3e0:	4770      	bx	lr
 800a3e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a3e6:	e7f9      	b.n	800a3dc <memset+0x4>

0800a3e8 <strchr>:
 800a3e8:	b2c9      	uxtb	r1, r1
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3f2:	b112      	cbz	r2, 800a3fa <strchr+0x12>
 800a3f4:	428a      	cmp	r2, r1
 800a3f6:	d1f9      	bne.n	800a3ec <strchr+0x4>
 800a3f8:	4770      	bx	lr
 800a3fa:	2900      	cmp	r1, #0
 800a3fc:	bf18      	it	ne
 800a3fe:	2000      	movne	r0, #0
 800a400:	4770      	bx	lr

0800a402 <strncpy>:
 800a402:	b510      	push	{r4, lr}
 800a404:	3901      	subs	r1, #1
 800a406:	4603      	mov	r3, r0
 800a408:	b132      	cbz	r2, 800a418 <strncpy+0x16>
 800a40a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a40e:	f803 4b01 	strb.w	r4, [r3], #1
 800a412:	3a01      	subs	r2, #1
 800a414:	2c00      	cmp	r4, #0
 800a416:	d1f7      	bne.n	800a408 <strncpy+0x6>
 800a418:	441a      	add	r2, r3
 800a41a:	2100      	movs	r1, #0
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d100      	bne.n	800a422 <strncpy+0x20>
 800a420:	bd10      	pop	{r4, pc}
 800a422:	f803 1b01 	strb.w	r1, [r3], #1
 800a426:	e7f9      	b.n	800a41c <strncpy+0x1a>

0800a428 <strstr>:
 800a428:	780a      	ldrb	r2, [r1, #0]
 800a42a:	b570      	push	{r4, r5, r6, lr}
 800a42c:	b96a      	cbnz	r2, 800a44a <strstr+0x22>
 800a42e:	bd70      	pop	{r4, r5, r6, pc}
 800a430:	429a      	cmp	r2, r3
 800a432:	d109      	bne.n	800a448 <strstr+0x20>
 800a434:	460c      	mov	r4, r1
 800a436:	4605      	mov	r5, r0
 800a438:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d0f6      	beq.n	800a42e <strstr+0x6>
 800a440:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a444:	429e      	cmp	r6, r3
 800a446:	d0f7      	beq.n	800a438 <strstr+0x10>
 800a448:	3001      	adds	r0, #1
 800a44a:	7803      	ldrb	r3, [r0, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1ef      	bne.n	800a430 <strstr+0x8>
 800a450:	4618      	mov	r0, r3
 800a452:	e7ec      	b.n	800a42e <strstr+0x6>

0800a454 <__libc_init_array>:
 800a454:	b570      	push	{r4, r5, r6, lr}
 800a456:	4d0d      	ldr	r5, [pc, #52]	@ (800a48c <__libc_init_array+0x38>)
 800a458:	4c0d      	ldr	r4, [pc, #52]	@ (800a490 <__libc_init_array+0x3c>)
 800a45a:	1b64      	subs	r4, r4, r5
 800a45c:	10a4      	asrs	r4, r4, #2
 800a45e:	2600      	movs	r6, #0
 800a460:	42a6      	cmp	r6, r4
 800a462:	d109      	bne.n	800a478 <__libc_init_array+0x24>
 800a464:	4d0b      	ldr	r5, [pc, #44]	@ (800a494 <__libc_init_array+0x40>)
 800a466:	4c0c      	ldr	r4, [pc, #48]	@ (800a498 <__libc_init_array+0x44>)
 800a468:	f000 f826 	bl	800a4b8 <_init>
 800a46c:	1b64      	subs	r4, r4, r5
 800a46e:	10a4      	asrs	r4, r4, #2
 800a470:	2600      	movs	r6, #0
 800a472:	42a6      	cmp	r6, r4
 800a474:	d105      	bne.n	800a482 <__libc_init_array+0x2e>
 800a476:	bd70      	pop	{r4, r5, r6, pc}
 800a478:	f855 3b04 	ldr.w	r3, [r5], #4
 800a47c:	4798      	blx	r3
 800a47e:	3601      	adds	r6, #1
 800a480:	e7ee      	b.n	800a460 <__libc_init_array+0xc>
 800a482:	f855 3b04 	ldr.w	r3, [r5], #4
 800a486:	4798      	blx	r3
 800a488:	3601      	adds	r6, #1
 800a48a:	e7f2      	b.n	800a472 <__libc_init_array+0x1e>
 800a48c:	0800c5f8 	.word	0x0800c5f8
 800a490:	0800c5f8 	.word	0x0800c5f8
 800a494:	0800c5f8 	.word	0x0800c5f8
 800a498:	0800c5fc 	.word	0x0800c5fc

0800a49c <memcpy>:
 800a49c:	440a      	add	r2, r1
 800a49e:	4291      	cmp	r1, r2
 800a4a0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a4a4:	d100      	bne.n	800a4a8 <memcpy+0xc>
 800a4a6:	4770      	bx	lr
 800a4a8:	b510      	push	{r4, lr}
 800a4aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4b2:	4291      	cmp	r1, r2
 800a4b4:	d1f9      	bne.n	800a4aa <memcpy+0xe>
 800a4b6:	bd10      	pop	{r4, pc}

0800a4b8 <_init>:
 800a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ba:	bf00      	nop
 800a4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4be:	bc08      	pop	{r3}
 800a4c0:	469e      	mov	lr, r3
 800a4c2:	4770      	bx	lr

0800a4c4 <_fini>:
 800a4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c6:	bf00      	nop
 800a4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ca:	bc08      	pop	{r3}
 800a4cc:	469e      	mov	lr, r3
 800a4ce:	4770      	bx	lr
