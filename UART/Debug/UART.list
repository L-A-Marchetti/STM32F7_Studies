
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099e8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f94  08009bb8  08009bb8  0000abb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb4c  0800bb4c  0000d024  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb4c  0800bb4c  0000cb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb54  0800bb54  0000d024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb54  0800bb54  0000cb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb58  0800bb58  0000cb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  0800bb5c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009fc  20000024  0800bb80  0000d024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  0800bb80  0000da20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c27c  00000000  00000000  0000d054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000522c  00000000  00000000  000392d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020a0  00000000  00000000  0003e500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001949  00000000  00000000  000405a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000309c5  00000000  00000000  00041ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000287a2  00000000  00000000  000728ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126ede  00000000  00000000  0009b050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c1f2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a84  00000000  00000000  001c1f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001ca9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000024 	.word	0x20000024
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009ba0 	.word	0x08009ba0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000028 	.word	0x20000028
 800020c:	08009ba0 	.word	0x08009ba0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <debug_log>:

#include "debug.h"

uint16_t debug_row = 0;

void debug_log(uint8_t new_page, const char *message, uint8_t error) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	6039      	str	r1, [r7, #0]
 800050a:	71fb      	strb	r3, [r7, #7]
 800050c:	4613      	mov	r3, r2
 800050e:	71bb      	strb	r3, [r7, #6]
	BSP_LCD_SetFont(DEBUG_FONT);
 8000510:	4817      	ldr	r0, [pc, #92]	@ (8000570 <debug_log+0x70>)
 8000512:	f000 fed3 	bl	80012bc <BSP_LCD_SetFont>
	if (new_page != 0)
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00a      	beq.n	8000532 <debug_log+0x32>
	{
		 BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800051c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000520:	f000 feb2 	bl	8001288 <BSP_LCD_SetBackColor>
		 BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000524:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000528:	f000 fee2 	bl	80012f0 <BSP_LCD_Clear>
		 debug_row = 0;
 800052c:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <debug_log+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	801a      	strh	r2, [r3, #0]
	}
	if (error != 0)
 8000532:	79bb      	ldrb	r3, [r7, #6]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d003      	beq.n	8000540 <debug_log+0x40>
	{
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000538:	480f      	ldr	r0, [pc, #60]	@ (8000578 <debug_log+0x78>)
 800053a:	f000 fe8d 	bl	8001258 <BSP_LCD_SetTextColor>
 800053e:	e003      	b.n	8000548 <debug_log+0x48>
	}
	else
	{
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000540:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000544:	f000 fe88 	bl	8001258 <BSP_LCD_SetTextColor>
	}
	BSP_LCD_DisplayStringAt(0, DEBUG_FONT_SIZE * debug_row++, (uint8_t*)message, LEFT_MODE);
 8000548:	4b0a      	ldr	r3, [pc, #40]	@ (8000574 <debug_log+0x74>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	1c5a      	adds	r2, r3, #1
 800054e:	b291      	uxth	r1, r2
 8000550:	4a08      	ldr	r2, [pc, #32]	@ (8000574 <debug_log+0x74>)
 8000552:	8011      	strh	r1, [r2, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	0052      	lsls	r2, r2, #1
 8000558:	4413      	add	r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	b299      	uxth	r1, r3
 800055e:	2303      	movs	r3, #3
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	2000      	movs	r0, #0
 8000564:	f000 ff30 	bl	80013c8 <BSP_LCD_DisplayStringAt>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	2000000c 	.word	0x2000000c
 8000574:	20000040 	.word	0x20000040
 8000578:	ffff0000 	.word	0xffff0000

0800057c <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <HAL_UART_RxCpltCallback>:
uint8_t rx_buffer[RX_BUFFER_SIZE];
volatile uint16_t rx_index = 0;
uint8_t received_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000614 <HAL_UART_RxCpltCallback+0x80>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d131      	bne.n	800060a <HAL_UART_RxCpltCallback+0x76>
    {
        if (rx_index < RX_BUFFER_SIZE - 1)
 80005a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000618 <HAL_UART_RxCpltCallback+0x84>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	2bfe      	cmp	r3, #254	@ 0xfe
 80005ae:	d827      	bhi.n	8000600 <HAL_UART_RxCpltCallback+0x6c>
        {
            rx_buffer[rx_index++] = received_data;
 80005b0:	4b19      	ldr	r3, [pc, #100]	@ (8000618 <HAL_UART_RxCpltCallback+0x84>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	1c5a      	adds	r2, r3, #1
 80005b8:	b291      	uxth	r1, r2
 80005ba:	4a17      	ldr	r2, [pc, #92]	@ (8000618 <HAL_UART_RxCpltCallback+0x84>)
 80005bc:	8011      	strh	r1, [r2, #0]
 80005be:	461a      	mov	r2, r3
 80005c0:	4b16      	ldr	r3, [pc, #88]	@ (800061c <HAL_UART_RxCpltCallback+0x88>)
 80005c2:	7819      	ldrb	r1, [r3, #0]
 80005c4:	4b16      	ldr	r3, [pc, #88]	@ (8000620 <HAL_UART_RxCpltCallback+0x8c>)
 80005c6:	5499      	strb	r1, [r3, r2]

            if (received_data == '\n' || received_data == '\r' || rx_index == RX_BUFFER_SIZE - 1)
 80005c8:	4b14      	ldr	r3, [pc, #80]	@ (800061c <HAL_UART_RxCpltCallback+0x88>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b0a      	cmp	r3, #10
 80005ce:	d008      	beq.n	80005e2 <HAL_UART_RxCpltCallback+0x4e>
 80005d0:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_UART_RxCpltCallback+0x88>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b0d      	cmp	r3, #13
 80005d6:	d004      	beq.n	80005e2 <HAL_UART_RxCpltCallback+0x4e>
 80005d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <HAL_UART_RxCpltCallback+0x84>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	2bff      	cmp	r3, #255	@ 0xff
 80005e0:	d10e      	bne.n	8000600 <HAL_UART_RxCpltCallback+0x6c>
            {
                rx_buffer[rx_index-1] = '\0';
 80005e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <HAL_UART_RxCpltCallback+0x84>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	3b01      	subs	r3, #1
 80005ea:	4a0d      	ldr	r2, [pc, #52]	@ (8000620 <HAL_UART_RxCpltCallback+0x8c>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	54d1      	strb	r1, [r2, r3]
                debug_log(0, (char*)rx_buffer, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	490b      	ldr	r1, [pc, #44]	@ (8000620 <HAL_UART_RxCpltCallback+0x8c>)
 80005f4:	2000      	movs	r0, #0
 80005f6:	f7ff ff83 	bl	8000500 <debug_log>
                rx_index = 0;
 80005fa:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <HAL_UART_RxCpltCallback+0x84>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	801a      	strh	r2, [r3, #0]
            }
        }

        HAL_UART_Receive_IT(&huart1, &received_data, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	4906      	ldr	r1, [pc, #24]	@ (800061c <HAL_UART_RxCpltCallback+0x88>)
 8000604:	4807      	ldr	r0, [pc, #28]	@ (8000624 <HAL_UART_RxCpltCallback+0x90>)
 8000606:	f006 fa3d 	bl	8006a84 <HAL_UART_Receive_IT>
    }
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40011000 	.word	0x40011000
 8000618:	200002b4 	.word	0x200002b4
 800061c:	200002b6 	.word	0x200002b6
 8000620:	200001b4 	.word	0x200001b4
 8000624:	2000012c 	.word	0x2000012c

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f001 fb8c 	bl	8001d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f818 	bl	8000664 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000634:	f000 f888 	bl	8000748 <PeriphCommonClock_Config>
  MX_USART6_UART_Init();
  MX_FATFS_Init();
  */
  //MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000638:	f000 fd06 	bl	8001048 <BSP_LCD_Init>
  /* Initialize the LCD Layers */
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FB_START_ADDRESS);
 800063c:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8000640:	2001      	movs	r0, #1
 8000642:	f000 fd99 	bl	8001178 <BSP_LCD_LayerDefaultInit>
  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8000646:	2001      	movs	r0, #1
 8000648:	f000 fdf6 	bl	8001238 <BSP_LCD_SelectLayer>
  debug_log(1, "LCD Initialized", 0);
 800064c:	2200      	movs	r2, #0
 800064e:	4904      	ldr	r1, [pc, #16]	@ (8000660 <main+0x38>)
 8000650:	2001      	movs	r0, #1
 8000652:	f7ff ff55 	bl	8000500 <debug_log>
  MX_USART1_UART_Init();
 8000656:	f000 f8a9 	bl	80007ac <MX_USART1_UART_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	bf00      	nop
 800065c:	e7fd      	b.n	800065a <main+0x32>
 800065e:	bf00      	nop
 8000660:	08009bb8 	.word	0x08009bb8

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	@ 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	@ 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f009 fa5a 	bl	8009b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000688:	f004 fd48 	bl	800511c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	4b2c      	ldr	r3, [pc, #176]	@ (8000740 <SystemClock_Config+0xdc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	4a2b      	ldr	r2, [pc, #172]	@ (8000740 <SystemClock_Config+0xdc>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	@ 0x40
 8000698:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <SystemClock_Config+0xdc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	4b27      	ldr	r3, [pc, #156]	@ (8000744 <SystemClock_Config+0xe0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a26      	ldr	r2, [pc, #152]	@ (8000744 <SystemClock_Config+0xe0>)
 80006aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <SystemClock_Config+0xe0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006bc:	2309      	movs	r3, #9
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006c6:	2301      	movs	r3, #1
 80006c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006d4:	2319      	movs	r3, #25
 80006d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80006d8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80006dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006e2:	2309      	movs	r3, #9
 80006e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 fd76 	bl	80051dc <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006f6:	f000 f8af 	bl	8000858 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006fa:	f004 fd1f 	bl	800513c <HAL_PWREx_EnableOverDrive>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000704:	f000 f8a8 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000714:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2106      	movs	r1, #6
 8000726:	4618      	mov	r0, r3
 8000728:	f004 fffc 	bl	8005724 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000732:	f000 f891 	bl	8000858 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	@ 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0a2      	sub	sp, #136	@ 0x88
 800074c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2284      	movs	r2, #132	@ 0x84
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f009 f9e9 	bl	8009b2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800075a:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <PeriphCommonClock_Config+0x60>)
 800075c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800075e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000762:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000764:	2305      	movs	r3, #5
 8000766:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000768:	2302      	movs	r3, #2
 800076a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800076c:	2303      	movs	r3, #3
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000770:	2301      	movs	r3, #1
 8000772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000774:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000778:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800077a:	2300      	movs	r3, #0
 800077c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800077e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000782:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000786:	2300      	movs	r3, #0
 8000788:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4618      	mov	r0, r3
 8000790:	f005 f9e0 	bl	8005b54 <HAL_RCCEx_PeriphCLKConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800079a:	f000 f85d 	bl	8000858 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3788      	adds	r7, #136	@ 0x88
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	00b00008 	.word	0x00b00008

080007ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <MX_USART1_UART_Init+0x74>)
 80007b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000824 <MX_USART1_UART_Init+0x78>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <MX_USART1_UART_Init+0x74>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <MX_USART1_UART_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <MX_USART1_UART_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <MX_USART1_UART_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <MX_USART1_UART_Init+0x74>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <MX_USART1_UART_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <MX_USART1_UART_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_USART1_UART_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <MX_USART1_UART_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ee:	480c      	ldr	r0, [pc, #48]	@ (8000820 <MX_USART1_UART_Init+0x74>)
 80007f0:	f006 f8fa 	bl	80069e8 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d006      	beq.n	8000808 <MX_USART1_UART_Init+0x5c>
  {
	debug_log(0, "USART/UART Initialization error", 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	490a      	ldr	r1, [pc, #40]	@ (8000828 <MX_USART1_UART_Init+0x7c>)
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff fe7e 	bl	8000500 <debug_log>
    Error_Handler();
 8000804:	f000 f828 	bl	8000858 <Error_Handler>
  }
  debug_log(0, "USART/UART Initialized", 0);
 8000808:	2200      	movs	r2, #0
 800080a:	4908      	ldr	r1, [pc, #32]	@ (800082c <MX_USART1_UART_Init+0x80>)
 800080c:	2000      	movs	r0, #0
 800080e:	f7ff fe77 	bl	8000500 <debug_log>

  HAL_UART_Receive_IT(&huart1, &received_data, 1);
 8000812:	2201      	movs	r2, #1
 8000814:	4906      	ldr	r1, [pc, #24]	@ (8000830 <MX_USART1_UART_Init+0x84>)
 8000816:	4802      	ldr	r0, [pc, #8]	@ (8000820 <MX_USART1_UART_Init+0x74>)
 8000818:	f006 f934 	bl	8006a84 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000012c 	.word	0x2000012c
 8000824:	40011000 	.word	0x40011000
 8000828:	08009bc8 	.word	0x08009bc8
 800082c:	08009be8 	.word	0x08009be8
 8000830:	200002b6 	.word	0x200002b6

08000834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a04      	ldr	r2, [pc, #16]	@ (8000854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d101      	bne.n	800084a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000846:	f001 fa8d 	bl	8001d64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40001000 	.word	0x40001000

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	4a10      	ldr	r2, [pc, #64]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	@ 0x40
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000886:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088c:	6453      	str	r3, [r2, #68]	@ 0x44
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	210f      	movs	r1, #15
 800089e:	f06f 0001 	mvn.w	r0, #1
 80008a2:	f001 fb5b 	bl	8001f5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <HAL_DMA2D_MspInit+0x44>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d113      	bne.n	80008ee <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80008c6:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <HAL_DMA2D_MspInit+0x48>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a0c      	ldr	r2, [pc, #48]	@ (80008fc <HAL_DMA2D_MspInit+0x48>)
 80008cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <HAL_DMA2D_MspInit+0x48>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2105      	movs	r1, #5
 80008e2:	205a      	movs	r0, #90	@ 0x5a
 80008e4:	f001 fb3a 	bl	8001f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80008e8:	205a      	movs	r0, #90	@ 0x5a
 80008ea:	f001 fb53 	bl	8001f94 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	4002b000 	.word	0x4002b000
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	@ 0x38
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a55      	ldr	r2, [pc, #340]	@ (8000a74 <HAL_LTDC_MspInit+0x174>)
 800091e:	4293      	cmp	r3, r2
 8000920:	f040 80a3 	bne.w	8000a6a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000924:	4b54      	ldr	r3, [pc, #336]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 8000926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000928:	4a53      	ldr	r2, [pc, #332]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 800092a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800092e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000930:	4b51      	ldr	r3, [pc, #324]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 8000932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000934:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000938:	623b      	str	r3, [r7, #32]
 800093a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800093c:	4b4e      	ldr	r3, [pc, #312]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000940:	4a4d      	ldr	r2, [pc, #308]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	6313      	str	r3, [r2, #48]	@ 0x30
 8000948:	4b4b      	ldr	r3, [pc, #300]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094c:	f003 0310 	and.w	r3, r3, #16
 8000950:	61fb      	str	r3, [r7, #28]
 8000952:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000954:	4b48      	ldr	r3, [pc, #288]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000958:	4a47      	ldr	r2, [pc, #284]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 800095a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800095e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000960:	4b45      	ldr	r3, [pc, #276]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800096c:	4b42      	ldr	r3, [pc, #264]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000970:	4a41      	ldr	r2, [pc, #260]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 8000972:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000976:	6313      	str	r3, [r2, #48]	@ 0x30
 8000978:	4b3f      	ldr	r3, [pc, #252]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000984:	4b3c      	ldr	r3, [pc, #240]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000988:	4a3b      	ldr	r2, [pc, #236]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 800098a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800098e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000990:	4b39      	ldr	r3, [pc, #228]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800099c:	4b36      	ldr	r3, [pc, #216]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a0:	4a35      	ldr	r2, [pc, #212]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 80009a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a8:	4b33      	ldr	r3, [pc, #204]	@ (8000a78 <HAL_LTDC_MspInit+0x178>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80009b4:	2310      	movs	r3, #16
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009c4:	230e      	movs	r3, #14
 80009c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009cc:	4619      	mov	r1, r3
 80009ce:	482b      	ldr	r0, [pc, #172]	@ (8000a7c <HAL_LTDC_MspInit+0x17c>)
 80009d0:	f002 f8da 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80009d4:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009e6:	230e      	movs	r3, #14
 80009e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ee:	4619      	mov	r1, r3
 80009f0:	4823      	ldr	r0, [pc, #140]	@ (8000a80 <HAL_LTDC_MspInit+0x180>)
 80009f2:	f002 f8c9 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80009f6:	23f7      	movs	r3, #247	@ 0xf7
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a06:	230e      	movs	r3, #14
 8000a08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	481c      	ldr	r0, [pc, #112]	@ (8000a84 <HAL_LTDC_MspInit+0x184>)
 8000a12:	f002 f8b9 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a28:	2309      	movs	r3, #9
 8000a2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4815      	ldr	r0, [pc, #84]	@ (8000a88 <HAL_LTDC_MspInit+0x188>)
 8000a34:	f002 f8a8 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000a38:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a4a:	230e      	movs	r3, #14
 8000a4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	480d      	ldr	r0, [pc, #52]	@ (8000a8c <HAL_LTDC_MspInit+0x18c>)
 8000a56:	f002 f897 	bl	8002b88 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2105      	movs	r1, #5
 8000a5e:	2058      	movs	r0, #88	@ 0x58
 8000a60:	f001 fa7c 	bl	8001f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000a64:	2058      	movs	r0, #88	@ 0x58
 8000a66:	f001 fa95 	bl	8001f94 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3738      	adds	r7, #56	@ 0x38
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40016800 	.word	0x40016800
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40022400 	.word	0x40022400
 8000a84:	40022800 	.word	0x40022800
 8000a88:	40021800 	.word	0x40021800
 8000a8c:	40022000 	.word	0x40022000

08000a90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b089      	sub	sp, #36	@ 0x24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a2e      	ldr	r2, [pc, #184]	@ (8000b58 <HAL_TIM_Base_MspInit+0xc8>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d10c      	bne.n	8000abc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b5c <HAL_TIM_Base_MspInit+0xcc>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	4a2d      	ldr	r2, [pc, #180]	@ (8000b5c <HAL_TIM_Base_MspInit+0xcc>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aae:	4b2b      	ldr	r3, [pc, #172]	@ (8000b5c <HAL_TIM_Base_MspInit+0xcc>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	61fb      	str	r3, [r7, #28]
 8000ab8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000aba:	e046      	b.n	8000b4a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ac4:	d10c      	bne.n	8000ae0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ac6:	4b25      	ldr	r3, [pc, #148]	@ (8000b5c <HAL_TIM_Base_MspInit+0xcc>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a24      	ldr	r2, [pc, #144]	@ (8000b5c <HAL_TIM_Base_MspInit+0xcc>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad2:	4b22      	ldr	r3, [pc, #136]	@ (8000b5c <HAL_TIM_Base_MspInit+0xcc>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]
 8000adc:	69bb      	ldr	r3, [r7, #24]
}
 8000ade:	e034      	b.n	8000b4a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8000b60 <HAL_TIM_Base_MspInit+0xd0>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d10c      	bne.n	8000b04 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aea:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <HAL_TIM_Base_MspInit+0xcc>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	4a1b      	ldr	r2, [pc, #108]	@ (8000b5c <HAL_TIM_Base_MspInit+0xcc>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <HAL_TIM_Base_MspInit+0xcc>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697b      	ldr	r3, [r7, #20]
}
 8000b02:	e022      	b.n	8000b4a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a16      	ldr	r2, [pc, #88]	@ (8000b64 <HAL_TIM_Base_MspInit+0xd4>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d10c      	bne.n	8000b28 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <HAL_TIM_Base_MspInit+0xcc>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	4a12      	ldr	r2, [pc, #72]	@ (8000b5c <HAL_TIM_Base_MspInit+0xcc>)
 8000b14:	f043 0308 	orr.w	r3, r3, #8
 8000b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1a:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <HAL_TIM_Base_MspInit+0xcc>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	f003 0308 	and.w	r3, r3, #8
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
}
 8000b26:	e010      	b.n	8000b4a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000b68 <HAL_TIM_Base_MspInit+0xd8>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d10b      	bne.n	8000b4a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000b32:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <HAL_TIM_Base_MspInit+0xcc>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	4a09      	ldr	r2, [pc, #36]	@ (8000b5c <HAL_TIM_Base_MspInit+0xcc>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3e:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <HAL_TIM_Base_MspInit+0xcc>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
}
 8000b4a:	bf00      	nop
 8000b4c:	3724      	adds	r7, #36	@ 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40010000 	.word	0x40010000
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40000400 	.word	0x40000400
 8000b64:	40000c00 	.word	0x40000c00
 8000b68:	40010400 	.word	0x40010400

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0ae      	sub	sp, #184	@ 0xb8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b84:	f107 0320 	add.w	r3, r7, #32
 8000b88:	2284      	movs	r2, #132	@ 0x84
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f008 ffcd 	bl	8009b2c <memset>
  if(huart->Instance==USART1)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a57      	ldr	r2, [pc, #348]	@ (8000cf4 <HAL_UART_MspInit+0x188>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d165      	bne.n	8000c68 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b9c:	2340      	movs	r3, #64	@ 0x40
 8000b9e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba4:	f107 0320 	add.w	r3, r7, #32
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f004 ffd3 	bl	8005b54 <HAL_RCCEx_PeriphCLKConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bb4:	f7ff fe50 	bl	8000858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bb8:	4b4f      	ldr	r3, [pc, #316]	@ (8000cf8 <HAL_UART_MspInit+0x18c>)
 8000bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbc:	4a4e      	ldr	r2, [pc, #312]	@ (8000cf8 <HAL_UART_MspInit+0x18c>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc4:	4b4c      	ldr	r3, [pc, #304]	@ (8000cf8 <HAL_UART_MspInit+0x18c>)
 8000bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc8:	f003 0310 	and.w	r3, r3, #16
 8000bcc:	61fb      	str	r3, [r7, #28]
 8000bce:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd0:	4b49      	ldr	r3, [pc, #292]	@ (8000cf8 <HAL_UART_MspInit+0x18c>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd4:	4a48      	ldr	r2, [pc, #288]	@ (8000cf8 <HAL_UART_MspInit+0x18c>)
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
 8000bda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bdc:	4b46      	ldr	r3, [pc, #280]	@ (8000cf8 <HAL_UART_MspInit+0x18c>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b43      	ldr	r3, [pc, #268]	@ (8000cf8 <HAL_UART_MspInit+0x18c>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bec:	4a42      	ldr	r2, [pc, #264]	@ (8000cf8 <HAL_UART_MspInit+0x18c>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf4:	4b40      	ldr	r3, [pc, #256]	@ (8000cf8 <HAL_UART_MspInit+0x18c>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c00:	2380      	movs	r3, #128	@ 0x80
 8000c02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c18:	2307      	movs	r3, #7
 8000c1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c22:	4619      	mov	r1, r3
 8000c24:	4835      	ldr	r0, [pc, #212]	@ (8000cfc <HAL_UART_MspInit+0x190>)
 8000c26:	f001 ffaf 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c44:	2307      	movs	r3, #7
 8000c46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	482b      	ldr	r0, [pc, #172]	@ (8000d00 <HAL_UART_MspInit+0x194>)
 8000c52:	f001 ff99 	bl	8002b88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2105      	movs	r1, #5
 8000c5a:	2025      	movs	r0, #37	@ 0x25
 8000c5c:	f001 f97e 	bl	8001f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c60:	2025      	movs	r0, #37	@ 0x25
 8000c62:	f001 f997 	bl	8001f94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000c66:	e040      	b.n	8000cea <HAL_UART_MspInit+0x17e>
  else if(huart->Instance==USART6)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a25      	ldr	r2, [pc, #148]	@ (8000d04 <HAL_UART_MspInit+0x198>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d13b      	bne.n	8000cea <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000c72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c76:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7c:	f107 0320 	add.w	r3, r7, #32
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 ff67 	bl	8005b54 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8000c8c:	f7ff fde4 	bl	8000858 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <HAL_UART_MspInit+0x18c>)
 8000c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c94:	4a18      	ldr	r2, [pc, #96]	@ (8000cf8 <HAL_UART_MspInit+0x18c>)
 8000c96:	f043 0320 	orr.w	r3, r3, #32
 8000c9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9c:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <HAL_UART_MspInit+0x18c>)
 8000c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca0:	f003 0320 	and.w	r3, r3, #32
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca8:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <HAL_UART_MspInit+0x18c>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cac:	4a12      	ldr	r2, [pc, #72]	@ (8000cf8 <HAL_UART_MspInit+0x18c>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb4:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <HAL_UART_MspInit+0x18c>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cc0:	23c0      	movs	r3, #192	@ 0xc0
 8000cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cde:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4808      	ldr	r0, [pc, #32]	@ (8000d08 <HAL_UART_MspInit+0x19c>)
 8000ce6:	f001 ff4f 	bl	8002b88 <HAL_GPIO_Init>
}
 8000cea:	bf00      	nop
 8000cec:	37b8      	adds	r7, #184	@ 0xb8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40011000 	.word	0x40011000
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020400 	.word	0x40020400
 8000d00:	40020000 	.word	0x40020000
 8000d04:	40011400 	.word	0x40011400
 8000d08:	40020800 	.word	0x40020800

08000d0c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000d20:	4b3a      	ldr	r3, [pc, #232]	@ (8000e0c <HAL_FMC_MspInit+0x100>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d16d      	bne.n	8000e04 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000d28:	4b38      	ldr	r3, [pc, #224]	@ (8000e0c <HAL_FMC_MspInit+0x100>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d2e:	4b38      	ldr	r3, [pc, #224]	@ (8000e10 <HAL_FMC_MspInit+0x104>)
 8000d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d32:	4a37      	ldr	r2, [pc, #220]	@ (8000e10 <HAL_FMC_MspInit+0x104>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d3a:	4b35      	ldr	r3, [pc, #212]	@ (8000e10 <HAL_FMC_MspInit+0x104>)
 8000d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000d46:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000d4a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d58:	230c      	movs	r3, #12
 8000d5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	4619      	mov	r1, r3
 8000d60:	482c      	ldr	r0, [pc, #176]	@ (8000e14 <HAL_FMC_MspInit+0x108>)
 8000d62:	f001 ff11 	bl	8002b88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000d66:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000d6a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d78:	230c      	movs	r3, #12
 8000d7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4825      	ldr	r0, [pc, #148]	@ (8000e18 <HAL_FMC_MspInit+0x10c>)
 8000d82:	f001 ff01 	bl	8002b88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000d86:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000d8a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d98:	230c      	movs	r3, #12
 8000d9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	481e      	ldr	r0, [pc, #120]	@ (8000e1c <HAL_FMC_MspInit+0x110>)
 8000da2:	f001 fef1 	bl	8002b88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000da6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000daa:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000db8:	230c      	movs	r3, #12
 8000dba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4817      	ldr	r0, [pc, #92]	@ (8000e20 <HAL_FMC_MspInit+0x114>)
 8000dc2:	f001 fee1 	bl	8002b88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000dc6:	2328      	movs	r3, #40	@ 0x28
 8000dc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dd6:	230c      	movs	r3, #12
 8000dd8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4811      	ldr	r0, [pc, #68]	@ (8000e24 <HAL_FMC_MspInit+0x118>)
 8000de0:	f001 fed2 	bl	8002b88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000de4:	2308      	movs	r3, #8
 8000de6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000df4:	230c      	movs	r3, #12
 8000df6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480a      	ldr	r0, [pc, #40]	@ (8000e28 <HAL_FMC_MspInit+0x11c>)
 8000dfe:	f001 fec3 	bl	8002b88 <HAL_GPIO_Init>
 8000e02:	e000      	b.n	8000e06 <HAL_FMC_MspInit+0xfa>
    return;
 8000e04:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200002b8 	.word	0x200002b8
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40021800 	.word	0x40021800
 8000e1c:	40020c00 	.word	0x40020c00
 8000e20:	40021400 	.word	0x40021400
 8000e24:	40021c00 	.word	0x40021c00
 8000e28:	40020800 	.word	0x40020800

08000e2c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000e34:	f7ff ff6a 	bl	8000d0c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	@ 0x38
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e50:	4b33      	ldr	r3, [pc, #204]	@ (8000f20 <HAL_InitTick+0xe0>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	4a32      	ldr	r2, [pc, #200]	@ (8000f20 <HAL_InitTick+0xe0>)
 8000e56:	f043 0310 	orr.w	r3, r3, #16
 8000e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5c:	4b30      	ldr	r3, [pc, #192]	@ (8000f20 <HAL_InitTick+0xe0>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e60:	f003 0310 	and.w	r3, r3, #16
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e68:	f107 0210 	add.w	r2, r7, #16
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f004 fe3c 	bl	8005af0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e78:	6a3b      	ldr	r3, [r7, #32]
 8000e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d103      	bne.n	8000e8a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e82:	f004 fe0d 	bl	8005aa0 <HAL_RCC_GetPCLK1Freq>
 8000e86:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e88:	e004      	b.n	8000e94 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e8a:	f004 fe09 	bl	8005aa0 <HAL_RCC_GetPCLK1Freq>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e96:	4a23      	ldr	r2, [pc, #140]	@ (8000f24 <HAL_InitTick+0xe4>)
 8000e98:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9c:	0c9b      	lsrs	r3, r3, #18
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ea2:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <HAL_InitTick+0xe8>)
 8000ea4:	4a21      	ldr	r2, [pc, #132]	@ (8000f2c <HAL_InitTick+0xec>)
 8000ea6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f28 <HAL_InitTick+0xe8>)
 8000eaa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000eae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f28 <HAL_InitTick+0xe8>)
 8000eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eb4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <HAL_InitTick+0xe8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <HAL_InitTick+0xe8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec2:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <HAL_InitTick+0xe8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ec8:	4817      	ldr	r0, [pc, #92]	@ (8000f28 <HAL_InitTick+0xe8>)
 8000eca:	f005 fac4 	bl	8006456 <HAL_TIM_Base_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ed4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d11b      	bne.n	8000f14 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000edc:	4812      	ldr	r0, [pc, #72]	@ (8000f28 <HAL_InitTick+0xe8>)
 8000ede:	f005 fb11 	bl	8006504 <HAL_TIM_Base_Start_IT>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ee8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d111      	bne.n	8000f14 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ef0:	2036      	movs	r0, #54	@ 0x36
 8000ef2:	f001 f84f 	bl	8001f94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d808      	bhi.n	8000f0e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	2036      	movs	r0, #54	@ 0x36
 8000f02:	f001 f82b 	bl	8001f5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f06:	4a0a      	ldr	r2, [pc, #40]	@ (8000f30 <HAL_InitTick+0xf0>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	e002      	b.n	8000f14 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3738      	adds	r7, #56	@ 0x38
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40023800 	.word	0x40023800
 8000f24:	431bde83 	.word	0x431bde83
 8000f28:	200002bc 	.word	0x200002bc
 8000f2c:	40001000 	.word	0x40001000
 8000f30:	20000018 	.word	0x20000018

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <NMI_Handler+0x4>

08000f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart1);
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <USART1_IRQHandler+0x10>)
 8000f72:	f005 fdcb 	bl	8006b0c <HAL_UART_IRQHandler>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000012c 	.word	0x2000012c

08000f80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f84:	4802      	ldr	r0, [pc, #8]	@ (8000f90 <TIM6_DAC_IRQHandler+0x10>)
 8000f86:	f005 fb35 	bl	80065f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200002bc 	.word	0x200002bc

08000f94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <OTG_FS_IRQHandler+0x10>)
 8000f9a:	f001 ffba 	bl	8002f12 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000640 	.word	0x20000640

08000fa8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <LTDC_IRQHandler+0x10>)
 8000fae:	f003 fe0d 	bl	8004bcc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000084 	.word	0x20000084

08000fbc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <DMA2D_IRQHandler+0x10>)
 8000fc2:	f001 fba3 	bl	800270c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000044 	.word	0x20000044

08000fd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <SystemInit+0x20>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fda:	4a05      	ldr	r2, [pc, #20]	@ (8000ff0 <SystemInit+0x20>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ff4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800102c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff8:	f7ff ffea 	bl	8000fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ffc:	480c      	ldr	r0, [pc, #48]	@ (8001030 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ffe:	490d      	ldr	r1, [pc, #52]	@ (8001034 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001000:	4a0d      	ldr	r2, [pc, #52]	@ (8001038 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001014:	4c0a      	ldr	r4, [pc, #40]	@ (8001040 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001022:	f008 fd8b 	bl	8009b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001026:	f7ff faff 	bl	8000628 <main>
  bx  lr    
 800102a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800102c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001034:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001038:	0800bb5c 	.word	0x0800bb5c
  ldr r2, =_sbss
 800103c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001040:	20000a20 	.word	0x20000a20

08001044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC_IRQHandler>
	...

08001048 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800104c:	4b31      	ldr	r3, [pc, #196]	@ (8001114 <BSP_LCD_Init+0xcc>)
 800104e:	2228      	movs	r2, #40	@ 0x28
 8001050:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001052:	4b30      	ldr	r3, [pc, #192]	@ (8001114 <BSP_LCD_Init+0xcc>)
 8001054:	2209      	movs	r2, #9
 8001056:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001058:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <BSP_LCD_Init+0xcc>)
 800105a:	2235      	movs	r2, #53	@ 0x35
 800105c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800105e:	4b2d      	ldr	r3, [pc, #180]	@ (8001114 <BSP_LCD_Init+0xcc>)
 8001060:	220b      	movs	r2, #11
 8001062:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001064:	4b2b      	ldr	r3, [pc, #172]	@ (8001114 <BSP_LCD_Init+0xcc>)
 8001066:	f240 121b 	movw	r2, #283	@ 0x11b
 800106a:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800106c:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <BSP_LCD_Init+0xcc>)
 800106e:	f240 2215 	movw	r2, #533	@ 0x215
 8001072:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8001074:	4b27      	ldr	r3, [pc, #156]	@ (8001114 <BSP_LCD_Init+0xcc>)
 8001076:	f240 121d 	movw	r2, #285	@ 0x11d
 800107a:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800107c:	4b25      	ldr	r3, [pc, #148]	@ (8001114 <BSP_LCD_Init+0xcc>)
 800107e:	f240 2235 	movw	r2, #565	@ 0x235
 8001082:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001084:	2100      	movs	r1, #0
 8001086:	4823      	ldr	r0, [pc, #140]	@ (8001114 <BSP_LCD_Init+0xcc>)
 8001088:	f000 fb88 	bl	800179c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800108c:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <BSP_LCD_Init+0xcc>)
 800108e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001092:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001094:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <BSP_LCD_Init+0xcc>)
 8001096:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800109a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800109c:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <BSP_LCD_Init+0xcc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001114 <BSP_LCD_Init+0xcc>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80010ac:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <BSP_LCD_Init+0xcc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80010b4:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <BSP_LCD_Init+0xcc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80010ba:	4b16      	ldr	r3, [pc, #88]	@ (8001114 <BSP_LCD_Init+0xcc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80010c0:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <BSP_LCD_Init+0xcc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80010c6:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <BSP_LCD_Init+0xcc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <BSP_LCD_Init+0xcc>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <BSP_LCD_Init+0xd0>)
 80010d0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80010d2:	4810      	ldr	r0, [pc, #64]	@ (8001114 <BSP_LCD_Init+0xcc>)
 80010d4:	f003 fe7a 	bl	8004dcc <HAL_LTDC_GetState>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d103      	bne.n	80010e6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80010de:	2100      	movs	r1, #0
 80010e0:	480c      	ldr	r0, [pc, #48]	@ (8001114 <BSP_LCD_Init+0xcc>)
 80010e2:	f000 fa81 	bl	80015e8 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80010e6:	480b      	ldr	r0, [pc, #44]	@ (8001114 <BSP_LCD_Init+0xcc>)
 80010e8:	f003 fca0 	bl	8004a2c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010f2:	480a      	ldr	r0, [pc, #40]	@ (800111c <BSP_LCD_Init+0xd4>)
 80010f4:	f001 fef4 	bl	8002ee0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2108      	movs	r1, #8
 80010fc:	4808      	ldr	r0, [pc, #32]	@ (8001120 <BSP_LCD_Init+0xd8>)
 80010fe:	f001 feef 	bl	8002ee0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001102:	f000 fc6b 	bl	80019dc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001106:	4807      	ldr	r0, [pc, #28]	@ (8001124 <BSP_LCD_Init+0xdc>)
 8001108:	f000 f8d8 	bl	80012bc <BSP_LCD_SetFont>
  
  return LCD_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000308 	.word	0x20000308
 8001118:	40016800 	.word	0x40016800
 800111c:	40022000 	.word	0x40022000
 8001120:	40022800 	.word	0x40022800
 8001124:	20000004 	.word	0x20000004

08001128 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <BSP_LCD_GetXSize+0x20>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a06      	ldr	r2, [pc, #24]	@ (800114c <BSP_LCD_GetXSize+0x24>)
 8001132:	2134      	movs	r1, #52	@ 0x34
 8001134:	fb01 f303 	mul.w	r3, r1, r3
 8001138:	4413      	add	r3, r2
 800113a:	3360      	adds	r3, #96	@ 0x60
 800113c:	681b      	ldr	r3, [r3, #0]
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	200003f0 	.word	0x200003f0
 800114c:	20000308 	.word	0x20000308

08001150 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <BSP_LCD_GetYSize+0x20>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a06      	ldr	r2, [pc, #24]	@ (8001174 <BSP_LCD_GetYSize+0x24>)
 800115a:	2134      	movs	r1, #52	@ 0x34
 800115c:	fb01 f303 	mul.w	r3, r1, r3
 8001160:	4413      	add	r3, r2
 8001162:	3364      	adds	r3, #100	@ 0x64
 8001164:	681b      	ldr	r3, [r3, #0]
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	200003f0 	.word	0x200003f0
 8001174:	20000308 	.word	0x20000308

08001178 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001178:	b580      	push	{r7, lr}
 800117a:	b090      	sub	sp, #64	@ 0x40
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001188:	f7ff ffce 	bl	8001128 <BSP_LCD_GetXSize>
 800118c:	4603      	mov	r3, r0
 800118e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001194:	f7ff ffdc 	bl	8001150 <BSP_LCD_GetYSize>
 8001198:	4603      	mov	r3, r0
 800119a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 80011a4:	23ff      	movs	r3, #255	@ 0xff
 80011a6:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80011be:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80011c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80011c4:	2307      	movs	r3, #7
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80011c8:	f7ff ffae 	bl	8001128 <BSP_LCD_GetXSize>
 80011cc:	4603      	mov	r3, r0
 80011ce:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80011d0:	f7ff ffbe 	bl	8001150 <BSP_LCD_GetYSize>
 80011d4:	4603      	mov	r3, r0
 80011d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80011d8:	88fa      	ldrh	r2, [r7, #6]
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	4619      	mov	r1, r3
 80011e0:	4812      	ldr	r0, [pc, #72]	@ (800122c <BSP_LCD_LayerDefaultInit+0xb4>)
 80011e2:	f003 fdb5 	bl	8004d50 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80011e6:	88fa      	ldrh	r2, [r7, #6]
 80011e8:	4911      	ldr	r1, [pc, #68]	@ (8001230 <BSP_LCD_LayerDefaultInit+0xb8>)
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	3304      	adds	r3, #4
 80011f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011fa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80011fc:	88fa      	ldrh	r2, [r7, #6]
 80011fe:	490c      	ldr	r1, [pc, #48]	@ (8001230 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3308      	adds	r3, #8
 800120c:	4a09      	ldr	r2, [pc, #36]	@ (8001234 <BSP_LCD_LayerDefaultInit+0xbc>)
 800120e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001210:	88fa      	ldrh	r2, [r7, #6]
 8001212:	4907      	ldr	r1, [pc, #28]	@ (8001230 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8001222:	601a      	str	r2, [r3, #0]
}
 8001224:	bf00      	nop
 8001226:	3740      	adds	r7, #64	@ 0x40
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000308 	.word	0x20000308
 8001230:	200003f4 	.word	0x200003f4
 8001234:	20000004 	.word	0x20000004

08001238 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <BSP_LCD_SelectLayer+0x1c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
} 
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	200003f0 	.word	0x200003f0

08001258 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001260:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <BSP_LCD_SetTextColor+0x28>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4907      	ldr	r1, [pc, #28]	@ (8001284 <BSP_LCD_SetTextColor+0x2c>)
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	440b      	add	r3, r1
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	601a      	str	r2, [r3, #0]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	200003f0 	.word	0x200003f0
 8001284:	200003f4 	.word	0x200003f4

08001288 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <BSP_LCD_SetBackColor+0x2c>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4908      	ldr	r1, [pc, #32]	@ (80012b8 <BSP_LCD_SetBackColor+0x30>)
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	3304      	adds	r3, #4
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	200003f0 	.word	0x200003f0
 80012b8:	200003f4 	.word	0x200003f4

080012bc <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80012c4:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <BSP_LCD_SetFont+0x2c>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4908      	ldr	r1, [pc, #32]	@ (80012ec <BSP_LCD_SetFont+0x30>)
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	3308      	adds	r3, #8
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	601a      	str	r2, [r3, #0]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	200003f0 	.word	0x200003f0
 80012ec:	200003f4 	.word	0x200003f4

080012f0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80012f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <BSP_LCD_Clear+0x48>)
 80012fa:	681c      	ldr	r4, [r3, #0]
 80012fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <BSP_LCD_Clear+0x48>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0e      	ldr	r2, [pc, #56]	@ (800133c <BSP_LCD_Clear+0x4c>)
 8001302:	2134      	movs	r1, #52	@ 0x34
 8001304:	fb01 f303 	mul.w	r3, r1, r3
 8001308:	4413      	add	r3, r2
 800130a:	335c      	adds	r3, #92	@ 0x5c
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	461e      	mov	r6, r3
 8001310:	f7ff ff0a 	bl	8001128 <BSP_LCD_GetXSize>
 8001314:	4605      	mov	r5, r0
 8001316:	f7ff ff1b 	bl	8001150 <BSP_LCD_GetYSize>
 800131a:	4602      	mov	r2, r0
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	2300      	movs	r3, #0
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	4613      	mov	r3, r2
 8001326:	462a      	mov	r2, r5
 8001328:	4631      	mov	r1, r6
 800132a:	4620      	mov	r0, r4
 800132c:	f000 fb0a 	bl	8001944 <LL_FillBuffer>
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001338:	200003f0 	.word	0x200003f0
 800133c:	20000308 	.word	0x20000308

08001340 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
 800134a:	460b      	mov	r3, r1
 800134c:	80bb      	strh	r3, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001352:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <BSP_LCD_DisplayChar+0x80>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	491b      	ldr	r1, [pc, #108]	@ (80013c4 <BSP_LCD_DisplayChar+0x84>)
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	3308      	adds	r3, #8
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6819      	ldr	r1, [r3, #0]
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800136e:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <BSP_LCD_DisplayChar+0x80>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4c14      	ldr	r4, [pc, #80]	@ (80013c4 <BSP_LCD_DisplayChar+0x84>)
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4423      	add	r3, r4
 800137e:	3308      	adds	r3, #8
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001384:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001388:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <BSP_LCD_DisplayChar+0x80>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4c0d      	ldr	r4, [pc, #52]	@ (80013c4 <BSP_LCD_DisplayChar+0x84>)
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4423      	add	r3, r4
 8001398:	3308      	adds	r3, #8
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	889b      	ldrh	r3, [r3, #4]
 800139e:	3307      	adds	r3, #7
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	da00      	bge.n	80013a6 <BSP_LCD_DisplayChar+0x66>
 80013a4:	3307      	adds	r3, #7
 80013a6:	10db      	asrs	r3, r3, #3
 80013a8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80013ac:	18ca      	adds	r2, r1, r3
 80013ae:	88b9      	ldrh	r1, [r7, #4]
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fa0e 	bl	80017d4 <DrawChar>
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd90      	pop	{r4, r7, pc}
 80013c0:	200003f0 	.word	0x200003f0
 80013c4:	200003f4 	.word	0x200003f4

080013c8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60ba      	str	r2, [r7, #8]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4603      	mov	r3, r0
 80013d4:	81fb      	strh	r3, [r7, #14]
 80013d6:	460b      	mov	r3, r1
 80013d8:	81bb      	strh	r3, [r7, #12]
 80013da:	4613      	mov	r3, r2
 80013dc:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80013de:	2301      	movs	r3, #1
 80013e0:	83fb      	strh	r3, [r7, #30]
 80013e2:	2300      	movs	r3, #0
 80013e4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80013f2:	e002      	b.n	80013fa <BSP_LCD_DisplayStringAt+0x32>
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	3301      	adds	r3, #1
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	617a      	str	r2, [r7, #20]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f6      	bne.n	80013f4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001406:	f7ff fe8f 	bl	8001128 <BSP_LCD_GetXSize>
 800140a:	4601      	mov	r1, r0
 800140c:	4b50      	ldr	r3, [pc, #320]	@ (8001550 <BSP_LCD_DisplayStringAt+0x188>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4850      	ldr	r0, [pc, #320]	@ (8001554 <BSP_LCD_DisplayStringAt+0x18c>)
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4403      	add	r3, r0
 800141c:	3308      	adds	r3, #8
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	889b      	ldrh	r3, [r3, #4]
 8001422:	fbb1 f3f3 	udiv	r3, r1, r3
 8001426:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	2b03      	cmp	r3, #3
 800142c:	d01c      	beq.n	8001468 <BSP_LCD_DisplayStringAt+0xa0>
 800142e:	2b03      	cmp	r3, #3
 8001430:	dc33      	bgt.n	800149a <BSP_LCD_DisplayStringAt+0xd2>
 8001432:	2b01      	cmp	r3, #1
 8001434:	d002      	beq.n	800143c <BSP_LCD_DisplayStringAt+0x74>
 8001436:	2b02      	cmp	r3, #2
 8001438:	d019      	beq.n	800146e <BSP_LCD_DisplayStringAt+0xa6>
 800143a:	e02e      	b.n	800149a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	1ad1      	subs	r1, r2, r3
 8001442:	4b43      	ldr	r3, [pc, #268]	@ (8001550 <BSP_LCD_DisplayStringAt+0x188>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4843      	ldr	r0, [pc, #268]	@ (8001554 <BSP_LCD_DisplayStringAt+0x18c>)
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4403      	add	r3, r0
 8001452:	3308      	adds	r3, #8
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	889b      	ldrh	r3, [r3, #4]
 8001458:	fb01 f303 	mul.w	r3, r1, r3
 800145c:	085b      	lsrs	r3, r3, #1
 800145e:	b29a      	uxth	r2, r3
 8001460:	89fb      	ldrh	r3, [r7, #14]
 8001462:	4413      	add	r3, r2
 8001464:	83fb      	strh	r3, [r7, #30]
      break;
 8001466:	e01b      	b.n	80014a0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8001468:	89fb      	ldrh	r3, [r7, #14]
 800146a:	83fb      	strh	r3, [r7, #30]
      break;
 800146c:	e018      	b.n	80014a0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	b299      	uxth	r1, r3
 8001476:	4b36      	ldr	r3, [pc, #216]	@ (8001550 <BSP_LCD_DisplayStringAt+0x188>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4836      	ldr	r0, [pc, #216]	@ (8001554 <BSP_LCD_DisplayStringAt+0x18c>)
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4403      	add	r3, r0
 8001486:	3308      	adds	r3, #8
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	889b      	ldrh	r3, [r3, #4]
 800148c:	fb11 f303 	smulbb	r3, r1, r3
 8001490:	b29a      	uxth	r2, r3
 8001492:	89fb      	ldrh	r3, [r7, #14]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	83fb      	strh	r3, [r7, #30]
      break;
 8001498:	e002      	b.n	80014a0 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	83fb      	strh	r3, [r7, #30]
      break;
 800149e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80014a0:	8bfb      	ldrh	r3, [r7, #30]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <BSP_LCD_DisplayStringAt+0xe6>
 80014a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	da1d      	bge.n	80014ea <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80014ae:	2301      	movs	r3, #1
 80014b0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80014b2:	e01a      	b.n	80014ea <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	89b9      	ldrh	r1, [r7, #12]
 80014ba:	8bfb      	ldrh	r3, [r7, #30]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff3f 	bl	8001340 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80014c2:	4b23      	ldr	r3, [pc, #140]	@ (8001550 <BSP_LCD_DisplayStringAt+0x188>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4923      	ldr	r1, [pc, #140]	@ (8001554 <BSP_LCD_DisplayStringAt+0x18c>)
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	3308      	adds	r3, #8
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	889a      	ldrh	r2, [r3, #4]
 80014d8:	8bfb      	ldrh	r3, [r7, #30]
 80014da:	4413      	add	r3, r2
 80014dc:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	3301      	adds	r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
    i++;
 80014e4:	8bbb      	ldrh	r3, [r7, #28]
 80014e6:	3301      	adds	r3, #1
 80014e8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	bf14      	ite	ne
 80014f2:	2301      	movne	r3, #1
 80014f4:	2300      	moveq	r3, #0
 80014f6:	b2dc      	uxtb	r4, r3
 80014f8:	f7ff fe16 	bl	8001128 <BSP_LCD_GetXSize>
 80014fc:	8bb9      	ldrh	r1, [r7, #28]
 80014fe:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <BSP_LCD_DisplayStringAt+0x188>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4d14      	ldr	r5, [pc, #80]	@ (8001554 <BSP_LCD_DisplayStringAt+0x18c>)
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	442b      	add	r3, r5
 800150e:	3308      	adds	r3, #8
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	889b      	ldrh	r3, [r3, #4]
 8001514:	fb01 f303 	mul.w	r3, r1, r3
 8001518:	1ac3      	subs	r3, r0, r3
 800151a:	b299      	uxth	r1, r3
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <BSP_LCD_DisplayStringAt+0x188>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	480c      	ldr	r0, [pc, #48]	@ (8001554 <BSP_LCD_DisplayStringAt+0x18c>)
 8001522:	4613      	mov	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4403      	add	r3, r0
 800152c:	3308      	adds	r3, #8
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	889b      	ldrh	r3, [r3, #4]
 8001532:	4299      	cmp	r1, r3
 8001534:	bf2c      	ite	cs
 8001536:	2301      	movcs	r3, #1
 8001538:	2300      	movcc	r3, #0
 800153a:	b2db      	uxtb	r3, r3
 800153c:	4023      	ands	r3, r4
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1b7      	bne.n	80014b4 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bdb0      	pop	{r4, r5, r7, pc}
 800154e:	bf00      	nop
 8001550:	200003f0 	.word	0x200003f0
 8001554:	200003f4 	.word	0x200003f4

08001558 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001558:	b5b0      	push	{r4, r5, r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	603a      	str	r2, [r7, #0]
 8001562:	80fb      	strh	r3, [r7, #6]
 8001564:	460b      	mov	r3, r1
 8001566:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <BSP_LCD_DrawPixel+0x88>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a1d      	ldr	r2, [pc, #116]	@ (80015e4 <BSP_LCD_DrawPixel+0x8c>)
 800156e:	2134      	movs	r1, #52	@ 0x34
 8001570:	fb01 f303 	mul.w	r3, r1, r3
 8001574:	4413      	add	r3, r2
 8001576:	3348      	adds	r3, #72	@ 0x48
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d116      	bne.n	80015ac <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <BSP_LCD_DrawPixel+0x88>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a18      	ldr	r2, [pc, #96]	@ (80015e4 <BSP_LCD_DrawPixel+0x8c>)
 8001584:	2134      	movs	r1, #52	@ 0x34
 8001586:	fb01 f303 	mul.w	r3, r1, r3
 800158a:	4413      	add	r3, r2
 800158c:	335c      	adds	r3, #92	@ 0x5c
 800158e:	681c      	ldr	r4, [r3, #0]
 8001590:	88bd      	ldrh	r5, [r7, #4]
 8001592:	f7ff fdc9 	bl	8001128 <BSP_LCD_GetXSize>
 8001596:	4603      	mov	r3, r0
 8001598:	fb03 f205 	mul.w	r2, r3, r5
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	4413      	add	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4423      	add	r3, r4
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	b292      	uxth	r2, r2
 80015a8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80015aa:	e015      	b.n	80015d8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <BSP_LCD_DrawPixel+0x88>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0c      	ldr	r2, [pc, #48]	@ (80015e4 <BSP_LCD_DrawPixel+0x8c>)
 80015b2:	2134      	movs	r1, #52	@ 0x34
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	335c      	adds	r3, #92	@ 0x5c
 80015bc:	681c      	ldr	r4, [r3, #0]
 80015be:	88bd      	ldrh	r5, [r7, #4]
 80015c0:	f7ff fdb2 	bl	8001128 <BSP_LCD_GetXSize>
 80015c4:	4603      	mov	r3, r0
 80015c6:	fb03 f205 	mul.w	r2, r3, r5
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4423      	add	r3, r4
 80015d2:	461a      	mov	r2, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bdb0      	pop	{r4, r5, r7, pc}
 80015e0:	200003f0 	.word	0x200003f0
 80015e4:	20000308 	.word	0x20000308

080015e8 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b090      	sub	sp, #64	@ 0x40
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80015f2:	4b64      	ldr	r3, [pc, #400]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	4a63      	ldr	r2, [pc, #396]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 80015f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fe:	4b61      	ldr	r3, [pc, #388]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001606:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800160a:	4b5e      	ldr	r3, [pc, #376]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	4a5d      	ldr	r2, [pc, #372]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 8001610:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001614:	6313      	str	r3, [r2, #48]	@ 0x30
 8001616:	4b5b      	ldr	r3, [pc, #364]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001622:	4b58      	ldr	r3, [pc, #352]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	4a57      	ldr	r2, [pc, #348]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 8001628:	f043 0310 	orr.w	r3, r3, #16
 800162c:	6313      	str	r3, [r2, #48]	@ 0x30
 800162e:	4b55      	ldr	r3, [pc, #340]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	623b      	str	r3, [r7, #32]
 8001638:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800163a:	4b52      	ldr	r3, [pc, #328]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a51      	ldr	r2, [pc, #324]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 8001640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b4f      	ldr	r3, [pc, #316]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800164e:	61fb      	str	r3, [r7, #28]
 8001650:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001652:	4b4c      	ldr	r3, [pc, #304]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a4b      	ldr	r2, [pc, #300]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b49      	ldr	r3, [pc, #292]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001666:	61bb      	str	r3, [r7, #24]
 8001668:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800166a:	4b46      	ldr	r3, [pc, #280]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	4a45      	ldr	r2, [pc, #276]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 8001670:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001674:	6313      	str	r3, [r2, #48]	@ 0x30
 8001676:	4b43      	ldr	r3, [pc, #268]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001682:	4b40      	ldr	r3, [pc, #256]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a3f      	ldr	r2, [pc, #252]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 8001688:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b3d      	ldr	r3, [pc, #244]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800169a:	4b3a      	ldr	r3, [pc, #232]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	4a39      	ldr	r2, [pc, #228]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 80016a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a6:	4b37      	ldr	r3, [pc, #220]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80016b2:	4b34      	ldr	r3, [pc, #208]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a33      	ldr	r2, [pc, #204]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 80016b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b31      	ldr	r3, [pc, #196]	@ (8001784 <BSP_LCD_MspInit+0x19c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80016ca:	2310      	movs	r3, #16
 80016cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80016d6:	2302      	movs	r3, #2
 80016d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80016da:	230e      	movs	r3, #14
 80016dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80016de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016e2:	4619      	mov	r1, r3
 80016e4:	4828      	ldr	r0, [pc, #160]	@ (8001788 <BSP_LCD_MspInit+0x1a0>)
 80016e6:	f001 fa4f 	bl	8002b88 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80016ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80016f4:	2309      	movs	r3, #9
 80016f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80016f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016fc:	4619      	mov	r1, r3
 80016fe:	4823      	ldr	r0, [pc, #140]	@ (800178c <BSP_LCD_MspInit+0x1a4>)
 8001700:	f001 fa42 	bl	8002b88 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8001704:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001708:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800170e:	230e      	movs	r3, #14
 8001710:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001712:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001716:	4619      	mov	r1, r3
 8001718:	481d      	ldr	r0, [pc, #116]	@ (8001790 <BSP_LCD_MspInit+0x1a8>)
 800171a:	f001 fa35 	bl	8002b88 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800171e:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001722:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001728:	230e      	movs	r3, #14
 800172a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800172c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001730:	4619      	mov	r1, r3
 8001732:	4818      	ldr	r0, [pc, #96]	@ (8001794 <BSP_LCD_MspInit+0x1ac>)
 8001734:	f001 fa28 	bl	8002b88 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001738:	23f7      	movs	r3, #247	@ 0xf7
 800173a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001740:	230e      	movs	r3, #14
 8001742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001744:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001748:	4619      	mov	r1, r3
 800174a:	4813      	ldr	r0, [pc, #76]	@ (8001798 <BSP_LCD_MspInit+0x1b0>)
 800174c:	f001 fa1c 	bl	8002b88 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800175a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800175e:	4619      	mov	r1, r3
 8001760:	480b      	ldr	r0, [pc, #44]	@ (8001790 <BSP_LCD_MspInit+0x1a8>)
 8001762:	f001 fa11 	bl	8002b88 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001766:	2308      	movs	r3, #8
 8001768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800176e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001772:	4619      	mov	r1, r3
 8001774:	4808      	ldr	r0, [pc, #32]	@ (8001798 <BSP_LCD_MspInit+0x1b0>)
 8001776:	f001 fa07 	bl	8002b88 <HAL_GPIO_Init>
}
 800177a:	bf00      	nop
 800177c:	3740      	adds	r7, #64	@ 0x40
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800
 8001788:	40021000 	.word	0x40021000
 800178c:	40021800 	.word	0x40021800
 8001790:	40022000 	.word	0x40022000
 8001794:	40022400 	.word	0x40022400
 8001798:	40022800 	.word	0x40022800

0800179c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80017a6:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <BSP_LCD_ClockConfig+0x34>)
 80017a8:	2208      	movs	r2, #8
 80017aa:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <BSP_LCD_ClockConfig+0x34>)
 80017ae:	22c0      	movs	r2, #192	@ 0xc0
 80017b0:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80017b2:	4b07      	ldr	r3, [pc, #28]	@ (80017d0 <BSP_LCD_ClockConfig+0x34>)
 80017b4:	2205      	movs	r2, #5
 80017b6:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <BSP_LCD_ClockConfig+0x34>)
 80017ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017be:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80017c0:	4803      	ldr	r0, [pc, #12]	@ (80017d0 <BSP_LCD_ClockConfig+0x34>)
 80017c2:	f004 f9c7 	bl	8005b54 <HAL_RCCEx_PeriphCLKConfig>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000040c 	.word	0x2000040c

080017d4 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	603a      	str	r2, [r7, #0]
 80017de:	80fb      	strh	r3, [r7, #6]
 80017e0:	460b      	mov	r3, r1
 80017e2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80017ec:	4b53      	ldr	r3, [pc, #332]	@ (800193c <DrawChar+0x168>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4953      	ldr	r1, [pc, #332]	@ (8001940 <DrawChar+0x16c>)
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	3308      	adds	r3, #8
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	88db      	ldrh	r3, [r3, #6]
 8001802:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001804:	4b4d      	ldr	r3, [pc, #308]	@ (800193c <DrawChar+0x168>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	494d      	ldr	r1, [pc, #308]	@ (8001940 <DrawChar+0x16c>)
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	3308      	adds	r3, #8
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	889b      	ldrh	r3, [r3, #4]
 800181a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800181c:	8a3b      	ldrh	r3, [r7, #16]
 800181e:	3307      	adds	r3, #7
 8001820:	2b00      	cmp	r3, #0
 8001822:	da00      	bge.n	8001826 <DrawChar+0x52>
 8001824:	3307      	adds	r3, #7
 8001826:	10db      	asrs	r3, r3, #3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	b2da      	uxtb	r2, r3
 800182e:	8a3b      	ldrh	r3, [r7, #16]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	e076      	b.n	800192a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800183c:	8a3b      	ldrh	r3, [r7, #16]
 800183e:	3307      	adds	r3, #7
 8001840:	2b00      	cmp	r3, #0
 8001842:	da00      	bge.n	8001846 <DrawChar+0x72>
 8001844:	3307      	adds	r3, #7
 8001846:	10db      	asrs	r3, r3, #3
 8001848:	461a      	mov	r2, r3
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fb02 f303 	mul.w	r3, r2, r3
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	4413      	add	r3, r2
 8001854:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8001856:	8a3b      	ldrh	r3, [r7, #16]
 8001858:	3307      	adds	r3, #7
 800185a:	2b00      	cmp	r3, #0
 800185c:	da00      	bge.n	8001860 <DrawChar+0x8c>
 800185e:	3307      	adds	r3, #7
 8001860:	10db      	asrs	r3, r3, #3
 8001862:	2b01      	cmp	r3, #1
 8001864:	d002      	beq.n	800186c <DrawChar+0x98>
 8001866:	2b02      	cmp	r3, #2
 8001868:	d004      	beq.n	8001874 <DrawChar+0xa0>
 800186a:	e00c      	b.n	8001886 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	617b      	str	r3, [r7, #20]
      break;
 8001872:	e016      	b.n	80018a2 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	3201      	adds	r2, #1
 800187e:	7812      	ldrb	r2, [r2, #0]
 8001880:	4313      	orrs	r3, r2
 8001882:	617b      	str	r3, [r7, #20]
      break;
 8001884:	e00d      	b.n	80018a2 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	041a      	lsls	r2, r3, #16
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	3301      	adds	r3, #1
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	4313      	orrs	r3, r2
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	3202      	adds	r2, #2
 800189a:	7812      	ldrb	r2, [r2, #0]
 800189c:	4313      	orrs	r3, r2
 800189e:	617b      	str	r3, [r7, #20]
      break;
 80018a0:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	e036      	b.n	8001916 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80018a8:	8a3a      	ldrh	r2, [r7, #16]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	1ad2      	subs	r2, r2, r3
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	4413      	add	r3, r2
 80018b2:	3b01      	subs	r3, #1
 80018b4:	2201      	movs	r2, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	4013      	ands	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d012      	beq.n	80018ea <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	4413      	add	r3, r2
 80018cc:	b298      	uxth	r0, r3
 80018ce:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <DrawChar+0x168>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	491b      	ldr	r1, [pc, #108]	@ (8001940 <DrawChar+0x16c>)
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	88bb      	ldrh	r3, [r7, #4]
 80018e2:	4619      	mov	r1, r3
 80018e4:	f7ff fe38 	bl	8001558 <BSP_LCD_DrawPixel>
 80018e8:	e012      	b.n	8001910 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	4413      	add	r3, r2
 80018f2:	b298      	uxth	r0, r3
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <DrawChar+0x168>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4911      	ldr	r1, [pc, #68]	@ (8001940 <DrawChar+0x16c>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	3304      	adds	r3, #4
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	88bb      	ldrh	r3, [r7, #4]
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff fe24 	bl	8001558 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	3301      	adds	r3, #1
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	8a3b      	ldrh	r3, [r7, #16]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	429a      	cmp	r2, r3
 800191c:	d3c4      	bcc.n	80018a8 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800191e:	88bb      	ldrh	r3, [r7, #4]
 8001920:	3301      	adds	r3, #1
 8001922:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	3301      	adds	r3, #1
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	8a7b      	ldrh	r3, [r7, #18]
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	429a      	cmp	r2, r3
 8001930:	d384      	bcc.n	800183c <DrawChar+0x68>
  }
}
 8001932:	bf00      	nop
 8001934:	bf00      	nop
 8001936:	3720      	adds	r7, #32
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200003f0 	.word	0x200003f0
 8001940:	200003f4 	.word	0x200003f4

08001944 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af02      	add	r7, sp, #8
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001952:	4b1e      	ldr	r3, [pc, #120]	@ (80019cc <LL_FillBuffer+0x88>)
 8001954:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001958:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800195a:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <LL_FillBuffer+0x8c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1d      	ldr	r2, [pc, #116]	@ (80019d4 <LL_FillBuffer+0x90>)
 8001960:	2134      	movs	r1, #52	@ 0x34
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	3348      	adds	r3, #72	@ 0x48
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d103      	bne.n	8001978 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8001970:	4b16      	ldr	r3, [pc, #88]	@ (80019cc <LL_FillBuffer+0x88>)
 8001972:	2202      	movs	r2, #2
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	e002      	b.n	800197e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001978:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <LL_FillBuffer+0x88>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800197e:	4a13      	ldr	r2, [pc, #76]	@ (80019cc <LL_FillBuffer+0x88>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <LL_FillBuffer+0x88>)
 8001986:	4a14      	ldr	r2, [pc, #80]	@ (80019d8 <LL_FillBuffer+0x94>)
 8001988:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800198a:	4810      	ldr	r0, [pc, #64]	@ (80019cc <LL_FillBuffer+0x88>)
 800198c:	f000 fd60 	bl	8002450 <HAL_DMA2D_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d115      	bne.n	80019c2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001996:	68f9      	ldr	r1, [r7, #12]
 8001998:	480c      	ldr	r0, [pc, #48]	@ (80019cc <LL_FillBuffer+0x88>)
 800199a:	f000 ffc7 	bl	800292c <HAL_DMA2D_ConfigLayer>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10e      	bne.n	80019c2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69f9      	ldr	r1, [r7, #28]
 80019ae:	4807      	ldr	r0, [pc, #28]	@ (80019cc <LL_FillBuffer+0x88>)
 80019b0:	f000 fd98 	bl	80024e4 <HAL_DMA2D_Start>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d103      	bne.n	80019c2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80019ba:	210a      	movs	r1, #10
 80019bc:	4803      	ldr	r0, [pc, #12]	@ (80019cc <LL_FillBuffer+0x88>)
 80019be:	f000 fdbc 	bl	800253a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200003b0 	.word	0x200003b0
 80019d0:	200003f0 	.word	0x200003f0
 80019d4:	20000308 	.word	0x20000308
 80019d8:	4002b000 	.word	0x4002b000

080019dc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80019e0:	4b29      	ldr	r3, [pc, #164]	@ (8001a88 <BSP_SDRAM_Init+0xac>)
 80019e2:	4a2a      	ldr	r2, [pc, #168]	@ (8001a8c <BSP_SDRAM_Init+0xb0>)
 80019e4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80019e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a90 <BSP_SDRAM_Init+0xb4>)
 80019e8:	2202      	movs	r2, #2
 80019ea:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80019ec:	4b28      	ldr	r3, [pc, #160]	@ (8001a90 <BSP_SDRAM_Init+0xb4>)
 80019ee:	2207      	movs	r2, #7
 80019f0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80019f2:	4b27      	ldr	r3, [pc, #156]	@ (8001a90 <BSP_SDRAM_Init+0xb4>)
 80019f4:	2204      	movs	r2, #4
 80019f6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80019f8:	4b25      	ldr	r3, [pc, #148]	@ (8001a90 <BSP_SDRAM_Init+0xb4>)
 80019fa:	2207      	movs	r2, #7
 80019fc:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80019fe:	4b24      	ldr	r3, [pc, #144]	@ (8001a90 <BSP_SDRAM_Init+0xb4>)
 8001a00:	2202      	movs	r2, #2
 8001a02:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001a04:	4b22      	ldr	r3, [pc, #136]	@ (8001a90 <BSP_SDRAM_Init+0xb4>)
 8001a06:	2202      	movs	r2, #2
 8001a08:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001a0a:	4b21      	ldr	r3, [pc, #132]	@ (8001a90 <BSP_SDRAM_Init+0xb4>)
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001a10:	4b1d      	ldr	r3, [pc, #116]	@ (8001a88 <BSP_SDRAM_Init+0xac>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a16:	4b1c      	ldr	r3, [pc, #112]	@ (8001a88 <BSP_SDRAM_Init+0xac>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a88 <BSP_SDRAM_Init+0xac>)
 8001a1e:	2204      	movs	r2, #4
 8001a20:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001a22:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <BSP_SDRAM_Init+0xac>)
 8001a24:	2210      	movs	r2, #16
 8001a26:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a28:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <BSP_SDRAM_Init+0xac>)
 8001a2a:	2240      	movs	r2, #64	@ 0x40
 8001a2c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	@ (8001a88 <BSP_SDRAM_Init+0xac>)
 8001a30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a34:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a36:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <BSP_SDRAM_Init+0xac>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001a3c:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <BSP_SDRAM_Init+0xac>)
 8001a3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a42:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001a44:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <BSP_SDRAM_Init+0xac>)
 8001a46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a4a:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a88 <BSP_SDRAM_Init+0xac>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001a52:	2100      	movs	r1, #0
 8001a54:	480c      	ldr	r0, [pc, #48]	@ (8001a88 <BSP_SDRAM_Init+0xac>)
 8001a56:	f000 f87f 	bl	8001b58 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001a5a:	490d      	ldr	r1, [pc, #52]	@ (8001a90 <BSP_SDRAM_Init+0xb4>)
 8001a5c:	480a      	ldr	r0, [pc, #40]	@ (8001a88 <BSP_SDRAM_Init+0xac>)
 8001a5e:	f004 fc69 	bl	8006334 <HAL_SDRAM_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001a68:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <BSP_SDRAM_Init+0xb8>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	e002      	b.n	8001a76 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001a70:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <BSP_SDRAM_Init+0xb8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001a76:	f240 6003 	movw	r0, #1539	@ 0x603
 8001a7a:	f000 f80d 	bl	8001a98 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001a7e:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <BSP_SDRAM_Init+0xb8>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000490 	.word	0x20000490
 8001a8c:	a0000140 	.word	0xa0000140
 8001a90:	200004c4 	.word	0x200004c4
 8001a94:	20000014 	.word	0x20000014

08001a98 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001aaa:	4b29      	ldr	r3, [pc, #164]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001aac:	2210      	movs	r2, #16
 8001aae:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001ab0:	4b27      	ldr	r3, [pc, #156]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001ab6:	4b26      	ldr	r3, [pc, #152]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001abc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ac0:	4923      	ldr	r1, [pc, #140]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ac2:	4824      	ldr	r0, [pc, #144]	@ (8001b54 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001ac4:	f004 fc6a 	bl	800639c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f000 f96b 	bl	8001da4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001ace:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001ada:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001ae6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aea:	4919      	ldr	r1, [pc, #100]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001aec:	4819      	ldr	r0, [pc, #100]	@ (8001b54 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001aee:	f004 fc55 	bl	800639c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001af2:	4b17      	ldr	r3, [pc, #92]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001af4:	2203      	movs	r2, #3
 8001af6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001af8:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001afa:	2210      	movs	r2, #16
 8001afc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001afe:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b00:	2208      	movs	r2, #8
 8001b02:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001b04:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001b0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b0e:	4910      	ldr	r1, [pc, #64]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b10:	4810      	ldr	r0, [pc, #64]	@ (8001b54 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b12:	f004 fc43 	bl	800639c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001b16:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001b1a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b1e:	2204      	movs	r2, #4
 8001b20:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b24:	2210      	movs	r2, #16
 8001b26:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001b28:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4a07      	ldr	r2, [pc, #28]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b32:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001b34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b38:	4905      	ldr	r1, [pc, #20]	@ (8001b50 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b3a:	4806      	ldr	r0, [pc, #24]	@ (8001b54 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b3c:	f004 fc2e 	bl	800639c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4804      	ldr	r0, [pc, #16]	@ (8001b54 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b44:	f004 fc5f 	bl	8006406 <HAL_SDRAM_ProgramRefreshRate>
}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200004e0 	.word	0x200004e0
 8001b54:	20000490 	.word	0x20000490

08001b58 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b090      	sub	sp, #64	@ 0x40
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b62:	4b70      	ldr	r3, [pc, #448]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b66:	4a6f      	ldr	r2, [pc, #444]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6393      	str	r3, [r2, #56]	@ 0x38
 8001b6e:	4b6d      	ldr	r3, [pc, #436]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a69      	ldr	r2, [pc, #420]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001b80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b67      	ldr	r3, [pc, #412]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b92:	4b64      	ldr	r3, [pc, #400]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	4a63      	ldr	r2, [pc, #396]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9e:	4b61      	ldr	r3, [pc, #388]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	623b      	str	r3, [r7, #32]
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001baa:	4b5e      	ldr	r3, [pc, #376]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	4a5d      	ldr	r2, [pc, #372]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001bb0:	f043 0308 	orr.w	r3, r3, #8
 8001bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bc2:	4b58      	ldr	r3, [pc, #352]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4a57      	ldr	r2, [pc, #348]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001bc8:	f043 0310 	orr.w	r3, r3, #16
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4b55      	ldr	r3, [pc, #340]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	61bb      	str	r3, [r7, #24]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bda:	4b52      	ldr	r3, [pc, #328]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	4a51      	ldr	r2, [pc, #324]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001be0:	f043 0320 	orr.w	r3, r3, #32
 8001be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be6:	4b4f      	ldr	r3, [pc, #316]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f003 0320 	and.w	r3, r3, #32
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bf2:	4b4c      	ldr	r3, [pc, #304]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	4a4b      	ldr	r2, [pc, #300]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001bf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfe:	4b49      	ldr	r3, [pc, #292]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c0a:	4b46      	ldr	r3, [pc, #280]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	4a45      	ldr	r2, [pc, #276]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c16:	4b43      	ldr	r3, [pc, #268]	@ (8001d24 <BSP_SDRAM_MspInit+0x1cc>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001c26:	2301      	movs	r3, #1
 8001c28:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001c2e:	230c      	movs	r3, #12
 8001c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001c32:	2308      	movs	r3, #8
 8001c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001c36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	483a      	ldr	r0, [pc, #232]	@ (8001d28 <BSP_SDRAM_MspInit+0x1d0>)
 8001c3e:	f000 ffa3 	bl	8002b88 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001c42:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001c48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4837      	ldr	r0, [pc, #220]	@ (8001d2c <BSP_SDRAM_MspInit+0x1d4>)
 8001c50:	f000 ff9a 	bl	8002b88 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001c54:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001c5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4833      	ldr	r0, [pc, #204]	@ (8001d30 <BSP_SDRAM_MspInit+0x1d8>)
 8001c62:	f000 ff91 	bl	8002b88 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001c66:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001c6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c70:	4619      	mov	r1, r3
 8001c72:	4830      	ldr	r0, [pc, #192]	@ (8001d34 <BSP_SDRAM_MspInit+0x1dc>)
 8001c74:	f000 ff88 	bl	8002b88 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001c78:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001c7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c82:	4619      	mov	r1, r3
 8001c84:	482c      	ldr	r0, [pc, #176]	@ (8001d38 <BSP_SDRAM_MspInit+0x1e0>)
 8001c86:	f000 ff7f 	bl	8002b88 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001c8a:	2328      	movs	r3, #40	@ 0x28
 8001c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001c8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c92:	4619      	mov	r1, r3
 8001c94:	4829      	ldr	r0, [pc, #164]	@ (8001d3c <BSP_SDRAM_MspInit+0x1e4>)
 8001c96:	f000 ff77 	bl	8002b88 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001c9a:	4b29      	ldr	r3, [pc, #164]	@ (8001d40 <BSP_SDRAM_MspInit+0x1e8>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001ca0:	4b27      	ldr	r3, [pc, #156]	@ (8001d40 <BSP_SDRAM_MspInit+0x1e8>)
 8001ca2:	2280      	movs	r2, #128	@ 0x80
 8001ca4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001ca6:	4b26      	ldr	r3, [pc, #152]	@ (8001d40 <BSP_SDRAM_MspInit+0x1e8>)
 8001ca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cac:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001cae:	4b24      	ldr	r3, [pc, #144]	@ (8001d40 <BSP_SDRAM_MspInit+0x1e8>)
 8001cb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cb4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cb6:	4b22      	ldr	r3, [pc, #136]	@ (8001d40 <BSP_SDRAM_MspInit+0x1e8>)
 8001cb8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cbc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001cbe:	4b20      	ldr	r3, [pc, #128]	@ (8001d40 <BSP_SDRAM_MspInit+0x1e8>)
 8001cc0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cc4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d40 <BSP_SDRAM_MspInit+0x1e8>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <BSP_SDRAM_MspInit+0x1e8>)
 8001cce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cd2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d40 <BSP_SDRAM_MspInit+0x1e8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001cda:	4b19      	ldr	r3, [pc, #100]	@ (8001d40 <BSP_SDRAM_MspInit+0x1e8>)
 8001cdc:	2203      	movs	r2, #3
 8001cde:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001ce0:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <BSP_SDRAM_MspInit+0x1e8>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001ce6:	4b16      	ldr	r3, [pc, #88]	@ (8001d40 <BSP_SDRAM_MspInit+0x1e8>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001cec:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <BSP_SDRAM_MspInit+0x1e8>)
 8001cee:	4a15      	ldr	r2, [pc, #84]	@ (8001d44 <BSP_SDRAM_MspInit+0x1ec>)
 8001cf0:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a12      	ldr	r2, [pc, #72]	@ (8001d40 <BSP_SDRAM_MspInit+0x1e8>)
 8001cf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cf8:	4a11      	ldr	r2, [pc, #68]	@ (8001d40 <BSP_SDRAM_MspInit+0x1e8>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001cfe:	4810      	ldr	r0, [pc, #64]	@ (8001d40 <BSP_SDRAM_MspInit+0x1e8>)
 8001d00:	f000 fa04 	bl	800210c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001d04:	480e      	ldr	r0, [pc, #56]	@ (8001d40 <BSP_SDRAM_MspInit+0x1e8>)
 8001d06:	f000 f953 	bl	8001fb0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	210f      	movs	r1, #15
 8001d0e:	2038      	movs	r0, #56	@ 0x38
 8001d10:	f000 f924 	bl	8001f5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001d14:	2038      	movs	r0, #56	@ 0x38
 8001d16:	f000 f93d 	bl	8001f94 <HAL_NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3740      	adds	r7, #64	@ 0x40
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	40020c00 	.word	0x40020c00
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40021400 	.word	0x40021400
 8001d38:	40021800 	.word	0x40021800
 8001d3c:	40021c00 	.word	0x40021c00
 8001d40:	200004f0 	.word	0x200004f0
 8001d44:	40026410 	.word	0x40026410

08001d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	f000 f8fa 	bl	8001f46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f7ff f874 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d58:	f7fe fd84 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_IncTick+0x20>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	2000001c 	.word	0x2000001c
 8001d88:	20000550 	.word	0x20000550

08001d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <HAL_GetTick+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000550 	.word	0x20000550

08001da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff ffee 	bl	8001d8c <HAL_GetTick>
 8001db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dbc:	d005      	beq.n	8001dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_Delay+0x44>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dca:	bf00      	nop
 8001dcc:	f7ff ffde 	bl	8001d8c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d8f7      	bhi.n	8001dcc <HAL_Delay+0x28>
  {
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000001c 	.word	0x2000001c

08001dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <__NVIC_SetPriorityGrouping+0x40>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1a:	4a04      	ldr	r2, [pc, #16]	@ (8001e2c <__NVIC_SetPriorityGrouping+0x40>)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	60d3      	str	r3, [r2, #12]
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00
 8001e30:	05fa0000 	.word	0x05fa0000

08001e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e38:	4b04      	ldr	r3, [pc, #16]	@ (8001e4c <__NVIC_GetPriorityGrouping+0x18>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	f003 0307 	and.w	r3, r3, #7
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	db0b      	blt.n	8001e7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	f003 021f 	and.w	r2, r3, #31
 8001e68:	4907      	ldr	r1, [pc, #28]	@ (8001e88 <__NVIC_EnableIRQ+0x38>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	2001      	movs	r0, #1
 8001e72:	fa00 f202 	lsl.w	r2, r0, r2
 8001e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000e100 	.word	0xe000e100

08001e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db0a      	blt.n	8001eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	490c      	ldr	r1, [pc, #48]	@ (8001ed8 <__NVIC_SetPriority+0x4c>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb4:	e00a      	b.n	8001ecc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4908      	ldr	r1, [pc, #32]	@ (8001edc <__NVIC_SetPriority+0x50>)
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	3b04      	subs	r3, #4
 8001ec4:	0112      	lsls	r2, r2, #4
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	440b      	add	r3, r1
 8001eca:	761a      	strb	r2, [r3, #24]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000e100 	.word	0xe000e100
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	@ 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f1c3 0307 	rsb	r3, r3, #7
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	bf28      	it	cs
 8001efe:	2304      	movcs	r3, #4
 8001f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3304      	adds	r3, #4
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d902      	bls.n	8001f10 <NVIC_EncodePriority+0x30>
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3b03      	subs	r3, #3
 8001f0e:	e000      	b.n	8001f12 <NVIC_EncodePriority+0x32>
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	401a      	ands	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	43d9      	mvns	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	4313      	orrs	r3, r2
         );
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	@ 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ff4c 	bl	8001dec <__NVIC_SetPriorityGrouping>
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f6e:	f7ff ff61 	bl	8001e34 <__NVIC_GetPriorityGrouping>
 8001f72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	68b9      	ldr	r1, [r7, #8]
 8001f78:	6978      	ldr	r0, [r7, #20]
 8001f7a:	f7ff ffb1 	bl	8001ee0 <NVIC_EncodePriority>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff80 	bl	8001e8c <__NVIC_SetPriority>
}
 8001f8c:	bf00      	nop
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff ff54 	bl	8001e50 <__NVIC_EnableIRQ>
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff fee6 	bl	8001d8c <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e099      	b.n	8002100 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0201 	bic.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fec:	e00f      	b.n	800200e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fee:	f7ff fecd 	bl	8001d8c <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b05      	cmp	r3, #5
 8001ffa:	d908      	bls.n	800200e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2220      	movs	r2, #32
 8002000:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2203      	movs	r2, #3
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e078      	b.n	8002100 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1e8      	bne.n	8001fee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	4b38      	ldr	r3, [pc, #224]	@ (8002108 <HAL_DMA_Init+0x158>)
 8002028:	4013      	ands	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800203a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002046:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002052:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	2b04      	cmp	r3, #4
 8002066:	d107      	bne.n	8002078 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002070:	4313      	orrs	r3, r2
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4313      	orrs	r3, r2
 8002076:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f023 0307 	bic.w	r3, r3, #7
 800208e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	4313      	orrs	r3, r2
 8002098:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d117      	bne.n	80020d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00e      	beq.n	80020d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f94f 	bl	8002358 <DMA_CheckFifoParam>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2240      	movs	r2, #64	@ 0x40
 80020c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020ce:	2301      	movs	r3, #1
 80020d0:	e016      	b.n	8002100 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f906 	bl	80022ec <DMA_CalcBaseAndBitshift>
 80020e0:	4603      	mov	r3, r0
 80020e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e8:	223f      	movs	r2, #63	@ 0x3f
 80020ea:	409a      	lsls	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	f010803f 	.word	0xf010803f

0800210c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e050      	b.n	80021c0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d101      	bne.n	800212e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800212a:	2302      	movs	r3, #2
 800212c:	e048      	b.n	80021c0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2200      	movs	r2, #0
 800214c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2221      	movs	r2, #33	@ 0x21
 800216c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f8bc 	bl	80022ec <DMA_CalcBaseAndBitshift>
 8002174:	4603      	mov	r3, r0
 8002176:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217c:	223f      	movs	r2, #63	@ 0x3f
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021d6:	f7ff fdd9 	bl	8001d8c <HAL_GetTick>
 80021da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d008      	beq.n	80021fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2280      	movs	r2, #128	@ 0x80
 80021ec:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e052      	b.n	80022a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0216 	bic.w	r2, r2, #22
 8002208:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002218:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	2b00      	cmp	r3, #0
 8002220:	d103      	bne.n	800222a <HAL_DMA_Abort+0x62>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0208 	bic.w	r2, r2, #8
 8002238:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0201 	bic.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800224a:	e013      	b.n	8002274 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800224c:	f7ff fd9e 	bl	8001d8c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b05      	cmp	r3, #5
 8002258:	d90c      	bls.n	8002274 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2220      	movs	r2, #32
 800225e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2203      	movs	r2, #3
 8002264:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e015      	b.n	80022a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1e4      	bne.n	800224c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002286:	223f      	movs	r2, #63	@ 0x3f
 8002288:	409a      	lsls	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d004      	beq.n	80022c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2280      	movs	r2, #128	@ 0x80
 80022c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00c      	b.n	80022e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2205      	movs	r2, #5
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	3b10      	subs	r3, #16
 80022fc:	4a13      	ldr	r2, [pc, #76]	@ (800234c <DMA_CalcBaseAndBitshift+0x60>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002306:	4a12      	ldr	r2, [pc, #72]	@ (8002350 <DMA_CalcBaseAndBitshift+0x64>)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d908      	bls.n	800232c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <DMA_CalcBaseAndBitshift+0x68>)
 8002322:	4013      	ands	r3, r2
 8002324:	1d1a      	adds	r2, r3, #4
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	659a      	str	r2, [r3, #88]	@ 0x58
 800232a:	e006      	b.n	800233a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <DMA_CalcBaseAndBitshift+0x68>)
 8002334:	4013      	ands	r3, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	aaaaaaab 	.word	0xaaaaaaab
 8002350:	0800bb44 	.word	0x0800bb44
 8002354:	fffffc00 	.word	0xfffffc00

08002358 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002368:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d11f      	bne.n	80023b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d856      	bhi.n	8002426 <DMA_CheckFifoParam+0xce>
 8002378:	a201      	add	r2, pc, #4	@ (adr r2, 8002380 <DMA_CheckFifoParam+0x28>)
 800237a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237e:	bf00      	nop
 8002380:	08002391 	.word	0x08002391
 8002384:	080023a3 	.word	0x080023a3
 8002388:	08002391 	.word	0x08002391
 800238c:	08002427 	.word	0x08002427
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002394:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d046      	beq.n	800242a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a0:	e043      	b.n	800242a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023aa:	d140      	bne.n	800242e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b0:	e03d      	b.n	800242e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023ba:	d121      	bne.n	8002400 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d837      	bhi.n	8002432 <DMA_CheckFifoParam+0xda>
 80023c2:	a201      	add	r2, pc, #4	@ (adr r2, 80023c8 <DMA_CheckFifoParam+0x70>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	080023d9 	.word	0x080023d9
 80023cc:	080023df 	.word	0x080023df
 80023d0:	080023d9 	.word	0x080023d9
 80023d4:	080023f1 	.word	0x080023f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
      break;
 80023dc:	e030      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d025      	beq.n	8002436 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ee:	e022      	b.n	8002436 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023f8:	d11f      	bne.n	800243a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023fe:	e01c      	b.n	800243a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d903      	bls.n	800240e <DMA_CheckFifoParam+0xb6>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d003      	beq.n	8002414 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800240c:	e018      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
      break;
 8002412:	e015      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002418:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00e      	beq.n	800243e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
      break;
 8002424:	e00b      	b.n	800243e <DMA_CheckFifoParam+0xe6>
      break;
 8002426:	bf00      	nop
 8002428:	e00a      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
      break;
 800242a:	bf00      	nop
 800242c:	e008      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
 8002430:	e006      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
      break;
 8002432:	bf00      	nop
 8002434:	e004      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
      break;
 8002436:	bf00      	nop
 8002438:	e002      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
      break;   
 800243a:	bf00      	nop
 800243c:	e000      	b.n	8002440 <DMA_CheckFifoParam+0xe8>
      break;
 800243e:	bf00      	nop
    }
  } 
  
  return status; 
 8002440:	7bfb      	ldrb	r3, [r7, #15]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop

08002450 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e039      	b.n	80024d6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe fa1c 	bl	80008b4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a0:	f023 0107 	bic.w	r1, r3, #7
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024b6:	4b0a      	ldr	r3, [pc, #40]	@ (80024e0 <HAL_DMA2D_Init+0x90>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68d1      	ldr	r1, [r2, #12]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	430b      	orrs	r3, r1
 80024c4:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	ffffc000 	.word	0xffffc000

080024e4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_DMA2D_Start+0x1c>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e018      	b.n	8002532 <HAL_DMA2D_Start+0x4e>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fa98 	bl	8002a50 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d056      	beq.n	8002604 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002556:	f7ff fc19 	bl	8001d8c <HAL_GetTick>
 800255a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800255c:	e04b      	b.n	80025f6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800256c:	2b00      	cmp	r3, #0
 800256e:	d023      	beq.n	80025b8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257e:	f043 0202 	orr.w	r2, r3, #2
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002594:	f043 0201 	orr.w	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2221      	movs	r2, #33	@ 0x21
 80025a2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2204      	movs	r2, #4
 80025a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0a5      	b.n	8002704 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025be:	d01a      	beq.n	80025f6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025c0:	f7ff fbe4 	bl	8001d8c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d302      	bcc.n	80025d6 <HAL_DMA2D_PollForTransfer+0x9c>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10f      	bne.n	80025f6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025da:	f043 0220 	orr.w	r2, r3, #32
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2203      	movs	r2, #3
 80025e6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e086      	b.n	8002704 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ac      	beq.n	800255e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d061      	beq.n	80026ea <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002626:	f7ff fbb1 	bl	8001d8c <HAL_GetTick>
 800262a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800262c:	e056      	b.n	80026dc <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800263c:	2b00      	cmp	r3, #0
 800263e:	d02e      	beq.n	800269e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264e:	f043 0204 	orr.w	r2, r3, #4
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002664:	f043 0202 	orr.w	r2, r3, #2
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267a:	f043 0201 	orr.w	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2229      	movs	r2, #41	@ 0x29
 8002688:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2204      	movs	r2, #4
 800268e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e032      	b.n	8002704 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026a4:	d01a      	beq.n	80026dc <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026a6:	f7ff fb71 	bl	8001d8c <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d302      	bcc.n	80026bc <HAL_DMA2D_PollForTransfer+0x182>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10f      	bne.n	80026dc <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2203      	movs	r2, #3
 80026cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e013      	b.n	8002704 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0a1      	beq.n	800262e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2212      	movs	r2, #18
 80026f0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d026      	beq.n	800277c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d021      	beq.n	800277c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002746:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800274c:	f043 0201 	orr.w	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2201      	movs	r2, #1
 800275a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2204      	movs	r2, #4
 8002760:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	2b00      	cmp	r3, #0
 8002784:	d026      	beq.n	80027d4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d021      	beq.n	80027d4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800279e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2220      	movs	r2, #32
 80027a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ac:	f043 0202 	orr.w	r2, r3, #2
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2204      	movs	r2, #4
 80027b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d026      	beq.n	800282c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d021      	beq.n	800282c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027f6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2208      	movs	r2, #8
 80027fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002804:	f043 0204 	orr.w	r2, r3, #4
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2204      	movs	r2, #4
 8002810:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d013      	beq.n	800285e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00e      	beq.n	800285e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800284e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2204      	movs	r2, #4
 8002856:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f853 	bl	8002904 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d024      	beq.n	80028b2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800286e:	2b00      	cmp	r3, #0
 8002870:	d01f      	beq.n	80028b2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002880:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2202      	movs	r2, #2
 8002888:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01f      	beq.n	80028fc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d01a      	beq.n	80028fc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028d4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2210      	movs	r2, #16
 80028dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f80e 	bl	8002918 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_DMA2D_ConfigLayer+0x20>
 8002948:	2302      	movs	r3, #2
 800294a:	e079      	b.n	8002a40 <HAL_DMA2D_ConfigLayer+0x114>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	3318      	adds	r3, #24
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	041b      	lsls	r3, r3, #16
 8002972:	4313      	orrs	r3, r2
 8002974:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002976:	4b35      	ldr	r3, [pc, #212]	@ (8002a4c <HAL_DMA2D_ConfigLayer+0x120>)
 8002978:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b0a      	cmp	r3, #10
 8002980:	d003      	beq.n	800298a <HAL_DMA2D_ConfigLayer+0x5e>
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b09      	cmp	r3, #9
 8002988:	d107      	bne.n	800299a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	e005      	b.n	80029a6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	061b      	lsls	r3, r3, #24
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d120      	bne.n	80029ee <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	ea02 0103 	and.w	r1, r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b0a      	cmp	r3, #10
 80029d4:	d003      	beq.n	80029de <HAL_DMA2D_ConfigLayer+0xb2>
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b09      	cmp	r3, #9
 80029dc:	d127      	bne.n	8002a2e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80029ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80029ec:	e01f      	b.n	8002a2e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69da      	ldr	r2, [r3, #28]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	ea02 0103 	and.w	r1, r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b0a      	cmp	r3, #10
 8002a16:	d003      	beq.n	8002a20 <HAL_DMA2D_ConfigLayer+0xf4>
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b09      	cmp	r3, #9
 8002a1e:	d106      	bne.n	8002a2e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002a2c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	371c      	adds	r7, #28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	ff03000f 	.word	0xff03000f

08002a50 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b08b      	sub	sp, #44	@ 0x2c
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a64:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	041a      	lsls	r2, r3, #16
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a88:	d174      	bne.n	8002b74 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002a90:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002a98:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002aa0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d108      	bne.n	8002ac2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac0:	e053      	b.n	8002b6a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d106      	bne.n	8002ad8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ad6:	e048      	b.n	8002b6a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d111      	bne.n	8002b04 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	0cdb      	lsrs	r3, r3, #19
 8002ae4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	0a9b      	lsrs	r3, r3, #10
 8002aea:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	08db      	lsrs	r3, r3, #3
 8002af0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	02db      	lsls	r3, r3, #11
 8002afa:	4313      	orrs	r3, r2
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b02:	e032      	b.n	8002b6a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d117      	bne.n	8002b3c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	0fdb      	lsrs	r3, r3, #31
 8002b10:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	0cdb      	lsrs	r3, r3, #19
 8002b16:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	0adb      	lsrs	r3, r3, #11
 8002b1c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	08db      	lsrs	r3, r3, #3
 8002b22:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	029b      	lsls	r3, r3, #10
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	03db      	lsls	r3, r3, #15
 8002b32:	4313      	orrs	r3, r2
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b3a:	e016      	b.n	8002b6a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	0f1b      	lsrs	r3, r3, #28
 8002b40:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	0d1b      	lsrs	r3, r3, #20
 8002b46:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	0b1b      	lsrs	r3, r3, #12
 8002b4c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	011a      	lsls	r2, r3, #4
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	031b      	lsls	r3, r3, #12
 8002b62:	4313      	orrs	r3, r2
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b70:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002b72:	e003      	b.n	8002b7c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	60da      	str	r2, [r3, #12]
}
 8002b7c:	bf00      	nop
 8002b7e:	372c      	adds	r7, #44	@ 0x2c
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	@ 0x24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	e175      	b.n	8002e94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ba8:	2201      	movs	r2, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	f040 8164 	bne.w	8002e8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d005      	beq.n	8002bde <HAL_GPIO_Init+0x56>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d130      	bne.n	8002c40 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	2203      	movs	r2, #3
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c14:	2201      	movs	r2, #1
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f003 0201 	and.w	r2, r3, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d017      	beq.n	8002c7c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	2203      	movs	r2, #3
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d123      	bne.n	8002cd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	08da      	lsrs	r2, r3, #3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3208      	adds	r2, #8
 8002c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	220f      	movs	r2, #15
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	08da      	lsrs	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3208      	adds	r2, #8
 8002cca:	69b9      	ldr	r1, [r7, #24]
 8002ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0203 	and.w	r2, r3, #3
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80be 	beq.w	8002e8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d12:	4b66      	ldr	r3, [pc, #408]	@ (8002eac <HAL_GPIO_Init+0x324>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	4a65      	ldr	r2, [pc, #404]	@ (8002eac <HAL_GPIO_Init+0x324>)
 8002d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d1e:	4b63      	ldr	r3, [pc, #396]	@ (8002eac <HAL_GPIO_Init+0x324>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d2a:	4a61      	ldr	r2, [pc, #388]	@ (8002eb0 <HAL_GPIO_Init+0x328>)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	089b      	lsrs	r3, r3, #2
 8002d30:	3302      	adds	r3, #2
 8002d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	220f      	movs	r2, #15
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a58      	ldr	r2, [pc, #352]	@ (8002eb4 <HAL_GPIO_Init+0x32c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d037      	beq.n	8002dc6 <HAL_GPIO_Init+0x23e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a57      	ldr	r2, [pc, #348]	@ (8002eb8 <HAL_GPIO_Init+0x330>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d031      	beq.n	8002dc2 <HAL_GPIO_Init+0x23a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a56      	ldr	r2, [pc, #344]	@ (8002ebc <HAL_GPIO_Init+0x334>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d02b      	beq.n	8002dbe <HAL_GPIO_Init+0x236>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a55      	ldr	r2, [pc, #340]	@ (8002ec0 <HAL_GPIO_Init+0x338>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d025      	beq.n	8002dba <HAL_GPIO_Init+0x232>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a54      	ldr	r2, [pc, #336]	@ (8002ec4 <HAL_GPIO_Init+0x33c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01f      	beq.n	8002db6 <HAL_GPIO_Init+0x22e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a53      	ldr	r2, [pc, #332]	@ (8002ec8 <HAL_GPIO_Init+0x340>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d019      	beq.n	8002db2 <HAL_GPIO_Init+0x22a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a52      	ldr	r2, [pc, #328]	@ (8002ecc <HAL_GPIO_Init+0x344>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_GPIO_Init+0x226>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a51      	ldr	r2, [pc, #324]	@ (8002ed0 <HAL_GPIO_Init+0x348>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00d      	beq.n	8002daa <HAL_GPIO_Init+0x222>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a50      	ldr	r2, [pc, #320]	@ (8002ed4 <HAL_GPIO_Init+0x34c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d007      	beq.n	8002da6 <HAL_GPIO_Init+0x21e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4f      	ldr	r2, [pc, #316]	@ (8002ed8 <HAL_GPIO_Init+0x350>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <HAL_GPIO_Init+0x21a>
 8002d9e:	2309      	movs	r3, #9
 8002da0:	e012      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002da2:	230a      	movs	r3, #10
 8002da4:	e010      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002da6:	2308      	movs	r3, #8
 8002da8:	e00e      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002daa:	2307      	movs	r3, #7
 8002dac:	e00c      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002dae:	2306      	movs	r3, #6
 8002db0:	e00a      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002db2:	2305      	movs	r3, #5
 8002db4:	e008      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002db6:	2304      	movs	r3, #4
 8002db8:	e006      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e004      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e002      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_GPIO_Init+0x240>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	f002 0203 	and.w	r2, r2, #3
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	4093      	lsls	r3, r2
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002dd8:	4935      	ldr	r1, [pc, #212]	@ (8002eb0 <HAL_GPIO_Init+0x328>)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	3302      	adds	r3, #2
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002de6:	4b3d      	ldr	r3, [pc, #244]	@ (8002edc <HAL_GPIO_Init+0x354>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e0a:	4a34      	ldr	r2, [pc, #208]	@ (8002edc <HAL_GPIO_Init+0x354>)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e10:	4b32      	ldr	r3, [pc, #200]	@ (8002edc <HAL_GPIO_Init+0x354>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e34:	4a29      	ldr	r2, [pc, #164]	@ (8002edc <HAL_GPIO_Init+0x354>)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e3a:	4b28      	ldr	r3, [pc, #160]	@ (8002edc <HAL_GPIO_Init+0x354>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002edc <HAL_GPIO_Init+0x354>)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e64:	4b1d      	ldr	r3, [pc, #116]	@ (8002edc <HAL_GPIO_Init+0x354>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e88:	4a14      	ldr	r2, [pc, #80]	@ (8002edc <HAL_GPIO_Init+0x354>)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3301      	adds	r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2b0f      	cmp	r3, #15
 8002e98:	f67f ae86 	bls.w	8002ba8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3724      	adds	r7, #36	@ 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40013800 	.word	0x40013800
 8002eb4:	40020000 	.word	0x40020000
 8002eb8:	40020400 	.word	0x40020400
 8002ebc:	40020800 	.word	0x40020800
 8002ec0:	40020c00 	.word	0x40020c00
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40021400 	.word	0x40021400
 8002ecc:	40021800 	.word	0x40021800
 8002ed0:	40021c00 	.word	0x40021c00
 8002ed4:	40022000 	.word	0x40022000
 8002ed8:	40022400 	.word	0x40022400
 8002edc:	40013c00 	.word	0x40013c00

08002ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	807b      	strh	r3, [r7, #2]
 8002eec:	4613      	mov	r3, r2
 8002eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ef0:	787b      	ldrb	r3, [r7, #1]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ef6:	887a      	ldrh	r2, [r7, #2]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002efc:	e003      	b.n	8002f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002efe:	887b      	ldrh	r3, [r7, #2]
 8002f00:	041a      	lsls	r2, r3, #16
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	619a      	str	r2, [r3, #24]
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b086      	sub	sp, #24
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f005 f9cd 	bl	80082c8 <USB_GetMode>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	f040 80fb 	bne.w	800312c <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f005 f990 	bl	8008260 <USB_ReadInterrupts>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80f1 	beq.w	800312a <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f005 f987 	bl	8008260 <USB_ReadInterrupts>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f5c:	d104      	bne.n	8002f68 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002f66:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f005 f977 	bl	8008260 <USB_ReadInterrupts>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f7c:	d104      	bne.n	8002f88 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f86:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f005 f967 	bl	8008260 <USB_ReadInterrupts>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f9c:	d104      	bne.n	8002fa8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002fa6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f005 f957 	bl	8008260 <USB_ReadInterrupts>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d103      	bne.n	8002fc4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f005 f949 	bl	8008260 <USB_ReadInterrupts>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fd8:	d120      	bne.n	800301c <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002fe2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d113      	bne.n	800301c <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ff4:	2110      	movs	r1, #16
 8002ff6:	6938      	ldr	r0, [r7, #16]
 8002ff8:	f005 f87a 	bl	80080f0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002ffc:	6938      	ldr	r0, [r7, #16]
 8002ffe:	f005 f8a9 	bl	8008154 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	7a5b      	ldrb	r3, [r3, #9]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d105      	bne.n	8003016 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2101      	movs	r1, #1
 8003010:	4618      	mov	r0, r3
 8003012:	f005 f967 	bl	80082e4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f006 fd04 	bl	8009a24 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f005 f91d 	bl	8008260 <USB_ReadInterrupts>
 8003026:	4603      	mov	r3, r0
 8003028:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800302c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003030:	d102      	bne.n	8003038 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f001 fc87 	bl	8004946 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f005 f90f 	bl	8008260 <USB_ReadInterrupts>
 8003042:	4603      	mov	r3, r0
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b08      	cmp	r3, #8
 800304a:	d106      	bne.n	800305a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f006 fccd 	bl	80099ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2208      	movs	r2, #8
 8003058:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f005 f8fe 	bl	8008260 <USB_ReadInterrupts>
 8003064:	4603      	mov	r3, r0
 8003066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800306a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800306e:	d139      	bne.n	80030e4 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f005 f972 	bl	800835e <USB_HC_ReadInterrupt>
 800307a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	e025      	b.n	80030ce <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	fa22 f303 	lsr.w	r3, r2, r3
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d018      	beq.n	80030c8 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4413      	add	r3, r2
 800309e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030ac:	d106      	bne.n	80030bc <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	4619      	mov	r1, r3
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f859 	bl	800316c <HCD_HC_IN_IRQHandler>
 80030ba:	e005      	b.n	80030c8 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	4619      	mov	r1, r3
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 febb 	bl	8003e3e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	3301      	adds	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	795b      	ldrb	r3, [r3, #5]
 80030d2:	461a      	mov	r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d3d3      	bcc.n	8003082 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f005 f8b9 	bl	8008260 <USB_ReadInterrupts>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b10      	cmp	r3, #16
 80030f6:	d101      	bne.n	80030fc <HAL_HCD_IRQHandler+0x1ea>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <HAL_HCD_IRQHandler+0x1ec>
 80030fc:	2300      	movs	r3, #0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d014      	beq.n	800312c <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699a      	ldr	r2, [r3, #24]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0210 	bic.w	r2, r2, #16
 8003110:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f001 fb38 	bl	8004788 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0210 	orr.w	r2, r2, #16
 8003126:	619a      	str	r2, [r3, #24]
 8003128:	e000      	b.n	800312c <HAL_HCD_IRQHandler+0x21a>
      return;
 800312a:	bf00      	nop
    }
  }
}
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_HCD_Stop+0x16>
 8003144:	2302      	movs	r3, #2
 8003146:	e00d      	b.n	8003164 <HAL_HCD_Stop+0x32>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f005 fa33 	bl	80085c0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f005 f87b 	bl	8008286 <USB_ReadChInterrupts>
 8003190:	4603      	mov	r3, r0
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b04      	cmp	r3, #4
 8003198:	d11a      	bne.n	80031d0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a6:	461a      	mov	r2, r3
 80031a8:	2304      	movs	r3, #4
 80031aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	334d      	adds	r3, #77	@ 0x4d
 80031bc:	2207      	movs	r2, #7
 80031be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f005 f8d9 	bl	8008380 <USB_HC_Halt>
 80031ce:	e09e      	b.n	800330e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	4611      	mov	r1, r2
 80031d8:	4618      	mov	r0, r3
 80031da:	f005 f854 	bl	8008286 <USB_ReadChInterrupts>
 80031de:	4603      	mov	r3, r0
 80031e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031e8:	d11b      	bne.n	8003222 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031f6:	461a      	mov	r2, r3
 80031f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	334d      	adds	r3, #77	@ 0x4d
 800320e:	2208      	movs	r2, #8
 8003210:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	4611      	mov	r1, r2
 800321a:	4618      	mov	r0, r3
 800321c:	f005 f8b0 	bl	8008380 <USB_HC_Halt>
 8003220:	e075      	b.n	800330e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f005 f82b 	bl	8008286 <USB_ReadChInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b08      	cmp	r3, #8
 8003238:	d11a      	bne.n	8003270 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4413      	add	r3, r2
 8003242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003246:	461a      	mov	r2, r3
 8003248:	2308      	movs	r3, #8
 800324a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	334d      	adds	r3, #77	@ 0x4d
 800325c:	2206      	movs	r2, #6
 800325e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f005 f889 	bl	8008380 <USB_HC_Halt>
 800326e:	e04e      	b.n	800330e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f005 f804 	bl	8008286 <USB_ReadChInterrupts>
 800327e:	4603      	mov	r3, r0
 8003280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003288:	d11b      	bne.n	80032c2 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4413      	add	r3, r2
 8003292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003296:	461a      	mov	r2, r3
 8003298:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800329c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	334d      	adds	r3, #77	@ 0x4d
 80032ae:	2209      	movs	r2, #9
 80032b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f005 f860 	bl	8008380 <USB_HC_Halt>
 80032c0:	e025      	b.n	800330e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	4611      	mov	r1, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f004 ffdb 	bl	8008286 <USB_ReadChInterrupts>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d6:	2b80      	cmp	r3, #128	@ 0x80
 80032d8:	d119      	bne.n	800330e <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032e6:	461a      	mov	r2, r3
 80032e8:	2380      	movs	r3, #128	@ 0x80
 80032ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	334d      	adds	r3, #77	@ 0x4d
 80032fc:	2207      	movs	r2, #7
 80032fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f005 f839 	bl	8008380 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f004 ffb5 	bl	8008286 <USB_ReadChInterrupts>
 800331c:	4603      	mov	r3, r0
 800331e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003322:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003326:	d112      	bne.n	800334e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f005 f825 	bl	8008380 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003336:	78fb      	ldrb	r3, [r7, #3]
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4413      	add	r3, r2
 800333e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003342:	461a      	mov	r2, r3
 8003344:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003348:	6093      	str	r3, [r2, #8]
 800334a:	f000 bd75 	b.w	8003e38 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	4611      	mov	r1, r2
 8003356:	4618      	mov	r0, r3
 8003358:	f004 ff95 	bl	8008286 <USB_ReadChInterrupts>
 800335c:	4603      	mov	r3, r0
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	f040 8128 	bne.w	80035b8 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4413      	add	r3, r2
 8003370:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003374:	461a      	mov	r2, r3
 8003376:	2320      	movs	r3, #32
 8003378:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	331b      	adds	r3, #27
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d119      	bne.n	80033c4 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	331b      	adds	r3, #27
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	0151      	lsls	r1, r2, #5
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	440a      	add	r2, r1
 80033ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c2:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	799b      	ldrb	r3, [r3, #6]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01b      	beq.n	8003404 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	3330      	adds	r3, #48	@ 0x30
 80033dc:	6819      	ldr	r1, [r3, #0]
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	1ac9      	subs	r1, r1, r3
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4403      	add	r3, r0
 8003400:	3338      	adds	r3, #56	@ 0x38
 8003402:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	334d      	adds	r3, #77	@ 0x4d
 8003414:	2201      	movs	r2, #1
 8003416:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	3344      	adds	r3, #68	@ 0x44
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	4413      	add	r3, r2
 8003434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003438:	461a      	mov	r2, r3
 800343a:	2301      	movs	r3, #1
 800343c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3326      	adds	r3, #38	@ 0x26
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	3326      	adds	r3, #38	@ 0x26
 8003464:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003466:	2b02      	cmp	r3, #2
 8003468:	d110      	bne.n	800348c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	4611      	mov	r1, r2
 8003472:	4618      	mov	r0, r3
 8003474:	f004 ff84 	bl	8008380 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4413      	add	r3, r2
 8003480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003484:	461a      	mov	r2, r3
 8003486:	2310      	movs	r3, #16
 8003488:	6093      	str	r3, [r2, #8]
 800348a:	e03d      	b.n	8003508 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	3326      	adds	r3, #38	@ 0x26
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d00a      	beq.n	80034b8 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	3326      	adds	r3, #38	@ 0x26
 80034b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d127      	bne.n	8003508 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	0151      	lsls	r1, r2, #5
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	440a      	add	r2, r1
 80034ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80034d6:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	334c      	adds	r3, #76	@ 0x4c
 80034e8:	2201      	movs	r2, #1
 80034ea:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	334c      	adds	r3, #76	@ 0x4c
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	4619      	mov	r1, r3
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f006 fa9c 	bl	8009a40 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	799b      	ldrb	r3, [r3, #6]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d13b      	bne.n	8003588 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	3338      	adds	r3, #56	@ 0x38
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	78fa      	ldrb	r2, [r7, #3]
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4403      	add	r3, r0
 8003530:	3328      	adds	r3, #40	@ 0x28
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	440b      	add	r3, r1
 8003536:	1e59      	subs	r1, r3, #1
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4403      	add	r3, r0
 8003546:	3328      	adds	r3, #40	@ 0x28
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	fbb1 f3f3 	udiv	r3, r1, r3
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8470 	beq.w	8003e38 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	333c      	adds	r3, #60	@ 0x3c
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	f083 0301 	eor.w	r3, r3, #1
 8003570:	b2d8      	uxtb	r0, r3
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	333c      	adds	r3, #60	@ 0x3c
 8003580:	4602      	mov	r2, r0
 8003582:	701a      	strb	r2, [r3, #0]
 8003584:	f000 bc58 	b.w	8003e38 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	333c      	adds	r3, #60	@ 0x3c
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	f083 0301 	eor.w	r3, r3, #1
 80035a0:	b2d8      	uxtb	r0, r3
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	333c      	adds	r3, #60	@ 0x3c
 80035b0:	4602      	mov	r2, r0
 80035b2:	701a      	strb	r2, [r3, #0]
 80035b4:	f000 bc40 	b.w	8003e38 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	78fa      	ldrb	r2, [r7, #3]
 80035be:	4611      	mov	r1, r2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f004 fe60 	bl	8008286 <USB_ReadChInterrupts>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d131      	bne.n	8003634 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035dc:	461a      	mov	r2, r3
 80035de:	2320      	movs	r3, #32
 80035e0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	331a      	adds	r3, #26
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	f040 841f 	bne.w	8003e38 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	331b      	adds	r3, #27
 800360a:	2201      	movs	r2, #1
 800360c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800360e:	78fa      	ldrb	r2, [r7, #3]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	334d      	adds	r3, #77	@ 0x4d
 800361e:	2203      	movs	r2, #3
 8003620:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f004 fea8 	bl	8008380 <USB_HC_Halt>
 8003630:	f000 bc02 	b.w	8003e38 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	4611      	mov	r1, r2
 800363c:	4618      	mov	r0, r3
 800363e:	f004 fe22 	bl	8008286 <USB_ReadChInterrupts>
 8003642:	4603      	mov	r3, r0
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b02      	cmp	r3, #2
 800364a:	f040 8305 	bne.w	8003c58 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4413      	add	r3, r2
 8003656:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800365a:	461a      	mov	r2, r3
 800365c:	2302      	movs	r3, #2
 800365e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	334d      	adds	r3, #77	@ 0x4d
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d114      	bne.n	80036a0 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003676:	78fa      	ldrb	r2, [r7, #3]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	334d      	adds	r3, #77	@ 0x4d
 8003686:	2202      	movs	r2, #2
 8003688:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800368a:	78fa      	ldrb	r2, [r7, #3]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	334c      	adds	r3, #76	@ 0x4c
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	e2cc      	b.n	8003c3a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	334d      	adds	r3, #77	@ 0x4d
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	d114      	bne.n	80036e0 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	334d      	adds	r3, #77	@ 0x4d
 80036c6:	2202      	movs	r2, #2
 80036c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	334c      	adds	r3, #76	@ 0x4c
 80036da:	2205      	movs	r2, #5
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	e2ac      	b.n	8003c3a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	334d      	adds	r3, #77	@ 0x4d
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b07      	cmp	r3, #7
 80036f4:	d00b      	beq.n	800370e <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	334d      	adds	r3, #77	@ 0x4d
 8003706:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003708:	2b09      	cmp	r3, #9
 800370a:	f040 80a6 	bne.w	800385a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	334d      	adds	r3, #77	@ 0x4d
 800371e:	2202      	movs	r2, #2
 8003720:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	3344      	adds	r3, #68	@ 0x44
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	1c59      	adds	r1, r3, #1
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4403      	add	r3, r0
 8003742:	3344      	adds	r3, #68	@ 0x44
 8003744:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	3344      	adds	r3, #68	@ 0x44
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d943      	bls.n	80037e4 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	3344      	adds	r3, #68	@ 0x44
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003770:	78fa      	ldrb	r2, [r7, #3]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	1a9b      	subs	r3, r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	331a      	adds	r3, #26
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d123      	bne.n	80037ce <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003786:	78fa      	ldrb	r2, [r7, #3]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	331b      	adds	r3, #27
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	331c      	adds	r3, #28
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	78fa      	ldrb	r2, [r7, #3]
 80037be:	0151      	lsls	r1, r2, #5
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	440a      	add	r2, r1
 80037c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037cc:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	334c      	adds	r3, #76	@ 0x4c
 80037de:	2204      	movs	r2, #4
 80037e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037e2:	e229      	b.n	8003c38 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	334c      	adds	r3, #76	@ 0x4c
 80037f4:	2202      	movs	r2, #2
 80037f6:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	3326      	adds	r3, #38	@ 0x26
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00b      	beq.n	8003826 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	3326      	adds	r3, #38	@ 0x26
 800381e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003820:	2b02      	cmp	r3, #2
 8003822:	f040 8209 	bne.w	8003c38 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003826:	78fb      	ldrb	r3, [r7, #3]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4413      	add	r3, r2
 800382e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800383c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003844:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4413      	add	r3, r2
 800384e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003852:	461a      	mov	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003858:	e1ee      	b.n	8003c38 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	334d      	adds	r3, #77	@ 0x4d
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b05      	cmp	r3, #5
 800386e:	f040 80c8 	bne.w	8003a02 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	334d      	adds	r3, #77	@ 0x4d
 8003882:	2202      	movs	r2, #2
 8003884:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	331b      	adds	r3, #27
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b01      	cmp	r3, #1
 800389a:	f040 81ce 	bne.w	8003c3a <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800389e:	78fa      	ldrb	r2, [r7, #3]
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	3326      	adds	r3, #38	@ 0x26
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d16b      	bne.n	800398c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	3348      	adds	r3, #72	@ 0x48
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	1c59      	adds	r1, r3, #1
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4403      	add	r3, r0
 80038d4:	3348      	adds	r3, #72	@ 0x48
 80038d6:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3348      	adds	r3, #72	@ 0x48
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d943      	bls.n	8003976 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	3348      	adds	r3, #72	@ 0x48
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	331b      	adds	r3, #27
 8003912:	2200      	movs	r2, #0
 8003914:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	3344      	adds	r3, #68	@ 0x44
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d809      	bhi.n	8003940 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800392c:	78fa      	ldrb	r2, [r7, #3]
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	331c      	adds	r3, #28
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4413      	add	r3, r2
 8003948:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	0151      	lsls	r1, r2, #5
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	440a      	add	r2, r1
 8003956:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800395a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800395e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	1a9b      	subs	r3, r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	334c      	adds	r3, #76	@ 0x4c
 8003970:	2204      	movs	r2, #4
 8003972:	701a      	strb	r2, [r3, #0]
 8003974:	e014      	b.n	80039a0 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	334c      	adds	r3, #76	@ 0x4c
 8003986:	2202      	movs	r2, #2
 8003988:	701a      	strb	r2, [r3, #0]
 800398a:	e009      	b.n	80039a0 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	334c      	adds	r3, #76	@ 0x4c
 800399c:	2202      	movs	r2, #2
 800399e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	3326      	adds	r3, #38	@ 0x26
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80039b6:	78fa      	ldrb	r2, [r7, #3]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	3326      	adds	r3, #38	@ 0x26
 80039c6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	f040 8136 	bne.w	8003c3a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039e4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039ec:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039fa:	461a      	mov	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	e11b      	b.n	8003c3a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	334d      	adds	r3, #77	@ 0x4d
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	f040 8081 	bne.w	8003b1c <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	334d      	adds	r3, #77	@ 0x4d
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	331b      	adds	r3, #27
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	f040 80fa 	bne.w	8003c3a <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	334c      	adds	r3, #76	@ 0x4c
 8003a56:	2202      	movs	r2, #2
 8003a58:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	0151      	lsls	r1, r2, #5
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	440a      	add	r2, r1
 8003a70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a78:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003a7a:	78fb      	ldrb	r3, [r7, #3]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	0151      	lsls	r1, r2, #5
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	440a      	add	r2, r1
 8003a90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a98:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	0151      	lsls	r1, r2, #5
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	440a      	add	r2, r1
 8003ab0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ab4:	f023 0320 	bic.w	r3, r3, #32
 8003ab8:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	3326      	adds	r3, #38	@ 0x26
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00b      	beq.n	8003ae8 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	3326      	adds	r3, #38	@ 0x26
 8003ae0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	f040 80a9 	bne.w	8003c3a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003afe:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b06:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b14:	461a      	mov	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e08e      	b.n	8003c3a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	334d      	adds	r3, #77	@ 0x4d
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d143      	bne.n	8003bba <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	334d      	adds	r3, #77	@ 0x4d
 8003b42:	2202      	movs	r2, #2
 8003b44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	334c      	adds	r3, #76	@ 0x4c
 8003b56:	2202      	movs	r2, #2
 8003b58:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	3326      	adds	r3, #38	@ 0x26
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3326      	adds	r3, #38	@ 0x26
 8003b80:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d159      	bne.n	8003c3a <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b9c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ba4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	e03f      	b.n	8003c3a <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	334d      	adds	r3, #77	@ 0x4d
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d126      	bne.n	8003c1e <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	334d      	adds	r3, #77	@ 0x4d
 8003be0:	2202      	movs	r2, #2
 8003be2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3344      	adds	r3, #68	@ 0x44
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	1c59      	adds	r1, r3, #1
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4403      	add	r3, r0
 8003c04:	3344      	adds	r3, #68	@ 0x44
 8003c06:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c08:	78fa      	ldrb	r2, [r7, #3]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	334c      	adds	r3, #76	@ 0x4c
 8003c18:	2204      	movs	r2, #4
 8003c1a:	701a      	strb	r2, [r3, #0]
 8003c1c:	e00d      	b.n	8003c3a <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	334d      	adds	r3, #77	@ 0x4d
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	f000 8100 	beq.w	8003e36 <HCD_HC_IN_IRQHandler+0xcca>
 8003c36:	e000      	b.n	8003c3a <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c38:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	334c      	adds	r3, #76	@ 0x4c
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f005 fef5 	bl	8009a40 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c56:	e0ef      	b.n	8003e38 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	4611      	mov	r1, r2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f004 fb10 	bl	8008286 <USB_ReadChInterrupts>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6c:	2b40      	cmp	r3, #64	@ 0x40
 8003c6e:	d12f      	bne.n	8003cd0 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2340      	movs	r3, #64	@ 0x40
 8003c80:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003c82:	78fa      	ldrb	r2, [r7, #3]
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	4613      	mov	r3, r2
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	440b      	add	r3, r1
 8003c90:	334d      	adds	r3, #77	@ 0x4d
 8003c92:	2205      	movs	r2, #5
 8003c94:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003c96:	78fa      	ldrb	r2, [r7, #3]
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	1a9b      	subs	r3, r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	331a      	adds	r3, #26
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d109      	bne.n	8003cc0 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	3344      	adds	r3, #68	@ 0x44
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	78fa      	ldrb	r2, [r7, #3]
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f004 fb59 	bl	8008380 <USB_HC_Halt>
 8003cce:	e0b3      	b.n	8003e38 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f004 fad4 	bl	8008286 <USB_ReadChInterrupts>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	f040 80a7 	bne.w	8003e38 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003cea:	78fa      	ldrb	r2, [r7, #3]
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	1a9b      	subs	r3, r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	3326      	adds	r3, #38	@ 0x26
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d11b      	bne.n	8003d38 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d00:	78fa      	ldrb	r2, [r7, #3]
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	3344      	adds	r3, #68	@ 0x44
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	334d      	adds	r3, #77	@ 0x4d
 8003d24:	2204      	movs	r2, #4
 8003d26:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	78fa      	ldrb	r2, [r7, #3]
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f004 fb25 	bl	8008380 <USB_HC_Halt>
 8003d36:	e03f      	b.n	8003db8 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	3326      	adds	r3, #38	@ 0x26
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	3326      	adds	r3, #38	@ 0x26
 8003d5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d129      	bne.n	8003db8 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	3344      	adds	r3, #68	@ 0x44
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	799b      	ldrb	r3, [r3, #6]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HCD_HC_IN_IRQHandler+0xc2a>
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	331b      	adds	r3, #27
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d110      	bne.n	8003db8 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	334d      	adds	r3, #77	@ 0x4d
 8003da6:	2204      	movs	r2, #4
 8003da8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f004 fae4 	bl	8008380 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	331b      	adds	r3, #27
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d129      	bne.n	8003e22 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003dce:	78fa      	ldrb	r2, [r7, #3]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	331b      	adds	r3, #27
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003de2:	78fb      	ldrb	r3, [r7, #3]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	78fa      	ldrb	r2, [r7, #3]
 8003df2:	0151      	lsls	r1, r2, #5
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	440a      	add	r2, r1
 8003df8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003dfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e00:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	78fa      	ldrb	r2, [r7, #3]
 8003e12:	0151      	lsls	r1, r2, #5
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	440a      	add	r2, r1
 8003e18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e1c:	f043 0320 	orr.w	r3, r3, #32
 8003e20:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e2e:	461a      	mov	r2, r3
 8003e30:	2310      	movs	r3, #16
 8003e32:	6093      	str	r3, [r2, #8]
 8003e34:	e000      	b.n	8003e38 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003e36:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b086      	sub	sp, #24
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	460b      	mov	r3, r1
 8003e48:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f004 fa12 	bl	8008286 <USB_ReadChInterrupts>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d11b      	bne.n	8003ea4 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e78:	461a      	mov	r2, r3
 8003e7a:	2304      	movs	r3, #4
 8003e7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	334d      	adds	r3, #77	@ 0x4d
 8003e8e:	2207      	movs	r2, #7
 8003e90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	78fa      	ldrb	r2, [r7, #3]
 8003e98:	4611      	mov	r1, r2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f004 fa70 	bl	8008380 <USB_HC_Halt>
 8003ea0:	f000 bc6f 	b.w	8004782 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f004 f9ea 	bl	8008286 <USB_ReadChInterrupts>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	f040 8082 	bne.w	8003fc2 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2320      	movs	r3, #32
 8003ece:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	3319      	adds	r3, #25
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d124      	bne.n	8003f30 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3319      	adds	r3, #25
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003efa:	78fa      	ldrb	r2, [r7, #3]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	334c      	adds	r3, #76	@ 0x4c
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	334d      	adds	r3, #77	@ 0x4d
 8003f1e:	2203      	movs	r2, #3
 8003f20:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	4611      	mov	r1, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f004 fa28 	bl	8008380 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003f30:	78fa      	ldrb	r2, [r7, #3]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	331a      	adds	r3, #26
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	f040 841d 	bne.w	8004782 <HCD_HC_OUT_IRQHandler+0x944>
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	331b      	adds	r3, #27
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f040 8411 	bne.w	8004782 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003f60:	78fa      	ldrb	r2, [r7, #3]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3326      	adds	r3, #38	@ 0x26
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d009      	beq.n	8003f8a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	331b      	adds	r3, #27
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	334d      	adds	r3, #77	@ 0x4d
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	78fa      	ldrb	r2, [r7, #3]
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f004 f9ea 	bl	8008380 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003fac:	78fa      	ldrb	r2, [r7, #3]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	3344      	adds	r3, #68	@ 0x44
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	e3df      	b.n	8004782 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	78fa      	ldrb	r2, [r7, #3]
 8003fc8:	4611      	mov	r1, r2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f004 f95b 	bl	8008286 <USB_ReadChInterrupts>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fda:	d111      	bne.n	8004000 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe8:	461a      	mov	r2, r3
 8003fea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fee:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	78fa      	ldrb	r2, [r7, #3]
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f004 f9c1 	bl	8008380 <USB_HC_Halt>
 8003ffe:	e3c0      	b.n	8004782 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	4611      	mov	r1, r2
 8004008:	4618      	mov	r0, r3
 800400a:	f004 f93c 	bl	8008286 <USB_ReadChInterrupts>
 800400e:	4603      	mov	r3, r0
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b01      	cmp	r3, #1
 8004016:	d168      	bne.n	80040ea <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004018:	78fa      	ldrb	r2, [r7, #3]
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	4613      	mov	r3, r2
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	3344      	adds	r3, #68	@ 0x44
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	78fa      	ldrb	r2, [r7, #3]
 8004032:	4611      	mov	r1, r2
 8004034:	4618      	mov	r0, r3
 8004036:	f004 f926 	bl	8008286 <USB_ReadChInterrupts>
 800403a:	4603      	mov	r3, r0
 800403c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004040:	2b40      	cmp	r3, #64	@ 0x40
 8004042:	d112      	bne.n	800406a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004044:	78fa      	ldrb	r2, [r7, #3]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	3319      	adds	r3, #25
 8004054:	2201      	movs	r2, #1
 8004056:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4413      	add	r3, r2
 8004060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004064:	461a      	mov	r2, r3
 8004066:	2340      	movs	r3, #64	@ 0x40
 8004068:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	331b      	adds	r3, #27
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d019      	beq.n	80040b4 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	331b      	adds	r3, #27
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4413      	add	r3, r2
 800409c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	78fa      	ldrb	r2, [r7, #3]
 80040a4:	0151      	lsls	r1, r2, #5
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	440a      	add	r2, r1
 80040aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b2:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c0:	461a      	mov	r2, r3
 80040c2:	2301      	movs	r3, #1
 80040c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	334d      	adds	r3, #77	@ 0x4d
 80040d6:	2201      	movs	r2, #1
 80040d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f004 f94c 	bl	8008380 <USB_HC_Halt>
 80040e8:	e34b      	b.n	8004782 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	4611      	mov	r1, r2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f004 f8c7 	bl	8008286 <USB_ReadChInterrupts>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fe:	2b40      	cmp	r3, #64	@ 0x40
 8004100:	d139      	bne.n	8004176 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	334d      	adds	r3, #77	@ 0x4d
 8004112:	2205      	movs	r2, #5
 8004114:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004116:	78fa      	ldrb	r2, [r7, #3]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	331a      	adds	r3, #26
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	3319      	adds	r3, #25
 800413c:	2201      	movs	r2, #1
 800413e:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	3344      	adds	r3, #68	@ 0x44
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	4611      	mov	r1, r2
 800415c:	4618      	mov	r0, r3
 800415e:	f004 f90f 	bl	8008380 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4413      	add	r3, r2
 800416a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800416e:	461a      	mov	r2, r3
 8004170:	2340      	movs	r3, #64	@ 0x40
 8004172:	6093      	str	r3, [r2, #8]
 8004174:	e305      	b.n	8004782 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	78fa      	ldrb	r2, [r7, #3]
 800417c:	4611      	mov	r1, r2
 800417e:	4618      	mov	r0, r3
 8004180:	f004 f881 	bl	8008286 <USB_ReadChInterrupts>
 8004184:	4603      	mov	r3, r0
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b08      	cmp	r3, #8
 800418c:	d11a      	bne.n	80041c4 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4413      	add	r3, r2
 8004196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800419a:	461a      	mov	r2, r3
 800419c:	2308      	movs	r3, #8
 800419e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	4613      	mov	r3, r2
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	334d      	adds	r3, #77	@ 0x4d
 80041b0:	2206      	movs	r2, #6
 80041b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f004 f8df 	bl	8008380 <USB_HC_Halt>
 80041c2:	e2de      	b.n	8004782 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	78fa      	ldrb	r2, [r7, #3]
 80041ca:	4611      	mov	r1, r2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f004 f85a 	bl	8008286 <USB_ReadChInterrupts>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b10      	cmp	r3, #16
 80041da:	d144      	bne.n	8004266 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80041dc:	78fa      	ldrb	r2, [r7, #3]
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	4613      	mov	r3, r2
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	1a9b      	subs	r3, r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	3344      	adds	r3, #68	@ 0x44
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	334d      	adds	r3, #77	@ 0x4d
 8004200:	2204      	movs	r2, #4
 8004202:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004204:	78fa      	ldrb	r2, [r7, #3]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	3319      	adds	r3, #25
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d114      	bne.n	8004244 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	3318      	adds	r3, #24
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d109      	bne.n	8004244 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	3319      	adds	r3, #25
 8004240:	2201      	movs	r2, #1
 8004242:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	4611      	mov	r1, r2
 800424c:	4618      	mov	r0, r3
 800424e:	f004 f897 	bl	8008380 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004252:	78fb      	ldrb	r3, [r7, #3]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	4413      	add	r3, r2
 800425a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800425e:	461a      	mov	r2, r3
 8004260:	2310      	movs	r3, #16
 8004262:	6093      	str	r3, [r2, #8]
 8004264:	e28d      	b.n	8004782 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	4611      	mov	r1, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f004 f809 	bl	8008286 <USB_ReadChInterrupts>
 8004274:	4603      	mov	r3, r0
 8004276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427a:	2b80      	cmp	r3, #128	@ 0x80
 800427c:	d169      	bne.n	8004352 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	799b      	ldrb	r3, [r3, #6]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d111      	bne.n	80042aa <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004286:	78fa      	ldrb	r2, [r7, #3]
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	334d      	adds	r3, #77	@ 0x4d
 8004296:	2207      	movs	r2, #7
 8004298:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	4611      	mov	r1, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f004 f86c 	bl	8008380 <USB_HC_Halt>
 80042a8:	e049      	b.n	800433e <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80042aa:	78fa      	ldrb	r2, [r7, #3]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	1a9b      	subs	r3, r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	3344      	adds	r3, #68	@ 0x44
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	1c59      	adds	r1, r3, #1
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4403      	add	r3, r0
 80042ca:	3344      	adds	r3, #68	@ 0x44
 80042cc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042ce:	78fa      	ldrb	r2, [r7, #3]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	3344      	adds	r3, #68	@ 0x44
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d922      	bls.n	800432a <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	3344      	adds	r3, #68	@ 0x44
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80042f8:	78fa      	ldrb	r2, [r7, #3]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	334c      	adds	r3, #76	@ 0x4c
 8004308:	2204      	movs	r2, #4
 800430a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	334c      	adds	r3, #76	@ 0x4c
 800431c:	781a      	ldrb	r2, [r3, #0]
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	4619      	mov	r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f005 fb8c 	bl	8009a40 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004328:	e009      	b.n	800433e <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800432a:	78fa      	ldrb	r2, [r7, #3]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	334c      	adds	r3, #76	@ 0x4c
 800433a:	2202      	movs	r2, #2
 800433c:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4413      	add	r3, r2
 8004346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800434a:	461a      	mov	r2, r3
 800434c:	2380      	movs	r3, #128	@ 0x80
 800434e:	6093      	str	r3, [r2, #8]
 8004350:	e217      	b.n	8004782 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	78fa      	ldrb	r2, [r7, #3]
 8004358:	4611      	mov	r1, r2
 800435a:	4618      	mov	r0, r3
 800435c:	f003 ff93 	bl	8008286 <USB_ReadChInterrupts>
 8004360:	4603      	mov	r3, r0
 8004362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800436a:	d11b      	bne.n	80043a4 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	334d      	adds	r3, #77	@ 0x4d
 800437c:	2209      	movs	r2, #9
 800437e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f003 fff9 	bl	8008380 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4413      	add	r3, r2
 8004396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800439a:	461a      	mov	r2, r3
 800439c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043a0:	6093      	str	r3, [r2, #8]
 80043a2:	e1ee      	b.n	8004782 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	78fa      	ldrb	r2, [r7, #3]
 80043aa:	4611      	mov	r1, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f003 ff6a 	bl	8008286 <USB_ReadChInterrupts>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	f040 81df 	bne.w	800477c <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ca:	461a      	mov	r2, r3
 80043cc:	2302      	movs	r3, #2
 80043ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80043d0:	78fa      	ldrb	r2, [r7, #3]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	1a9b      	subs	r3, r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	334d      	adds	r3, #77	@ 0x4d
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	f040 8093 	bne.w	800450e <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	334d      	adds	r3, #77	@ 0x4d
 80043f8:	2202      	movs	r2, #2
 80043fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80043fc:	78fa      	ldrb	r2, [r7, #3]
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	4613      	mov	r3, r2
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	334c      	adds	r3, #76	@ 0x4c
 800440c:	2201      	movs	r2, #1
 800440e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004410:	78fa      	ldrb	r2, [r7, #3]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	3326      	adds	r3, #38	@ 0x26
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d00b      	beq.n	800443e <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	3326      	adds	r3, #38	@ 0x26
 8004436:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004438:	2b03      	cmp	r3, #3
 800443a:	f040 8190 	bne.w	800475e <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	799b      	ldrb	r3, [r3, #6]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d115      	bne.n	8004472 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004446:	78fa      	ldrb	r2, [r7, #3]
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	1a9b      	subs	r3, r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	440b      	add	r3, r1
 8004454:	333d      	adds	r3, #61	@ 0x3d
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	f083 0301 	eor.w	r3, r3, #1
 800445e:	b2d8      	uxtb	r0, r3
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	333d      	adds	r3, #61	@ 0x3d
 800446e:	4602      	mov	r2, r0
 8004470:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	799b      	ldrb	r3, [r3, #6]
 8004476:	2b01      	cmp	r3, #1
 8004478:	f040 8171 	bne.w	800475e <HCD_HC_OUT_IRQHandler+0x920>
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	3334      	adds	r3, #52	@ 0x34
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 8165 	beq.w	800475e <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004494:	78fa      	ldrb	r2, [r7, #3]
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	4613      	mov	r3, r2
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	3334      	adds	r3, #52	@ 0x34
 80044a4:	6819      	ldr	r1, [r3, #0]
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4403      	add	r3, r0
 80044b4:	3328      	adds	r3, #40	@ 0x28
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	440b      	add	r3, r1
 80044ba:	1e59      	subs	r1, r3, #1
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4403      	add	r3, r0
 80044ca:	3328      	adds	r3, #40	@ 0x28
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80044d2:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 813f 	beq.w	800475e <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	333d      	adds	r3, #61	@ 0x3d
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	f083 0301 	eor.w	r3, r3, #1
 80044f8:	b2d8      	uxtb	r0, r3
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	4613      	mov	r3, r2
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	333d      	adds	r3, #61	@ 0x3d
 8004508:	4602      	mov	r2, r0
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	e127      	b.n	800475e <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800450e:	78fa      	ldrb	r2, [r7, #3]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	1a9b      	subs	r3, r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	334d      	adds	r3, #77	@ 0x4d
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b03      	cmp	r3, #3
 8004522:	d120      	bne.n	8004566 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004524:	78fa      	ldrb	r2, [r7, #3]
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	334d      	adds	r3, #77	@ 0x4d
 8004534:	2202      	movs	r2, #2
 8004536:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004538:	78fa      	ldrb	r2, [r7, #3]
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	1a9b      	subs	r3, r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	331b      	adds	r3, #27
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b01      	cmp	r3, #1
 800454c:	f040 8107 	bne.w	800475e <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004550:	78fa      	ldrb	r2, [r7, #3]
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	4613      	mov	r3, r2
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	334c      	adds	r3, #76	@ 0x4c
 8004560:	2202      	movs	r2, #2
 8004562:	701a      	strb	r2, [r3, #0]
 8004564:	e0fb      	b.n	800475e <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	1a9b      	subs	r3, r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	334d      	adds	r3, #77	@ 0x4d
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b04      	cmp	r3, #4
 800457a:	d13a      	bne.n	80045f2 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800457c:	78fa      	ldrb	r2, [r7, #3]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	334d      	adds	r3, #77	@ 0x4d
 800458c:	2202      	movs	r2, #2
 800458e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004590:	78fa      	ldrb	r2, [r7, #3]
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	4613      	mov	r3, r2
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	334c      	adds	r3, #76	@ 0x4c
 80045a0:	2202      	movs	r2, #2
 80045a2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	331b      	adds	r3, #27
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	f040 80d1 	bne.w	800475e <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80045bc:	78fa      	ldrb	r2, [r7, #3]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	331b      	adds	r3, #27
 80045cc:	2200      	movs	r2, #0
 80045ce:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	0151      	lsls	r1, r2, #5
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	440a      	add	r2, r1
 80045e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80045ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ee:	6053      	str	r3, [r2, #4]
 80045f0:	e0b5      	b.n	800475e <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	334d      	adds	r3, #77	@ 0x4d
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b05      	cmp	r3, #5
 8004606:	d114      	bne.n	8004632 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004608:	78fa      	ldrb	r2, [r7, #3]
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	1a9b      	subs	r3, r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	334d      	adds	r3, #77	@ 0x4d
 8004618:	2202      	movs	r2, #2
 800461a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800461c:	78fa      	ldrb	r2, [r7, #3]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	334c      	adds	r3, #76	@ 0x4c
 800462c:	2202      	movs	r2, #2
 800462e:	701a      	strb	r2, [r3, #0]
 8004630:	e095      	b.n	800475e <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004632:	78fa      	ldrb	r2, [r7, #3]
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	334d      	adds	r3, #77	@ 0x4d
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b06      	cmp	r3, #6
 8004646:	d114      	bne.n	8004672 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004648:	78fa      	ldrb	r2, [r7, #3]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	334d      	adds	r3, #77	@ 0x4d
 8004658:	2202      	movs	r2, #2
 800465a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	334c      	adds	r3, #76	@ 0x4c
 800466c:	2205      	movs	r2, #5
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	e075      	b.n	800475e <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	334d      	adds	r3, #77	@ 0x4d
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b07      	cmp	r3, #7
 8004686:	d00a      	beq.n	800469e <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	334d      	adds	r3, #77	@ 0x4d
 8004698:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800469a:	2b09      	cmp	r3, #9
 800469c:	d170      	bne.n	8004780 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800469e:	78fa      	ldrb	r2, [r7, #3]
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	334d      	adds	r3, #77	@ 0x4d
 80046ae:	2202      	movs	r2, #2
 80046b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80046b2:	78fa      	ldrb	r2, [r7, #3]
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	3344      	adds	r3, #68	@ 0x44
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	1c59      	adds	r1, r3, #1
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	1a9b      	subs	r3, r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4403      	add	r3, r0
 80046d2:	3344      	adds	r3, #68	@ 0x44
 80046d4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	3344      	adds	r3, #68	@ 0x44
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d914      	bls.n	8004716 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80046ec:	78fa      	ldrb	r2, [r7, #3]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	3344      	adds	r3, #68	@ 0x44
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	334c      	adds	r3, #76	@ 0x4c
 8004710:	2204      	movs	r2, #4
 8004712:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004714:	e022      	b.n	800475c <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	334c      	adds	r3, #76	@ 0x4c
 8004726:	2202      	movs	r2, #2
 8004728:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800472a:	78fb      	ldrb	r3, [r7, #3]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4413      	add	r3, r2
 8004732:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004740:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004748:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4413      	add	r3, r2
 8004752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004756:	461a      	mov	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800475c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800475e:	78fa      	ldrb	r2, [r7, #3]
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	334c      	adds	r3, #76	@ 0x4c
 800476e:	781a      	ldrb	r2, [r3, #0]
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	4619      	mov	r1, r3
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f005 f963 	bl	8009a40 <HAL_HCD_HC_NotifyURBChange_Callback>
 800477a:	e002      	b.n	8004782 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800477c:	bf00      	nop
 800477e:	e000      	b.n	8004782 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004780:	bf00      	nop
  }
}
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	@ 0x28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004798:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	0c5b      	lsrs	r3, r3, #17
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	091b      	lsrs	r3, r3, #4
 80047b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047bc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d004      	beq.n	80047ce <HCD_RXQLVL_IRQHandler+0x46>
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2b05      	cmp	r3, #5
 80047c8:	f000 80b6 	beq.w	8004938 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80047cc:	e0b7      	b.n	800493e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 80b3 	beq.w	800493c <HCD_RXQLVL_IRQHandler+0x1b4>
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4613      	mov	r3, r2
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	332c      	adds	r3, #44	@ 0x2c
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80a7 	beq.w	800493c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4613      	mov	r3, r2
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	3338      	adds	r3, #56	@ 0x38
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	18d1      	adds	r1, r2, r3
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	4613      	mov	r3, r2
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4403      	add	r3, r0
 8004812:	3334      	adds	r3, #52	@ 0x34
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4299      	cmp	r1, r3
 8004818:	f200 8083 	bhi.w	8004922 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4613      	mov	r3, r2
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	332c      	adds	r3, #44	@ 0x2c
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	b292      	uxth	r2, r2
 8004836:	4619      	mov	r1, r3
 8004838:	f003 fcba 	bl	80081b0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4613      	mov	r3, r2
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	332c      	adds	r3, #44	@ 0x2c
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	18d1      	adds	r1, r2, r3
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4613      	mov	r3, r2
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	1a9b      	subs	r3, r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4403      	add	r3, r0
 8004860:	332c      	adds	r3, #44	@ 0x2c
 8004862:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	4613      	mov	r3, r2
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	3338      	adds	r3, #56	@ 0x38
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	18d1      	adds	r1, r2, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	4613      	mov	r3, r2
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	1a9b      	subs	r3, r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4403      	add	r3, r0
 8004888:	3338      	adds	r3, #56	@ 0x38
 800488a:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	4413      	add	r3, r2
 8004894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	0cdb      	lsrs	r3, r3, #19
 800489c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048a0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4613      	mov	r3, r2
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	1a9b      	subs	r3, r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	440b      	add	r3, r1
 80048b0:	3328      	adds	r3, #40	@ 0x28
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d13f      	bne.n	800493c <HCD_RXQLVL_IRQHandler+0x1b4>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d03c      	beq.n	800493c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048d8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048e0:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ee:	461a      	mov	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4613      	mov	r3, r2
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	333c      	adds	r3, #60	@ 0x3c
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	f083 0301 	eor.w	r3, r3, #1
 800490a:	b2d8      	uxtb	r0, r3
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4613      	mov	r3, r2
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	333c      	adds	r3, #60	@ 0x3c
 800491c:	4602      	mov	r2, r0
 800491e:	701a      	strb	r2, [r3, #0]
      break;
 8004920:	e00c      	b.n	800493c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4613      	mov	r3, r2
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	334c      	adds	r3, #76	@ 0x4c
 8004932:	2204      	movs	r2, #4
 8004934:	701a      	strb	r2, [r3, #0]
      break;
 8004936:	e001      	b.n	800493c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004938:	bf00      	nop
 800493a:	e000      	b.n	800493e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800493c:	bf00      	nop
  }
}
 800493e:	bf00      	nop
 8004940:	3728      	adds	r7, #40	@ 0x28
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b086      	sub	sp, #24
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004972:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b02      	cmp	r3, #2
 800497c:	d10b      	bne.n	8004996 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b01      	cmp	r3, #1
 8004986:	d102      	bne.n	800498e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f005 f83d 	bl	8009a08 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f043 0302 	orr.w	r3, r3, #2
 8004994:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b08      	cmp	r3, #8
 800499e:	d132      	bne.n	8004a06 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f043 0308 	orr.w	r3, r3, #8
 80049a6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d126      	bne.n	8004a00 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	7a5b      	ldrb	r3, [r3, #9]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d113      	bne.n	80049e2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80049c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049c4:	d106      	bne.n	80049d4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2102      	movs	r1, #2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f003 fc89 	bl	80082e4 <USB_InitFSLSPClkSel>
 80049d2:	e011      	b.n	80049f8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2101      	movs	r1, #1
 80049da:	4618      	mov	r0, r3
 80049dc:	f003 fc82 	bl	80082e4 <USB_InitFSLSPClkSel>
 80049e0:	e00a      	b.n	80049f8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	79db      	ldrb	r3, [r3, #7]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d106      	bne.n	80049f8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049f0:	461a      	mov	r2, r3
 80049f2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80049f6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f005 f833 	bl	8009a64 <HAL_HCD_PortEnabled_Callback>
 80049fe:	e002      	b.n	8004a06 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f005 f83d 	bl	8009a80 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d103      	bne.n	8004a18 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f043 0320 	orr.w	r3, r3, #32
 8004a16:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	6013      	str	r3, [r2, #0]
}
 8004a24:	bf00      	nop
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e0bf      	b.n	8004bbe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fb ff54 	bl	8000900 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004a6e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6999      	ldr	r1, [r3, #24]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004a84:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6899      	ldr	r1, [r3, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004bc8 <HAL_LTDC_Init+0x19c>)
 8004aa0:	400b      	ands	r3, r1
 8004aa2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	041b      	lsls	r3, r3, #16
 8004aaa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6899      	ldr	r1, [r3, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68d9      	ldr	r1, [r3, #12]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b3e      	ldr	r3, [pc, #248]	@ (8004bc8 <HAL_LTDC_Init+0x19c>)
 8004ace:	400b      	ands	r3, r1
 8004ad0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	041b      	lsls	r3, r3, #16
 8004ad8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68d9      	ldr	r1, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1a      	ldr	r2, [r3, #32]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6919      	ldr	r1, [r3, #16]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b33      	ldr	r3, [pc, #204]	@ (8004bc8 <HAL_LTDC_Init+0x19c>)
 8004afc:	400b      	ands	r3, r1
 8004afe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	041b      	lsls	r3, r3, #16
 8004b06:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6919      	ldr	r1, [r3, #16]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6959      	ldr	r1, [r3, #20]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b27      	ldr	r3, [pc, #156]	@ (8004bc8 <HAL_LTDC_Init+0x19c>)
 8004b2a:	400b      	ands	r3, r1
 8004b2c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b32:	041b      	lsls	r3, r3, #16
 8004b34:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6959      	ldr	r1, [r3, #20]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004b5c:	041b      	lsls	r3, r3, #16
 8004b5e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0206 	orr.w	r2, r2, #6
 8004b9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699a      	ldr	r2, [r3, #24]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	f000f800 	.word	0xf000f800

08004bcc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bda:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004be2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d023      	beq.n	8004c36 <HAL_LTDC_IRQHandler+0x6a>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01e      	beq.n	8004c36 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0204 	bic.w	r2, r2, #4
 8004c06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c16:	f043 0201 	orr.w	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2204      	movs	r2, #4
 8004c24:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f86f 	bl	8004d14 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d023      	beq.n	8004c88 <HAL_LTDC_IRQHandler+0xbc>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01e      	beq.n	8004c88 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0202 	bic.w	r2, r2, #2
 8004c58:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c68:	f043 0202 	orr.w	r2, r3, #2
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2204      	movs	r2, #4
 8004c76:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f846 	bl	8004d14 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01b      	beq.n	8004cca <HAL_LTDC_IRQHandler+0xfe>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d016      	beq.n	8004cca <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0201 	bic.w	r2, r2, #1
 8004caa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f82f 	bl	8004d28 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01b      	beq.n	8004d0c <HAL_LTDC_IRQHandler+0x140>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d016      	beq.n	8004d0c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0208 	bic.w	r2, r2, #8
 8004cec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2208      	movs	r2, #8
 8004cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f818 	bl	8004d3c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004d0c:	bf00      	nop
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004d50:	b5b0      	push	{r4, r5, r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_LTDC_ConfigLayer+0x1a>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e02c      	b.n	8004dc4 <HAL_LTDC_ConfigLayer+0x74>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2202      	movs	r2, #2
 8004d76:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2134      	movs	r1, #52	@ 0x34
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	4413      	add	r3, r2
 8004d86:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	4614      	mov	r4, r2
 8004d8e:	461d      	mov	r5, r3
 8004d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 f81f 	bl	8004de8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2201      	movs	r2, #1
 8004db0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bdb0      	pop	{r4, r5, r7, pc}

08004dcc <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004dda:	b2db      	uxtb	r3, r3
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b089      	sub	sp, #36	@ 0x24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	0c1b      	lsrs	r3, r3, #16
 8004e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e04:	4413      	add	r3, r2
 8004e06:	041b      	lsls	r3, r3, #16
 8004e08:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	01db      	lsls	r3, r3, #7
 8004e14:	4413      	add	r3, r2
 8004e16:	3384      	adds	r3, #132	@ 0x84
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	6812      	ldr	r2, [r2, #0]
 8004e1e:	4611      	mov	r1, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	01d2      	lsls	r2, r2, #7
 8004e24:	440a      	add	r2, r1
 8004e26:	3284      	adds	r2, #132	@ 0x84
 8004e28:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004e2c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	0c1b      	lsrs	r3, r3, #16
 8004e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e3e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e40:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4619      	mov	r1, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	01db      	lsls	r3, r3, #7
 8004e4c:	440b      	add	r3, r1
 8004e4e:	3384      	adds	r3, #132	@ 0x84
 8004e50:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e56:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e66:	4413      	add	r3, r2
 8004e68:	041b      	lsls	r3, r3, #16
 8004e6a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	01db      	lsls	r3, r3, #7
 8004e76:	4413      	add	r3, r2
 8004e78:	3384      	adds	r3, #132	@ 0x84
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	4611      	mov	r1, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	01d2      	lsls	r2, r2, #7
 8004e86:	440a      	add	r2, r1
 8004e88:	3284      	adds	r2, #132	@ 0x84
 8004e8a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004e8e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e9e:	4413      	add	r3, r2
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	01db      	lsls	r3, r3, #7
 8004eac:	440b      	add	r3, r1
 8004eae:	3384      	adds	r3, #132	@ 0x84
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	01db      	lsls	r3, r3, #7
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3384      	adds	r3, #132	@ 0x84
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	6812      	ldr	r2, [r2, #0]
 8004ecc:	4611      	mov	r1, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	01d2      	lsls	r2, r2, #7
 8004ed2:	440a      	add	r2, r1
 8004ed4:	3284      	adds	r2, #132	@ 0x84
 8004ed6:	f023 0307 	bic.w	r3, r3, #7
 8004eda:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	01db      	lsls	r3, r3, #7
 8004ee6:	4413      	add	r3, r2
 8004ee8:	3384      	adds	r3, #132	@ 0x84
 8004eea:	461a      	mov	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004f02:	041b      	lsls	r3, r3, #16
 8004f04:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	01db      	lsls	r3, r3, #7
 8004f18:	4413      	add	r3, r2
 8004f1a:	3384      	adds	r3, #132	@ 0x84
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	01db      	lsls	r3, r3, #7
 8004f28:	4413      	add	r3, r2
 8004f2a:	3384      	adds	r3, #132	@ 0x84
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	2300      	movs	r3, #0
 8004f30:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004f38:	461a      	mov	r2, r3
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	431a      	orrs	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4619      	mov	r1, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	01db      	lsls	r3, r3, #7
 8004f4c:	440b      	add	r3, r1
 8004f4e:	3384      	adds	r3, #132	@ 0x84
 8004f50:	4619      	mov	r1, r3
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	01db      	lsls	r3, r3, #7
 8004f62:	4413      	add	r3, r2
 8004f64:	3384      	adds	r3, #132	@ 0x84
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	01d2      	lsls	r2, r2, #7
 8004f72:	440a      	add	r2, r1
 8004f74:	3284      	adds	r2, #132	@ 0x84
 8004f76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f7a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	01db      	lsls	r3, r3, #7
 8004f86:	4413      	add	r3, r2
 8004f88:	3384      	adds	r3, #132	@ 0x84
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	01db      	lsls	r3, r3, #7
 8004f9c:	4413      	add	r3, r2
 8004f9e:	3384      	adds	r3, #132	@ 0x84
 8004fa0:	69da      	ldr	r2, [r3, #28]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	01db      	lsls	r3, r3, #7
 8004fac:	440b      	add	r3, r1
 8004fae:	3384      	adds	r3, #132	@ 0x84
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4b58      	ldr	r3, [pc, #352]	@ (8005114 <LTDC_SetConfig+0x32c>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	69da      	ldr	r2, [r3, #28]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	68f9      	ldr	r1, [r7, #12]
 8004fc2:	6809      	ldr	r1, [r1, #0]
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	01c9      	lsls	r1, r1, #7
 8004fca:	4401      	add	r1, r0
 8004fcc:	3184      	adds	r1, #132	@ 0x84
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	01db      	lsls	r3, r3, #7
 8004fdc:	4413      	add	r3, r2
 8004fde:	3384      	adds	r3, #132	@ 0x84
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	01db      	lsls	r3, r3, #7
 8004fec:	4413      	add	r3, r2
 8004fee:	3384      	adds	r3, #132	@ 0x84
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	01db      	lsls	r3, r3, #7
 8005000:	4413      	add	r3, r2
 8005002:	3384      	adds	r3, #132	@ 0x84
 8005004:	461a      	mov	r2, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d102      	bne.n	800501a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005014:	2304      	movs	r3, #4
 8005016:	61fb      	str	r3, [r7, #28]
 8005018:	e01b      	b.n	8005052 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d102      	bne.n	8005028 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005022:	2303      	movs	r3, #3
 8005024:	61fb      	str	r3, [r7, #28]
 8005026:	e014      	b.n	8005052 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	2b04      	cmp	r3, #4
 800502e:	d00b      	beq.n	8005048 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005034:	2b02      	cmp	r3, #2
 8005036:	d007      	beq.n	8005048 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800503c:	2b03      	cmp	r3, #3
 800503e:	d003      	beq.n	8005048 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005044:	2b07      	cmp	r3, #7
 8005046:	d102      	bne.n	800504e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005048:	2302      	movs	r3, #2
 800504a:	61fb      	str	r3, [r7, #28]
 800504c:	e001      	b.n	8005052 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800504e:	2301      	movs	r3, #1
 8005050:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	01db      	lsls	r3, r3, #7
 800505c:	4413      	add	r3, r2
 800505e:	3384      	adds	r3, #132	@ 0x84
 8005060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	6812      	ldr	r2, [r2, #0]
 8005066:	4611      	mov	r1, r2
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	01d2      	lsls	r2, r2, #7
 800506c:	440a      	add	r2, r1
 800506e:	3284      	adds	r2, #132	@ 0x84
 8005070:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005074:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	fb02 f303 	mul.w	r3, r2, r3
 8005080:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	6859      	ldr	r1, [r3, #4]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	1acb      	subs	r3, r1, r3
 800508c:	69f9      	ldr	r1, [r7, #28]
 800508e:	fb01 f303 	mul.w	r3, r1, r3
 8005092:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005094:	68f9      	ldr	r1, [r7, #12]
 8005096:	6809      	ldr	r1, [r1, #0]
 8005098:	4608      	mov	r0, r1
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	01c9      	lsls	r1, r1, #7
 800509e:	4401      	add	r1, r0
 80050a0:	3184      	adds	r1, #132	@ 0x84
 80050a2:	4313      	orrs	r3, r2
 80050a4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	01db      	lsls	r3, r3, #7
 80050b0:	4413      	add	r3, r2
 80050b2:	3384      	adds	r3, #132	@ 0x84
 80050b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4619      	mov	r1, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	01db      	lsls	r3, r3, #7
 80050c0:	440b      	add	r3, r1
 80050c2:	3384      	adds	r3, #132	@ 0x84
 80050c4:	4619      	mov	r1, r3
 80050c6:	4b14      	ldr	r3, [pc, #80]	@ (8005118 <LTDC_SetConfig+0x330>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	01db      	lsls	r3, r3, #7
 80050d6:	4413      	add	r3, r2
 80050d8:	3384      	adds	r3, #132	@ 0x84
 80050da:	461a      	mov	r2, r3
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	01db      	lsls	r3, r3, #7
 80050ec:	4413      	add	r3, r2
 80050ee:	3384      	adds	r3, #132	@ 0x84
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	6812      	ldr	r2, [r2, #0]
 80050f6:	4611      	mov	r1, r2
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	01d2      	lsls	r2, r2, #7
 80050fc:	440a      	add	r2, r1
 80050fe:	3284      	adds	r2, #132	@ 0x84
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	6013      	str	r3, [r2, #0]
}
 8005106:	bf00      	nop
 8005108:	3724      	adds	r7, #36	@ 0x24
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	fffff8f8 	.word	0xfffff8f8
 8005118:	fffff800 	.word	0xfffff800

0800511c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005120:	4b05      	ldr	r3, [pc, #20]	@ (8005138 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a04      	ldr	r2, [pc, #16]	@ (8005138 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800512a:	6013      	str	r3, [r2, #0]
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40007000 	.word	0x40007000

0800513c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005146:	4b23      	ldr	r3, [pc, #140]	@ (80051d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514a:	4a22      	ldr	r2, [pc, #136]	@ (80051d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800514c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005150:	6413      	str	r3, [r2, #64]	@ 0x40
 8005152:	4b20      	ldr	r3, [pc, #128]	@ (80051d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800515e:	4b1e      	ldr	r3, [pc, #120]	@ (80051d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1d      	ldr	r2, [pc, #116]	@ (80051d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005168:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800516a:	f7fc fe0f 	bl	8001d8c <HAL_GetTick>
 800516e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005170:	e009      	b.n	8005186 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005172:	f7fc fe0b 	bl	8001d8c <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005180:	d901      	bls.n	8005186 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e022      	b.n	80051cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005186:	4b14      	ldr	r3, [pc, #80]	@ (80051d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800518e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005192:	d1ee      	bne.n	8005172 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005194:	4b10      	ldr	r3, [pc, #64]	@ (80051d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a0f      	ldr	r2, [pc, #60]	@ (80051d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800519a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800519e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051a0:	f7fc fdf4 	bl	8001d8c <HAL_GetTick>
 80051a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051a6:	e009      	b.n	80051bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051a8:	f7fc fdf0 	bl	8001d8c <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051b6:	d901      	bls.n	80051bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e007      	b.n	80051cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051bc:	4b06      	ldr	r3, [pc, #24]	@ (80051d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051c8:	d1ee      	bne.n	80051a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	40023800 	.word	0x40023800
 80051d8:	40007000 	.word	0x40007000

080051dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80051e4:	2300      	movs	r3, #0
 80051e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e291      	b.n	8005716 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 8087 	beq.w	800530e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005200:	4b96      	ldr	r3, [pc, #600]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 030c 	and.w	r3, r3, #12
 8005208:	2b04      	cmp	r3, #4
 800520a:	d00c      	beq.n	8005226 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800520c:	4b93      	ldr	r3, [pc, #588]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f003 030c 	and.w	r3, r3, #12
 8005214:	2b08      	cmp	r3, #8
 8005216:	d112      	bne.n	800523e <HAL_RCC_OscConfig+0x62>
 8005218:	4b90      	ldr	r3, [pc, #576]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005220:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005224:	d10b      	bne.n	800523e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005226:	4b8d      	ldr	r3, [pc, #564]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d06c      	beq.n	800530c <HAL_RCC_OscConfig+0x130>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d168      	bne.n	800530c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e26b      	b.n	8005716 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005246:	d106      	bne.n	8005256 <HAL_RCC_OscConfig+0x7a>
 8005248:	4b84      	ldr	r3, [pc, #528]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a83      	ldr	r2, [pc, #524]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 800524e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	e02e      	b.n	80052b4 <HAL_RCC_OscConfig+0xd8>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10c      	bne.n	8005278 <HAL_RCC_OscConfig+0x9c>
 800525e:	4b7f      	ldr	r3, [pc, #508]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a7e      	ldr	r2, [pc, #504]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	4b7c      	ldr	r3, [pc, #496]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a7b      	ldr	r2, [pc, #492]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005270:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	e01d      	b.n	80052b4 <HAL_RCC_OscConfig+0xd8>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005280:	d10c      	bne.n	800529c <HAL_RCC_OscConfig+0xc0>
 8005282:	4b76      	ldr	r3, [pc, #472]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a75      	ldr	r2, [pc, #468]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	4b73      	ldr	r3, [pc, #460]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a72      	ldr	r2, [pc, #456]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	e00b      	b.n	80052b4 <HAL_RCC_OscConfig+0xd8>
 800529c:	4b6f      	ldr	r3, [pc, #444]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a6e      	ldr	r2, [pc, #440]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 80052a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	4b6c      	ldr	r3, [pc, #432]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a6b      	ldr	r2, [pc, #428]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 80052ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d013      	beq.n	80052e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052bc:	f7fc fd66 	bl	8001d8c <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052c4:	f7fc fd62 	bl	8001d8c <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b64      	cmp	r3, #100	@ 0x64
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e21f      	b.n	8005716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d6:	4b61      	ldr	r3, [pc, #388]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0xe8>
 80052e2:	e014      	b.n	800530e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fc fd52 	bl	8001d8c <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052ec:	f7fc fd4e 	bl	8001d8c <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b64      	cmp	r3, #100	@ 0x64
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e20b      	b.n	8005716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fe:	4b57      	ldr	r3, [pc, #348]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0x110>
 800530a:	e000      	b.n	800530e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d069      	beq.n	80053ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800531a:	4b50      	ldr	r3, [pc, #320]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00b      	beq.n	800533e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005326:	4b4d      	ldr	r3, [pc, #308]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 030c 	and.w	r3, r3, #12
 800532e:	2b08      	cmp	r3, #8
 8005330:	d11c      	bne.n	800536c <HAL_RCC_OscConfig+0x190>
 8005332:	4b4a      	ldr	r3, [pc, #296]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d116      	bne.n	800536c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800533e:	4b47      	ldr	r3, [pc, #284]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d005      	beq.n	8005356 <HAL_RCC_OscConfig+0x17a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d001      	beq.n	8005356 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e1df      	b.n	8005716 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005356:	4b41      	ldr	r3, [pc, #260]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	493d      	ldr	r1, [pc, #244]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005366:	4313      	orrs	r3, r2
 8005368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800536a:	e040      	b.n	80053ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d023      	beq.n	80053bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005374:	4b39      	ldr	r3, [pc, #228]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a38      	ldr	r2, [pc, #224]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fc fd04 	bl	8001d8c <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005388:	f7fc fd00 	bl	8001d8c <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e1bd      	b.n	8005716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800539a:	4b30      	ldr	r3, [pc, #192]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0f0      	beq.n	8005388 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a6:	4b2d      	ldr	r3, [pc, #180]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4929      	ldr	r1, [pc, #164]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	600b      	str	r3, [r1, #0]
 80053ba:	e018      	b.n	80053ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053bc:	4b27      	ldr	r3, [pc, #156]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a26      	ldr	r2, [pc, #152]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 80053c2:	f023 0301 	bic.w	r3, r3, #1
 80053c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c8:	f7fc fce0 	bl	8001d8c <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d0:	f7fc fcdc 	bl	8001d8c <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e199      	b.n	8005716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053e2:	4b1e      	ldr	r3, [pc, #120]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d038      	beq.n	800546c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d019      	beq.n	8005436 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005402:	4b16      	ldr	r3, [pc, #88]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005406:	4a15      	ldr	r2, [pc, #84]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005408:	f043 0301 	orr.w	r3, r3, #1
 800540c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540e:	f7fc fcbd 	bl	8001d8c <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005414:	e008      	b.n	8005428 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005416:	f7fc fcb9 	bl	8001d8c <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e176      	b.n	8005716 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005428:	4b0c      	ldr	r3, [pc, #48]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 800542a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0f0      	beq.n	8005416 <HAL_RCC_OscConfig+0x23a>
 8005434:	e01a      	b.n	800546c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005436:	4b09      	ldr	r3, [pc, #36]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 8005438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800543a:	4a08      	ldr	r2, [pc, #32]	@ (800545c <HAL_RCC_OscConfig+0x280>)
 800543c:	f023 0301 	bic.w	r3, r3, #1
 8005440:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005442:	f7fc fca3 	bl	8001d8c <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005448:	e00a      	b.n	8005460 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800544a:	f7fc fc9f 	bl	8001d8c <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d903      	bls.n	8005460 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e15c      	b.n	8005716 <HAL_RCC_OscConfig+0x53a>
 800545c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005460:	4b91      	ldr	r3, [pc, #580]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 8005462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1ee      	bne.n	800544a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 80a4 	beq.w	80055c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800547a:	4b8b      	ldr	r3, [pc, #556]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10d      	bne.n	80054a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005486:	4b88      	ldr	r3, [pc, #544]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548a:	4a87      	ldr	r2, [pc, #540]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 800548c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005490:	6413      	str	r3, [r2, #64]	@ 0x40
 8005492:	4b85      	ldr	r3, [pc, #532]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800549a:	60bb      	str	r3, [r7, #8]
 800549c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800549e:	2301      	movs	r3, #1
 80054a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054a2:	4b82      	ldr	r3, [pc, #520]	@ (80056ac <HAL_RCC_OscConfig+0x4d0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d118      	bne.n	80054e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80054ae:	4b7f      	ldr	r3, [pc, #508]	@ (80056ac <HAL_RCC_OscConfig+0x4d0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a7e      	ldr	r2, [pc, #504]	@ (80056ac <HAL_RCC_OscConfig+0x4d0>)
 80054b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ba:	f7fc fc67 	bl	8001d8c <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c2:	f7fc fc63 	bl	8001d8c <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b64      	cmp	r3, #100	@ 0x64
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e120      	b.n	8005716 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054d4:	4b75      	ldr	r3, [pc, #468]	@ (80056ac <HAL_RCC_OscConfig+0x4d0>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0f0      	beq.n	80054c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d106      	bne.n	80054f6 <HAL_RCC_OscConfig+0x31a>
 80054e8:	4b6f      	ldr	r3, [pc, #444]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 80054ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ec:	4a6e      	ldr	r2, [pc, #440]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 80054ee:	f043 0301 	orr.w	r3, r3, #1
 80054f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80054f4:	e02d      	b.n	8005552 <HAL_RCC_OscConfig+0x376>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10c      	bne.n	8005518 <HAL_RCC_OscConfig+0x33c>
 80054fe:	4b6a      	ldr	r3, [pc, #424]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 8005500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005502:	4a69      	ldr	r2, [pc, #420]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 8005504:	f023 0301 	bic.w	r3, r3, #1
 8005508:	6713      	str	r3, [r2, #112]	@ 0x70
 800550a:	4b67      	ldr	r3, [pc, #412]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550e:	4a66      	ldr	r2, [pc, #408]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 8005510:	f023 0304 	bic.w	r3, r3, #4
 8005514:	6713      	str	r3, [r2, #112]	@ 0x70
 8005516:	e01c      	b.n	8005552 <HAL_RCC_OscConfig+0x376>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	2b05      	cmp	r3, #5
 800551e:	d10c      	bne.n	800553a <HAL_RCC_OscConfig+0x35e>
 8005520:	4b61      	ldr	r3, [pc, #388]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 8005522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005524:	4a60      	ldr	r2, [pc, #384]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 8005526:	f043 0304 	orr.w	r3, r3, #4
 800552a:	6713      	str	r3, [r2, #112]	@ 0x70
 800552c:	4b5e      	ldr	r3, [pc, #376]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 800552e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005530:	4a5d      	ldr	r2, [pc, #372]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 8005532:	f043 0301 	orr.w	r3, r3, #1
 8005536:	6713      	str	r3, [r2, #112]	@ 0x70
 8005538:	e00b      	b.n	8005552 <HAL_RCC_OscConfig+0x376>
 800553a:	4b5b      	ldr	r3, [pc, #364]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 800553c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553e:	4a5a      	ldr	r2, [pc, #360]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 8005540:	f023 0301 	bic.w	r3, r3, #1
 8005544:	6713      	str	r3, [r2, #112]	@ 0x70
 8005546:	4b58      	ldr	r3, [pc, #352]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 8005548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800554a:	4a57      	ldr	r2, [pc, #348]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 800554c:	f023 0304 	bic.w	r3, r3, #4
 8005550:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d015      	beq.n	8005586 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555a:	f7fc fc17 	bl	8001d8c <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005560:	e00a      	b.n	8005578 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005562:	f7fc fc13 	bl	8001d8c <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005570:	4293      	cmp	r3, r2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e0ce      	b.n	8005716 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005578:	4b4b      	ldr	r3, [pc, #300]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 800557a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0ee      	beq.n	8005562 <HAL_RCC_OscConfig+0x386>
 8005584:	e014      	b.n	80055b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005586:	f7fc fc01 	bl	8001d8c <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800558c:	e00a      	b.n	80055a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558e:	f7fc fbfd 	bl	8001d8c <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800559c:	4293      	cmp	r3, r2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e0b8      	b.n	8005716 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055a4:	4b40      	ldr	r3, [pc, #256]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 80055a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1ee      	bne.n	800558e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d105      	bne.n	80055c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b6:	4b3c      	ldr	r3, [pc, #240]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 80055b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ba:	4a3b      	ldr	r2, [pc, #236]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 80055bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055c0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80a4 	beq.w	8005714 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055cc:	4b36      	ldr	r3, [pc, #216]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 030c 	and.w	r3, r3, #12
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d06b      	beq.n	80056b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d149      	bne.n	8005674 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055e0:	4b31      	ldr	r3, [pc, #196]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a30      	ldr	r2, [pc, #192]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 80055e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ec:	f7fc fbce 	bl	8001d8c <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f4:	f7fc fbca 	bl	8001d8c <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e087      	b.n	8005716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005606:	4b28      	ldr	r3, [pc, #160]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1f0      	bne.n	80055f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69da      	ldr	r2, [r3, #28]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005620:	019b      	lsls	r3, r3, #6
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005628:	085b      	lsrs	r3, r3, #1
 800562a:	3b01      	subs	r3, #1
 800562c:	041b      	lsls	r3, r3, #16
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005634:	061b      	lsls	r3, r3, #24
 8005636:	4313      	orrs	r3, r2
 8005638:	4a1b      	ldr	r2, [pc, #108]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 800563a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800563e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005640:	4b19      	ldr	r3, [pc, #100]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a18      	ldr	r2, [pc, #96]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 8005646:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800564a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564c:	f7fc fb9e 	bl	8001d8c <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005654:	f7fc fb9a 	bl	8001d8c <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e057      	b.n	8005716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005666:	4b10      	ldr	r3, [pc, #64]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0f0      	beq.n	8005654 <HAL_RCC_OscConfig+0x478>
 8005672:	e04f      	b.n	8005714 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005674:	4b0c      	ldr	r3, [pc, #48]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a0b      	ldr	r2, [pc, #44]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 800567a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800567e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005680:	f7fc fb84 	bl	8001d8c <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005688:	f7fc fb80 	bl	8001d8c <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e03d      	b.n	8005716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800569a:	4b03      	ldr	r3, [pc, #12]	@ (80056a8 <HAL_RCC_OscConfig+0x4cc>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x4ac>
 80056a6:	e035      	b.n	8005714 <HAL_RCC_OscConfig+0x538>
 80056a8:	40023800 	.word	0x40023800
 80056ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80056b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005720 <HAL_RCC_OscConfig+0x544>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d028      	beq.n	8005710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d121      	bne.n	8005710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d11a      	bne.n	8005710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056e0:	4013      	ands	r3, r2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d111      	bne.n	8005710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f6:	085b      	lsrs	r3, r3, #1
 80056f8:	3b01      	subs	r3, #1
 80056fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d107      	bne.n	8005710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800570c:	429a      	cmp	r2, r3
 800570e:	d001      	beq.n	8005714 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e000      	b.n	8005716 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	40023800 	.word	0x40023800

08005724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e0d0      	b.n	80058de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800573c:	4b6a      	ldr	r3, [pc, #424]	@ (80058e8 <HAL_RCC_ClockConfig+0x1c4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 030f 	and.w	r3, r3, #15
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d910      	bls.n	800576c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574a:	4b67      	ldr	r3, [pc, #412]	@ (80058e8 <HAL_RCC_ClockConfig+0x1c4>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f023 020f 	bic.w	r2, r3, #15
 8005752:	4965      	ldr	r1, [pc, #404]	@ (80058e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	4313      	orrs	r3, r2
 8005758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800575a:	4b63      	ldr	r3, [pc, #396]	@ (80058e8 <HAL_RCC_ClockConfig+0x1c4>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d001      	beq.n	800576c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e0b8      	b.n	80058de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d020      	beq.n	80057ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d005      	beq.n	8005790 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005784:	4b59      	ldr	r3, [pc, #356]	@ (80058ec <HAL_RCC_ClockConfig+0x1c8>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	4a58      	ldr	r2, [pc, #352]	@ (80058ec <HAL_RCC_ClockConfig+0x1c8>)
 800578a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800578e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0308 	and.w	r3, r3, #8
 8005798:	2b00      	cmp	r3, #0
 800579a:	d005      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800579c:	4b53      	ldr	r3, [pc, #332]	@ (80058ec <HAL_RCC_ClockConfig+0x1c8>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	4a52      	ldr	r2, [pc, #328]	@ (80058ec <HAL_RCC_ClockConfig+0x1c8>)
 80057a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80057a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057a8:	4b50      	ldr	r3, [pc, #320]	@ (80058ec <HAL_RCC_ClockConfig+0x1c8>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	494d      	ldr	r1, [pc, #308]	@ (80058ec <HAL_RCC_ClockConfig+0x1c8>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d040      	beq.n	8005848 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d107      	bne.n	80057de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ce:	4b47      	ldr	r3, [pc, #284]	@ (80058ec <HAL_RCC_ClockConfig+0x1c8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d115      	bne.n	8005806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e07f      	b.n	80058de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d107      	bne.n	80057f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e6:	4b41      	ldr	r3, [pc, #260]	@ (80058ec <HAL_RCC_ClockConfig+0x1c8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d109      	bne.n	8005806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e073      	b.n	80058de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057f6:	4b3d      	ldr	r3, [pc, #244]	@ (80058ec <HAL_RCC_ClockConfig+0x1c8>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e06b      	b.n	80058de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005806:	4b39      	ldr	r3, [pc, #228]	@ (80058ec <HAL_RCC_ClockConfig+0x1c8>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f023 0203 	bic.w	r2, r3, #3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	4936      	ldr	r1, [pc, #216]	@ (80058ec <HAL_RCC_ClockConfig+0x1c8>)
 8005814:	4313      	orrs	r3, r2
 8005816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005818:	f7fc fab8 	bl	8001d8c <HAL_GetTick>
 800581c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800581e:	e00a      	b.n	8005836 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005820:	f7fc fab4 	bl	8001d8c <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800582e:	4293      	cmp	r3, r2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e053      	b.n	80058de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005836:	4b2d      	ldr	r3, [pc, #180]	@ (80058ec <HAL_RCC_ClockConfig+0x1c8>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f003 020c 	and.w	r2, r3, #12
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	429a      	cmp	r2, r3
 8005846:	d1eb      	bne.n	8005820 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005848:	4b27      	ldr	r3, [pc, #156]	@ (80058e8 <HAL_RCC_ClockConfig+0x1c4>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 030f 	and.w	r3, r3, #15
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	429a      	cmp	r2, r3
 8005854:	d210      	bcs.n	8005878 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005856:	4b24      	ldr	r3, [pc, #144]	@ (80058e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f023 020f 	bic.w	r2, r3, #15
 800585e:	4922      	ldr	r1, [pc, #136]	@ (80058e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	4313      	orrs	r3, r2
 8005864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005866:	4b20      	ldr	r3, [pc, #128]	@ (80058e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d001      	beq.n	8005878 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e032      	b.n	80058de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005884:	4b19      	ldr	r3, [pc, #100]	@ (80058ec <HAL_RCC_ClockConfig+0x1c8>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	4916      	ldr	r1, [pc, #88]	@ (80058ec <HAL_RCC_ClockConfig+0x1c8>)
 8005892:	4313      	orrs	r3, r2
 8005894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d009      	beq.n	80058b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058a2:	4b12      	ldr	r3, [pc, #72]	@ (80058ec <HAL_RCC_ClockConfig+0x1c8>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	490e      	ldr	r1, [pc, #56]	@ (80058ec <HAL_RCC_ClockConfig+0x1c8>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058b6:	f000 f821 	bl	80058fc <HAL_RCC_GetSysClockFreq>
 80058ba:	4602      	mov	r2, r0
 80058bc:	4b0b      	ldr	r3, [pc, #44]	@ (80058ec <HAL_RCC_ClockConfig+0x1c8>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	091b      	lsrs	r3, r3, #4
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	490a      	ldr	r1, [pc, #40]	@ (80058f0 <HAL_RCC_ClockConfig+0x1cc>)
 80058c8:	5ccb      	ldrb	r3, [r1, r3]
 80058ca:	fa22 f303 	lsr.w	r3, r2, r3
 80058ce:	4a09      	ldr	r2, [pc, #36]	@ (80058f4 <HAL_RCC_ClockConfig+0x1d0>)
 80058d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80058d2:	4b09      	ldr	r3, [pc, #36]	@ (80058f8 <HAL_RCC_ClockConfig+0x1d4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fb fab2 	bl	8000e40 <HAL_InitTick>

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40023c00 	.word	0x40023c00
 80058ec:	40023800 	.word	0x40023800
 80058f0:	08009c00 	.word	0x08009c00
 80058f4:	20000000 	.word	0x20000000
 80058f8:	20000018 	.word	0x20000018

080058fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005900:	b090      	sub	sp, #64	@ 0x40
 8005902:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	637b      	str	r3, [r7, #52]	@ 0x34
 8005908:	2300      	movs	r3, #0
 800590a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800590c:	2300      	movs	r3, #0
 800590e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005914:	4b59      	ldr	r3, [pc, #356]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0x180>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 030c 	and.w	r3, r3, #12
 800591c:	2b08      	cmp	r3, #8
 800591e:	d00d      	beq.n	800593c <HAL_RCC_GetSysClockFreq+0x40>
 8005920:	2b08      	cmp	r3, #8
 8005922:	f200 80a1 	bhi.w	8005a68 <HAL_RCC_GetSysClockFreq+0x16c>
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_RCC_GetSysClockFreq+0x34>
 800592a:	2b04      	cmp	r3, #4
 800592c:	d003      	beq.n	8005936 <HAL_RCC_GetSysClockFreq+0x3a>
 800592e:	e09b      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005930:	4b53      	ldr	r3, [pc, #332]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0x184>)
 8005932:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005934:	e09b      	b.n	8005a6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005936:	4b53      	ldr	r3, [pc, #332]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x188>)
 8005938:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800593a:	e098      	b.n	8005a6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800593c:	4b4f      	ldr	r3, [pc, #316]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0x180>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005944:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005946:	4b4d      	ldr	r3, [pc, #308]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0x180>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d028      	beq.n	80059a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005952:	4b4a      	ldr	r3, [pc, #296]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0x180>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	099b      	lsrs	r3, r3, #6
 8005958:	2200      	movs	r2, #0
 800595a:	623b      	str	r3, [r7, #32]
 800595c:	627a      	str	r2, [r7, #36]	@ 0x24
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005964:	2100      	movs	r1, #0
 8005966:	4b47      	ldr	r3, [pc, #284]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x188>)
 8005968:	fb03 f201 	mul.w	r2, r3, r1
 800596c:	2300      	movs	r3, #0
 800596e:	fb00 f303 	mul.w	r3, r0, r3
 8005972:	4413      	add	r3, r2
 8005974:	4a43      	ldr	r2, [pc, #268]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x188>)
 8005976:	fba0 1202 	umull	r1, r2, r0, r2
 800597a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800597c:	460a      	mov	r2, r1
 800597e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005982:	4413      	add	r3, r2
 8005984:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005988:	2200      	movs	r2, #0
 800598a:	61bb      	str	r3, [r7, #24]
 800598c:	61fa      	str	r2, [r7, #28]
 800598e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005992:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005996:	f7fa fc3b 	bl	8000210 <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4613      	mov	r3, r2
 80059a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059a2:	e053      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059a4:	4b35      	ldr	r3, [pc, #212]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0x180>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	099b      	lsrs	r3, r3, #6
 80059aa:	2200      	movs	r2, #0
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	617a      	str	r2, [r7, #20]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80059b6:	f04f 0b00 	mov.w	fp, #0
 80059ba:	4652      	mov	r2, sl
 80059bc:	465b      	mov	r3, fp
 80059be:	f04f 0000 	mov.w	r0, #0
 80059c2:	f04f 0100 	mov.w	r1, #0
 80059c6:	0159      	lsls	r1, r3, #5
 80059c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059cc:	0150      	lsls	r0, r2, #5
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	ebb2 080a 	subs.w	r8, r2, sl
 80059d6:	eb63 090b 	sbc.w	r9, r3, fp
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80059e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80059ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80059ee:	ebb2 0408 	subs.w	r4, r2, r8
 80059f2:	eb63 0509 	sbc.w	r5, r3, r9
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	00eb      	lsls	r3, r5, #3
 8005a00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a04:	00e2      	lsls	r2, r4, #3
 8005a06:	4614      	mov	r4, r2
 8005a08:	461d      	mov	r5, r3
 8005a0a:	eb14 030a 	adds.w	r3, r4, sl
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	eb45 030b 	adc.w	r3, r5, fp
 8005a14:	607b      	str	r3, [r7, #4]
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	f04f 0300 	mov.w	r3, #0
 8005a1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a22:	4629      	mov	r1, r5
 8005a24:	028b      	lsls	r3, r1, #10
 8005a26:	4621      	mov	r1, r4
 8005a28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	028a      	lsls	r2, r1, #10
 8005a30:	4610      	mov	r0, r2
 8005a32:	4619      	mov	r1, r3
 8005a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a36:	2200      	movs	r2, #0
 8005a38:	60bb      	str	r3, [r7, #8]
 8005a3a:	60fa      	str	r2, [r7, #12]
 8005a3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a40:	f7fa fbe6 	bl	8000210 <__aeabi_uldivmod>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4613      	mov	r3, r2
 8005a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0x180>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	0c1b      	lsrs	r3, r3, #16
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	3301      	adds	r3, #1
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005a5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005a66:	e002      	b.n	8005a6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a68:	4b05      	ldr	r3, [pc, #20]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3740      	adds	r7, #64	@ 0x40
 8005a74:	46bd      	mov	sp, r7
 8005a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a7a:	bf00      	nop
 8005a7c:	40023800 	.word	0x40023800
 8005a80:	00f42400 	.word	0x00f42400
 8005a84:	017d7840 	.word	0x017d7840

08005a88 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a8c:	4b03      	ldr	r3, [pc, #12]	@ (8005a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	20000000 	.word	0x20000000

08005aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005aa4:	f7ff fff0 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	4b05      	ldr	r3, [pc, #20]	@ (8005ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	0a9b      	lsrs	r3, r3, #10
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	4903      	ldr	r1, [pc, #12]	@ (8005ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ab6:	5ccb      	ldrb	r3, [r1, r3]
 8005ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	08009c10 	.word	0x08009c10

08005ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005acc:	f7ff ffdc 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	4b05      	ldr	r3, [pc, #20]	@ (8005ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	0b5b      	lsrs	r3, r3, #13
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	4903      	ldr	r1, [pc, #12]	@ (8005aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ade:	5ccb      	ldrb	r3, [r1, r3]
 8005ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	40023800 	.word	0x40023800
 8005aec:	08009c10 	.word	0x08009c10

08005af0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	220f      	movs	r2, #15
 8005afe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b00:	4b12      	ldr	r3, [pc, #72]	@ (8005b4c <HAL_RCC_GetClockConfig+0x5c>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 0203 	and.w	r2, r3, #3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b4c <HAL_RCC_GetClockConfig+0x5c>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005b18:	4b0c      	ldr	r3, [pc, #48]	@ (8005b4c <HAL_RCC_GetClockConfig+0x5c>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005b24:	4b09      	ldr	r3, [pc, #36]	@ (8005b4c <HAL_RCC_GetClockConfig+0x5c>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	08db      	lsrs	r3, r3, #3
 8005b2a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b32:	4b07      	ldr	r3, [pc, #28]	@ (8005b50 <HAL_RCC_GetClockConfig+0x60>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 020f 	and.w	r2, r3, #15
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	601a      	str	r2, [r3, #0]
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	40023800 	.word	0x40023800
 8005b50:	40023c00 	.word	0x40023c00

08005b54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d012      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b7c:	4b69      	ldr	r3, [pc, #420]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	4a68      	ldr	r2, [pc, #416]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b82:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005b86:	6093      	str	r3, [r2, #8]
 8005b88:	4b66      	ldr	r3, [pc, #408]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b90:	4964      	ldr	r1, [pc, #400]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d017      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bae:	4b5d      	ldr	r3, [pc, #372]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bb4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bbc:	4959      	ldr	r1, [pc, #356]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bcc:	d101      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d017      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005bea:	4b4e      	ldr	r3, [pc, #312]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bf0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf8:	494a      	ldr	r1, [pc, #296]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c08:	d101      	bne.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005c16:	2301      	movs	r3, #1
 8005c18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005c26:	2301      	movs	r3, #1
 8005c28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 808b 	beq.w	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c38:	4b3a      	ldr	r3, [pc, #232]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3c:	4a39      	ldr	r2, [pc, #228]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c42:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c44:	4b37      	ldr	r3, [pc, #220]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c4c:	60bb      	str	r3, [r7, #8]
 8005c4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c50:	4b35      	ldr	r3, [pc, #212]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a34      	ldr	r2, [pc, #208]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c5c:	f7fc f896 	bl	8001d8c <HAL_GetTick>
 8005c60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c62:	e008      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c64:	f7fc f892 	bl	8001d8c <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b64      	cmp	r3, #100	@ 0x64
 8005c70:	d901      	bls.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e357      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c76:	4b2c      	ldr	r3, [pc, #176]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0f0      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c82:	4b28      	ldr	r3, [pc, #160]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d035      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d02e      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ca0:	4b20      	ldr	r3, [pc, #128]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ca8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005caa:	4b1e      	ldr	r3, [pc, #120]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cae:	4a1d      	ldr	r2, [pc, #116]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cb4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cba:	4a1a      	ldr	r2, [pc, #104]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cc0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005cc2:	4a18      	ldr	r2, [pc, #96]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005cc8:	4b16      	ldr	r3, [pc, #88]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d114      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd4:	f7fc f85a 	bl	8001d8c <HAL_GetTick>
 8005cd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cda:	e00a      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cdc:	f7fc f856 	bl	8001d8c <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e319      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0ee      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d0a:	d111      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005d0c:	4b05      	ldr	r3, [pc, #20]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005d18:	4b04      	ldr	r3, [pc, #16]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d1a:	400b      	ands	r3, r1
 8005d1c:	4901      	ldr	r1, [pc, #4]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	608b      	str	r3, [r1, #8]
 8005d22:	e00b      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005d24:	40023800 	.word	0x40023800
 8005d28:	40007000 	.word	0x40007000
 8005d2c:	0ffffcff 	.word	0x0ffffcff
 8005d30:	4baa      	ldr	r3, [pc, #680]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	4aa9      	ldr	r2, [pc, #676]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d36:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005d3a:	6093      	str	r3, [r2, #8]
 8005d3c:	4ba7      	ldr	r3, [pc, #668]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d48:	49a4      	ldr	r1, [pc, #656]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0310 	and.w	r3, r3, #16
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d010      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d5a:	4ba0      	ldr	r3, [pc, #640]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d60:	4a9e      	ldr	r2, [pc, #632]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005d6a:	4b9c      	ldr	r3, [pc, #624]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d74:	4999      	ldr	r1, [pc, #612]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d88:	4b94      	ldr	r3, [pc, #592]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d8e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d96:	4991      	ldr	r1, [pc, #580]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005daa:	4b8c      	ldr	r3, [pc, #560]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005db0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005db8:	4988      	ldr	r1, [pc, #544]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dcc:	4b83      	ldr	r3, [pc, #524]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dda:	4980      	ldr	r1, [pc, #512]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dee:	4b7b      	ldr	r3, [pc, #492]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dfc:	4977      	ldr	r1, [pc, #476]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e10:	4b72      	ldr	r3, [pc, #456]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e16:	f023 0203 	bic.w	r2, r3, #3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1e:	496f      	ldr	r1, [pc, #444]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e32:	4b6a      	ldr	r3, [pc, #424]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e38:	f023 020c 	bic.w	r2, r3, #12
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e40:	4966      	ldr	r1, [pc, #408]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e54:	4b61      	ldr	r3, [pc, #388]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e5a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e62:	495e      	ldr	r1, [pc, #376]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e76:	4b59      	ldr	r3, [pc, #356]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e7c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e84:	4955      	ldr	r1, [pc, #340]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e98:	4b50      	ldr	r3, [pc, #320]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e9e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea6:	494d      	ldr	r1, [pc, #308]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005eba:	4b48      	ldr	r3, [pc, #288]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ec0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec8:	4944      	ldr	r1, [pc, #272]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00a      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005edc:	4b3f      	ldr	r3, [pc, #252]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ee2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eea:	493c      	ldr	r1, [pc, #240]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005efe:	4b37      	ldr	r3, [pc, #220]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f04:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f0c:	4933      	ldr	r1, [pc, #204]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f20:	4b2e      	ldr	r3, [pc, #184]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f26:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f2e:	492b      	ldr	r1, [pc, #172]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d011      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005f42:	4b26      	ldr	r3, [pc, #152]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f48:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f50:	4922      	ldr	r1, [pc, #136]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f60:	d101      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005f62:	2301      	movs	r3, #1
 8005f64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0308 	and.w	r3, r3, #8
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005f72:	2301      	movs	r3, #1
 8005f74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f82:	4b16      	ldr	r3, [pc, #88]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f88:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f90:	4912      	ldr	r1, [pc, #72]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00b      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005faa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fb4:	4909      	ldr	r1, [pc, #36]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d006      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 80d9 	beq.w	8006182 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005fd0:	4b02      	ldr	r3, [pc, #8]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a01      	ldr	r2, [pc, #4]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005fda:	e001      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005fdc:	40023800 	.word	0x40023800
 8005fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fe2:	f7fb fed3 	bl	8001d8c <HAL_GetTick>
 8005fe6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fe8:	e008      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005fea:	f7fb fecf 	bl	8001d8c <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b64      	cmp	r3, #100	@ 0x64
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e194      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ffc:	4b6c      	ldr	r3, [pc, #432]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1f0      	bne.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d021      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006018:	2b00      	cmp	r3, #0
 800601a:	d11d      	bne.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800601c:	4b64      	ldr	r3, [pc, #400]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800601e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006022:	0c1b      	lsrs	r3, r3, #16
 8006024:	f003 0303 	and.w	r3, r3, #3
 8006028:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800602a:	4b61      	ldr	r3, [pc, #388]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800602c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006030:	0e1b      	lsrs	r3, r3, #24
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	019a      	lsls	r2, r3, #6
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	041b      	lsls	r3, r3, #16
 8006042:	431a      	orrs	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	061b      	lsls	r3, r3, #24
 8006048:	431a      	orrs	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	071b      	lsls	r3, r3, #28
 8006050:	4957      	ldr	r1, [pc, #348]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006052:	4313      	orrs	r3, r2
 8006054:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d004      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006068:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800606c:	d00a      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006076:	2b00      	cmp	r3, #0
 8006078:	d02e      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006082:	d129      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006084:	4b4a      	ldr	r3, [pc, #296]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006086:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800608a:	0c1b      	lsrs	r3, r3, #16
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006092:	4b47      	ldr	r3, [pc, #284]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006098:	0f1b      	lsrs	r3, r3, #28
 800609a:	f003 0307 	and.w	r3, r3, #7
 800609e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	019a      	lsls	r2, r3, #6
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	041b      	lsls	r3, r3, #16
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	061b      	lsls	r3, r3, #24
 80060b2:	431a      	orrs	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	071b      	lsls	r3, r3, #28
 80060b8:	493d      	ldr	r1, [pc, #244]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80060c0:	4b3b      	ldr	r3, [pc, #236]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060c6:	f023 021f 	bic.w	r2, r3, #31
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ce:	3b01      	subs	r3, #1
 80060d0:	4937      	ldr	r1, [pc, #220]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d01d      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80060e4:	4b32      	ldr	r3, [pc, #200]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060ea:	0e1b      	lsrs	r3, r3, #24
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060f2:	4b2f      	ldr	r3, [pc, #188]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060f8:	0f1b      	lsrs	r3, r3, #28
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	019a      	lsls	r2, r3, #6
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	041b      	lsls	r3, r3, #16
 800610c:	431a      	orrs	r2, r3
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	061b      	lsls	r3, r3, #24
 8006112:	431a      	orrs	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	071b      	lsls	r3, r3, #28
 8006118:	4925      	ldr	r1, [pc, #148]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800611a:	4313      	orrs	r3, r2
 800611c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d011      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	019a      	lsls	r2, r3, #6
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	041b      	lsls	r3, r3, #16
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	061b      	lsls	r3, r3, #24
 8006140:	431a      	orrs	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	071b      	lsls	r3, r3, #28
 8006148:	4919      	ldr	r1, [pc, #100]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006150:	4b17      	ldr	r3, [pc, #92]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a16      	ldr	r2, [pc, #88]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006156:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800615a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800615c:	f7fb fe16 	bl	8001d8c <HAL_GetTick>
 8006160:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006162:	e008      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006164:	f7fb fe12 	bl	8001d8c <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b64      	cmp	r3, #100	@ 0x64
 8006170:	d901      	bls.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e0d7      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006176:	4b0e      	ldr	r3, [pc, #56]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0f0      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	2b01      	cmp	r3, #1
 8006186:	f040 80cd 	bne.w	8006324 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800618a:	4b09      	ldr	r3, [pc, #36]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a08      	ldr	r2, [pc, #32]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006196:	f7fb fdf9 	bl	8001d8c <HAL_GetTick>
 800619a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800619c:	e00a      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800619e:	f7fb fdf5 	bl	8001d8c <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b64      	cmp	r3, #100	@ 0x64
 80061aa:	d903      	bls.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e0ba      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80061b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80061b4:	4b5e      	ldr	r3, [pc, #376]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061c0:	d0ed      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d009      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d02e      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d12a      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80061ea:	4b51      	ldr	r3, [pc, #324]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f0:	0c1b      	lsrs	r3, r3, #16
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061f8:	4b4d      	ldr	r3, [pc, #308]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fe:	0f1b      	lsrs	r3, r3, #28
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	019a      	lsls	r2, r3, #6
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	041b      	lsls	r3, r3, #16
 8006210:	431a      	orrs	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	061b      	lsls	r3, r3, #24
 8006218:	431a      	orrs	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	071b      	lsls	r3, r3, #28
 800621e:	4944      	ldr	r1, [pc, #272]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006220:	4313      	orrs	r3, r2
 8006222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006226:	4b42      	ldr	r3, [pc, #264]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006228:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800622c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006234:	3b01      	subs	r3, #1
 8006236:	021b      	lsls	r3, r3, #8
 8006238:	493d      	ldr	r1, [pc, #244]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800623a:	4313      	orrs	r3, r2
 800623c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d022      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006254:	d11d      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006256:	4b36      	ldr	r3, [pc, #216]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800625c:	0e1b      	lsrs	r3, r3, #24
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006264:	4b32      	ldr	r3, [pc, #200]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800626a:	0f1b      	lsrs	r3, r3, #28
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	019a      	lsls	r2, r3, #6
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	041b      	lsls	r3, r3, #16
 800627e:	431a      	orrs	r2, r3
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	061b      	lsls	r3, r3, #24
 8006284:	431a      	orrs	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	071b      	lsls	r3, r3, #28
 800628a:	4929      	ldr	r1, [pc, #164]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800628c:	4313      	orrs	r3, r2
 800628e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0308 	and.w	r3, r3, #8
 800629a:	2b00      	cmp	r3, #0
 800629c:	d028      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800629e:	4b24      	ldr	r3, [pc, #144]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a4:	0e1b      	lsrs	r3, r3, #24
 80062a6:	f003 030f 	and.w	r3, r3, #15
 80062aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80062ac:	4b20      	ldr	r3, [pc, #128]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b2:	0c1b      	lsrs	r3, r3, #16
 80062b4:	f003 0303 	and.w	r3, r3, #3
 80062b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	019a      	lsls	r2, r3, #6
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	041b      	lsls	r3, r3, #16
 80062c4:	431a      	orrs	r2, r3
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	061b      	lsls	r3, r3, #24
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	071b      	lsls	r3, r3, #28
 80062d2:	4917      	ldr	r1, [pc, #92]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80062da:	4b15      	ldr	r3, [pc, #84]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e8:	4911      	ldr	r1, [pc, #68]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80062f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a0e      	ldr	r2, [pc, #56]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062fc:	f7fb fd46 	bl	8001d8c <HAL_GetTick>
 8006300:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006302:	e008      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006304:	f7fb fd42 	bl	8001d8c <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b64      	cmp	r3, #100	@ 0x64
 8006310:	d901      	bls.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e007      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006316:	4b06      	ldr	r3, [pc, #24]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800631e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006322:	d1ef      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3720      	adds	r7, #32
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	40023800 	.word	0x40023800

08006334 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e025      	b.n	8006394 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d106      	bne.n	8006362 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7fa fd65 	bl	8000e2c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2202      	movs	r2, #2
 8006366:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	3304      	adds	r3, #4
 8006372:	4619      	mov	r1, r3
 8006374:	4610      	mov	r0, r2
 8006376:	f001 fd97 	bl	8007ea8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6818      	ldr	r0, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	461a      	mov	r2, r3
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	f001 fdeb 	bl	8007f60 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80063ae:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d101      	bne.n	80063ba <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80063b6:	2302      	movs	r3, #2
 80063b8:	e021      	b.n	80063fe <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80063ba:	7dfb      	ldrb	r3, [r7, #23]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d002      	beq.n	80063c6 <HAL_SDRAM_SendCommand+0x2a>
 80063c0:	7dfb      	ldrb	r3, [r7, #23]
 80063c2:	2b05      	cmp	r3, #5
 80063c4:	d118      	bne.n	80063f8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2202      	movs	r2, #2
 80063ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f001 fe2c 	bl	8008034 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d104      	bne.n	80063ee <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2205      	movs	r2, #5
 80063e8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80063ec:	e006      	b.n	80063fc <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80063f6:	e001      	b.n	80063fc <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e000      	b.n	80063fe <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d101      	bne.n	8006420 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800641c:	2302      	movs	r3, #2
 800641e:	e016      	b.n	800644e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b01      	cmp	r3, #1
 800642a:	d10f      	bne.n	800644c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f001 fe1e 	bl	800807c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
 800644a:	e000      	b.n	800644e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
}
 800644e:	4618      	mov	r0, r3
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e049      	b.n	80064fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	d106      	bne.n	8006482 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7fa fb07 	bl	8000a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2202      	movs	r2, #2
 8006486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3304      	adds	r3, #4
 8006492:	4619      	mov	r1, r3
 8006494:	4610      	mov	r0, r2
 8006496:	f000 f9dd 	bl	8006854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b01      	cmp	r3, #1
 8006516:	d001      	beq.n	800651c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e054      	b.n	80065c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a26      	ldr	r2, [pc, #152]	@ (80065d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d022      	beq.n	8006584 <HAL_TIM_Base_Start_IT+0x80>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006546:	d01d      	beq.n	8006584 <HAL_TIM_Base_Start_IT+0x80>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a22      	ldr	r2, [pc, #136]	@ (80065d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d018      	beq.n	8006584 <HAL_TIM_Base_Start_IT+0x80>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a21      	ldr	r2, [pc, #132]	@ (80065dc <HAL_TIM_Base_Start_IT+0xd8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d013      	beq.n	8006584 <HAL_TIM_Base_Start_IT+0x80>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1f      	ldr	r2, [pc, #124]	@ (80065e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00e      	beq.n	8006584 <HAL_TIM_Base_Start_IT+0x80>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a1e      	ldr	r2, [pc, #120]	@ (80065e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d009      	beq.n	8006584 <HAL_TIM_Base_Start_IT+0x80>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a1c      	ldr	r2, [pc, #112]	@ (80065e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d004      	beq.n	8006584 <HAL_TIM_Base_Start_IT+0x80>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a1b      	ldr	r2, [pc, #108]	@ (80065ec <HAL_TIM_Base_Start_IT+0xe8>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d115      	bne.n	80065b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	4b19      	ldr	r3, [pc, #100]	@ (80065f0 <HAL_TIM_Base_Start_IT+0xec>)
 800658c:	4013      	ands	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b06      	cmp	r3, #6
 8006594:	d015      	beq.n	80065c2 <HAL_TIM_Base_Start_IT+0xbe>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800659c:	d011      	beq.n	80065c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0201 	orr.w	r2, r2, #1
 80065ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ae:	e008      	b.n	80065c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0201 	orr.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	e000      	b.n	80065c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	40010000 	.word	0x40010000
 80065d8:	40000400 	.word	0x40000400
 80065dc:	40000800 	.word	0x40000800
 80065e0:	40000c00 	.word	0x40000c00
 80065e4:	40010400 	.word	0x40010400
 80065e8:	40014000 	.word	0x40014000
 80065ec:	40001800 	.word	0x40001800
 80065f0:	00010007 	.word	0x00010007

080065f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d020      	beq.n	8006658 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01b      	beq.n	8006658 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0202 	mvn.w	r2, #2
 8006628:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f8e9 	bl	8006816 <HAL_TIM_IC_CaptureCallback>
 8006644:	e005      	b.n	8006652 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f8db 	bl	8006802 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f8ec 	bl	800682a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	2b00      	cmp	r3, #0
 8006660:	d020      	beq.n	80066a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01b      	beq.n	80066a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f06f 0204 	mvn.w	r2, #4
 8006674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2202      	movs	r2, #2
 800667a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f8c3 	bl	8006816 <HAL_TIM_IC_CaptureCallback>
 8006690:	e005      	b.n	800669e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f8b5 	bl	8006802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f8c6 	bl	800682a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d020      	beq.n	80066f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f003 0308 	and.w	r3, r3, #8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01b      	beq.n	80066f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f06f 0208 	mvn.w	r2, #8
 80066c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2204      	movs	r2, #4
 80066c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f89d 	bl	8006816 <HAL_TIM_IC_CaptureCallback>
 80066dc:	e005      	b.n	80066ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f88f 	bl	8006802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f8a0 	bl	800682a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f003 0310 	and.w	r3, r3, #16
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d020      	beq.n	800673c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f003 0310 	and.w	r3, r3, #16
 8006700:	2b00      	cmp	r3, #0
 8006702:	d01b      	beq.n	800673c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f06f 0210 	mvn.w	r2, #16
 800670c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2208      	movs	r2, #8
 8006712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f877 	bl	8006816 <HAL_TIM_IC_CaptureCallback>
 8006728:	e005      	b.n	8006736 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f869 	bl	8006802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f87a 	bl	800682a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00c      	beq.n	8006760 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d007      	beq.n	8006760 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f06f 0201 	mvn.w	r2, #1
 8006758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fa f86a 	bl	8000834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006766:	2b00      	cmp	r3, #0
 8006768:	d104      	bne.n	8006774 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00c      	beq.n	800678e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800677a:	2b00      	cmp	r3, #0
 800677c:	d007      	beq.n	800678e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f919 	bl	80069c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00c      	beq.n	80067b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d007      	beq.n	80067b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80067aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f911 	bl	80069d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00c      	beq.n	80067d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d007      	beq.n	80067d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f834 	bl	800683e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00c      	beq.n	80067fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d007      	beq.n	80067fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f06f 0220 	mvn.w	r2, #32
 80067f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f8d9 	bl	80069ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067fa:	bf00      	nop
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800683e:	b480      	push	{r7}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
	...

08006854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a46      	ldr	r2, [pc, #280]	@ (8006980 <TIM_Base_SetConfig+0x12c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d013      	beq.n	8006894 <TIM_Base_SetConfig+0x40>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006872:	d00f      	beq.n	8006894 <TIM_Base_SetConfig+0x40>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a43      	ldr	r2, [pc, #268]	@ (8006984 <TIM_Base_SetConfig+0x130>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00b      	beq.n	8006894 <TIM_Base_SetConfig+0x40>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a42      	ldr	r2, [pc, #264]	@ (8006988 <TIM_Base_SetConfig+0x134>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d007      	beq.n	8006894 <TIM_Base_SetConfig+0x40>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a41      	ldr	r2, [pc, #260]	@ (800698c <TIM_Base_SetConfig+0x138>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d003      	beq.n	8006894 <TIM_Base_SetConfig+0x40>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a40      	ldr	r2, [pc, #256]	@ (8006990 <TIM_Base_SetConfig+0x13c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d108      	bne.n	80068a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a35      	ldr	r2, [pc, #212]	@ (8006980 <TIM_Base_SetConfig+0x12c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d02b      	beq.n	8006906 <TIM_Base_SetConfig+0xb2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b4:	d027      	beq.n	8006906 <TIM_Base_SetConfig+0xb2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a32      	ldr	r2, [pc, #200]	@ (8006984 <TIM_Base_SetConfig+0x130>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d023      	beq.n	8006906 <TIM_Base_SetConfig+0xb2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a31      	ldr	r2, [pc, #196]	@ (8006988 <TIM_Base_SetConfig+0x134>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d01f      	beq.n	8006906 <TIM_Base_SetConfig+0xb2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a30      	ldr	r2, [pc, #192]	@ (800698c <TIM_Base_SetConfig+0x138>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d01b      	beq.n	8006906 <TIM_Base_SetConfig+0xb2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a2f      	ldr	r2, [pc, #188]	@ (8006990 <TIM_Base_SetConfig+0x13c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d017      	beq.n	8006906 <TIM_Base_SetConfig+0xb2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a2e      	ldr	r2, [pc, #184]	@ (8006994 <TIM_Base_SetConfig+0x140>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d013      	beq.n	8006906 <TIM_Base_SetConfig+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006998 <TIM_Base_SetConfig+0x144>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00f      	beq.n	8006906 <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a2c      	ldr	r2, [pc, #176]	@ (800699c <TIM_Base_SetConfig+0x148>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00b      	beq.n	8006906 <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a2b      	ldr	r2, [pc, #172]	@ (80069a0 <TIM_Base_SetConfig+0x14c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d007      	beq.n	8006906 <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a2a      	ldr	r2, [pc, #168]	@ (80069a4 <TIM_Base_SetConfig+0x150>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d003      	beq.n	8006906 <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a29      	ldr	r2, [pc, #164]	@ (80069a8 <TIM_Base_SetConfig+0x154>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d108      	bne.n	8006918 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800690c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a10      	ldr	r2, [pc, #64]	@ (8006980 <TIM_Base_SetConfig+0x12c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d003      	beq.n	800694c <TIM_Base_SetConfig+0xf8>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a12      	ldr	r2, [pc, #72]	@ (8006990 <TIM_Base_SetConfig+0x13c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d103      	bne.n	8006954 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	691a      	ldr	r2, [r3, #16]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b01      	cmp	r3, #1
 8006964:	d105      	bne.n	8006972 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f023 0201 	bic.w	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	611a      	str	r2, [r3, #16]
  }
}
 8006972:	bf00      	nop
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	40010000 	.word	0x40010000
 8006984:	40000400 	.word	0x40000400
 8006988:	40000800 	.word	0x40000800
 800698c:	40000c00 	.word	0x40000c00
 8006990:	40010400 	.word	0x40010400
 8006994:	40014000 	.word	0x40014000
 8006998:	40014400 	.word	0x40014400
 800699c:	40014800 	.word	0x40014800
 80069a0:	40001800 	.word	0x40001800
 80069a4:	40001c00 	.word	0x40001c00
 80069a8:	40002000 	.word	0x40002000

080069ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e040      	b.n	8006a7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7fa f8ae 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2224      	movs	r2, #36	@ 0x24
 8006a14:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0201 	bic.w	r2, r2, #1
 8006a24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fdc2 	bl	80075b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fb5b 	bl	80070f0 <UART_SetConfig>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d101      	bne.n	8006a44 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e01b      	b.n	8006a7c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fe41 	bl	80076fc <UART_CheckIdleState>
 8006a7a:	4603      	mov	r3, r0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	@ 0x28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d132      	bne.n	8006b02 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <HAL_UART_Receive_IT+0x24>
 8006aa2:	88fb      	ldrh	r3, [r7, #6]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e02b      	b.n	8006b04 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d018      	beq.n	8006af2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ade:	623b      	str	r3, [r7, #32]
 8006ae0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae2:	69f9      	ldr	r1, [r7, #28]
 8006ae4:	6a3a      	ldr	r2, [r7, #32]
 8006ae6:	e841 2300 	strex	r3, r2, [r1]
 8006aea:	61bb      	str	r3, [r7, #24]
   return(result);
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1e6      	bne.n	8006ac0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006af2:	88fb      	ldrh	r3, [r7, #6]
 8006af4:	461a      	mov	r2, r3
 8006af6:	68b9      	ldr	r1, [r7, #8]
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 fec3 	bl	8007884 <UART_Start_Receive_IT>
 8006afe:	4603      	mov	r3, r0
 8006b00:	e000      	b.n	8006b04 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006b02:	2302      	movs	r3, #2
  }
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3728      	adds	r7, #40	@ 0x28
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b0ba      	sub	sp, #232	@ 0xe8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006b36:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006b40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d115      	bne.n	8006b74 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00f      	beq.n	8006b74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b58:	f003 0320 	and.w	r3, r3, #32
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d009      	beq.n	8006b74 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 8297 	beq.w	8007098 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	4798      	blx	r3
      }
      return;
 8006b72:	e291      	b.n	8007098 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 8117 	beq.w	8006dac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d106      	bne.n	8006b98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006b8e:	4b85      	ldr	r3, [pc, #532]	@ (8006da4 <HAL_UART_IRQHandler+0x298>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 810a 	beq.w	8006dac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d011      	beq.n	8006bc8 <HAL_UART_IRQHandler+0xbc>
 8006ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00b      	beq.n	8006bc8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bbe:	f043 0201 	orr.w	r2, r3, #1
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d011      	beq.n	8006bf8 <HAL_UART_IRQHandler+0xec>
 8006bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2202      	movs	r2, #2
 8006be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bee:	f043 0204 	orr.w	r2, r3, #4
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d011      	beq.n	8006c28 <HAL_UART_IRQHandler+0x11c>
 8006c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00b      	beq.n	8006c28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2204      	movs	r2, #4
 8006c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c1e:	f043 0202 	orr.w	r2, r3, #2
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c2c:	f003 0308 	and.w	r3, r3, #8
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d017      	beq.n	8006c64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c38:	f003 0320 	and.w	r3, r3, #32
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d105      	bne.n	8006c4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00b      	beq.n	8006c64 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2208      	movs	r2, #8
 8006c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c5a:	f043 0208 	orr.w	r2, r3, #8
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d012      	beq.n	8006c96 <HAL_UART_IRQHandler+0x18a>
 8006c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00c      	beq.n	8006c96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c8c:	f043 0220 	orr.w	r2, r3, #32
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 81fd 	beq.w	800709c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ca6:	f003 0320 	and.w	r3, r3, #32
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00d      	beq.n	8006cca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cb2:	f003 0320 	and.w	r3, r3, #32
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d007      	beq.n	8006cca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cde:	2b40      	cmp	r3, #64	@ 0x40
 8006ce0:	d005      	beq.n	8006cee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ce6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d04f      	beq.n	8006d8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fe8e 	bl	8007a10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfe:	2b40      	cmp	r3, #64	@ 0x40
 8006d00:	d141      	bne.n	8006d86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3308      	adds	r3, #8
 8006d08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d10:	e853 3f00 	ldrex	r3, [r3]
 8006d14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3308      	adds	r3, #8
 8006d2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006d3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1d9      	bne.n	8006d02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d013      	beq.n	8006d7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d5a:	4a13      	ldr	r2, [pc, #76]	@ (8006da8 <HAL_UART_IRQHandler+0x29c>)
 8006d5c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fb faa0 	bl	80022a8 <HAL_DMA_Abort_IT>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d017      	beq.n	8006d9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d7c:	e00f      	b.n	8006d9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f9a0 	bl	80070c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d84:	e00b      	b.n	8006d9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f99c 	bl	80070c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d8c:	e007      	b.n	8006d9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f998 	bl	80070c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006d9c:	e17e      	b.n	800709c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d9e:	bf00      	nop
    return;
 8006da0:	e17c      	b.n	800709c <HAL_UART_IRQHandler+0x590>
 8006da2:	bf00      	nop
 8006da4:	04000120 	.word	0x04000120
 8006da8:	08007ad9 	.word	0x08007ad9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	f040 814c 	bne.w	800704e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dba:	f003 0310 	and.w	r3, r3, #16
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 8145 	beq.w	800704e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dc8:	f003 0310 	and.w	r3, r3, #16
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 813e 	beq.w	800704e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2210      	movs	r2, #16
 8006dd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de4:	2b40      	cmp	r3, #64	@ 0x40
 8006de6:	f040 80b6 	bne.w	8006f56 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006df6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 8150 	beq.w	80070a0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	f080 8148 	bcs.w	80070a0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e24:	f000 8086 	beq.w	8006f34 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e34:	e853 3f00 	ldrex	r3, [r3]
 8006e38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e56:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006e5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1da      	bne.n	8006e28 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3308      	adds	r3, #8
 8006e78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e84:	f023 0301 	bic.w	r3, r3, #1
 8006e88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3308      	adds	r3, #8
 8006e92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006e9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ea2:	e841 2300 	strex	r3, r2, [r1]
 8006ea6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ea8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e1      	bne.n	8006e72 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006ebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ec0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3308      	adds	r3, #8
 8006ece:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ed2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ed8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ee0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e3      	bne.n	8006eae <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f04:	f023 0310 	bic.w	r3, r3, #16
 8006f08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	461a      	mov	r2, r3
 8006f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e4      	bne.n	8006ef4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fb f94a 	bl	80021c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f8c2 	bl	80070d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f54:	e0a4      	b.n	80070a0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 8096 	beq.w	80070a4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006f78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 8091 	beq.w	80070a4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fa6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006faa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e4      	bne.n	8006f82 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc2:	e853 3f00 	ldrex	r3, [r3]
 8006fc6:	623b      	str	r3, [r7, #32]
   return(result);
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	f023 0301 	bic.w	r3, r3, #1
 8006fce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3308      	adds	r3, #8
 8006fd8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006fdc:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fe4:	e841 2300 	strex	r3, r2, [r1]
 8006fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1e3      	bne.n	8006fb8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	60fb      	str	r3, [r7, #12]
   return(result);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f023 0310 	bic.w	r3, r3, #16
 8007018:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007026:	61fb      	str	r3, [r7, #28]
 8007028:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	69b9      	ldr	r1, [r7, #24]
 800702c:	69fa      	ldr	r2, [r7, #28]
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	617b      	str	r3, [r7, #20]
   return(result);
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e4      	bne.n	8007004 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2202      	movs	r2, #2
 800703e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007040:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f846 	bl	80070d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800704c:	e02a      	b.n	80070a4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800704e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00e      	beq.n	8007078 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800705a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800705e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007062:	2b00      	cmp	r3, #0
 8007064:	d008      	beq.n	8007078 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d01c      	beq.n	80070a8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	4798      	blx	r3
    }
    return;
 8007076:	e017      	b.n	80070a8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800707c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007080:	2b00      	cmp	r3, #0
 8007082:	d012      	beq.n	80070aa <HAL_UART_IRQHandler+0x59e>
 8007084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00c      	beq.n	80070aa <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fd37 	bl	8007b04 <UART_EndTransmit_IT>
    return;
 8007096:	e008      	b.n	80070aa <HAL_UART_IRQHandler+0x59e>
      return;
 8007098:	bf00      	nop
 800709a:	e006      	b.n	80070aa <HAL_UART_IRQHandler+0x59e>
    return;
 800709c:	bf00      	nop
 800709e:	e004      	b.n	80070aa <HAL_UART_IRQHandler+0x59e>
      return;
 80070a0:	bf00      	nop
 80070a2:	e002      	b.n	80070aa <HAL_UART_IRQHandler+0x59e>
      return;
 80070a4:	bf00      	nop
 80070a6:	e000      	b.n	80070aa <HAL_UART_IRQHandler+0x59e>
    return;
 80070a8:	bf00      	nop
  }

}
 80070aa:	37e8      	adds	r7, #232	@ 0xe8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	431a      	orrs	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	4313      	orrs	r3, r2
 8007112:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4ba6      	ldr	r3, [pc, #664]	@ (80073b4 <UART_SetConfig+0x2c4>)
 800711c:	4013      	ands	r3, r2
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	6812      	ldr	r2, [r2, #0]
 8007122:	6979      	ldr	r1, [r7, #20]
 8007124:	430b      	orrs	r3, r1
 8007126:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	430a      	orrs	r2, r1
 8007160:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a94      	ldr	r2, [pc, #592]	@ (80073b8 <UART_SetConfig+0x2c8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d120      	bne.n	80071ae <UART_SetConfig+0xbe>
 800716c:	4b93      	ldr	r3, [pc, #588]	@ (80073bc <UART_SetConfig+0x2cc>)
 800716e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007172:	f003 0303 	and.w	r3, r3, #3
 8007176:	2b03      	cmp	r3, #3
 8007178:	d816      	bhi.n	80071a8 <UART_SetConfig+0xb8>
 800717a:	a201      	add	r2, pc, #4	@ (adr r2, 8007180 <UART_SetConfig+0x90>)
 800717c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007180:	08007191 	.word	0x08007191
 8007184:	0800719d 	.word	0x0800719d
 8007188:	08007197 	.word	0x08007197
 800718c:	080071a3 	.word	0x080071a3
 8007190:	2301      	movs	r3, #1
 8007192:	77fb      	strb	r3, [r7, #31]
 8007194:	e150      	b.n	8007438 <UART_SetConfig+0x348>
 8007196:	2302      	movs	r3, #2
 8007198:	77fb      	strb	r3, [r7, #31]
 800719a:	e14d      	b.n	8007438 <UART_SetConfig+0x348>
 800719c:	2304      	movs	r3, #4
 800719e:	77fb      	strb	r3, [r7, #31]
 80071a0:	e14a      	b.n	8007438 <UART_SetConfig+0x348>
 80071a2:	2308      	movs	r3, #8
 80071a4:	77fb      	strb	r3, [r7, #31]
 80071a6:	e147      	b.n	8007438 <UART_SetConfig+0x348>
 80071a8:	2310      	movs	r3, #16
 80071aa:	77fb      	strb	r3, [r7, #31]
 80071ac:	e144      	b.n	8007438 <UART_SetConfig+0x348>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a83      	ldr	r2, [pc, #524]	@ (80073c0 <UART_SetConfig+0x2d0>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d132      	bne.n	800721e <UART_SetConfig+0x12e>
 80071b8:	4b80      	ldr	r3, [pc, #512]	@ (80073bc <UART_SetConfig+0x2cc>)
 80071ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071be:	f003 030c 	and.w	r3, r3, #12
 80071c2:	2b0c      	cmp	r3, #12
 80071c4:	d828      	bhi.n	8007218 <UART_SetConfig+0x128>
 80071c6:	a201      	add	r2, pc, #4	@ (adr r2, 80071cc <UART_SetConfig+0xdc>)
 80071c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071cc:	08007201 	.word	0x08007201
 80071d0:	08007219 	.word	0x08007219
 80071d4:	08007219 	.word	0x08007219
 80071d8:	08007219 	.word	0x08007219
 80071dc:	0800720d 	.word	0x0800720d
 80071e0:	08007219 	.word	0x08007219
 80071e4:	08007219 	.word	0x08007219
 80071e8:	08007219 	.word	0x08007219
 80071ec:	08007207 	.word	0x08007207
 80071f0:	08007219 	.word	0x08007219
 80071f4:	08007219 	.word	0x08007219
 80071f8:	08007219 	.word	0x08007219
 80071fc:	08007213 	.word	0x08007213
 8007200:	2300      	movs	r3, #0
 8007202:	77fb      	strb	r3, [r7, #31]
 8007204:	e118      	b.n	8007438 <UART_SetConfig+0x348>
 8007206:	2302      	movs	r3, #2
 8007208:	77fb      	strb	r3, [r7, #31]
 800720a:	e115      	b.n	8007438 <UART_SetConfig+0x348>
 800720c:	2304      	movs	r3, #4
 800720e:	77fb      	strb	r3, [r7, #31]
 8007210:	e112      	b.n	8007438 <UART_SetConfig+0x348>
 8007212:	2308      	movs	r3, #8
 8007214:	77fb      	strb	r3, [r7, #31]
 8007216:	e10f      	b.n	8007438 <UART_SetConfig+0x348>
 8007218:	2310      	movs	r3, #16
 800721a:	77fb      	strb	r3, [r7, #31]
 800721c:	e10c      	b.n	8007438 <UART_SetConfig+0x348>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a68      	ldr	r2, [pc, #416]	@ (80073c4 <UART_SetConfig+0x2d4>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d120      	bne.n	800726a <UART_SetConfig+0x17a>
 8007228:	4b64      	ldr	r3, [pc, #400]	@ (80073bc <UART_SetConfig+0x2cc>)
 800722a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800722e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007232:	2b30      	cmp	r3, #48	@ 0x30
 8007234:	d013      	beq.n	800725e <UART_SetConfig+0x16e>
 8007236:	2b30      	cmp	r3, #48	@ 0x30
 8007238:	d814      	bhi.n	8007264 <UART_SetConfig+0x174>
 800723a:	2b20      	cmp	r3, #32
 800723c:	d009      	beq.n	8007252 <UART_SetConfig+0x162>
 800723e:	2b20      	cmp	r3, #32
 8007240:	d810      	bhi.n	8007264 <UART_SetConfig+0x174>
 8007242:	2b00      	cmp	r3, #0
 8007244:	d002      	beq.n	800724c <UART_SetConfig+0x15c>
 8007246:	2b10      	cmp	r3, #16
 8007248:	d006      	beq.n	8007258 <UART_SetConfig+0x168>
 800724a:	e00b      	b.n	8007264 <UART_SetConfig+0x174>
 800724c:	2300      	movs	r3, #0
 800724e:	77fb      	strb	r3, [r7, #31]
 8007250:	e0f2      	b.n	8007438 <UART_SetConfig+0x348>
 8007252:	2302      	movs	r3, #2
 8007254:	77fb      	strb	r3, [r7, #31]
 8007256:	e0ef      	b.n	8007438 <UART_SetConfig+0x348>
 8007258:	2304      	movs	r3, #4
 800725a:	77fb      	strb	r3, [r7, #31]
 800725c:	e0ec      	b.n	8007438 <UART_SetConfig+0x348>
 800725e:	2308      	movs	r3, #8
 8007260:	77fb      	strb	r3, [r7, #31]
 8007262:	e0e9      	b.n	8007438 <UART_SetConfig+0x348>
 8007264:	2310      	movs	r3, #16
 8007266:	77fb      	strb	r3, [r7, #31]
 8007268:	e0e6      	b.n	8007438 <UART_SetConfig+0x348>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a56      	ldr	r2, [pc, #344]	@ (80073c8 <UART_SetConfig+0x2d8>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d120      	bne.n	80072b6 <UART_SetConfig+0x1c6>
 8007274:	4b51      	ldr	r3, [pc, #324]	@ (80073bc <UART_SetConfig+0x2cc>)
 8007276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800727a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800727e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007280:	d013      	beq.n	80072aa <UART_SetConfig+0x1ba>
 8007282:	2bc0      	cmp	r3, #192	@ 0xc0
 8007284:	d814      	bhi.n	80072b0 <UART_SetConfig+0x1c0>
 8007286:	2b80      	cmp	r3, #128	@ 0x80
 8007288:	d009      	beq.n	800729e <UART_SetConfig+0x1ae>
 800728a:	2b80      	cmp	r3, #128	@ 0x80
 800728c:	d810      	bhi.n	80072b0 <UART_SetConfig+0x1c0>
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <UART_SetConfig+0x1a8>
 8007292:	2b40      	cmp	r3, #64	@ 0x40
 8007294:	d006      	beq.n	80072a4 <UART_SetConfig+0x1b4>
 8007296:	e00b      	b.n	80072b0 <UART_SetConfig+0x1c0>
 8007298:	2300      	movs	r3, #0
 800729a:	77fb      	strb	r3, [r7, #31]
 800729c:	e0cc      	b.n	8007438 <UART_SetConfig+0x348>
 800729e:	2302      	movs	r3, #2
 80072a0:	77fb      	strb	r3, [r7, #31]
 80072a2:	e0c9      	b.n	8007438 <UART_SetConfig+0x348>
 80072a4:	2304      	movs	r3, #4
 80072a6:	77fb      	strb	r3, [r7, #31]
 80072a8:	e0c6      	b.n	8007438 <UART_SetConfig+0x348>
 80072aa:	2308      	movs	r3, #8
 80072ac:	77fb      	strb	r3, [r7, #31]
 80072ae:	e0c3      	b.n	8007438 <UART_SetConfig+0x348>
 80072b0:	2310      	movs	r3, #16
 80072b2:	77fb      	strb	r3, [r7, #31]
 80072b4:	e0c0      	b.n	8007438 <UART_SetConfig+0x348>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a44      	ldr	r2, [pc, #272]	@ (80073cc <UART_SetConfig+0x2dc>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d125      	bne.n	800730c <UART_SetConfig+0x21c>
 80072c0:	4b3e      	ldr	r3, [pc, #248]	@ (80073bc <UART_SetConfig+0x2cc>)
 80072c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072ce:	d017      	beq.n	8007300 <UART_SetConfig+0x210>
 80072d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072d4:	d817      	bhi.n	8007306 <UART_SetConfig+0x216>
 80072d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072da:	d00b      	beq.n	80072f4 <UART_SetConfig+0x204>
 80072dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072e0:	d811      	bhi.n	8007306 <UART_SetConfig+0x216>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <UART_SetConfig+0x1fe>
 80072e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072ea:	d006      	beq.n	80072fa <UART_SetConfig+0x20a>
 80072ec:	e00b      	b.n	8007306 <UART_SetConfig+0x216>
 80072ee:	2300      	movs	r3, #0
 80072f0:	77fb      	strb	r3, [r7, #31]
 80072f2:	e0a1      	b.n	8007438 <UART_SetConfig+0x348>
 80072f4:	2302      	movs	r3, #2
 80072f6:	77fb      	strb	r3, [r7, #31]
 80072f8:	e09e      	b.n	8007438 <UART_SetConfig+0x348>
 80072fa:	2304      	movs	r3, #4
 80072fc:	77fb      	strb	r3, [r7, #31]
 80072fe:	e09b      	b.n	8007438 <UART_SetConfig+0x348>
 8007300:	2308      	movs	r3, #8
 8007302:	77fb      	strb	r3, [r7, #31]
 8007304:	e098      	b.n	8007438 <UART_SetConfig+0x348>
 8007306:	2310      	movs	r3, #16
 8007308:	77fb      	strb	r3, [r7, #31]
 800730a:	e095      	b.n	8007438 <UART_SetConfig+0x348>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a2f      	ldr	r2, [pc, #188]	@ (80073d0 <UART_SetConfig+0x2e0>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d125      	bne.n	8007362 <UART_SetConfig+0x272>
 8007316:	4b29      	ldr	r3, [pc, #164]	@ (80073bc <UART_SetConfig+0x2cc>)
 8007318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800731c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007320:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007324:	d017      	beq.n	8007356 <UART_SetConfig+0x266>
 8007326:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800732a:	d817      	bhi.n	800735c <UART_SetConfig+0x26c>
 800732c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007330:	d00b      	beq.n	800734a <UART_SetConfig+0x25a>
 8007332:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007336:	d811      	bhi.n	800735c <UART_SetConfig+0x26c>
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <UART_SetConfig+0x254>
 800733c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007340:	d006      	beq.n	8007350 <UART_SetConfig+0x260>
 8007342:	e00b      	b.n	800735c <UART_SetConfig+0x26c>
 8007344:	2301      	movs	r3, #1
 8007346:	77fb      	strb	r3, [r7, #31]
 8007348:	e076      	b.n	8007438 <UART_SetConfig+0x348>
 800734a:	2302      	movs	r3, #2
 800734c:	77fb      	strb	r3, [r7, #31]
 800734e:	e073      	b.n	8007438 <UART_SetConfig+0x348>
 8007350:	2304      	movs	r3, #4
 8007352:	77fb      	strb	r3, [r7, #31]
 8007354:	e070      	b.n	8007438 <UART_SetConfig+0x348>
 8007356:	2308      	movs	r3, #8
 8007358:	77fb      	strb	r3, [r7, #31]
 800735a:	e06d      	b.n	8007438 <UART_SetConfig+0x348>
 800735c:	2310      	movs	r3, #16
 800735e:	77fb      	strb	r3, [r7, #31]
 8007360:	e06a      	b.n	8007438 <UART_SetConfig+0x348>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a1b      	ldr	r2, [pc, #108]	@ (80073d4 <UART_SetConfig+0x2e4>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d138      	bne.n	80073de <UART_SetConfig+0x2ee>
 800736c:	4b13      	ldr	r3, [pc, #76]	@ (80073bc <UART_SetConfig+0x2cc>)
 800736e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007372:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007376:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800737a:	d017      	beq.n	80073ac <UART_SetConfig+0x2bc>
 800737c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007380:	d82a      	bhi.n	80073d8 <UART_SetConfig+0x2e8>
 8007382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007386:	d00b      	beq.n	80073a0 <UART_SetConfig+0x2b0>
 8007388:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800738c:	d824      	bhi.n	80073d8 <UART_SetConfig+0x2e8>
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <UART_SetConfig+0x2aa>
 8007392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007396:	d006      	beq.n	80073a6 <UART_SetConfig+0x2b6>
 8007398:	e01e      	b.n	80073d8 <UART_SetConfig+0x2e8>
 800739a:	2300      	movs	r3, #0
 800739c:	77fb      	strb	r3, [r7, #31]
 800739e:	e04b      	b.n	8007438 <UART_SetConfig+0x348>
 80073a0:	2302      	movs	r3, #2
 80073a2:	77fb      	strb	r3, [r7, #31]
 80073a4:	e048      	b.n	8007438 <UART_SetConfig+0x348>
 80073a6:	2304      	movs	r3, #4
 80073a8:	77fb      	strb	r3, [r7, #31]
 80073aa:	e045      	b.n	8007438 <UART_SetConfig+0x348>
 80073ac:	2308      	movs	r3, #8
 80073ae:	77fb      	strb	r3, [r7, #31]
 80073b0:	e042      	b.n	8007438 <UART_SetConfig+0x348>
 80073b2:	bf00      	nop
 80073b4:	efff69f3 	.word	0xefff69f3
 80073b8:	40011000 	.word	0x40011000
 80073bc:	40023800 	.word	0x40023800
 80073c0:	40004400 	.word	0x40004400
 80073c4:	40004800 	.word	0x40004800
 80073c8:	40004c00 	.word	0x40004c00
 80073cc:	40005000 	.word	0x40005000
 80073d0:	40011400 	.word	0x40011400
 80073d4:	40007800 	.word	0x40007800
 80073d8:	2310      	movs	r3, #16
 80073da:	77fb      	strb	r3, [r7, #31]
 80073dc:	e02c      	b.n	8007438 <UART_SetConfig+0x348>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a72      	ldr	r2, [pc, #456]	@ (80075ac <UART_SetConfig+0x4bc>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d125      	bne.n	8007434 <UART_SetConfig+0x344>
 80073e8:	4b71      	ldr	r3, [pc, #452]	@ (80075b0 <UART_SetConfig+0x4c0>)
 80073ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80073f2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80073f6:	d017      	beq.n	8007428 <UART_SetConfig+0x338>
 80073f8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80073fc:	d817      	bhi.n	800742e <UART_SetConfig+0x33e>
 80073fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007402:	d00b      	beq.n	800741c <UART_SetConfig+0x32c>
 8007404:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007408:	d811      	bhi.n	800742e <UART_SetConfig+0x33e>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <UART_SetConfig+0x326>
 800740e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007412:	d006      	beq.n	8007422 <UART_SetConfig+0x332>
 8007414:	e00b      	b.n	800742e <UART_SetConfig+0x33e>
 8007416:	2300      	movs	r3, #0
 8007418:	77fb      	strb	r3, [r7, #31]
 800741a:	e00d      	b.n	8007438 <UART_SetConfig+0x348>
 800741c:	2302      	movs	r3, #2
 800741e:	77fb      	strb	r3, [r7, #31]
 8007420:	e00a      	b.n	8007438 <UART_SetConfig+0x348>
 8007422:	2304      	movs	r3, #4
 8007424:	77fb      	strb	r3, [r7, #31]
 8007426:	e007      	b.n	8007438 <UART_SetConfig+0x348>
 8007428:	2308      	movs	r3, #8
 800742a:	77fb      	strb	r3, [r7, #31]
 800742c:	e004      	b.n	8007438 <UART_SetConfig+0x348>
 800742e:	2310      	movs	r3, #16
 8007430:	77fb      	strb	r3, [r7, #31]
 8007432:	e001      	b.n	8007438 <UART_SetConfig+0x348>
 8007434:	2310      	movs	r3, #16
 8007436:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007440:	d15b      	bne.n	80074fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007442:	7ffb      	ldrb	r3, [r7, #31]
 8007444:	2b08      	cmp	r3, #8
 8007446:	d828      	bhi.n	800749a <UART_SetConfig+0x3aa>
 8007448:	a201      	add	r2, pc, #4	@ (adr r2, 8007450 <UART_SetConfig+0x360>)
 800744a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744e:	bf00      	nop
 8007450:	08007475 	.word	0x08007475
 8007454:	0800747d 	.word	0x0800747d
 8007458:	08007485 	.word	0x08007485
 800745c:	0800749b 	.word	0x0800749b
 8007460:	0800748b 	.word	0x0800748b
 8007464:	0800749b 	.word	0x0800749b
 8007468:	0800749b 	.word	0x0800749b
 800746c:	0800749b 	.word	0x0800749b
 8007470:	08007493 	.word	0x08007493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007474:	f7fe fb14 	bl	8005aa0 <HAL_RCC_GetPCLK1Freq>
 8007478:	61b8      	str	r0, [r7, #24]
        break;
 800747a:	e013      	b.n	80074a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800747c:	f7fe fb24 	bl	8005ac8 <HAL_RCC_GetPCLK2Freq>
 8007480:	61b8      	str	r0, [r7, #24]
        break;
 8007482:	e00f      	b.n	80074a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007484:	4b4b      	ldr	r3, [pc, #300]	@ (80075b4 <UART_SetConfig+0x4c4>)
 8007486:	61bb      	str	r3, [r7, #24]
        break;
 8007488:	e00c      	b.n	80074a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800748a:	f7fe fa37 	bl	80058fc <HAL_RCC_GetSysClockFreq>
 800748e:	61b8      	str	r0, [r7, #24]
        break;
 8007490:	e008      	b.n	80074a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007496:	61bb      	str	r3, [r7, #24]
        break;
 8007498:	e004      	b.n	80074a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	77bb      	strb	r3, [r7, #30]
        break;
 80074a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d074      	beq.n	8007594 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	005a      	lsls	r2, r3, #1
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	085b      	lsrs	r3, r3, #1
 80074b4:	441a      	add	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80074be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	2b0f      	cmp	r3, #15
 80074c4:	d916      	bls.n	80074f4 <UART_SetConfig+0x404>
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074cc:	d212      	bcs.n	80074f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	f023 030f 	bic.w	r3, r3, #15
 80074d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	085b      	lsrs	r3, r3, #1
 80074dc:	b29b      	uxth	r3, r3
 80074de:	f003 0307 	and.w	r3, r3, #7
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	89fb      	ldrh	r3, [r7, #14]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	89fa      	ldrh	r2, [r7, #14]
 80074f0:	60da      	str	r2, [r3, #12]
 80074f2:	e04f      	b.n	8007594 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	77bb      	strb	r3, [r7, #30]
 80074f8:	e04c      	b.n	8007594 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074fa:	7ffb      	ldrb	r3, [r7, #31]
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d828      	bhi.n	8007552 <UART_SetConfig+0x462>
 8007500:	a201      	add	r2, pc, #4	@ (adr r2, 8007508 <UART_SetConfig+0x418>)
 8007502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007506:	bf00      	nop
 8007508:	0800752d 	.word	0x0800752d
 800750c:	08007535 	.word	0x08007535
 8007510:	0800753d 	.word	0x0800753d
 8007514:	08007553 	.word	0x08007553
 8007518:	08007543 	.word	0x08007543
 800751c:	08007553 	.word	0x08007553
 8007520:	08007553 	.word	0x08007553
 8007524:	08007553 	.word	0x08007553
 8007528:	0800754b 	.word	0x0800754b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800752c:	f7fe fab8 	bl	8005aa0 <HAL_RCC_GetPCLK1Freq>
 8007530:	61b8      	str	r0, [r7, #24]
        break;
 8007532:	e013      	b.n	800755c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007534:	f7fe fac8 	bl	8005ac8 <HAL_RCC_GetPCLK2Freq>
 8007538:	61b8      	str	r0, [r7, #24]
        break;
 800753a:	e00f      	b.n	800755c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800753c:	4b1d      	ldr	r3, [pc, #116]	@ (80075b4 <UART_SetConfig+0x4c4>)
 800753e:	61bb      	str	r3, [r7, #24]
        break;
 8007540:	e00c      	b.n	800755c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007542:	f7fe f9db 	bl	80058fc <HAL_RCC_GetSysClockFreq>
 8007546:	61b8      	str	r0, [r7, #24]
        break;
 8007548:	e008      	b.n	800755c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800754a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800754e:	61bb      	str	r3, [r7, #24]
        break;
 8007550:	e004      	b.n	800755c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007552:	2300      	movs	r3, #0
 8007554:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	77bb      	strb	r3, [r7, #30]
        break;
 800755a:	bf00      	nop
    }

    if (pclk != 0U)
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d018      	beq.n	8007594 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	085a      	lsrs	r2, r3, #1
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	441a      	add	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	fbb2 f3f3 	udiv	r3, r2, r3
 8007574:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	2b0f      	cmp	r3, #15
 800757a:	d909      	bls.n	8007590 <UART_SetConfig+0x4a0>
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007582:	d205      	bcs.n	8007590 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	b29a      	uxth	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	60da      	str	r2, [r3, #12]
 800758e:	e001      	b.n	8007594 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80075a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3720      	adds	r7, #32
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	40007c00 	.word	0x40007c00
 80075b0:	40023800 	.word	0x40023800
 80075b4:	00f42400 	.word	0x00f42400

080075b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c4:	f003 0308 	and.w	r3, r3, #8
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00a      	beq.n	80075e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00a      	beq.n	8007626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00a      	beq.n	8007648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764c:	f003 0310 	and.w	r3, r3, #16
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00a      	beq.n	800766a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800766e:	f003 0320 	and.w	r3, r3, #32
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	d01a      	beq.n	80076ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076b6:	d10a      	bne.n	80076ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00a      	beq.n	80076f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	605a      	str	r2, [r3, #4]
  }
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08c      	sub	sp, #48	@ 0x30
 8007700:	af02      	add	r7, sp, #8
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800770c:	f7fa fb3e 	bl	8001d8c <HAL_GetTick>
 8007710:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0308 	and.w	r3, r3, #8
 800771c:	2b08      	cmp	r3, #8
 800771e:	d12e      	bne.n	800777e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007720:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007728:	2200      	movs	r2, #0
 800772a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f83b 	bl	80077aa <UART_WaitOnFlagUntilTimeout>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d021      	beq.n	800777e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	60fb      	str	r3, [r7, #12]
   return(result);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800774e:	623b      	str	r3, [r7, #32]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	461a      	mov	r2, r3
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	61fb      	str	r3, [r7, #28]
 800775a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	69b9      	ldr	r1, [r7, #24]
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	e841 2300 	strex	r3, r2, [r1]
 8007764:	617b      	str	r3, [r7, #20]
   return(result);
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e6      	bne.n	800773a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2220      	movs	r2, #32
 8007770:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e011      	b.n	80077a2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2220      	movs	r2, #32
 8007782:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2220      	movs	r2, #32
 8007788:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3728      	adds	r7, #40	@ 0x28
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	603b      	str	r3, [r7, #0]
 80077b6:	4613      	mov	r3, r2
 80077b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077ba:	e04f      	b.n	800785c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077c2:	d04b      	beq.n	800785c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077c4:	f7fa fae2 	bl	8001d8c <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d302      	bcc.n	80077da <UART_WaitOnFlagUntilTimeout+0x30>
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e04e      	b.n	800787c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d037      	beq.n	800785c <UART_WaitOnFlagUntilTimeout+0xb2>
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b80      	cmp	r3, #128	@ 0x80
 80077f0:	d034      	beq.n	800785c <UART_WaitOnFlagUntilTimeout+0xb2>
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2b40      	cmp	r3, #64	@ 0x40
 80077f6:	d031      	beq.n	800785c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	f003 0308 	and.w	r3, r3, #8
 8007802:	2b08      	cmp	r3, #8
 8007804:	d110      	bne.n	8007828 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2208      	movs	r2, #8
 800780c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 f8fe 	bl	8007a10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2208      	movs	r2, #8
 8007818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e029      	b.n	800787c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007832:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007836:	d111      	bne.n	800785c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007840:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 f8e4 	bl	8007a10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2220      	movs	r2, #32
 800784c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e00f      	b.n	800787c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	69da      	ldr	r2, [r3, #28]
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	4013      	ands	r3, r2
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	429a      	cmp	r2, r3
 800786a:	bf0c      	ite	eq
 800786c:	2301      	moveq	r3, #1
 800786e:	2300      	movne	r3, #0
 8007870:	b2db      	uxtb	r3, r3
 8007872:	461a      	mov	r2, r3
 8007874:	79fb      	ldrb	r3, [r7, #7]
 8007876:	429a      	cmp	r2, r3
 8007878:	d0a0      	beq.n	80077bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007884:	b480      	push	{r7}
 8007886:	b097      	sub	sp, #92	@ 0x5c
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	4613      	mov	r3, r2
 8007890:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	88fa      	ldrh	r2, [r7, #6]
 800789c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	88fa      	ldrh	r2, [r7, #6]
 80078a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078b6:	d10e      	bne.n	80078d6 <UART_Start_Receive_IT+0x52>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d105      	bne.n	80078cc <UART_Start_Receive_IT+0x48>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80078c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078ca:	e02d      	b.n	8007928 <UART_Start_Receive_IT+0xa4>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	22ff      	movs	r2, #255	@ 0xff
 80078d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078d4:	e028      	b.n	8007928 <UART_Start_Receive_IT+0xa4>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10d      	bne.n	80078fa <UART_Start_Receive_IT+0x76>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d104      	bne.n	80078f0 <UART_Start_Receive_IT+0x6c>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	22ff      	movs	r2, #255	@ 0xff
 80078ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078ee:	e01b      	b.n	8007928 <UART_Start_Receive_IT+0xa4>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	227f      	movs	r2, #127	@ 0x7f
 80078f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078f8:	e016      	b.n	8007928 <UART_Start_Receive_IT+0xa4>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007902:	d10d      	bne.n	8007920 <UART_Start_Receive_IT+0x9c>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d104      	bne.n	8007916 <UART_Start_Receive_IT+0x92>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	227f      	movs	r2, #127	@ 0x7f
 8007910:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007914:	e008      	b.n	8007928 <UART_Start_Receive_IT+0xa4>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	223f      	movs	r2, #63	@ 0x3f
 800791a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800791e:	e003      	b.n	8007928 <UART_Start_Receive_IT+0xa4>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2222      	movs	r2, #34	@ 0x22
 8007934:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3308      	adds	r3, #8
 800793e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007942:	e853 3f00 	ldrex	r3, [r3]
 8007946:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794a:	f043 0301 	orr.w	r3, r3, #1
 800794e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3308      	adds	r3, #8
 8007956:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007958:	64ba      	str	r2, [r7, #72]	@ 0x48
 800795a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800795e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007960:	e841 2300 	strex	r3, r2, [r1]
 8007964:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e5      	bne.n	8007938 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007974:	d107      	bne.n	8007986 <UART_Start_Receive_IT+0x102>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d103      	bne.n	8007986 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4a21      	ldr	r2, [pc, #132]	@ (8007a08 <UART_Start_Receive_IT+0x184>)
 8007982:	669a      	str	r2, [r3, #104]	@ 0x68
 8007984:	e002      	b.n	800798c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4a20      	ldr	r2, [pc, #128]	@ (8007a0c <UART_Start_Receive_IT+0x188>)
 800798a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d019      	beq.n	80079c8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80079a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80079b4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80079c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e6      	bne.n	8007994 <UART_Start_Receive_IT+0x110>
 80079c6:	e018      	b.n	80079fa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	613b      	str	r3, [r7, #16]
   return(result);
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f043 0320 	orr.w	r3, r3, #32
 80079dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079e6:	623b      	str	r3, [r7, #32]
 80079e8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	69f9      	ldr	r1, [r7, #28]
 80079ec:	6a3a      	ldr	r2, [r7, #32]
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e6      	bne.n	80079c8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	375c      	adds	r7, #92	@ 0x5c
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	08007d01 	.word	0x08007d01
 8007a0c:	08007b59 	.word	0x08007b59

08007a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b095      	sub	sp, #84	@ 0x54
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a36:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a38:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e6      	bne.n	8007a18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3308      	adds	r3, #8
 8007a50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	e853 3f00 	ldrex	r3, [r3]
 8007a58:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	f023 0301 	bic.w	r3, r3, #1
 8007a60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3308      	adds	r3, #8
 8007a68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a72:	e841 2300 	strex	r3, r2, [r1]
 8007a76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1e5      	bne.n	8007a4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d118      	bne.n	8007ab8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	e853 3f00 	ldrex	r3, [r3]
 8007a92:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f023 0310 	bic.w	r3, r3, #16
 8007a9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007aa4:	61bb      	str	r3, [r7, #24]
 8007aa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	6979      	ldr	r1, [r7, #20]
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	e841 2300 	strex	r3, r2, [r1]
 8007ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1e6      	bne.n	8007a86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2220      	movs	r2, #32
 8007abc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007acc:	bf00      	nop
 8007ace:	3754      	adds	r7, #84	@ 0x54
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f7ff fae4 	bl	80070c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007afc:	bf00      	nop
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b20:	61fb      	str	r3, [r7, #28]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	61bb      	str	r3, [r7, #24]
 8007b2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6979      	ldr	r1, [r7, #20]
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	613b      	str	r3, [r7, #16]
   return(result);
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e6      	bne.n	8007b0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2220      	movs	r2, #32
 8007b42:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff fab0 	bl	80070b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b50:	bf00      	nop
 8007b52:	3720      	adds	r7, #32
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b09c      	sub	sp, #112	@ 0x70
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b66:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b70:	2b22      	cmp	r3, #34	@ 0x22
 8007b72:	f040 80b9 	bne.w	8007ce8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007b84:	b2d9      	uxtb	r1, r3
 8007b86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b90:	400a      	ands	r2, r1
 8007b92:	b2d2      	uxtb	r2, r2
 8007b94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f040 809c 	bne.w	8007cf8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bc8:	e853 3f00 	ldrex	r3, [r3]
 8007bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007bce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007bde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007be0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007be4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007be6:	e841 2300 	strex	r3, r2, [r1]
 8007bea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1e6      	bne.n	8007bc0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfc:	e853 3f00 	ldrex	r3, [r3]
 8007c00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c04:	f023 0301 	bic.w	r3, r3, #1
 8007c08:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3308      	adds	r3, #8
 8007c10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007c12:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c1a:	e841 2300 	strex	r3, r2, [r1]
 8007c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1e5      	bne.n	8007bf2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d018      	beq.n	8007c7a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	623b      	str	r3, [r7, #32]
   return(result);
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c66:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c68:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c6e:	e841 2300 	strex	r3, r2, [r1]
 8007c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e6      	bne.n	8007c48 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d12e      	bne.n	8007ce0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f023 0310 	bic.w	r3, r3, #16
 8007c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ca6:	61fb      	str	r3, [r7, #28]
 8007ca8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	69b9      	ldr	r1, [r7, #24]
 8007cac:	69fa      	ldr	r2, [r7, #28]
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	617b      	str	r3, [r7, #20]
   return(result);
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e6      	bne.n	8007c88 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	f003 0310 	and.w	r3, r3, #16
 8007cc4:	2b10      	cmp	r3, #16
 8007cc6:	d103      	bne.n	8007cd0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2210      	movs	r2, #16
 8007cce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff f9fd 	bl	80070d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cde:	e00b      	b.n	8007cf8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7f8 fc57 	bl	8000594 <HAL_UART_RxCpltCallback>
}
 8007ce6:	e007      	b.n	8007cf8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	699a      	ldr	r2, [r3, #24]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0208 	orr.w	r2, r2, #8
 8007cf6:	619a      	str	r2, [r3, #24]
}
 8007cf8:	bf00      	nop
 8007cfa:	3770      	adds	r7, #112	@ 0x70
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b09c      	sub	sp, #112	@ 0x70
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d0e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d18:	2b22      	cmp	r3, #34	@ 0x22
 8007d1a:	f040 80b9 	bne.w	8007e90 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d2e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007d32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007d36:	4013      	ands	r3, r2
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d42:	1c9a      	adds	r2, r3, #2
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	3b01      	subs	r3, #1
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f040 809c 	bne.w	8007ea0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d70:	e853 3f00 	ldrex	r3, [r3]
 8007d74:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007d76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	461a      	mov	r2, r3
 8007d84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d86:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d88:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007d8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d8e:	e841 2300 	strex	r3, r2, [r1]
 8007d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1e6      	bne.n	8007d68 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3308      	adds	r3, #8
 8007da0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dac:	f023 0301 	bic.w	r3, r3, #1
 8007db0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3308      	adds	r3, #8
 8007db8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007dba:	643a      	str	r2, [r7, #64]	@ 0x40
 8007dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007dc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e5      	bne.n	8007d9a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d018      	beq.n	8007e22 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e10:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e6      	bne.n	8007df0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d12e      	bne.n	8007e88 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	e853 3f00 	ldrex	r3, [r3]
 8007e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f023 0310 	bic.w	r3, r3, #16
 8007e44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e4e:	61bb      	str	r3, [r7, #24]
 8007e50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e52:	6979      	ldr	r1, [r7, #20]
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	e841 2300 	strex	r3, r2, [r1]
 8007e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1e6      	bne.n	8007e30 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	f003 0310 	and.w	r3, r3, #16
 8007e6c:	2b10      	cmp	r3, #16
 8007e6e:	d103      	bne.n	8007e78 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2210      	movs	r2, #16
 8007e76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7ff f929 	bl	80070d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e86:	e00b      	b.n	8007ea0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7f8 fb83 	bl	8000594 <HAL_UART_RxCpltCallback>
}
 8007e8e:	e007      	b.n	8007ea0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	699a      	ldr	r2, [r3, #24]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0208 	orr.w	r2, r2, #8
 8007e9e:	619a      	str	r2, [r3, #24]
}
 8007ea0:	bf00      	nop
 8007ea2:	3770      	adds	r7, #112	@ 0x70
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d121      	bne.n	8007efe <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	4b27      	ldr	r3, [pc, #156]	@ (8007f5c <FMC_SDRAM_Init+0xb4>)
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	6851      	ldr	r1, [r2, #4]
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	6892      	ldr	r2, [r2, #8]
 8007eca:	4311      	orrs	r1, r2
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	68d2      	ldr	r2, [r2, #12]
 8007ed0:	4311      	orrs	r1, r2
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	6912      	ldr	r2, [r2, #16]
 8007ed6:	4311      	orrs	r1, r2
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	6952      	ldr	r2, [r2, #20]
 8007edc:	4311      	orrs	r1, r2
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	6992      	ldr	r2, [r2, #24]
 8007ee2:	4311      	orrs	r1, r2
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	69d2      	ldr	r2, [r2, #28]
 8007ee8:	4311      	orrs	r1, r2
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	6a12      	ldr	r2, [r2, #32]
 8007eee:	4311      	orrs	r1, r2
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	e026      	b.n	8007f4c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	69d9      	ldr	r1, [r3, #28]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	4319      	orrs	r1, r3
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f14:	430b      	orrs	r3, r1
 8007f16:	431a      	orrs	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	4b0e      	ldr	r3, [pc, #56]	@ (8007f5c <FMC_SDRAM_Init+0xb4>)
 8007f22:	4013      	ands	r3, r2
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	6851      	ldr	r1, [r2, #4]
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	6892      	ldr	r2, [r2, #8]
 8007f2c:	4311      	orrs	r1, r2
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	68d2      	ldr	r2, [r2, #12]
 8007f32:	4311      	orrs	r1, r2
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	6912      	ldr	r2, [r2, #16]
 8007f38:	4311      	orrs	r1, r2
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	6952      	ldr	r2, [r2, #20]
 8007f3e:	4311      	orrs	r1, r2
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	6992      	ldr	r2, [r2, #24]
 8007f44:	430a      	orrs	r2, r1
 8007f46:	431a      	orrs	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	ffff8000 	.word	0xffff8000

08007f60 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d128      	bne.n	8007fc4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	1e59      	subs	r1, r3, #1
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	3b01      	subs	r3, #1
 8007f86:	011b      	lsls	r3, r3, #4
 8007f88:	4319      	orrs	r1, r3
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	021b      	lsls	r3, r3, #8
 8007f92:	4319      	orrs	r1, r3
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	031b      	lsls	r3, r3, #12
 8007f9c:	4319      	orrs	r1, r3
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	041b      	lsls	r3, r3, #16
 8007fa6:	4319      	orrs	r1, r3
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	051b      	lsls	r3, r3, #20
 8007fb0:	4319      	orrs	r1, r3
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	061b      	lsls	r3, r3, #24
 8007fba:	430b      	orrs	r3, r1
 8007fbc:	431a      	orrs	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	609a      	str	r2, [r3, #8]
 8007fc2:	e02d      	b.n	8008020 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	4b19      	ldr	r3, [pc, #100]	@ (8008030 <FMC_SDRAM_Timing_Init+0xd0>)
 8007fca:	4013      	ands	r3, r2
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	68d2      	ldr	r2, [r2, #12]
 8007fd0:	3a01      	subs	r2, #1
 8007fd2:	0311      	lsls	r1, r2, #12
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	6952      	ldr	r2, [r2, #20]
 8007fd8:	3a01      	subs	r2, #1
 8007fda:	0512      	lsls	r2, r2, #20
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	1e59      	subs	r1, r3, #1
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	011b      	lsls	r3, r3, #4
 8007ffa:	4319      	orrs	r1, r3
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	3b01      	subs	r3, #1
 8008002:	021b      	lsls	r3, r3, #8
 8008004:	4319      	orrs	r1, r3
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	3b01      	subs	r3, #1
 800800c:	041b      	lsls	r3, r3, #16
 800800e:	4319      	orrs	r1, r3
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	3b01      	subs	r3, #1
 8008016:	061b      	lsls	r3, r3, #24
 8008018:	430b      	orrs	r3, r1
 800801a:	431a      	orrs	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	ff0f0fff 	.word	0xff0f0fff

08008034 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	4b0c      	ldr	r3, [pc, #48]	@ (8008078 <FMC_SDRAM_SendCommand+0x44>)
 8008046:	4013      	ands	r3, r2
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	6811      	ldr	r1, [r2, #0]
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	6852      	ldr	r2, [r2, #4]
 8008050:	4311      	orrs	r1, r2
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	6892      	ldr	r2, [r2, #8]
 8008056:	3a01      	subs	r2, #1
 8008058:	0152      	lsls	r2, r2, #5
 800805a:	4311      	orrs	r1, r2
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	68d2      	ldr	r2, [r2, #12]
 8008060:	0252      	lsls	r2, r2, #9
 8008062:	430a      	orrs	r2, r1
 8008064:	431a      	orrs	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	ffc00000 	.word	0xffc00000

0800807c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	695a      	ldr	r2, [r3, #20]
 800808a:	4b07      	ldr	r3, [pc, #28]	@ (80080a8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800808c:	4013      	ands	r3, r2
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	0052      	lsls	r2, r2, #1
 8008092:	431a      	orrs	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	ffffc001 	.word	0xffffc001

080080ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f043 0201 	orr.w	r2, r3, #1
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b083      	sub	sp, #12
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f023 0201 	bic.w	r2, r3, #1
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3301      	adds	r3, #1
 8008102:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800810a:	d901      	bls.n	8008110 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e01b      	b.n	8008148 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	daf2      	bge.n	80080fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008118:	2300      	movs	r3, #0
 800811a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	019b      	lsls	r3, r3, #6
 8008120:	f043 0220 	orr.w	r2, r3, #32
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	3301      	adds	r3, #1
 800812c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008134:	d901      	bls.n	800813a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e006      	b.n	8008148 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	f003 0320 	and.w	r3, r3, #32
 8008142:	2b20      	cmp	r3, #32
 8008144:	d0f0      	beq.n	8008128 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3301      	adds	r3, #1
 8008164:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800816c:	d901      	bls.n	8008172 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e018      	b.n	80081a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	daf2      	bge.n	8008160 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2210      	movs	r2, #16
 8008182:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	3301      	adds	r3, #1
 8008188:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008190:	d901      	bls.n	8008196 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e006      	b.n	80081a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	f003 0310 	and.w	r3, r3, #16
 800819e:	2b10      	cmp	r3, #16
 80081a0:	d0f0      	beq.n	8008184 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b08b      	sub	sp, #44	@ 0x2c
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	4613      	mov	r3, r2
 80081bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80081c6:	88fb      	ldrh	r3, [r7, #6]
 80081c8:	089b      	lsrs	r3, r3, #2
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80081ce:	88fb      	ldrh	r3, [r7, #6]
 80081d0:	f003 0303 	and.w	r3, r3, #3
 80081d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80081d6:	2300      	movs	r3, #0
 80081d8:	623b      	str	r3, [r7, #32]
 80081da:	e014      	b.n	8008206 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80081e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ea:	3301      	adds	r3, #1
 80081ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80081ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f0:	3301      	adds	r3, #1
 80081f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80081f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f6:	3301      	adds	r3, #1
 80081f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80081fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fc:	3301      	adds	r3, #1
 80081fe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	3301      	adds	r3, #1
 8008204:	623b      	str	r3, [r7, #32]
 8008206:	6a3a      	ldr	r2, [r7, #32]
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	429a      	cmp	r2, r3
 800820c:	d3e6      	bcc.n	80081dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800820e:	8bfb      	ldrh	r3, [r7, #30]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d01e      	beq.n	8008252 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008214:	2300      	movs	r3, #0
 8008216:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800821e:	461a      	mov	r2, r3
 8008220:	f107 0310 	add.w	r3, r7, #16
 8008224:	6812      	ldr	r2, [r2, #0]
 8008226:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	b2db      	uxtb	r3, r3
 800822e:	00db      	lsls	r3, r3, #3
 8008230:	fa22 f303 	lsr.w	r3, r2, r3
 8008234:	b2da      	uxtb	r2, r3
 8008236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008238:	701a      	strb	r2, [r3, #0]
      i++;
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	3301      	adds	r3, #1
 800823e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008242:	3301      	adds	r3, #1
 8008244:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008246:	8bfb      	ldrh	r3, [r7, #30]
 8008248:	3b01      	subs	r3, #1
 800824a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800824c:	8bfb      	ldrh	r3, [r7, #30]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1ea      	bne.n	8008228 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008254:	4618      	mov	r0, r3
 8008256:	372c      	adds	r7, #44	@ 0x2c
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	695b      	ldr	r3, [r3, #20]
 800826c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	4013      	ands	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008278:	68fb      	ldr	r3, [r7, #12]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008286:	b480      	push	{r7}
 8008288:	b085      	sub	sp, #20
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	460b      	mov	r3, r1
 8008290:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008296:	78fb      	ldrb	r3, [r7, #3]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4413      	add	r3, r2
 800829e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80082a6:	78fb      	ldrb	r3, [r7, #3]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	4013      	ands	r3, r2
 80082b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082ba:	68bb      	ldr	r3, [r7, #8]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	695b      	ldr	r3, [r3, #20]
 80082d4:	f003 0301 	and.w	r3, r3, #1
}
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008302:	f023 0303 	bic.w	r3, r3, #3
 8008306:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	f003 0303 	and.w	r3, r3, #3
 8008316:	68f9      	ldr	r1, [r7, #12]
 8008318:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800831c:	4313      	orrs	r3, r2
 800831e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d107      	bne.n	8008336 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800832c:	461a      	mov	r2, r3
 800832e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008332:	6053      	str	r3, [r2, #4]
 8008334:	e00c      	b.n	8008350 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	2b02      	cmp	r3, #2
 800833a:	d107      	bne.n	800834c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008342:	461a      	mov	r2, r3
 8008344:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008348:	6053      	str	r3, [r2, #4]
 800834a:	e001      	b.n	8008350 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e000      	b.n	8008352 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800835e:	b480      	push	{r7}
 8008360:	b085      	sub	sp, #20
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	b29b      	uxth	r3, r3
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008380:	b480      	push	{r7}
 8008382:	b089      	sub	sp, #36	@ 0x24
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008390:	78fb      	ldrb	r3, [r7, #3]
 8008392:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008394:	2300      	movs	r3, #0
 8008396:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	0c9b      	lsrs	r3, r3, #18
 80083a8:	f003 0303 	and.w	r3, r3, #3
 80083ac:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	0fdb      	lsrs	r3, r3, #31
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	0fdb      	lsrs	r3, r3, #31
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f003 0320 	and.w	r3, r3, #32
 80083e2:	2b20      	cmp	r3, #32
 80083e4:	d10d      	bne.n	8008402 <USB_HC_Halt+0x82>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10a      	bne.n	8008402 <USB_HC_Halt+0x82>
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d005      	beq.n	80083fe <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d002      	beq.n	80083fe <USB_HC_Halt+0x7e>
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d101      	bne.n	8008402 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80083fe:	2300      	movs	r3, #0
 8008400:	e0d8      	b.n	80085b4 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d002      	beq.n	800840e <USB_HC_Halt+0x8e>
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2b02      	cmp	r3, #2
 800840c:	d173      	bne.n	80084f6 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	015a      	lsls	r2, r3, #5
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	4413      	add	r3, r2
 8008416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	69ba      	ldr	r2, [r7, #24]
 800841e:	0151      	lsls	r1, r2, #5
 8008420:	69fa      	ldr	r2, [r7, #28]
 8008422:	440a      	add	r2, r1
 8008424:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008428:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800842c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f003 0320 	and.w	r3, r3, #32
 8008436:	2b00      	cmp	r3, #0
 8008438:	d14a      	bne.n	80084d0 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800843e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d133      	bne.n	80084ae <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	4413      	add	r3, r2
 800844e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	0151      	lsls	r1, r2, #5
 8008458:	69fa      	ldr	r2, [r7, #28]
 800845a:	440a      	add	r2, r1
 800845c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008460:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008464:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	4413      	add	r3, r2
 800846e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	0151      	lsls	r1, r2, #5
 8008478:	69fa      	ldr	r2, [r7, #28]
 800847a:	440a      	add	r2, r1
 800847c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008480:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008484:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	3301      	adds	r3, #1
 800848a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008492:	d82e      	bhi.n	80084f2 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	4413      	add	r3, r2
 800849c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084aa:	d0ec      	beq.n	8008486 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084ac:	e081      	b.n	80085b2 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	69ba      	ldr	r2, [r7, #24]
 80084be:	0151      	lsls	r1, r2, #5
 80084c0:	69fa      	ldr	r2, [r7, #28]
 80084c2:	440a      	add	r2, r1
 80084c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084cc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084ce:	e070      	b.n	80085b2 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	015a      	lsls	r2, r3, #5
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	4413      	add	r3, r2
 80084d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	0151      	lsls	r1, r2, #5
 80084e2:	69fa      	ldr	r2, [r7, #28]
 80084e4:	440a      	add	r2, r1
 80084e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084ee:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084f0:	e05f      	b.n	80085b2 <USB_HC_Halt+0x232>
            break;
 80084f2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084f4:	e05d      	b.n	80085b2 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	0151      	lsls	r1, r2, #5
 8008508:	69fa      	ldr	r2, [r7, #28]
 800850a:	440a      	add	r2, r1
 800850c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008510:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008514:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d133      	bne.n	800858e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	4413      	add	r3, r2
 800852e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	0151      	lsls	r1, r2, #5
 8008538:	69fa      	ldr	r2, [r7, #28]
 800853a:	440a      	add	r2, r1
 800853c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008540:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008544:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	015a      	lsls	r2, r3, #5
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	4413      	add	r3, r2
 800854e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	69ba      	ldr	r2, [r7, #24]
 8008556:	0151      	lsls	r1, r2, #5
 8008558:	69fa      	ldr	r2, [r7, #28]
 800855a:	440a      	add	r2, r1
 800855c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008560:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008564:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	3301      	adds	r3, #1
 800856a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008572:	d81d      	bhi.n	80085b0 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	4413      	add	r3, r2
 800857c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008586:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800858a:	d0ec      	beq.n	8008566 <USB_HC_Halt+0x1e6>
 800858c:	e011      	b.n	80085b2 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	015a      	lsls	r2, r3, #5
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	4413      	add	r3, r2
 8008596:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	69ba      	ldr	r2, [r7, #24]
 800859e:	0151      	lsls	r1, r2, #5
 80085a0:	69fa      	ldr	r2, [r7, #28]
 80085a2:	440a      	add	r2, r1
 80085a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085ac:	6013      	str	r3, [r2, #0]
 80085ae:	e000      	b.n	80085b2 <USB_HC_Halt+0x232>
          break;
 80085b0:	bf00      	nop
    }
  }

  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3724      	adds	r7, #36	@ 0x24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7ff fd7a 	bl	80080ce <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80085da:	2110      	movs	r1, #16
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff fd87 	bl	80080f0 <USB_FlushTxFifo>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7ff fdb1 	bl	8008154 <USB_FlushRxFifo>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80085fc:	2300      	movs	r3, #0
 80085fe:	61bb      	str	r3, [r7, #24]
 8008600:	e01f      	b.n	8008642 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	015a      	lsls	r2, r3, #5
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	4413      	add	r3, r2
 800860a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008618:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008620:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008628:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	015a      	lsls	r2, r3, #5
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	4413      	add	r3, r2
 8008632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008636:	461a      	mov	r2, r3
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	3301      	adds	r3, #1
 8008640:	61bb      	str	r3, [r7, #24]
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	2b0f      	cmp	r3, #15
 8008646:	d9dc      	bls.n	8008602 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008648:	2300      	movs	r3, #0
 800864a:	61bb      	str	r3, [r7, #24]
 800864c:	e034      	b.n	80086b8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	015a      	lsls	r2, r3, #5
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	4413      	add	r3, r2
 8008656:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008664:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800866c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008674:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	4413      	add	r3, r2
 800867e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008682:	461a      	mov	r2, r3
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	3301      	adds	r3, #1
 800868c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008694:	d80c      	bhi.n	80086b0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	015a      	lsls	r2, r3, #5
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	4413      	add	r3, r2
 800869e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086ac:	d0ec      	beq.n	8008688 <USB_StopHost+0xc8>
 80086ae:	e000      	b.n	80086b2 <USB_StopHost+0xf2>
        break;
 80086b0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	3301      	adds	r3, #1
 80086b6:	61bb      	str	r3, [r7, #24]
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	2b0f      	cmp	r3, #15
 80086bc:	d9c7      	bls.n	800864e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086c4:	461a      	mov	r2, r3
 80086c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80086ca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80086d2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7ff fce9 	bl	80080ac <USB_EnableGlobalInt>

  return ret;
 80086da:	7ffb      	ldrb	r3, [r7, #31]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3720      	adds	r7, #32
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f804 	bl	8008708 <USBH_HandleSof>
}
 8008700:	bf00      	nop
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b0b      	cmp	r3, #11
 8008718:	d10a      	bne.n	8008730 <USBH_HandleSof+0x28>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008720:	2b00      	cmp	r3, #0
 8008722:	d005      	beq.n	8008730 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	4798      	blx	r3
  }
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800875c:	2200      	movs	r2, #0
 800875e:	4619      	mov	r1, r3
 8008760:	f000 f8ae 	bl	80088c0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008764:	bf00      	nop
}
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800877c:	bf00      	nop
}
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80087bc:	2200      	movs	r2, #0
 80087be:	4619      	mov	r1, r3
 80087c0:	f000 f87e 	bl	80088c0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f001 f954 	bl	8009a9c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	791b      	ldrb	r3, [r3, #4]
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f830 	bl	8008860 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	795b      	ldrb	r3, [r3, #5]
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f82a 	bl	8008860 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008820:	2200      	movs	r2, #0
 8008822:	4619      	mov	r1, r3
 8008824:	f000 f84c 	bl	80088c0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800884e:	2200      	movs	r2, #0
 8008850:	4619      	mov	r1, r3
 8008852:	f000 f835 	bl	80088c0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800886c:	78fb      	ldrb	r3, [r7, #3]
 800886e:	2b0f      	cmp	r3, #15
 8008870:	d80d      	bhi.n	800888e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008872:	78fb      	ldrb	r3, [r7, #3]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	33e0      	adds	r3, #224	@ 0xe0
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4413      	add	r3, r2
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	78fb      	ldrb	r3, [r7, #3]
 8008880:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008884:	6879      	ldr	r1, [r7, #4]
 8008886:	33e0      	adds	r3, #224	@ 0xe0
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	440b      	add	r3, r1
 800888c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088a2:	f3ef 8305 	mrs	r3, IPSR
 80088a6:	607b      	str	r3, [r7, #4]
  return(result);
 80088a8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bf14      	ite	ne
 80088ae:	2301      	movne	r3, #1
 80088b0:	2300      	moveq	r3, #0
 80088b2:	b2db      	uxtb	r3, r3
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80088cc:	2300      	movs	r3, #0
 80088ce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <osMessagePut+0x1e>
    ticks = 1;
 80088da:	2301      	movs	r3, #1
 80088dc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80088de:	f7ff ffdd 	bl	800889c <inHandlerMode>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d018      	beq.n	800891a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80088e8:	f107 0210 	add.w	r2, r7, #16
 80088ec:	f107 0108 	add.w	r1, r7, #8
 80088f0:	2300      	movs	r3, #0
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f000 f9b6 	bl	8008c64 <xQueueGenericSendFromISR>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d001      	beq.n	8008902 <osMessagePut+0x42>
      return osErrorOS;
 80088fe:	23ff      	movs	r3, #255	@ 0xff
 8008900:	e018      	b.n	8008934 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d014      	beq.n	8008932 <osMessagePut+0x72>
 8008908:	4b0c      	ldr	r3, [pc, #48]	@ (800893c <osMessagePut+0x7c>)
 800890a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	e00b      	b.n	8008932 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800891a:	f107 0108 	add.w	r1, r7, #8
 800891e:	2300      	movs	r3, #0
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f000 f894 	bl	8008a50 <xQueueGenericSend>
 8008928:	4603      	mov	r3, r0
 800892a:	2b01      	cmp	r3, #1
 800892c:	d001      	beq.n	8008932 <osMessagePut+0x72>
      return osErrorOS;
 800892e:	23ff      	movs	r3, #255	@ 0xff
 8008930:	e000      	b.n	8008934 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	e000ed04 	.word	0xe000ed04

08008940 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	689a      	ldr	r2, [r3, #8]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	601a      	str	r2, [r3, #0]
}
 800897c:	bf00      	nop
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800899e:	d103      	bne.n	80089a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	60fb      	str	r3, [r7, #12]
 80089a6:	e00c      	b.n	80089c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3308      	adds	r3, #8
 80089ac:	60fb      	str	r3, [r7, #12]
 80089ae:	e002      	b.n	80089b6 <vListInsert+0x2e>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d2f6      	bcs.n	80089b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	601a      	str	r2, [r3, #0]
}
 80089ee:	bf00      	nop
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80089fa:	b480      	push	{r7}
 80089fc:	b085      	sub	sp, #20
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	6892      	ldr	r2, [r2, #8]
 8008a10:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	6852      	ldr	r2, [r2, #4]
 8008a1a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d103      	bne.n	8008a2e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	689a      	ldr	r2, [r3, #8]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	1e5a      	subs	r2, r3, #1
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3714      	adds	r7, #20
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
	...

08008a50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08e      	sub	sp, #56	@ 0x38
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10d      	bne.n	8008a88 <xQueueGenericSend+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a70:	b672      	cpsid	i
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	b662      	cpsie	i
 8008a80:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	e7fd      	b.n	8008a84 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d103      	bne.n	8008a96 <xQueueGenericSend+0x46>
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <xQueueGenericSend+0x4a>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e000      	b.n	8008a9c <xQueueGenericSend+0x4c>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10d      	bne.n	8008abc <xQueueGenericSend+0x6c>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa4:	b672      	cpsid	i
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	b662      	cpsie	i
 8008ab4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008ab6:	bf00      	nop
 8008ab8:	bf00      	nop
 8008aba:	e7fd      	b.n	8008ab8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d103      	bne.n	8008aca <xQueueGenericSend+0x7a>
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d101      	bne.n	8008ace <xQueueGenericSend+0x7e>
 8008aca:	2301      	movs	r3, #1
 8008acc:	e000      	b.n	8008ad0 <xQueueGenericSend+0x80>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10d      	bne.n	8008af0 <xQueueGenericSend+0xa0>
	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad8:	b672      	cpsid	i
 8008ada:	f383 8811 	msr	BASEPRI, r3
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	b662      	cpsie	i
 8008ae8:	623b      	str	r3, [r7, #32]
}
 8008aea:	bf00      	nop
 8008aec:	bf00      	nop
 8008aee:	e7fd      	b.n	8008aec <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008af0:	f000 fd56 	bl	80095a0 <xTaskGetSchedulerState>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d102      	bne.n	8008b00 <xQueueGenericSend+0xb0>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <xQueueGenericSend+0xb4>
 8008b00:	2301      	movs	r3, #1
 8008b02:	e000      	b.n	8008b06 <xQueueGenericSend+0xb6>
 8008b04:	2300      	movs	r3, #0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10d      	bne.n	8008b26 <xQueueGenericSend+0xd6>
	__asm volatile
 8008b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0e:	b672      	cpsid	i
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	b662      	cpsie	i
 8008b1e:	61fb      	str	r3, [r7, #28]
}
 8008b20:	bf00      	nop
 8008b22:	bf00      	nop
 8008b24:	e7fd      	b.n	8008b22 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b26:	f000 fe5f 	bl	80097e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d302      	bcc.n	8008b3c <xQueueGenericSend+0xec>
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d129      	bne.n	8008b90 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	68b9      	ldr	r1, [r7, #8]
 8008b40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b42:	f000 f932 	bl	8008daa <prvCopyDataToQueue>
 8008b46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d010      	beq.n	8008b72 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b52:	3324      	adds	r3, #36	@ 0x24
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fc13 	bl	8009380 <xTaskRemoveFromEventList>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d013      	beq.n	8008b88 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008b60:	4b3f      	ldr	r3, [pc, #252]	@ (8008c60 <xQueueGenericSend+0x210>)
 8008b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b66:	601a      	str	r2, [r3, #0]
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	e00a      	b.n	8008b88 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d007      	beq.n	8008b88 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008b78:	4b39      	ldr	r3, [pc, #228]	@ (8008c60 <xQueueGenericSend+0x210>)
 8008b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b7e:	601a      	str	r2, [r3, #0]
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008b88:	f000 fe64 	bl	8009854 <vPortExitCritical>
				return pdPASS;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e063      	b.n	8008c58 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d103      	bne.n	8008b9e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b96:	f000 fe5d 	bl	8009854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	e05c      	b.n	8008c58 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d106      	bne.n	8008bb2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ba4:	f107 0314 	add.w	r3, r7, #20
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 fc4f 	bl	800944c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bb2:	f000 fe4f 	bl	8009854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bb6:	f000 f9cd 	bl	8008f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bba:	f000 fe15 	bl	80097e8 <vPortEnterCritical>
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bc4:	b25b      	sxtb	r3, r3
 8008bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bca:	d103      	bne.n	8008bd4 <xQueueGenericSend+0x184>
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bda:	b25b      	sxtb	r3, r3
 8008bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008be0:	d103      	bne.n	8008bea <xQueueGenericSend+0x19a>
 8008be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bea:	f000 fe33 	bl	8009854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bee:	1d3a      	adds	r2, r7, #4
 8008bf0:	f107 0314 	add.w	r3, r7, #20
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 fc3e 	bl	8009478 <xTaskCheckForTimeOut>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d124      	bne.n	8008c4c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c04:	f000 f98d 	bl	8008f22 <prvIsQueueFull>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d018      	beq.n	8008c40 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c10:	3310      	adds	r3, #16
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	4611      	mov	r1, r2
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fb8a 	bl	8009330 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c1e:	f000 f92e 	bl	8008e7e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c22:	f000 f9a5 	bl	8008f70 <xTaskResumeAll>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f47f af7c 	bne.w	8008b26 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8008c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8008c60 <xQueueGenericSend+0x210>)
 8008c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c34:	601a      	str	r2, [r3, #0]
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	e772      	b.n	8008b26 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008c40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c42:	f000 f91c 	bl	8008e7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c46:	f000 f993 	bl	8008f70 <xTaskResumeAll>
 8008c4a:	e76c      	b.n	8008b26 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c4e:	f000 f916 	bl	8008e7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c52:	f000 f98d 	bl	8008f70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3738      	adds	r7, #56	@ 0x38
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	e000ed04 	.word	0xe000ed04

08008c64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b08e      	sub	sp, #56	@ 0x38
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
 8008c70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10d      	bne.n	8008c98 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c80:	b672      	cpsid	i
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	b662      	cpsie	i
 8008c90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c92:	bf00      	nop
 8008c94:	bf00      	nop
 8008c96:	e7fd      	b.n	8008c94 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d103      	bne.n	8008ca6 <xQueueGenericSendFromISR+0x42>
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <xQueueGenericSendFromISR+0x46>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e000      	b.n	8008cac <xQueueGenericSendFromISR+0x48>
 8008caa:	2300      	movs	r3, #0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10d      	bne.n	8008ccc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb4:	b672      	cpsid	i
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	b662      	cpsie	i
 8008cc4:	623b      	str	r3, [r7, #32]
}
 8008cc6:	bf00      	nop
 8008cc8:	bf00      	nop
 8008cca:	e7fd      	b.n	8008cc8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d103      	bne.n	8008cda <xQueueGenericSendFromISR+0x76>
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d101      	bne.n	8008cde <xQueueGenericSendFromISR+0x7a>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e000      	b.n	8008ce0 <xQueueGenericSendFromISR+0x7c>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10d      	bne.n	8008d00 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8008ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce8:	b672      	cpsid	i
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	b662      	cpsie	i
 8008cf8:	61fb      	str	r3, [r7, #28]
}
 8008cfa:	bf00      	nop
 8008cfc:	bf00      	nop
 8008cfe:	e7fd      	b.n	8008cfc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d00:	f000 fe2e 	bl	8009960 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008d04:	f3ef 8211 	mrs	r2, BASEPRI
 8008d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d0c:	b672      	cpsid	i
 8008d0e:	f383 8811 	msr	BASEPRI, r3
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	b662      	cpsie	i
 8008d1c:	61ba      	str	r2, [r7, #24]
 8008d1e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008d20:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d302      	bcc.n	8008d36 <xQueueGenericSendFromISR+0xd2>
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d12c      	bne.n	8008d90 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	68b9      	ldr	r1, [r7, #8]
 8008d44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d46:	f000 f830 	bl	8008daa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d4a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d52:	d112      	bne.n	8008d7a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d016      	beq.n	8008d8a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5e:	3324      	adds	r3, #36	@ 0x24
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 fb0d 	bl	8009380 <xTaskRemoveFromEventList>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00e      	beq.n	8008d8a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00b      	beq.n	8008d8a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	601a      	str	r2, [r3, #0]
 8008d78:	e007      	b.n	8008d8a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d7e:	3301      	adds	r3, #1
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	b25a      	sxtb	r2, r3
 8008d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008d8e:	e001      	b.n	8008d94 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d90:	2300      	movs	r3, #0
 8008d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d96:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008d9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3738      	adds	r7, #56	@ 0x38
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b086      	sub	sp, #24
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	60f8      	str	r0, [r7, #12]
 8008db2:	60b9      	str	r1, [r7, #8]
 8008db4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dbe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10d      	bne.n	8008de4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d14d      	bne.n	8008e6c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 fc01 	bl	80095dc <xTaskPriorityDisinherit>
 8008dda:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	609a      	str	r2, [r3, #8]
 8008de2:	e043      	b.n	8008e6c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d119      	bne.n	8008e1e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6858      	ldr	r0, [r3, #4]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df2:	461a      	mov	r2, r3
 8008df4:	68b9      	ldr	r1, [r7, #8]
 8008df6:	f000 fec5 	bl	8009b84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e02:	441a      	add	r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d32b      	bcc.n	8008e6c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	605a      	str	r2, [r3, #4]
 8008e1c:	e026      	b.n	8008e6c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	68d8      	ldr	r0, [r3, #12]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e26:	461a      	mov	r2, r3
 8008e28:	68b9      	ldr	r1, [r7, #8]
 8008e2a:	f000 feab 	bl	8009b84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	68da      	ldr	r2, [r3, #12]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e36:	425b      	negs	r3, r3
 8008e38:	441a      	add	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	68da      	ldr	r2, [r3, #12]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d207      	bcs.n	8008e5a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	689a      	ldr	r2, [r3, #8]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e52:	425b      	negs	r3, r3
 8008e54:	441a      	add	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d105      	bne.n	8008e6c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d002      	beq.n	8008e6c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	1c5a      	adds	r2, r3, #1
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008e74:	697b      	ldr	r3, [r7, #20]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3718      	adds	r7, #24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e86:	f000 fcaf 	bl	80097e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e90:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e92:	e011      	b.n	8008eb8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d012      	beq.n	8008ec2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	3324      	adds	r3, #36	@ 0x24
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 fa6d 	bl	8009380 <xTaskRemoveFromEventList>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008eac:	f000 fb4c 	bl	8009548 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	dce9      	bgt.n	8008e94 <prvUnlockQueue+0x16>
 8008ec0:	e000      	b.n	8008ec4 <prvUnlockQueue+0x46>
					break;
 8008ec2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	22ff      	movs	r2, #255	@ 0xff
 8008ec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008ecc:	f000 fcc2 	bl	8009854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ed0:	f000 fc8a 	bl	80097e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008eda:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008edc:	e011      	b.n	8008f02 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d012      	beq.n	8008f0c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	3310      	adds	r3, #16
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 fa48 	bl	8009380 <xTaskRemoveFromEventList>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ef6:	f000 fb27 	bl	8009548 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	dce9      	bgt.n	8008ede <prvUnlockQueue+0x60>
 8008f0a:	e000      	b.n	8008f0e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f0c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	22ff      	movs	r2, #255	@ 0xff
 8008f12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008f16:	f000 fc9d 	bl	8009854 <vPortExitCritical>
}
 8008f1a:	bf00      	nop
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f2a:	f000 fc5d 	bl	80097e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d102      	bne.n	8008f40 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	60fb      	str	r3, [r7, #12]
 8008f3e:	e001      	b.n	8008f44 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f40:	2300      	movs	r3, #0
 8008f42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f44:	f000 fc86 	bl	8009854 <vPortExitCritical>

	return xReturn;
 8008f48:	68fb      	ldr	r3, [r7, #12]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
	...

08008f54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f54:	b480      	push	{r7}
 8008f56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008f58:	4b04      	ldr	r3, [pc, #16]	@ (8008f6c <vTaskSuspendAll+0x18>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	4a03      	ldr	r2, [pc, #12]	@ (8008f6c <vTaskSuspendAll+0x18>)
 8008f60:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008f62:	bf00      	nop
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	20000634 	.word	0x20000634

08008f70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f7e:	4b43      	ldr	r3, [pc, #268]	@ (800908c <xTaskResumeAll+0x11c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10d      	bne.n	8008fa2 <xTaskResumeAll+0x32>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8a:	b672      	cpsid	i
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	b662      	cpsie	i
 8008f9a:	603b      	str	r3, [r7, #0]
}
 8008f9c:	bf00      	nop
 8008f9e:	bf00      	nop
 8008fa0:	e7fd      	b.n	8008f9e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008fa2:	f000 fc21 	bl	80097e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008fa6:	4b39      	ldr	r3, [pc, #228]	@ (800908c <xTaskResumeAll+0x11c>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3b01      	subs	r3, #1
 8008fac:	4a37      	ldr	r2, [pc, #220]	@ (800908c <xTaskResumeAll+0x11c>)
 8008fae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fb0:	4b36      	ldr	r3, [pc, #216]	@ (800908c <xTaskResumeAll+0x11c>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d161      	bne.n	800907c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008fb8:	4b35      	ldr	r3, [pc, #212]	@ (8009090 <xTaskResumeAll+0x120>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d05d      	beq.n	800907c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fc0:	e02e      	b.n	8009020 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fc2:	4b34      	ldr	r3, [pc, #208]	@ (8009094 <xTaskResumeAll+0x124>)
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3318      	adds	r3, #24
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff fd13 	bl	80089fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff fd0e 	bl	80089fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	409a      	lsls	r2, r3
 8008fe6:	4b2c      	ldr	r3, [pc, #176]	@ (8009098 <xTaskResumeAll+0x128>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	4a2a      	ldr	r2, [pc, #168]	@ (8009098 <xTaskResumeAll+0x128>)
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4a27      	ldr	r2, [pc, #156]	@ (800909c <xTaskResumeAll+0x12c>)
 8008ffe:	441a      	add	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	3304      	adds	r3, #4
 8009004:	4619      	mov	r1, r3
 8009006:	4610      	mov	r0, r2
 8009008:	f7ff fc9a 	bl	8008940 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009010:	4b23      	ldr	r3, [pc, #140]	@ (80090a0 <xTaskResumeAll+0x130>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009016:	429a      	cmp	r2, r3
 8009018:	d302      	bcc.n	8009020 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800901a:	4b22      	ldr	r3, [pc, #136]	@ (80090a4 <xTaskResumeAll+0x134>)
 800901c:	2201      	movs	r2, #1
 800901e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009020:	4b1c      	ldr	r3, [pc, #112]	@ (8009094 <xTaskResumeAll+0x124>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1cc      	bne.n	8008fc2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800902e:	f000 fa97 	bl	8009560 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009032:	4b1d      	ldr	r3, [pc, #116]	@ (80090a8 <xTaskResumeAll+0x138>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d010      	beq.n	8009060 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800903e:	f000 f837 	bl	80090b0 <xTaskIncrementTick>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8009048:	4b16      	ldr	r3, [pc, #88]	@ (80090a4 <xTaskResumeAll+0x134>)
 800904a:	2201      	movs	r2, #1
 800904c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	3b01      	subs	r3, #1
 8009052:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1f1      	bne.n	800903e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800905a:	4b13      	ldr	r3, [pc, #76]	@ (80090a8 <xTaskResumeAll+0x138>)
 800905c:	2200      	movs	r2, #0
 800905e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009060:	4b10      	ldr	r3, [pc, #64]	@ (80090a4 <xTaskResumeAll+0x134>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d009      	beq.n	800907c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009068:	2301      	movs	r3, #1
 800906a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800906c:	4b0f      	ldr	r3, [pc, #60]	@ (80090ac <xTaskResumeAll+0x13c>)
 800906e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800907c:	f000 fbea 	bl	8009854 <vPortExitCritical>

	return xAlreadyYielded;
 8009080:	68bb      	ldr	r3, [r7, #8]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	20000634 	.word	0x20000634
 8009090:	20000614 	.word	0x20000614
 8009094:	200005ec 	.word	0x200005ec
 8009098:	2000061c 	.word	0x2000061c
 800909c:	20000558 	.word	0x20000558
 80090a0:	20000554 	.word	0x20000554
 80090a4:	20000628 	.word	0x20000628
 80090a8:	20000624 	.word	0x20000624
 80090ac:	e000ed04 	.word	0xe000ed04

080090b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090b6:	2300      	movs	r3, #0
 80090b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090ba:	4b50      	ldr	r3, [pc, #320]	@ (80091fc <xTaskIncrementTick+0x14c>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f040 808b 	bne.w	80091da <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090c4:	4b4e      	ldr	r3, [pc, #312]	@ (8009200 <xTaskIncrementTick+0x150>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3301      	adds	r3, #1
 80090ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090cc:	4a4c      	ldr	r2, [pc, #304]	@ (8009200 <xTaskIncrementTick+0x150>)
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d123      	bne.n	8009120 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80090d8:	4b4a      	ldr	r3, [pc, #296]	@ (8009204 <xTaskIncrementTick+0x154>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00d      	beq.n	80090fe <xTaskIncrementTick+0x4e>
	__asm volatile
 80090e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e6:	b672      	cpsid	i
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	b662      	cpsie	i
 80090f6:	603b      	str	r3, [r7, #0]
}
 80090f8:	bf00      	nop
 80090fa:	bf00      	nop
 80090fc:	e7fd      	b.n	80090fa <xTaskIncrementTick+0x4a>
 80090fe:	4b41      	ldr	r3, [pc, #260]	@ (8009204 <xTaskIncrementTick+0x154>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	60fb      	str	r3, [r7, #12]
 8009104:	4b40      	ldr	r3, [pc, #256]	@ (8009208 <xTaskIncrementTick+0x158>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a3e      	ldr	r2, [pc, #248]	@ (8009204 <xTaskIncrementTick+0x154>)
 800910a:	6013      	str	r3, [r2, #0]
 800910c:	4a3e      	ldr	r2, [pc, #248]	@ (8009208 <xTaskIncrementTick+0x158>)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6013      	str	r3, [r2, #0]
 8009112:	4b3e      	ldr	r3, [pc, #248]	@ (800920c <xTaskIncrementTick+0x15c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3301      	adds	r3, #1
 8009118:	4a3c      	ldr	r2, [pc, #240]	@ (800920c <xTaskIncrementTick+0x15c>)
 800911a:	6013      	str	r3, [r2, #0]
 800911c:	f000 fa20 	bl	8009560 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009120:	4b3b      	ldr	r3, [pc, #236]	@ (8009210 <xTaskIncrementTick+0x160>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	429a      	cmp	r2, r3
 8009128:	d348      	bcc.n	80091bc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800912a:	4b36      	ldr	r3, [pc, #216]	@ (8009204 <xTaskIncrementTick+0x154>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d104      	bne.n	800913e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009134:	4b36      	ldr	r3, [pc, #216]	@ (8009210 <xTaskIncrementTick+0x160>)
 8009136:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800913a:	601a      	str	r2, [r3, #0]
					break;
 800913c:	e03e      	b.n	80091bc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800913e:	4b31      	ldr	r3, [pc, #196]	@ (8009204 <xTaskIncrementTick+0x154>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	429a      	cmp	r2, r3
 8009154:	d203      	bcs.n	800915e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009156:	4a2e      	ldr	r2, [pc, #184]	@ (8009210 <xTaskIncrementTick+0x160>)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800915c:	e02e      	b.n	80091bc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	3304      	adds	r3, #4
 8009162:	4618      	mov	r0, r3
 8009164:	f7ff fc49 	bl	80089fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916c:	2b00      	cmp	r3, #0
 800916e:	d004      	beq.n	800917a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	3318      	adds	r3, #24
 8009174:	4618      	mov	r0, r3
 8009176:	f7ff fc40 	bl	80089fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917e:	2201      	movs	r2, #1
 8009180:	409a      	lsls	r2, r3
 8009182:	4b24      	ldr	r3, [pc, #144]	@ (8009214 <xTaskIncrementTick+0x164>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4313      	orrs	r3, r2
 8009188:	4a22      	ldr	r2, [pc, #136]	@ (8009214 <xTaskIncrementTick+0x164>)
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009190:	4613      	mov	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4a1f      	ldr	r2, [pc, #124]	@ (8009218 <xTaskIncrementTick+0x168>)
 800919a:	441a      	add	r2, r3
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	3304      	adds	r3, #4
 80091a0:	4619      	mov	r1, r3
 80091a2:	4610      	mov	r0, r2
 80091a4:	f7ff fbcc 	bl	8008940 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ac:	4b1b      	ldr	r3, [pc, #108]	@ (800921c <xTaskIncrementTick+0x16c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d3b9      	bcc.n	800912a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80091b6:	2301      	movs	r3, #1
 80091b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091ba:	e7b6      	b.n	800912a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091bc:	4b17      	ldr	r3, [pc, #92]	@ (800921c <xTaskIncrementTick+0x16c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c2:	4915      	ldr	r1, [pc, #84]	@ (8009218 <xTaskIncrementTick+0x168>)
 80091c4:	4613      	mov	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4413      	add	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	440b      	add	r3, r1
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d907      	bls.n	80091e4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80091d4:	2301      	movs	r3, #1
 80091d6:	617b      	str	r3, [r7, #20]
 80091d8:	e004      	b.n	80091e4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80091da:	4b11      	ldr	r3, [pc, #68]	@ (8009220 <xTaskIncrementTick+0x170>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3301      	adds	r3, #1
 80091e0:	4a0f      	ldr	r2, [pc, #60]	@ (8009220 <xTaskIncrementTick+0x170>)
 80091e2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80091e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009224 <xTaskIncrementTick+0x174>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d001      	beq.n	80091f0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80091ec:	2301      	movs	r3, #1
 80091ee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80091f0:	697b      	ldr	r3, [r7, #20]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3718      	adds	r7, #24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	20000634 	.word	0x20000634
 8009200:	20000618 	.word	0x20000618
 8009204:	200005e4 	.word	0x200005e4
 8009208:	200005e8 	.word	0x200005e8
 800920c:	2000062c 	.word	0x2000062c
 8009210:	20000630 	.word	0x20000630
 8009214:	2000061c 	.word	0x2000061c
 8009218:	20000558 	.word	0x20000558
 800921c:	20000554 	.word	0x20000554
 8009220:	20000624 	.word	0x20000624
 8009224:	20000628 	.word	0x20000628

08009228 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800922e:	4b3b      	ldr	r3, [pc, #236]	@ (800931c <vTaskSwitchContext+0xf4>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009236:	4b3a      	ldr	r3, [pc, #232]	@ (8009320 <vTaskSwitchContext+0xf8>)
 8009238:	2201      	movs	r2, #1
 800923a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800923c:	e069      	b.n	8009312 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 800923e:	4b38      	ldr	r3, [pc, #224]	@ (8009320 <vTaskSwitchContext+0xf8>)
 8009240:	2200      	movs	r2, #0
 8009242:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009244:	4b37      	ldr	r3, [pc, #220]	@ (8009324 <vTaskSwitchContext+0xfc>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800924a:	61fb      	str	r3, [r7, #28]
 800924c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8009250:	61bb      	str	r3, [r7, #24]
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	69ba      	ldr	r2, [r7, #24]
 8009258:	429a      	cmp	r2, r3
 800925a:	d111      	bne.n	8009280 <vTaskSwitchContext+0x58>
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	3304      	adds	r3, #4
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	69ba      	ldr	r2, [r7, #24]
 8009264:	429a      	cmp	r2, r3
 8009266:	d10b      	bne.n	8009280 <vTaskSwitchContext+0x58>
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	3308      	adds	r3, #8
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	69ba      	ldr	r2, [r7, #24]
 8009270:	429a      	cmp	r2, r3
 8009272:	d105      	bne.n	8009280 <vTaskSwitchContext+0x58>
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	330c      	adds	r3, #12
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	69ba      	ldr	r2, [r7, #24]
 800927c:	429a      	cmp	r2, r3
 800927e:	d008      	beq.n	8009292 <vTaskSwitchContext+0x6a>
 8009280:	4b28      	ldr	r3, [pc, #160]	@ (8009324 <vTaskSwitchContext+0xfc>)
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	4b27      	ldr	r3, [pc, #156]	@ (8009324 <vTaskSwitchContext+0xfc>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3334      	adds	r3, #52	@ 0x34
 800928a:	4619      	mov	r1, r3
 800928c:	4610      	mov	r0, r2
 800928e:	f7f7 f975 	bl	800057c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009292:	4b25      	ldr	r3, [pc, #148]	@ (8009328 <vTaskSwitchContext+0x100>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	fab3 f383 	clz	r3, r3
 800929e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	f1c3 031f 	rsb	r3, r3, #31
 80092a6:	617b      	str	r3, [r7, #20]
 80092a8:	4920      	ldr	r1, [pc, #128]	@ (800932c <vTaskSwitchContext+0x104>)
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	4613      	mov	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4413      	add	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	440b      	add	r3, r1
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10d      	bne.n	80092d8 <vTaskSwitchContext+0xb0>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c0:	b672      	cpsid	i
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	b662      	cpsie	i
 80092d0:	607b      	str	r3, [r7, #4]
}
 80092d2:	bf00      	nop
 80092d4:	bf00      	nop
 80092d6:	e7fd      	b.n	80092d4 <vTaskSwitchContext+0xac>
 80092d8:	697a      	ldr	r2, [r7, #20]
 80092da:	4613      	mov	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4a12      	ldr	r2, [pc, #72]	@ (800932c <vTaskSwitchContext+0x104>)
 80092e4:	4413      	add	r3, r2
 80092e6:	613b      	str	r3, [r7, #16]
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	605a      	str	r2, [r3, #4]
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	3308      	adds	r3, #8
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d104      	bne.n	8009308 <vTaskSwitchContext+0xe0>
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	605a      	str	r2, [r3, #4]
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	4a05      	ldr	r2, [pc, #20]	@ (8009324 <vTaskSwitchContext+0xfc>)
 8009310:	6013      	str	r3, [r2, #0]
}
 8009312:	bf00      	nop
 8009314:	3720      	adds	r7, #32
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	20000634 	.word	0x20000634
 8009320:	20000628 	.word	0x20000628
 8009324:	20000554 	.word	0x20000554
 8009328:	2000061c 	.word	0x2000061c
 800932c:	20000558 	.word	0x20000558

08009330 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10d      	bne.n	800935c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009344:	b672      	cpsid	i
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	b662      	cpsie	i
 8009354:	60fb      	str	r3, [r7, #12]
}
 8009356:	bf00      	nop
 8009358:	bf00      	nop
 800935a:	e7fd      	b.n	8009358 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800935c:	4b07      	ldr	r3, [pc, #28]	@ (800937c <vTaskPlaceOnEventList+0x4c>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3318      	adds	r3, #24
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7ff fb0f 	bl	8008988 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800936a:	2101      	movs	r1, #1
 800936c:	6838      	ldr	r0, [r7, #0]
 800936e:	f000 f9c1 	bl	80096f4 <prvAddCurrentTaskToDelayedList>
}
 8009372:	bf00      	nop
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	20000554 	.word	0x20000554

08009380 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d10d      	bne.n	80093b2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939a:	b672      	cpsid	i
 800939c:	f383 8811 	msr	BASEPRI, r3
 80093a0:	f3bf 8f6f 	isb	sy
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	b662      	cpsie	i
 80093aa:	60fb      	str	r3, [r7, #12]
}
 80093ac:	bf00      	nop
 80093ae:	bf00      	nop
 80093b0:	e7fd      	b.n	80093ae <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	3318      	adds	r3, #24
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7ff fb1f 	bl	80089fa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093bc:	4b1d      	ldr	r3, [pc, #116]	@ (8009434 <xTaskRemoveFromEventList+0xb4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d11c      	bne.n	80093fe <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	3304      	adds	r3, #4
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7ff fb16 	bl	80089fa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d2:	2201      	movs	r2, #1
 80093d4:	409a      	lsls	r2, r3
 80093d6:	4b18      	ldr	r3, [pc, #96]	@ (8009438 <xTaskRemoveFromEventList+0xb8>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4313      	orrs	r3, r2
 80093dc:	4a16      	ldr	r2, [pc, #88]	@ (8009438 <xTaskRemoveFromEventList+0xb8>)
 80093de:	6013      	str	r3, [r2, #0]
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093e4:	4613      	mov	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	4a13      	ldr	r2, [pc, #76]	@ (800943c <xTaskRemoveFromEventList+0xbc>)
 80093ee:	441a      	add	r2, r3
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	3304      	adds	r3, #4
 80093f4:	4619      	mov	r1, r3
 80093f6:	4610      	mov	r0, r2
 80093f8:	f7ff faa2 	bl	8008940 <vListInsertEnd>
 80093fc:	e005      	b.n	800940a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	3318      	adds	r3, #24
 8009402:	4619      	mov	r1, r3
 8009404:	480e      	ldr	r0, [pc, #56]	@ (8009440 <xTaskRemoveFromEventList+0xc0>)
 8009406:	f7ff fa9b 	bl	8008940 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800940e:	4b0d      	ldr	r3, [pc, #52]	@ (8009444 <xTaskRemoveFromEventList+0xc4>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009414:	429a      	cmp	r2, r3
 8009416:	d905      	bls.n	8009424 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009418:	2301      	movs	r3, #1
 800941a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800941c:	4b0a      	ldr	r3, [pc, #40]	@ (8009448 <xTaskRemoveFromEventList+0xc8>)
 800941e:	2201      	movs	r2, #1
 8009420:	601a      	str	r2, [r3, #0]
 8009422:	e001      	b.n	8009428 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009424:	2300      	movs	r3, #0
 8009426:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009428:	697b      	ldr	r3, [r7, #20]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	20000634 	.word	0x20000634
 8009438:	2000061c 	.word	0x2000061c
 800943c:	20000558 	.word	0x20000558
 8009440:	200005ec 	.word	0x200005ec
 8009444:	20000554 	.word	0x20000554
 8009448:	20000628 	.word	0x20000628

0800944c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009454:	4b06      	ldr	r3, [pc, #24]	@ (8009470 <vTaskInternalSetTimeOutState+0x24>)
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800945c:	4b05      	ldr	r3, [pc, #20]	@ (8009474 <vTaskInternalSetTimeOutState+0x28>)
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	605a      	str	r2, [r3, #4]
}
 8009464:	bf00      	nop
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	2000062c 	.word	0x2000062c
 8009474:	20000618 	.word	0x20000618

08009478 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b088      	sub	sp, #32
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10d      	bne.n	80094a4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800948c:	b672      	cpsid	i
 800948e:	f383 8811 	msr	BASEPRI, r3
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	b662      	cpsie	i
 800949c:	613b      	str	r3, [r7, #16]
}
 800949e:	bf00      	nop
 80094a0:	bf00      	nop
 80094a2:	e7fd      	b.n	80094a0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10d      	bne.n	80094c6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80094aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ae:	b672      	cpsid	i
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	b662      	cpsie	i
 80094be:	60fb      	str	r3, [r7, #12]
}
 80094c0:	bf00      	nop
 80094c2:	bf00      	nop
 80094c4:	e7fd      	b.n	80094c2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80094c6:	f000 f98f 	bl	80097e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094ca:	4b1d      	ldr	r3, [pc, #116]	@ (8009540 <xTaskCheckForTimeOut+0xc8>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	69ba      	ldr	r2, [r7, #24]
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094e2:	d102      	bne.n	80094ea <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80094e4:	2300      	movs	r3, #0
 80094e6:	61fb      	str	r3, [r7, #28]
 80094e8:	e023      	b.n	8009532 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	4b15      	ldr	r3, [pc, #84]	@ (8009544 <xTaskCheckForTimeOut+0xcc>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d007      	beq.n	8009506 <xTaskCheckForTimeOut+0x8e>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	69ba      	ldr	r2, [r7, #24]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d302      	bcc.n	8009506 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009500:	2301      	movs	r3, #1
 8009502:	61fb      	str	r3, [r7, #28]
 8009504:	e015      	b.n	8009532 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	429a      	cmp	r2, r3
 800950e:	d20b      	bcs.n	8009528 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	1ad2      	subs	r2, r2, r3
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7ff ff95 	bl	800944c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009522:	2300      	movs	r3, #0
 8009524:	61fb      	str	r3, [r7, #28]
 8009526:	e004      	b.n	8009532 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	2200      	movs	r2, #0
 800952c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800952e:	2301      	movs	r3, #1
 8009530:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009532:	f000 f98f 	bl	8009854 <vPortExitCritical>

	return xReturn;
 8009536:	69fb      	ldr	r3, [r7, #28]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3720      	adds	r7, #32
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	20000618 	.word	0x20000618
 8009544:	2000062c 	.word	0x2000062c

08009548 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009548:	b480      	push	{r7}
 800954a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800954c:	4b03      	ldr	r3, [pc, #12]	@ (800955c <vTaskMissedYield+0x14>)
 800954e:	2201      	movs	r2, #1
 8009550:	601a      	str	r2, [r3, #0]
}
 8009552:	bf00      	nop
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	20000628 	.word	0x20000628

08009560 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009566:	4b0c      	ldr	r3, [pc, #48]	@ (8009598 <prvResetNextTaskUnblockTime+0x38>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d104      	bne.n	800957a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009570:	4b0a      	ldr	r3, [pc, #40]	@ (800959c <prvResetNextTaskUnblockTime+0x3c>)
 8009572:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009576:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009578:	e008      	b.n	800958c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800957a:	4b07      	ldr	r3, [pc, #28]	@ (8009598 <prvResetNextTaskUnblockTime+0x38>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	4a04      	ldr	r2, [pc, #16]	@ (800959c <prvResetNextTaskUnblockTime+0x3c>)
 800958a:	6013      	str	r3, [r2, #0]
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	200005e4 	.word	0x200005e4
 800959c:	20000630 	.word	0x20000630

080095a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80095a6:	4b0b      	ldr	r3, [pc, #44]	@ (80095d4 <xTaskGetSchedulerState+0x34>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d102      	bne.n	80095b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095ae:	2301      	movs	r3, #1
 80095b0:	607b      	str	r3, [r7, #4]
 80095b2:	e008      	b.n	80095c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095b4:	4b08      	ldr	r3, [pc, #32]	@ (80095d8 <xTaskGetSchedulerState+0x38>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d102      	bne.n	80095c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095bc:	2302      	movs	r3, #2
 80095be:	607b      	str	r3, [r7, #4]
 80095c0:	e001      	b.n	80095c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095c2:	2300      	movs	r3, #0
 80095c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095c6:	687b      	ldr	r3, [r7, #4]
	}
 80095c8:	4618      	mov	r0, r3
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	20000620 	.word	0x20000620
 80095d8:	20000634 	.word	0x20000634

080095dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095e8:	2300      	movs	r3, #0
 80095ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d074      	beq.n	80096dc <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095f2:	4b3d      	ldr	r3, [pc, #244]	@ (80096e8 <xTaskPriorityDisinherit+0x10c>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d00d      	beq.n	8009618 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009600:	b672      	cpsid	i
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	b662      	cpsie	i
 8009610:	60fb      	str	r3, [r7, #12]
}
 8009612:	bf00      	nop
 8009614:	bf00      	nop
 8009616:	e7fd      	b.n	8009614 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10d      	bne.n	800963c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009624:	b672      	cpsid	i
 8009626:	f383 8811 	msr	BASEPRI, r3
 800962a:	f3bf 8f6f 	isb	sy
 800962e:	f3bf 8f4f 	dsb	sy
 8009632:	b662      	cpsie	i
 8009634:	60bb      	str	r3, [r7, #8]
}
 8009636:	bf00      	nop
 8009638:	bf00      	nop
 800963a:	e7fd      	b.n	8009638 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009640:	1e5a      	subs	r2, r3, #1
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800964e:	429a      	cmp	r2, r3
 8009650:	d044      	beq.n	80096dc <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009656:	2b00      	cmp	r3, #0
 8009658:	d140      	bne.n	80096dc <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	3304      	adds	r3, #4
 800965e:	4618      	mov	r0, r3
 8009660:	f7ff f9cb 	bl	80089fa <uxListRemove>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d115      	bne.n	8009696 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800966e:	491f      	ldr	r1, [pc, #124]	@ (80096ec <xTaskPriorityDisinherit+0x110>)
 8009670:	4613      	mov	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	440b      	add	r3, r1
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10a      	bne.n	8009696 <xTaskPriorityDisinherit+0xba>
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009684:	2201      	movs	r2, #1
 8009686:	fa02 f303 	lsl.w	r3, r2, r3
 800968a:	43da      	mvns	r2, r3
 800968c:	4b18      	ldr	r3, [pc, #96]	@ (80096f0 <xTaskPriorityDisinherit+0x114>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4013      	ands	r3, r2
 8009692:	4a17      	ldr	r2, [pc, #92]	@ (80096f0 <xTaskPriorityDisinherit+0x114>)
 8009694:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a2:	f1c3 0207 	rsb	r2, r3, #7
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ae:	2201      	movs	r2, #1
 80096b0:	409a      	lsls	r2, r3
 80096b2:	4b0f      	ldr	r3, [pc, #60]	@ (80096f0 <xTaskPriorityDisinherit+0x114>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	4a0d      	ldr	r2, [pc, #52]	@ (80096f0 <xTaskPriorityDisinherit+0x114>)
 80096ba:	6013      	str	r3, [r2, #0]
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096c0:	4613      	mov	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4a08      	ldr	r2, [pc, #32]	@ (80096ec <xTaskPriorityDisinherit+0x110>)
 80096ca:	441a      	add	r2, r3
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	3304      	adds	r3, #4
 80096d0:	4619      	mov	r1, r3
 80096d2:	4610      	mov	r0, r2
 80096d4:	f7ff f934 	bl	8008940 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80096d8:	2301      	movs	r3, #1
 80096da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096dc:	697b      	ldr	r3, [r7, #20]
	}
 80096de:	4618      	mov	r0, r3
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	20000554 	.word	0x20000554
 80096ec:	20000558 	.word	0x20000558
 80096f0:	2000061c 	.word	0x2000061c

080096f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096fe:	4b29      	ldr	r3, [pc, #164]	@ (80097a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009704:	4b28      	ldr	r3, [pc, #160]	@ (80097a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	3304      	adds	r3, #4
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff f975 	bl	80089fa <uxListRemove>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10b      	bne.n	800972e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009716:	4b24      	ldr	r3, [pc, #144]	@ (80097a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971c:	2201      	movs	r2, #1
 800971e:	fa02 f303 	lsl.w	r3, r2, r3
 8009722:	43da      	mvns	r2, r3
 8009724:	4b21      	ldr	r3, [pc, #132]	@ (80097ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4013      	ands	r3, r2
 800972a:	4a20      	ldr	r2, [pc, #128]	@ (80097ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800972c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009734:	d10a      	bne.n	800974c <prvAddCurrentTaskToDelayedList+0x58>
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d007      	beq.n	800974c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800973c:	4b1a      	ldr	r3, [pc, #104]	@ (80097a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3304      	adds	r3, #4
 8009742:	4619      	mov	r1, r3
 8009744:	481a      	ldr	r0, [pc, #104]	@ (80097b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009746:	f7ff f8fb 	bl	8008940 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800974a:	e026      	b.n	800979a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4413      	add	r3, r2
 8009752:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009754:	4b14      	ldr	r3, [pc, #80]	@ (80097a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	429a      	cmp	r2, r3
 8009762:	d209      	bcs.n	8009778 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009764:	4b13      	ldr	r3, [pc, #76]	@ (80097b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	4b0f      	ldr	r3, [pc, #60]	@ (80097a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3304      	adds	r3, #4
 800976e:	4619      	mov	r1, r3
 8009770:	4610      	mov	r0, r2
 8009772:	f7ff f909 	bl	8008988 <vListInsert>
}
 8009776:	e010      	b.n	800979a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009778:	4b0f      	ldr	r3, [pc, #60]	@ (80097b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	4b0a      	ldr	r3, [pc, #40]	@ (80097a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3304      	adds	r3, #4
 8009782:	4619      	mov	r1, r3
 8009784:	4610      	mov	r0, r2
 8009786:	f7ff f8ff 	bl	8008988 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800978a:	4b0c      	ldr	r3, [pc, #48]	@ (80097bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	429a      	cmp	r2, r3
 8009792:	d202      	bcs.n	800979a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009794:	4a09      	ldr	r2, [pc, #36]	@ (80097bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	6013      	str	r3, [r2, #0]
}
 800979a:	bf00      	nop
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	20000618 	.word	0x20000618
 80097a8:	20000554 	.word	0x20000554
 80097ac:	2000061c 	.word	0x2000061c
 80097b0:	20000600 	.word	0x20000600
 80097b4:	200005e8 	.word	0x200005e8
 80097b8:	200005e4 	.word	0x200005e4
 80097bc:	20000630 	.word	0x20000630

080097c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097c0:	4b07      	ldr	r3, [pc, #28]	@ (80097e0 <pxCurrentTCBConst2>)
 80097c2:	6819      	ldr	r1, [r3, #0]
 80097c4:	6808      	ldr	r0, [r1, #0]
 80097c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ca:	f380 8809 	msr	PSP, r0
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	f04f 0000 	mov.w	r0, #0
 80097d6:	f380 8811 	msr	BASEPRI, r0
 80097da:	4770      	bx	lr
 80097dc:	f3af 8000 	nop.w

080097e0 <pxCurrentTCBConst2>:
 80097e0:	20000554 	.word	0x20000554
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop

080097e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f2:	b672      	cpsid	i
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	b662      	cpsie	i
 8009802:	607b      	str	r3, [r7, #4]
}
 8009804:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009806:	4b11      	ldr	r3, [pc, #68]	@ (800984c <vPortEnterCritical+0x64>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3301      	adds	r3, #1
 800980c:	4a0f      	ldr	r2, [pc, #60]	@ (800984c <vPortEnterCritical+0x64>)
 800980e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009810:	4b0e      	ldr	r3, [pc, #56]	@ (800984c <vPortEnterCritical+0x64>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d112      	bne.n	800983e <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009818:	4b0d      	ldr	r3, [pc, #52]	@ (8009850 <vPortEnterCritical+0x68>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	b2db      	uxtb	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00d      	beq.n	800983e <vPortEnterCritical+0x56>
	__asm volatile
 8009822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009826:	b672      	cpsid	i
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	b662      	cpsie	i
 8009836:	603b      	str	r3, [r7, #0]
}
 8009838:	bf00      	nop
 800983a:	bf00      	nop
 800983c:	e7fd      	b.n	800983a <vPortEnterCritical+0x52>
	}
}
 800983e:	bf00      	nop
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	20000020 	.word	0x20000020
 8009850:	e000ed04 	.word	0xe000ed04

08009854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800985a:	4b13      	ldr	r3, [pc, #76]	@ (80098a8 <vPortExitCritical+0x54>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10d      	bne.n	800987e <vPortExitCritical+0x2a>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009866:	b672      	cpsid	i
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	b662      	cpsie	i
 8009876:	607b      	str	r3, [r7, #4]
}
 8009878:	bf00      	nop
 800987a:	bf00      	nop
 800987c:	e7fd      	b.n	800987a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800987e:	4b0a      	ldr	r3, [pc, #40]	@ (80098a8 <vPortExitCritical+0x54>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	3b01      	subs	r3, #1
 8009884:	4a08      	ldr	r2, [pc, #32]	@ (80098a8 <vPortExitCritical+0x54>)
 8009886:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009888:	4b07      	ldr	r3, [pc, #28]	@ (80098a8 <vPortExitCritical+0x54>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d105      	bne.n	800989c <vPortExitCritical+0x48>
 8009890:	2300      	movs	r3, #0
 8009892:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	f383 8811 	msr	BASEPRI, r3
}
 800989a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr
 80098a8:	20000020 	.word	0x20000020
 80098ac:	00000000 	.word	0x00000000

080098b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098b0:	f3ef 8009 	mrs	r0, PSP
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	4b15      	ldr	r3, [pc, #84]	@ (8009910 <pxCurrentTCBConst>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	f01e 0f10 	tst.w	lr, #16
 80098c0:	bf08      	it	eq
 80098c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ca:	6010      	str	r0, [r2, #0]
 80098cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80098d4:	b672      	cpsid	i
 80098d6:	f380 8811 	msr	BASEPRI, r0
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	b662      	cpsie	i
 80098e4:	f7ff fca0 	bl	8009228 <vTaskSwitchContext>
 80098e8:	f04f 0000 	mov.w	r0, #0
 80098ec:	f380 8811 	msr	BASEPRI, r0
 80098f0:	bc09      	pop	{r0, r3}
 80098f2:	6819      	ldr	r1, [r3, #0]
 80098f4:	6808      	ldr	r0, [r1, #0]
 80098f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fa:	f01e 0f10 	tst.w	lr, #16
 80098fe:	bf08      	it	eq
 8009900:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009904:	f380 8809 	msr	PSP, r0
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop

08009910 <pxCurrentTCBConst>:
 8009910:	20000554 	.word	0x20000554
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009914:	bf00      	nop
 8009916:	bf00      	nop

08009918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
	__asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009922:	b672      	cpsid	i
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	b662      	cpsie	i
 8009932:	607b      	str	r3, [r7, #4]
}
 8009934:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009936:	f7ff fbbb 	bl	80090b0 <xTaskIncrementTick>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009940:	4b06      	ldr	r3, [pc, #24]	@ (800995c <SysTick_Handler+0x44>)
 8009942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009946:	601a      	str	r2, [r3, #0]
 8009948:	2300      	movs	r3, #0
 800994a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	f383 8811 	msr	BASEPRI, r3
}
 8009952:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009954:	bf00      	nop
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	e000ed04 	.word	0xe000ed04

08009960 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009966:	f3ef 8305 	mrs	r3, IPSR
 800996a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2b0f      	cmp	r3, #15
 8009970:	d917      	bls.n	80099a2 <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009972:	4a1a      	ldr	r2, [pc, #104]	@ (80099dc <vPortValidateInterruptPriority+0x7c>)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	4413      	add	r3, r2
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800997c:	4b18      	ldr	r3, [pc, #96]	@ (80099e0 <vPortValidateInterruptPriority+0x80>)
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	7afa      	ldrb	r2, [r7, #11]
 8009982:	429a      	cmp	r2, r3
 8009984:	d20d      	bcs.n	80099a2 <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800998a:	b672      	cpsid	i
 800998c:	f383 8811 	msr	BASEPRI, r3
 8009990:	f3bf 8f6f 	isb	sy
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	b662      	cpsie	i
 800999a:	607b      	str	r3, [r7, #4]
}
 800999c:	bf00      	nop
 800999e:	bf00      	nop
 80099a0:	e7fd      	b.n	800999e <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80099a2:	4b10      	ldr	r3, [pc, #64]	@ (80099e4 <vPortValidateInterruptPriority+0x84>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80099aa:	4b0f      	ldr	r3, [pc, #60]	@ (80099e8 <vPortValidateInterruptPriority+0x88>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d90d      	bls.n	80099ce <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b6:	b672      	cpsid	i
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	b662      	cpsie	i
 80099c6:	603b      	str	r3, [r7, #0]
}
 80099c8:	bf00      	nop
 80099ca:	bf00      	nop
 80099cc:	e7fd      	b.n	80099ca <vPortValidateInterruptPriority+0x6a>
	}
 80099ce:	bf00      	nop
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	e000e3f0 	.word	0xe000e3f0
 80099e0:	20000638 	.word	0x20000638
 80099e4:	e000ed0c 	.word	0xe000ed0c
 80099e8:	2000063c 	.word	0x2000063c

080099ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fe fe72 	bl	80086e4 <USBH_LL_IncTimer>
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fe feb6 	bl	8008788 <USBH_LL_Connect>
}
 8009a1c:	bf00      	nop
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fe fecb 	bl	80087ce <USBH_LL_Disconnect>
}
 8009a38:	bf00      	nop
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70fb      	strb	r3, [r7, #3]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fe feeb 	bl	8008832 <USBH_LL_NotifyURBChange>
#endif
}
 8009a5c:	bf00      	nop
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7fe fe60 	bl	8008738 <USBH_LL_PortEnabled>
}
 8009a78:	bf00      	nop
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fe fe6c 	bl	800876c <USBH_LL_PortDisabled>
}
 8009a94:	bf00      	nop
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7f9 fb3d 	bl	8003132 <HAL_HCD_Stop>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009abc:	7bfb      	ldrb	r3, [r7, #15]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f000 f808 	bl	8009ad4 <USBH_Get_USB_Status>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
	...

08009ad4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	4603      	mov	r3, r0
 8009adc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ae2:	79fb      	ldrb	r3, [r7, #7]
 8009ae4:	2b03      	cmp	r3, #3
 8009ae6:	d817      	bhi.n	8009b18 <USBH_Get_USB_Status+0x44>
 8009ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8009af0 <USBH_Get_USB_Status+0x1c>)
 8009aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aee:	bf00      	nop
 8009af0:	08009b01 	.word	0x08009b01
 8009af4:	08009b07 	.word	0x08009b07
 8009af8:	08009b0d 	.word	0x08009b0d
 8009afc:	08009b13 	.word	0x08009b13
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	73fb      	strb	r3, [r7, #15]
    break;
 8009b04:	e00b      	b.n	8009b1e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009b06:	2302      	movs	r3, #2
 8009b08:	73fb      	strb	r3, [r7, #15]
    break;
 8009b0a:	e008      	b.n	8009b1e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b10:	e005      	b.n	8009b1e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009b12:	2302      	movs	r3, #2
 8009b14:	73fb      	strb	r3, [r7, #15]
    break;
 8009b16:	e002      	b.n	8009b1e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009b18:	2302      	movs	r3, #2
 8009b1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b1c:	bf00      	nop
  }
  return usb_status;
 8009b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <memset>:
 8009b2c:	4402      	add	r2, r0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d100      	bne.n	8009b36 <memset+0xa>
 8009b34:	4770      	bx	lr
 8009b36:	f803 1b01 	strb.w	r1, [r3], #1
 8009b3a:	e7f9      	b.n	8009b30 <memset+0x4>

08009b3c <__libc_init_array>:
 8009b3c:	b570      	push	{r4, r5, r6, lr}
 8009b3e:	4d0d      	ldr	r5, [pc, #52]	@ (8009b74 <__libc_init_array+0x38>)
 8009b40:	4c0d      	ldr	r4, [pc, #52]	@ (8009b78 <__libc_init_array+0x3c>)
 8009b42:	1b64      	subs	r4, r4, r5
 8009b44:	10a4      	asrs	r4, r4, #2
 8009b46:	2600      	movs	r6, #0
 8009b48:	42a6      	cmp	r6, r4
 8009b4a:	d109      	bne.n	8009b60 <__libc_init_array+0x24>
 8009b4c:	4d0b      	ldr	r5, [pc, #44]	@ (8009b7c <__libc_init_array+0x40>)
 8009b4e:	4c0c      	ldr	r4, [pc, #48]	@ (8009b80 <__libc_init_array+0x44>)
 8009b50:	f000 f826 	bl	8009ba0 <_init>
 8009b54:	1b64      	subs	r4, r4, r5
 8009b56:	10a4      	asrs	r4, r4, #2
 8009b58:	2600      	movs	r6, #0
 8009b5a:	42a6      	cmp	r6, r4
 8009b5c:	d105      	bne.n	8009b6a <__libc_init_array+0x2e>
 8009b5e:	bd70      	pop	{r4, r5, r6, pc}
 8009b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b64:	4798      	blx	r3
 8009b66:	3601      	adds	r6, #1
 8009b68:	e7ee      	b.n	8009b48 <__libc_init_array+0xc>
 8009b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b6e:	4798      	blx	r3
 8009b70:	3601      	adds	r6, #1
 8009b72:	e7f2      	b.n	8009b5a <__libc_init_array+0x1e>
 8009b74:	0800bb54 	.word	0x0800bb54
 8009b78:	0800bb54 	.word	0x0800bb54
 8009b7c:	0800bb54 	.word	0x0800bb54
 8009b80:	0800bb58 	.word	0x0800bb58

08009b84 <memcpy>:
 8009b84:	440a      	add	r2, r1
 8009b86:	4291      	cmp	r1, r2
 8009b88:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009b8c:	d100      	bne.n	8009b90 <memcpy+0xc>
 8009b8e:	4770      	bx	lr
 8009b90:	b510      	push	{r4, lr}
 8009b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b9a:	4291      	cmp	r1, r2
 8009b9c:	d1f9      	bne.n	8009b92 <memcpy+0xe>
 8009b9e:	bd10      	pop	{r4, pc}

08009ba0 <_init>:
 8009ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba2:	bf00      	nop
 8009ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba6:	bc08      	pop	{r3}
 8009ba8:	469e      	mov	lr, r3
 8009baa:	4770      	bx	lr

08009bac <_fini>:
 8009bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bae:	bf00      	nop
 8009bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bb2:	bc08      	pop	{r3}
 8009bb4:	469e      	mov	lr, r3
 8009bb6:	4770      	bx	lr
