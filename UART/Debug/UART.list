
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f30  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020ec  0800a100  0800a100  0000b100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1ec  0800c1ec  0000e02c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1ec  0800c1ec  0000d1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1f4  0800c1f4  0000e02c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1f4  0800c1f4  0000d1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c1f8  0800c1f8  0000d1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  0800c1fc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a3c  2000002c  0800c228  0000e02c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  0800c228  0000ea68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e02c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c7ac  00000000  00000000  0000e05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053d3  00000000  00000000  0003a808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d8  00000000  00000000  0003fbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001971  00000000  00000000  00041cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030e11  00000000  00000000  00043629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000295a0  00000000  00000000  0007443a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00127074  00000000  00000000  0009d9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c4a4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bdc  00000000  00000000  001c4a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001cd670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000002c 	.word	0x2000002c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a0e8 	.word	0x0800a0e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000030 	.word	0x20000030
 800020c:	0800a0e8 	.word	0x0800a0e8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <debug_log>:

#include "debug.h"

uint16_t debug_row = 0;

void debug_log(uint8_t new_page, const char *message, uint8_t error) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	6039      	str	r1, [r7, #0]
 800050a:	71fb      	strb	r3, [r7, #7]
 800050c:	4613      	mov	r3, r2
 800050e:	71bb      	strb	r3, [r7, #6]
	BSP_LCD_SetFont(DEBUG_FONT);
 8000510:	4817      	ldr	r0, [pc, #92]	@ (8000570 <debug_log+0x70>)
 8000512:	f001 f8af 	bl	8001674 <BSP_LCD_SetFont>
	if (new_page != 0)
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00a      	beq.n	8000532 <debug_log+0x32>
	{
		 BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800051c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000520:	f001 f88e 	bl	8001640 <BSP_LCD_SetBackColor>
		 BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000524:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000528:	f001 f8be 	bl	80016a8 <BSP_LCD_Clear>
		 debug_row = 0;
 800052c:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <debug_log+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	801a      	strh	r2, [r3, #0]
	}
	if (error != 0)
 8000532:	79bb      	ldrb	r3, [r7, #6]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d003      	beq.n	8000540 <debug_log+0x40>
	{
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000538:	480f      	ldr	r0, [pc, #60]	@ (8000578 <debug_log+0x78>)
 800053a:	f001 f869 	bl	8001610 <BSP_LCD_SetTextColor>
 800053e:	e003      	b.n	8000548 <debug_log+0x48>
	}
	else
	{
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000540:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000544:	f001 f864 	bl	8001610 <BSP_LCD_SetTextColor>
	}
	BSP_LCD_DisplayStringAt(0, DEBUG_FONT_SIZE * debug_row++, (uint8_t*)message, LEFT_MODE);
 8000548:	4b0a      	ldr	r3, [pc, #40]	@ (8000574 <debug_log+0x74>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	1c5a      	adds	r2, r3, #1
 800054e:	b291      	uxth	r1, r2
 8000550:	4a08      	ldr	r2, [pc, #32]	@ (8000574 <debug_log+0x74>)
 8000552:	8011      	strh	r1, [r2, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	0052      	lsls	r2, r2, #1
 8000558:	4413      	add	r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	b299      	uxth	r1, r3
 800055e:	2303      	movs	r3, #3
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	2000      	movs	r0, #0
 8000564:	f001 f90c 	bl	8001780 <BSP_LCD_DisplayStringAt>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000014 	.word	0x20000014
 8000574:	20000048 	.word	0x20000048
 8000578:	ffff0000 	.word	0xffff0000

0800057c <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <HAL_UART_RxCpltCallback>:
uint8_t rx_buffer[RX_BUFFER_SIZE];
volatile uint16_t rx_index = 0;
uint8_t received_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000610 <HAL_UART_RxCpltCallback+0x7c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d12f      	bne.n	8000606 <HAL_UART_RxCpltCallback+0x72>
    {
        if (rx_index < RX_BUFFER_SIZE - 1)
 80005a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <HAL_UART_RxCpltCallback+0x80>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	2bfe      	cmp	r3, #254	@ 0xfe
 80005ae:	d825      	bhi.n	80005fc <HAL_UART_RxCpltCallback+0x68>
        {
            rx_buffer[rx_index++] = received_data;
 80005b0:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <HAL_UART_RxCpltCallback+0x80>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	1c5a      	adds	r2, r3, #1
 80005b8:	b291      	uxth	r1, r2
 80005ba:	4a16      	ldr	r2, [pc, #88]	@ (8000614 <HAL_UART_RxCpltCallback+0x80>)
 80005bc:	8011      	strh	r1, [r2, #0]
 80005be:	461a      	mov	r2, r3
 80005c0:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <HAL_UART_RxCpltCallback+0x84>)
 80005c2:	7819      	ldrb	r1, [r3, #0]
 80005c4:	4b15      	ldr	r3, [pc, #84]	@ (800061c <HAL_UART_RxCpltCallback+0x88>)
 80005c6:	5499      	strb	r1, [r3, r2]

            if (received_data == '\n' || received_data == '\r' || rx_index == RX_BUFFER_SIZE - 1)
 80005c8:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <HAL_UART_RxCpltCallback+0x84>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b0a      	cmp	r3, #10
 80005ce:	d008      	beq.n	80005e2 <HAL_UART_RxCpltCallback+0x4e>
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <HAL_UART_RxCpltCallback+0x84>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b0d      	cmp	r3, #13
 80005d6:	d004      	beq.n	80005e2 <HAL_UART_RxCpltCallback+0x4e>
 80005d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <HAL_UART_RxCpltCallback+0x80>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	2bff      	cmp	r3, #255	@ 0xff
 80005e0:	d10c      	bne.n	80005fc <HAL_UART_RxCpltCallback+0x68>
            {
                rx_buffer[rx_index-1] = '\0';
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <HAL_UART_RxCpltCallback+0x80>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	3b01      	subs	r3, #1
 80005ea:	4a0c      	ldr	r2, [pc, #48]	@ (800061c <HAL_UART_RxCpltCallback+0x88>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	54d1      	strb	r1, [r2, r3]
                process_stream((char*)rx_buffer);
 80005f0:	480a      	ldr	r0, [pc, #40]	@ (800061c <HAL_UART_RxCpltCallback+0x88>)
 80005f2:	f000 fdd1 	bl	8001198 <process_stream>
                //debug_log(0, (char*)rx_buffer, 0);
                rx_index = 0;
 80005f6:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <HAL_UART_RxCpltCallback+0x80>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	801a      	strh	r2, [r3, #0]
            }
        }

        HAL_UART_Receive_IT(&huart1, &received_data, 1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	4906      	ldr	r1, [pc, #24]	@ (8000618 <HAL_UART_RxCpltCallback+0x84>)
 8000600:	4807      	ldr	r0, [pc, #28]	@ (8000620 <HAL_UART_RxCpltCallback+0x8c>)
 8000602:	f006 fc95 	bl	8006f30 <HAL_UART_Receive_IT>
    }
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40011000 	.word	0x40011000
 8000614:	200002bc 	.word	0x200002bc
 8000618:	200002be 	.word	0x200002be
 800061c:	200001bc 	.word	0x200001bc
 8000620:	20000134 	.word	0x20000134

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f001 fde4 	bl	80021f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f81e 	bl	800066c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000630:	f000 f88e 	bl	8000750 <PeriphCommonClock_Config>
  MX_USART6_UART_Init();
  MX_FATFS_Init();
  */
  //MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000634:	f000 fee4 	bl	8001400 <BSP_LCD_Init>
  /* Initialize the LCD Layers */
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FB_START_ADDRESS);
 8000638:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800063c:	2001      	movs	r0, #1
 800063e:	f000 ff77 	bl	8001530 <BSP_LCD_LayerDefaultInit>
  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8000642:	2001      	movs	r0, #1
 8000644:	f000 ffd4 	bl	80015f0 <BSP_LCD_SelectLayer>
  debug_log(1, "LCD Initialized", 0);
 8000648:	2200      	movs	r2, #0
 800064a:	4907      	ldr	r1, [pc, #28]	@ (8000668 <main+0x44>)
 800064c:	2001      	movs	r0, #1
 800064e:	f7ff ff57 	bl	8000500 <debug_log>
  init_board_state();
 8000652:	f000 fe6f 	bl	8001334 <init_board_state>
  MX_USART1_UART_Init();
 8000656:	f000 f8ad 	bl	80007b4 <MX_USART1_UART_Init>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800065a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800065e:	f001 f823 	bl	80016a8 <BSP_LCD_Clear>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000662:	bf00      	nop
 8000664:	e7fd      	b.n	8000662 <main+0x3e>
 8000666:	bf00      	nop
 8000668:	0800a100 	.word	0x0800a100

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	@ 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	@ 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f009 fcc4 	bl	800a008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000690:	f004 ff9a 	bl	80055c8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	4b2c      	ldr	r3, [pc, #176]	@ (8000748 <SystemClock_Config+0xdc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemClock_Config+0xdc>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a0:	4b29      	ldr	r3, [pc, #164]	@ (8000748 <SystemClock_Config+0xdc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	4b27      	ldr	r3, [pc, #156]	@ (800074c <SystemClock_Config+0xe0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a26      	ldr	r2, [pc, #152]	@ (800074c <SystemClock_Config+0xe0>)
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b24      	ldr	r3, [pc, #144]	@ (800074c <SystemClock_Config+0xe0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006c4:	2309      	movs	r3, #9
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006ce:	2301      	movs	r3, #1
 80006d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006dc:	2319      	movs	r3, #25
 80006de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80006e0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80006e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006ea:	2309      	movs	r3, #9
 80006ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	4618      	mov	r0, r3
 80006f4:	f004 ffc8 	bl	8005688 <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006fe:	f000 f8af 	bl	8000860 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000702:	f004 ff71 	bl	80055e8 <HAL_PWREx_EnableOverDrive>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800070c:	f000 f8a8 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2106      	movs	r1, #6
 800072e:	4618      	mov	r0, r3
 8000730:	f005 fa4e 	bl	8005bd0 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800073a:	f000 f891 	bl	8000860 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	@ 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b0a2      	sub	sp, #136	@ 0x88
 8000754:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2284      	movs	r2, #132	@ 0x84
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f009 fc53 	bl	800a008 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <PeriphCommonClock_Config+0x60>)
 8000764:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000766:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800076a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800076c:	2305      	movs	r3, #5
 800076e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000774:	2303      	movs	r3, #3
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000778:	2301      	movs	r3, #1
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800077c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000780:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000782:	2300      	movs	r3, #0
 8000784:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000786:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800078a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800078e:	2300      	movs	r3, #0
 8000790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4618      	mov	r0, r3
 8000798:	f005 fc32 	bl	8006000 <HAL_RCCEx_PeriphCLKConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80007a2:	f000 f85d 	bl	8000860 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3788      	adds	r7, #136	@ 0x88
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	00b00008 	.word	0x00b00008

080007b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	@ (800082c <MX_USART1_UART_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f6:	480c      	ldr	r0, [pc, #48]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 80007f8:	f006 fb4c 	bl	8006e94 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d006      	beq.n	8000810 <MX_USART1_UART_Init+0x5c>
  {
	debug_log(0, "USART/UART Initialization error", 1);
 8000802:	2201      	movs	r2, #1
 8000804:	490a      	ldr	r1, [pc, #40]	@ (8000830 <MX_USART1_UART_Init+0x7c>)
 8000806:	2000      	movs	r0, #0
 8000808:	f7ff fe7a 	bl	8000500 <debug_log>
    Error_Handler();
 800080c:	f000 f828 	bl	8000860 <Error_Handler>
  }
  debug_log(0, "USART/UART Initialized", 0);
 8000810:	2200      	movs	r2, #0
 8000812:	4908      	ldr	r1, [pc, #32]	@ (8000834 <MX_USART1_UART_Init+0x80>)
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff fe73 	bl	8000500 <debug_log>

  HAL_UART_Receive_IT(&huart1, &received_data, 1);
 800081a:	2201      	movs	r2, #1
 800081c:	4906      	ldr	r1, [pc, #24]	@ (8000838 <MX_USART1_UART_Init+0x84>)
 800081e:	4802      	ldr	r0, [pc, #8]	@ (8000828 <MX_USART1_UART_Init+0x74>)
 8000820:	f006 fb86 	bl	8006f30 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000134 	.word	0x20000134
 800082c:	40011000 	.word	0x40011000
 8000830:	0800a110 	.word	0x0800a110
 8000834:	0800a130 	.word	0x0800a130
 8000838:	200002be 	.word	0x200002be

0800083c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a04      	ldr	r2, [pc, #16]	@ (800085c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d101      	bne.n	8000852 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800084e:	f001 fcdf 	bl	8002210 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40001000 	.word	0x40001000

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <Error_Handler+0x8>

0800086c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000876:	4a10      	ldr	r2, [pc, #64]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	@ 0x40
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088e:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000894:	6453      	str	r3, [r2, #68]	@ 0x44
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	f06f 0001 	mvn.w	r0, #1
 80008aa:	f001 fdad 	bl	8002408 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000900 <HAL_DMA2D_MspInit+0x44>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d113      	bne.n	80008f6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80008ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <HAL_DMA2D_MspInit+0x48>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000904 <HAL_DMA2D_MspInit+0x48>)
 80008d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b0a      	ldr	r3, [pc, #40]	@ (8000904 <HAL_DMA2D_MspInit+0x48>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2105      	movs	r1, #5
 80008ea:	205a      	movs	r0, #90	@ 0x5a
 80008ec:	f001 fd8c 	bl	8002408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80008f0:	205a      	movs	r0, #90	@ 0x5a
 80008f2:	f001 fda5 	bl	8002440 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	4002b000 	.word	0x4002b000
 8000904:	40023800 	.word	0x40023800

08000908 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08e      	sub	sp, #56	@ 0x38
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a55      	ldr	r2, [pc, #340]	@ (8000a7c <HAL_LTDC_MspInit+0x174>)
 8000926:	4293      	cmp	r3, r2
 8000928:	f040 80a3 	bne.w	8000a72 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800092c:	4b54      	ldr	r3, [pc, #336]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 800092e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000930:	4a53      	ldr	r2, [pc, #332]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 8000932:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000936:	6453      	str	r3, [r2, #68]	@ 0x44
 8000938:	4b51      	ldr	r3, [pc, #324]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 800093a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000940:	623b      	str	r3, [r7, #32]
 8000942:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000944:	4b4e      	ldr	r3, [pc, #312]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 8000946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000948:	4a4d      	ldr	r2, [pc, #308]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000950:	4b4b      	ldr	r3, [pc, #300]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000954:	f003 0310 	and.w	r3, r3, #16
 8000958:	61fb      	str	r3, [r7, #28]
 800095a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800095c:	4b48      	ldr	r3, [pc, #288]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000960:	4a47      	ldr	r2, [pc, #284]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 8000962:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000966:	6313      	str	r3, [r2, #48]	@ 0x30
 8000968:	4b45      	ldr	r3, [pc, #276]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000974:	4b42      	ldr	r3, [pc, #264]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000978:	4a41      	ldr	r2, [pc, #260]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 800097a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800097e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000980:	4b3f      	ldr	r3, [pc, #252]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800098c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000990:	4a3b      	ldr	r2, [pc, #236]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 8000992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000996:	6313      	str	r3, [r2, #48]	@ 0x30
 8000998:	4b39      	ldr	r3, [pc, #228]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80009a4:	4b36      	ldr	r3, [pc, #216]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a8:	4a35      	ldr	r2, [pc, #212]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 80009aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b0:	4b33      	ldr	r3, [pc, #204]	@ (8000a80 <HAL_LTDC_MspInit+0x178>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80009bc:	2310      	movs	r3, #16
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009cc:	230e      	movs	r3, #14
 80009ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	482b      	ldr	r0, [pc, #172]	@ (8000a84 <HAL_LTDC_MspInit+0x17c>)
 80009d8:	f002 fb2c 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80009dc:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009ee:	230e      	movs	r3, #14
 80009f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f6:	4619      	mov	r1, r3
 80009f8:	4823      	ldr	r0, [pc, #140]	@ (8000a88 <HAL_LTDC_MspInit+0x180>)
 80009fa:	f002 fb1b 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80009fe:	23f7      	movs	r3, #247	@ 0xf7
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a0e:	230e      	movs	r3, #14
 8000a10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a16:	4619      	mov	r1, r3
 8000a18:	481c      	ldr	r0, [pc, #112]	@ (8000a8c <HAL_LTDC_MspInit+0x184>)
 8000a1a:	f002 fb0b 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a30:	2309      	movs	r3, #9
 8000a32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4815      	ldr	r0, [pc, #84]	@ (8000a90 <HAL_LTDC_MspInit+0x188>)
 8000a3c:	f002 fafa 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000a40:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a52:	230e      	movs	r3, #14
 8000a54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <HAL_LTDC_MspInit+0x18c>)
 8000a5e:	f002 fae9 	bl	8003034 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2105      	movs	r1, #5
 8000a66:	2058      	movs	r0, #88	@ 0x58
 8000a68:	f001 fcce 	bl	8002408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000a6c:	2058      	movs	r0, #88	@ 0x58
 8000a6e:	f001 fce7 	bl	8002440 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8000a72:	bf00      	nop
 8000a74:	3738      	adds	r7, #56	@ 0x38
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40016800 	.word	0x40016800
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40022400 	.word	0x40022400
 8000a8c:	40022800 	.word	0x40022800
 8000a90:	40021800 	.word	0x40021800
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	@ 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a2e      	ldr	r2, [pc, #184]	@ (8000b60 <HAL_TIM_Base_MspInit+0xc8>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d10c      	bne.n	8000ac4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aaa:	4b2e      	ldr	r3, [pc, #184]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	4a2d      	ldr	r2, [pc, #180]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000ac2:	e046      	b.n	8000b52 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000acc:	d10c      	bne.n	8000ae8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ace:	4b25      	ldr	r3, [pc, #148]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	4a24      	ldr	r2, [pc, #144]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ada:	4b22      	ldr	r3, [pc, #136]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	61bb      	str	r3, [r7, #24]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
}
 8000ae6:	e034      	b.n	8000b52 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a1e      	ldr	r2, [pc, #120]	@ (8000b68 <HAL_TIM_Base_MspInit+0xd0>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d10c      	bne.n	8000b0c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
}
 8000b0a:	e022      	b.n	8000b52 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a16      	ldr	r2, [pc, #88]	@ (8000b6c <HAL_TIM_Base_MspInit+0xd4>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d10c      	bne.n	8000b30 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000b16:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	4a12      	ldr	r2, [pc, #72]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
}
 8000b2e:	e010      	b.n	8000b52 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0e      	ldr	r2, [pc, #56]	@ (8000b70 <HAL_TIM_Base_MspInit+0xd8>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d10b      	bne.n	8000b52 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3e:	4a09      	ldr	r2, [pc, #36]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b46:	4b07      	ldr	r3, [pc, #28]	@ (8000b64 <HAL_TIM_Base_MspInit+0xcc>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
}
 8000b52:	bf00      	nop
 8000b54:	3724      	adds	r7, #36	@ 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40010000 	.word	0x40010000
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40000400 	.word	0x40000400
 8000b6c:	40000c00 	.word	0x40000c00
 8000b70:	40010400 	.word	0x40010400

08000b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b0ae      	sub	sp, #184	@ 0xb8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b8c:	f107 0320 	add.w	r3, r7, #32
 8000b90:	2284      	movs	r2, #132	@ 0x84
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f009 fa37 	bl	800a008 <memset>
  if(huart->Instance==USART1)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a57      	ldr	r2, [pc, #348]	@ (8000cfc <HAL_UART_MspInit+0x188>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d165      	bne.n	8000c70 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ba4:	2340      	movs	r3, #64	@ 0x40
 8000ba6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bac:	f107 0320 	add.w	r3, r7, #32
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f005 fa25 	bl	8006000 <HAL_RCCEx_PeriphCLKConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bbc:	f7ff fe50 	bl	8000860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bc0:	4b4f      	ldr	r3, [pc, #316]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc4:	4a4e      	ldr	r2, [pc, #312]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bcc:	4b4c      	ldr	r3, [pc, #304]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd0:	f003 0310 	and.w	r3, r3, #16
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd8:	4b49      	ldr	r3, [pc, #292]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bdc:	4a48      	ldr	r2, [pc, #288]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000bde:	f043 0302 	orr.w	r3, r3, #2
 8000be2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be4:	4b46      	ldr	r3, [pc, #280]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
 8000bee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b43      	ldr	r3, [pc, #268]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf4:	4a42      	ldr	r2, [pc, #264]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfc:	4b40      	ldr	r3, [pc, #256]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c08:	2380      	movs	r3, #128	@ 0x80
 8000c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c20:	2307      	movs	r3, #7
 8000c22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4835      	ldr	r0, [pc, #212]	@ (8000d04 <HAL_UART_MspInit+0x190>)
 8000c2e:	f002 fa01 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c56:	4619      	mov	r1, r3
 8000c58:	482b      	ldr	r0, [pc, #172]	@ (8000d08 <HAL_UART_MspInit+0x194>)
 8000c5a:	f002 f9eb 	bl	8003034 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2105      	movs	r1, #5
 8000c62:	2025      	movs	r0, #37	@ 0x25
 8000c64:	f001 fbd0 	bl	8002408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c68:	2025      	movs	r0, #37	@ 0x25
 8000c6a:	f001 fbe9 	bl	8002440 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000c6e:	e040      	b.n	8000cf2 <HAL_UART_MspInit+0x17e>
  else if(huart->Instance==USART6)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a25      	ldr	r2, [pc, #148]	@ (8000d0c <HAL_UART_MspInit+0x198>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d13b      	bne.n	8000cf2 <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000c7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c7e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c80:	2300      	movs	r3, #0
 8000c82:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c84:	f107 0320 	add.w	r3, r7, #32
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f005 f9b9 	bl	8006000 <HAL_RCCEx_PeriphCLKConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8000c94:	f7ff fde4 	bl	8000860 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000c98:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9c:	4a18      	ldr	r2, [pc, #96]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000c9e:	f043 0320 	orr.w	r3, r3, #32
 8000ca2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca4:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca8:	f003 0320 	and.w	r3, r3, #32
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	4a12      	ldr	r2, [pc, #72]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbc:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <HAL_UART_MspInit+0x18c>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cc8:	23c0      	movs	r3, #192	@ 0xc0
 8000cca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cea:	4619      	mov	r1, r3
 8000cec:	4808      	ldr	r0, [pc, #32]	@ (8000d10 <HAL_UART_MspInit+0x19c>)
 8000cee:	f002 f9a1 	bl	8003034 <HAL_GPIO_Init>
}
 8000cf2:	bf00      	nop
 8000cf4:	37b8      	adds	r7, #184	@ 0xb8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40011000 	.word	0x40011000
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020400 	.word	0x40020400
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	40011400 	.word	0x40011400
 8000d10:	40020800 	.word	0x40020800

08000d14 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000d28:	4b3a      	ldr	r3, [pc, #232]	@ (8000e14 <HAL_FMC_MspInit+0x100>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d16d      	bne.n	8000e0c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000d30:	4b38      	ldr	r3, [pc, #224]	@ (8000e14 <HAL_FMC_MspInit+0x100>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d36:	4b38      	ldr	r3, [pc, #224]	@ (8000e18 <HAL_FMC_MspInit+0x104>)
 8000d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d3a:	4a37      	ldr	r2, [pc, #220]	@ (8000e18 <HAL_FMC_MspInit+0x104>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d42:	4b35      	ldr	r3, [pc, #212]	@ (8000e18 <HAL_FMC_MspInit+0x104>)
 8000d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000d4e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000d52:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d60:	230c      	movs	r3, #12
 8000d62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4619      	mov	r1, r3
 8000d68:	482c      	ldr	r0, [pc, #176]	@ (8000e1c <HAL_FMC_MspInit+0x108>)
 8000d6a:	f002 f963 	bl	8003034 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000d6e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000d72:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d80:	230c      	movs	r3, #12
 8000d82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4825      	ldr	r0, [pc, #148]	@ (8000e20 <HAL_FMC_MspInit+0x10c>)
 8000d8a:	f002 f953 	bl	8003034 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000d8e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000d92:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000da0:	230c      	movs	r3, #12
 8000da2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	481e      	ldr	r0, [pc, #120]	@ (8000e24 <HAL_FMC_MspInit+0x110>)
 8000daa:	f002 f943 	bl	8003034 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000dae:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000db2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4817      	ldr	r0, [pc, #92]	@ (8000e28 <HAL_FMC_MspInit+0x114>)
 8000dca:	f002 f933 	bl	8003034 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000dce:	2328      	movs	r3, #40	@ 0x28
 8000dd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dde:	230c      	movs	r3, #12
 8000de0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	4619      	mov	r1, r3
 8000de6:	4811      	ldr	r0, [pc, #68]	@ (8000e2c <HAL_FMC_MspInit+0x118>)
 8000de8:	f002 f924 	bl	8003034 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000dec:	2308      	movs	r3, #8
 8000dee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dfc:	230c      	movs	r3, #12
 8000dfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	4619      	mov	r1, r3
 8000e04:	480a      	ldr	r0, [pc, #40]	@ (8000e30 <HAL_FMC_MspInit+0x11c>)
 8000e06:	f002 f915 	bl	8003034 <HAL_GPIO_Init>
 8000e0a:	e000      	b.n	8000e0e <HAL_FMC_MspInit+0xfa>
    return;
 8000e0c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200002c0 	.word	0x200002c0
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40021800 	.word	0x40021800
 8000e24:	40020c00 	.word	0x40020c00
 8000e28:	40021400 	.word	0x40021400
 8000e2c:	40021c00 	.word	0x40021c00
 8000e30:	40020800 	.word	0x40020800

08000e34 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000e3c:	f7ff ff6a 	bl	8000d14 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08e      	sub	sp, #56	@ 0x38
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e58:	4b33      	ldr	r3, [pc, #204]	@ (8000f28 <HAL_InitTick+0xe0>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	4a32      	ldr	r2, [pc, #200]	@ (8000f28 <HAL_InitTick+0xe0>)
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e64:	4b30      	ldr	r3, [pc, #192]	@ (8000f28 <HAL_InitTick+0xe0>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e70:	f107 0210 	add.w	r2, r7, #16
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f005 f88e 	bl	8005f9c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e80:	6a3b      	ldr	r3, [r7, #32]
 8000e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d103      	bne.n	8000e92 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e8a:	f005 f85f 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 8000e8e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e90:	e004      	b.n	8000e9c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e92:	f005 f85b 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 8000e96:	4603      	mov	r3, r0
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e9e:	4a23      	ldr	r2, [pc, #140]	@ (8000f2c <HAL_InitTick+0xe4>)
 8000ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea4:	0c9b      	lsrs	r3, r3, #18
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000eac:	4a21      	ldr	r2, [pc, #132]	@ (8000f34 <HAL_InitTick+0xec>)
 8000eae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000eb2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000eb6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ebc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ed0:	4817      	ldr	r0, [pc, #92]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000ed2:	f005 fd16 	bl	8006902 <HAL_TIM_Base_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000edc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d11b      	bne.n	8000f1c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ee4:	4812      	ldr	r0, [pc, #72]	@ (8000f30 <HAL_InitTick+0xe8>)
 8000ee6:	f005 fd63 	bl	80069b0 <HAL_TIM_Base_Start_IT>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ef0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d111      	bne.n	8000f1c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ef8:	2036      	movs	r0, #54	@ 0x36
 8000efa:	f001 faa1 	bl	8002440 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d808      	bhi.n	8000f16 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	2036      	movs	r0, #54	@ 0x36
 8000f0a:	f001 fa7d 	bl	8002408 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <HAL_InitTick+0xf0>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	e002      	b.n	8000f1c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3738      	adds	r7, #56	@ 0x38
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	431bde83 	.word	0x431bde83
 8000f30:	200002c4 	.word	0x200002c4
 8000f34:	40001000 	.word	0x40001000
 8000f38:	20000020 	.word	0x20000020

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <NMI_Handler+0x4>

08000f44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <MemManage_Handler+0x4>

08000f54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart1);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <USART1_IRQHandler+0x10>)
 8000f7a:	f006 f81d 	bl	8006fb8 <HAL_UART_IRQHandler>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000134 	.word	0x20000134

08000f88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f8c:	4802      	ldr	r0, [pc, #8]	@ (8000f98 <TIM6_DAC_IRQHandler+0x10>)
 8000f8e:	f005 fd87 	bl	8006aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200002c4 	.word	0x200002c4

08000f9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fa0:	4802      	ldr	r0, [pc, #8]	@ (8000fac <OTG_FS_IRQHandler+0x10>)
 8000fa2:	f002 fa0c 	bl	80033be <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000688 	.word	0x20000688

08000fb0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <LTDC_IRQHandler+0x10>)
 8000fb6:	f004 f85f 	bl	8005078 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000008c 	.word	0x2000008c

08000fc4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <DMA2D_IRQHandler+0x10>)
 8000fca:	f001 fdf5 	bl	8002bb8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000004c 	.word	0x2000004c

08000fd8 <draw_board>:
int x_center = (480 / 2) - (4 * 24);
int y_center = (272 / 2) - (4 * 24);

static char previous_board[BOARD_SIZE][BOARD_SIZE];

void draw_board(const char piece, int row, int col) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	73fb      	strb	r3, [r7, #15]
	if (previous_board[row][col] == piece) return;
 8000fe6:	4a40      	ldr	r2, [pc, #256]	@ (80010e8 <draw_board+0x110>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	441a      	add	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d072      	beq.n	80010e0 <draw_board+0x108>
    BSP_LCD_SetFont(PIECE_FONT);
 8000ffa:	483c      	ldr	r0, [pc, #240]	@ (80010ec <draw_board+0x114>)
 8000ffc:	f000 fb3a 	bl	8001674 <BSP_LCD_SetFont>

    // Définir la taille des cases
    const int SQUARE_SIZE = PIECE_FONT_SIZE;
 8001000:	2318      	movs	r3, #24
 8001002:	61bb      	str	r3, [r7, #24]

    // Déterminer la couleur de la case
    uint32_t square_color = ((row + col) % 2 == 0) ? LCD_COLOR_LIGHTGRAY : LCD_COLOR_BROWN;
 8001004:	68ba      	ldr	r2, [r7, #8]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <draw_board+0x3e>
 8001012:	4b37      	ldr	r3, [pc, #220]	@ (80010f0 <draw_board+0x118>)
 8001014:	e000      	b.n	8001018 <draw_board+0x40>
 8001016:	4b37      	ldr	r3, [pc, #220]	@ (80010f4 <draw_board+0x11c>)
 8001018:	617b      	str	r3, [r7, #20]

    // Dessiner le carré de la case
    BSP_LCD_SetBackColor(square_color);
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f000 fb10 	bl	8001640 <BSP_LCD_SetBackColor>
    BSP_LCD_FillRect(col * SQUARE_SIZE + x_center, row * SQUARE_SIZE + y_center, SQUARE_SIZE, SQUARE_SIZE);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	b29a      	uxth	r2, r3
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	b29b      	uxth	r3, r3
 8001028:	fb12 f303 	smulbb	r3, r2, r3
 800102c:	b29a      	uxth	r2, r3
 800102e:	4b32      	ldr	r3, [pc, #200]	@ (80010f8 <draw_board+0x120>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	b29b      	uxth	r3, r3
 8001034:	4413      	add	r3, r2
 8001036:	b298      	uxth	r0, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	b29a      	uxth	r2, r3
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	b29b      	uxth	r3, r3
 8001040:	fb12 f303 	smulbb	r3, r2, r3
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <draw_board+0x124>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	4413      	add	r3, r2
 800104e:	b299      	uxth	r1, r3
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	b29a      	uxth	r2, r3
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	b29b      	uxth	r3, r3
 8001058:	f000 fca2 	bl	80019a0 <BSP_LCD_FillRect>

    // Déterminer la couleur de la pièce
    char display_piece = piece;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	77fb      	strb	r3, [r7, #31]
    if (islower(piece)) {
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	4618      	mov	r0, r3
 8001064:	f008 ffba 	bl	8009fdc <islower>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00a      	beq.n	8001084 <draw_board+0xac>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800106e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001072:	f000 facd 	bl	8001610 <BSP_LCD_SetTextColor>
        display_piece = toupper(piece);
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	4618      	mov	r0, r3
 800107a:	f008 ffbb 	bl	8009ff4 <toupper>
 800107e:	4603      	mov	r3, r0
 8001080:	77fb      	strb	r3, [r7, #31]
 8001082:	e003      	b.n	800108c <draw_board+0xb4>
    } else {
        BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001084:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001088:	f000 fac2 	bl	8001610 <BSP_LCD_SetTextColor>
    }

    // Afficher la pièce
    char piece_str[2] = {display_piece, '\0'};
 800108c:	7ffb      	ldrb	r3, [r7, #31]
 800108e:	743b      	strb	r3, [r7, #16]
 8001090:	2300      	movs	r3, #0
 8001092:	747b      	strb	r3, [r7, #17]
    BSP_LCD_DisplayStringAt(col * SQUARE_SIZE + x_center, row * SQUARE_SIZE + y_center, (uint8_t*)piece_str, LEFT_MODE);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	b29a      	uxth	r2, r3
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	b29b      	uxth	r3, r3
 800109c:	fb12 f303 	smulbb	r3, r2, r3
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <draw_board+0x120>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4413      	add	r3, r2
 80010aa:	b298      	uxth	r0, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	fb12 f303 	smulbb	r3, r2, r3
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <draw_board+0x124>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4413      	add	r3, r2
 80010c2:	b299      	uxth	r1, r3
 80010c4:	f107 0210 	add.w	r2, r7, #16
 80010c8:	2303      	movs	r3, #3
 80010ca:	f000 fb59 	bl	8001780 <BSP_LCD_DisplayStringAt>
    previous_board[row][col] = piece;
 80010ce:	4a06      	ldr	r2, [pc, #24]	@ (80010e8 <draw_board+0x110>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	441a      	add	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	e000      	b.n	80010e2 <draw_board+0x10a>
	if (previous_board[row][col] == piece) return;
 80010e0:	bf00      	nop
}
 80010e2:	3720      	adds	r7, #32
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000310 	.word	0x20000310
 80010ec:	2000000c 	.word	0x2000000c
 80010f0:	ffd3d3d3 	.word	0xffd3d3d3
 80010f4:	ffa52a2a 	.word	0xffa52a2a
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000004 	.word	0x20000004

08001100 <parse_fen>:



void parse_fen(const char* fen) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    int row = 0, col = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]

    while (*fen && *fen != ' ') {
 8001110:	e035      	b.n	800117e <parse_fen+0x7e>
        if (*fen == '/') {
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b2f      	cmp	r3, #47	@ 0x2f
 8001118:	d105      	bne.n	8001126 <parse_fen+0x26>
            row++;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3301      	adds	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
            col = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	e028      	b.n	8001178 <parse_fen+0x78>
        } else if (*fen >= '1' && *fen <= '8') {
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b30      	cmp	r3, #48	@ 0x30
 800112c:	d91a      	bls.n	8001164 <parse_fen+0x64>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b38      	cmp	r3, #56	@ 0x38
 8001134:	d816      	bhi.n	8001164 <parse_fen+0x64>
            int empty_squares = *fen - '0';
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	3b30      	subs	r3, #48	@ 0x30
 800113c:	60bb      	str	r3, [r7, #8]
            for (int i = 0; i < empty_squares; i++) {
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	e00a      	b.n	800115a <parse_fen+0x5a>
                draw_board(' ', row, col);
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	6979      	ldr	r1, [r7, #20]
 8001148:	2020      	movs	r0, #32
 800114a:	f7ff ff45 	bl	8000fd8 <draw_board>
                col++;
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	3301      	adds	r3, #1
 8001152:	613b      	str	r3, [r7, #16]
            for (int i = 0; i < empty_squares; i++) {
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3301      	adds	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	429a      	cmp	r2, r3
 8001160:	dbf0      	blt.n	8001144 <parse_fen+0x44>
        } else if (*fen >= '1' && *fen <= '8') {
 8001162:	e009      	b.n	8001178 <parse_fen+0x78>
            }
        } else {
            draw_board(*fen, row, col);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	6979      	ldr	r1, [r7, #20]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff33 	bl	8000fd8 <draw_board>
            col++;
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	3301      	adds	r3, #1
 8001176:	613b      	str	r3, [r7, #16]
        }
        fen++;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3301      	adds	r3, #1
 800117c:	607b      	str	r3, [r7, #4]
    while (*fen && *fen != ' ') {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <parse_fen+0x8e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b20      	cmp	r3, #32
 800118c:	d1c1      	bne.n	8001112 <parse_fen+0x12>
    }
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <process_stream>:


void process_stream(const char* buffer) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b0ac      	sub	sp, #176	@ 0xb0
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	const char* fen_start = strstr(buffer, "\"fen\":\"");
 80011a0:	495f      	ldr	r1, [pc, #380]	@ (8001320 <process_stream+0x188>)
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f008 ff58 	bl	800a058 <strstr>
 80011a8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
	if (fen_start) {
 80011ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d02b      	beq.n	800120c <process_stream+0x74>
	    fen_start += 7; // Sauter "fen":"
 80011b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80011b8:	3307      	adds	r3, #7
 80011ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	    const char* fen_end = strchr(fen_start, '"');
 80011be:	2122      	movs	r1, #34	@ 0x22
 80011c0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80011c4:	f008 ff28 	bl	800a018 <strchr>
 80011c8:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	    if (fen_end) {
 80011cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d01b      	beq.n	800120c <process_stream+0x74>
	        char fen[128];
	        int fen_length = fen_end - fen_start;
 80011d4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80011d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	        strncpy(fen, fen_start, fen_length);
 80011e2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80011ee:	4618      	mov	r0, r3
 80011f0:	f008 ff1f 	bl	800a032 <strncpy>
	        fen[fen_length] = '\0';
 80011f4:	f107 020c 	add.w	r2, r7, #12
 80011f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011fc:	4413      	add	r3, r2
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
	        //debug_log(0, (char*)fen, 0);
	        parse_fen(fen);
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff7a 	bl	8001100 <parse_fen>
	    }
	}
	const char* w_player_start = strstr(buffer, "\"players\":[{\"color\":\"white\",\"user\":{\"name\":\"");
 800120c:	4945      	ldr	r1, [pc, #276]	@ (8001324 <process_stream+0x18c>)
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f008 ff22 	bl	800a058 <strstr>
 8001214:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
	if (w_player_start) {
 8001218:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d038      	beq.n	8001292 <process_stream+0xfa>
		w_player_start += 44;
 8001220:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001224:	332c      	adds	r3, #44	@ 0x2c
 8001226:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		const char* w_player_end = strchr(w_player_start, '"');
 800122a:	2122      	movs	r1, #34	@ 0x22
 800122c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001230:	f008 fef2 	bl	800a018 <strchr>
 8001234:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
		if (w_player_end) {
 8001238:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800123c:	2b00      	cmp	r3, #0
 800123e:	d028      	beq.n	8001292 <process_stream+0xfa>
			char w_player[128];
			int w_player_length = w_player_end - w_player_start;
 8001240:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001244:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			strncpy(w_player, w_player_start, w_player_length);
 800124e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001252:	f107 030c 	add.w	r3, r7, #12
 8001256:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800125a:	4618      	mov	r0, r3
 800125c:	f008 fee9 	bl	800a032 <strncpy>
			w_player[w_player_length] = '\0';
 8001260:	f107 020c 	add.w	r2, r7, #12
 8001264:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001268:	4413      	add	r3, r2
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
			BSP_LCD_SetFont(&Font12);
 800126e:	482e      	ldr	r0, [pc, #184]	@ (8001328 <process_stream+0x190>)
 8001270:	f000 fa00 	bl	8001674 <BSP_LCD_SetFont>
			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001274:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001278:	f000 f9e2 	bl	8001640 <BSP_LCD_SetBackColor>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800127c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001280:	f000 f9c6 	bl	8001610 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)w_player, LEFT_MODE);
 8001284:	f107 020c 	add.w	r2, r7, #12
 8001288:	2303      	movs	r3, #3
 800128a:	2100      	movs	r1, #0
 800128c:	2000      	movs	r0, #0
 800128e:	f000 fa77 	bl	8001780 <BSP_LCD_DisplayStringAt>
		}
	}

	const char* b_player_start = strstr(buffer, "\"black\",\"user\":{\"name\":\"");
 8001292:	4926      	ldr	r1, [pc, #152]	@ (800132c <process_stream+0x194>)
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f008 fedf 	bl	800a058 <strstr>
 800129a:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	if (b_player_start) {
 800129e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d037      	beq.n	8001316 <process_stream+0x17e>
	    b_player_start += 24; // Sauter jusqu'au début du nom
 80012a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80012aa:	3318      	adds	r3, #24
 80012ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	    const char* b_player_end = strchr(b_player_start, '"');
 80012b0:	2122      	movs	r1, #34	@ 0x22
 80012b2:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80012b6:	f008 feaf 	bl	800a018 <strchr>
 80012ba:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	    if (b_player_end) {
 80012be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d027      	beq.n	8001316 <process_stream+0x17e>
	        char b_player[128];
	        int b_player_length = b_player_end - b_player_start;
 80012c6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80012ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	        strncpy(b_player, b_player_start, b_player_length);
 80012d4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 80012e0:	4618      	mov	r0, r3
 80012e2:	f008 fea6 	bl	800a032 <strncpy>
	        b_player[b_player_length] = '\0';
 80012e6:	f107 020c 	add.w	r2, r7, #12
 80012ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80012ee:	4413      	add	r3, r2
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
	        // Affichage du nom du joueur noir
	        BSP_LCD_SetFont(&Font12);
 80012f4:	480c      	ldr	r0, [pc, #48]	@ (8001328 <process_stream+0x190>)
 80012f6:	f000 f9bd 	bl	8001674 <BSP_LCD_SetFont>
	        BSP_LCD_SetBackColor(LCD_COLOR_BROWN);
 80012fa:	480d      	ldr	r0, [pc, #52]	@ (8001330 <process_stream+0x198>)
 80012fc:	f000 f9a0 	bl	8001640 <BSP_LCD_SetBackColor>
	        BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001300:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001304:	f000 f984 	bl	8001610 <BSP_LCD_SetTextColor>
	        BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)b_player, RIGHT_MODE);
 8001308:	f107 020c 	add.w	r2, r7, #12
 800130c:	2302      	movs	r3, #2
 800130e:	2100      	movs	r1, #0
 8001310:	2000      	movs	r0, #0
 8001312:	f000 fa35 	bl	8001780 <BSP_LCD_DisplayStringAt>
	    }
	}
}
 8001316:	bf00      	nop
 8001318:	37b0      	adds	r7, #176	@ 0xb0
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	0800a148 	.word	0x0800a148
 8001324:	0800a150 	.word	0x0800a150
 8001328:	20000014 	.word	0x20000014
 800132c:	0800a180 	.word	0x0800a180
 8001330:	ffa52a2a 	.word	0xffa52a2a

08001334 <init_board_state>:

void init_board_state() {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
    for (int i = 0; i < BOARD_SIZE; i++) {
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	e018      	b.n	8001372 <init_board_state+0x3e>
        for (int j = 0; j < BOARD_SIZE; j++) {
 8001340:	2300      	movs	r3, #0
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	e00f      	b.n	8001366 <init_board_state+0x32>
            previous_board[i][j] = ' ';
 8001346:	4a0f      	ldr	r2, [pc, #60]	@ (8001384 <init_board_state+0x50>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	441a      	add	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	4413      	add	r3, r2
 8001352:	2220      	movs	r2, #32
 8001354:	701a      	strb	r2, [r3, #0]
            draw_board('!', i, j);
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	2021      	movs	r0, #33	@ 0x21
 800135c:	f7ff fe3c 	bl	8000fd8 <draw_board>
        for (int j = 0; j < BOARD_SIZE; j++) {
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	2b07      	cmp	r3, #7
 800136a:	ddec      	ble.n	8001346 <init_board_state+0x12>
    for (int i = 0; i < BOARD_SIZE; i++) {
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3301      	adds	r3, #1
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b07      	cmp	r3, #7
 8001376:	dde3      	ble.n	8001340 <init_board_state+0xc>
        }
    }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000310 	.word	0x20000310

08001388 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <SystemInit+0x20>)
 800138e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001392:	4a05      	ldr	r2, [pc, #20]	@ (80013a8 <SystemInit+0x20>)
 8001394:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001398:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013b0:	f7ff ffea 	bl	8001388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b4:	480c      	ldr	r0, [pc, #48]	@ (80013e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013b6:	490d      	ldr	r1, [pc, #52]	@ (80013ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b8:	4a0d      	ldr	r2, [pc, #52]	@ (80013f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013cc:	4c0a      	ldr	r4, [pc, #40]	@ (80013f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013da:	f008 fe53 	bl	800a084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013de:	f7ff f921 	bl	8000624 <main>
  bx  lr    
 80013e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013e4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ec:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80013f0:	0800c1fc 	.word	0x0800c1fc
  ldr r2, =_sbss
 80013f4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80013f8:	20000a68 	.word	0x20000a68

080013fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC_IRQHandler>
	...

08001400 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001404:	4b31      	ldr	r3, [pc, #196]	@ (80014cc <BSP_LCD_Init+0xcc>)
 8001406:	2228      	movs	r2, #40	@ 0x28
 8001408:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800140a:	4b30      	ldr	r3, [pc, #192]	@ (80014cc <BSP_LCD_Init+0xcc>)
 800140c:	2209      	movs	r2, #9
 800140e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001410:	4b2e      	ldr	r3, [pc, #184]	@ (80014cc <BSP_LCD_Init+0xcc>)
 8001412:	2235      	movs	r2, #53	@ 0x35
 8001414:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001416:	4b2d      	ldr	r3, [pc, #180]	@ (80014cc <BSP_LCD_Init+0xcc>)
 8001418:	220b      	movs	r2, #11
 800141a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800141c:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <BSP_LCD_Init+0xcc>)
 800141e:	f240 121b 	movw	r2, #283	@ 0x11b
 8001422:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001424:	4b29      	ldr	r3, [pc, #164]	@ (80014cc <BSP_LCD_Init+0xcc>)
 8001426:	f240 2215 	movw	r2, #533	@ 0x215
 800142a:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800142c:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <BSP_LCD_Init+0xcc>)
 800142e:	f240 121d 	movw	r2, #285	@ 0x11d
 8001432:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001434:	4b25      	ldr	r3, [pc, #148]	@ (80014cc <BSP_LCD_Init+0xcc>)
 8001436:	f240 2235 	movw	r2, #565	@ 0x235
 800143a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800143c:	2100      	movs	r1, #0
 800143e:	4823      	ldr	r0, [pc, #140]	@ (80014cc <BSP_LCD_Init+0xcc>)
 8001440:	f000 fc02 	bl	8001c48 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001444:	4b21      	ldr	r3, [pc, #132]	@ (80014cc <BSP_LCD_Init+0xcc>)
 8001446:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800144a:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800144c:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <BSP_LCD_Init+0xcc>)
 800144e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8001452:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001454:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <BSP_LCD_Init+0xcc>)
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <BSP_LCD_Init+0xcc>)
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001464:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <BSP_LCD_Init+0xcc>)
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800146c:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <BSP_LCD_Init+0xcc>)
 800146e:	2200      	movs	r2, #0
 8001470:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001472:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <BSP_LCD_Init+0xcc>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001478:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <BSP_LCD_Init+0xcc>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800147e:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <BSP_LCD_Init+0xcc>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <BSP_LCD_Init+0xcc>)
 8001486:	4a12      	ldr	r2, [pc, #72]	@ (80014d0 <BSP_LCD_Init+0xd0>)
 8001488:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800148a:	4810      	ldr	r0, [pc, #64]	@ (80014cc <BSP_LCD_Init+0xcc>)
 800148c:	f003 fef4 	bl	8005278 <HAL_LTDC_GetState>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d103      	bne.n	800149e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8001496:	2100      	movs	r1, #0
 8001498:	480c      	ldr	r0, [pc, #48]	@ (80014cc <BSP_LCD_Init+0xcc>)
 800149a:	f000 fafb 	bl	8001a94 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800149e:	480b      	ldr	r0, [pc, #44]	@ (80014cc <BSP_LCD_Init+0xcc>)
 80014a0:	f003 fd1a 	bl	8004ed8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014aa:	480a      	ldr	r0, [pc, #40]	@ (80014d4 <BSP_LCD_Init+0xd4>)
 80014ac:	f001 ff6e 	bl	800338c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	2108      	movs	r1, #8
 80014b4:	4808      	ldr	r0, [pc, #32]	@ (80014d8 <BSP_LCD_Init+0xd8>)
 80014b6:	f001 ff69 	bl	800338c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80014ba:	f000 fce5 	bl	8001e88 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80014be:	4807      	ldr	r0, [pc, #28]	@ (80014dc <BSP_LCD_Init+0xdc>)
 80014c0:	f000 f8d8 	bl	8001674 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000350 	.word	0x20000350
 80014d0:	40016800 	.word	0x40016800
 80014d4:	40022000 	.word	0x40022000
 80014d8:	40022800 	.word	0x40022800
 80014dc:	2000000c 	.word	0x2000000c

080014e0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <BSP_LCD_GetXSize+0x20>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a06      	ldr	r2, [pc, #24]	@ (8001504 <BSP_LCD_GetXSize+0x24>)
 80014ea:	2134      	movs	r1, #52	@ 0x34
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	3360      	adds	r3, #96	@ 0x60
 80014f4:	681b      	ldr	r3, [r3, #0]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	20000438 	.word	0x20000438
 8001504:	20000350 	.word	0x20000350

08001508 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <BSP_LCD_GetYSize+0x20>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a06      	ldr	r2, [pc, #24]	@ (800152c <BSP_LCD_GetYSize+0x24>)
 8001512:	2134      	movs	r1, #52	@ 0x34
 8001514:	fb01 f303 	mul.w	r3, r1, r3
 8001518:	4413      	add	r3, r2
 800151a:	3364      	adds	r3, #100	@ 0x64
 800151c:	681b      	ldr	r3, [r3, #0]
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	20000438 	.word	0x20000438
 800152c:	20000350 	.word	0x20000350

08001530 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001530:	b580      	push	{r7, lr}
 8001532:	b090      	sub	sp, #64	@ 0x40
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001540:	f7ff ffce 	bl	80014e0 <BSP_LCD_GetXSize>
 8001544:	4603      	mov	r3, r0
 8001546:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800154c:	f7ff ffdc 	bl	8001508 <BSP_LCD_GetYSize>
 8001550:	4603      	mov	r3, r0
 8001552:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 800155c:	23ff      	movs	r3, #255	@ 0xff
 800155e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001576:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800157a:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800157c:	2307      	movs	r3, #7
 800157e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001580:	f7ff ffae 	bl	80014e0 <BSP_LCD_GetXSize>
 8001584:	4603      	mov	r3, r0
 8001586:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001588:	f7ff ffbe 	bl	8001508 <BSP_LCD_GetYSize>
 800158c:	4603      	mov	r3, r0
 800158e:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001590:	88fa      	ldrh	r2, [r7, #6]
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	4619      	mov	r1, r3
 8001598:	4812      	ldr	r0, [pc, #72]	@ (80015e4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800159a:	f003 fe2f 	bl	80051fc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800159e:	88fa      	ldrh	r2, [r7, #6]
 80015a0:	4911      	ldr	r1, [pc, #68]	@ (80015e8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	3304      	adds	r3, #4
 80015ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015b2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80015b4:	88fa      	ldrh	r2, [r7, #6]
 80015b6:	490c      	ldr	r1, [pc, #48]	@ (80015e8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	3308      	adds	r3, #8
 80015c4:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <BSP_LCD_LayerDefaultInit+0xbc>)
 80015c6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80015c8:	88fa      	ldrh	r2, [r7, #6]
 80015ca:	4907      	ldr	r1, [pc, #28]	@ (80015e8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80015da:	601a      	str	r2, [r3, #0]
}
 80015dc:	bf00      	nop
 80015de:	3740      	adds	r7, #64	@ 0x40
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000350 	.word	0x20000350
 80015e8:	2000043c 	.word	0x2000043c
 80015ec:	2000000c 	.word	0x2000000c

080015f0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80015f8:	4a04      	ldr	r2, [pc, #16]	@ (800160c <BSP_LCD_SelectLayer+0x1c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
} 
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000438 	.word	0x20000438

08001610 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001618:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <BSP_LCD_SetTextColor+0x28>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4907      	ldr	r1, [pc, #28]	@ (800163c <BSP_LCD_SetTextColor+0x2c>)
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	601a      	str	r2, [r3, #0]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	20000438 	.word	0x20000438
 800163c:	2000043c 	.word	0x2000043c

08001640 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001648:	4b08      	ldr	r3, [pc, #32]	@ (800166c <BSP_LCD_SetBackColor+0x2c>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4908      	ldr	r1, [pc, #32]	@ (8001670 <BSP_LCD_SetBackColor+0x30>)
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	3304      	adds	r3, #4
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	601a      	str	r2, [r3, #0]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000438 	.word	0x20000438
 8001670:	2000043c 	.word	0x2000043c

08001674 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800167c:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <BSP_LCD_SetFont+0x2c>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4908      	ldr	r1, [pc, #32]	@ (80016a4 <BSP_LCD_SetFont+0x30>)
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	3308      	adds	r3, #8
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	601a      	str	r2, [r3, #0]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000438 	.word	0x20000438
 80016a4:	2000043c 	.word	0x2000043c

080016a8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80016a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80016b0:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <BSP_LCD_Clear+0x48>)
 80016b2:	681c      	ldr	r4, [r3, #0]
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <BSP_LCD_Clear+0x48>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0e      	ldr	r2, [pc, #56]	@ (80016f4 <BSP_LCD_Clear+0x4c>)
 80016ba:	2134      	movs	r1, #52	@ 0x34
 80016bc:	fb01 f303 	mul.w	r3, r1, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	335c      	adds	r3, #92	@ 0x5c
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	461e      	mov	r6, r3
 80016c8:	f7ff ff0a 	bl	80014e0 <BSP_LCD_GetXSize>
 80016cc:	4605      	mov	r5, r0
 80016ce:	f7ff ff1b 	bl	8001508 <BSP_LCD_GetYSize>
 80016d2:	4602      	mov	r2, r0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	2300      	movs	r3, #0
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	462a      	mov	r2, r5
 80016e0:	4631      	mov	r1, r6
 80016e2:	4620      	mov	r0, r4
 80016e4:	f000 fb84 	bl	8001df0 <LL_FillBuffer>
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f0:	20000438 	.word	0x20000438
 80016f4:	20000350 	.word	0x20000350

080016f8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
 8001702:	460b      	mov	r3, r1
 8001704:	80bb      	strh	r3, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800170a:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <BSP_LCD_DisplayChar+0x80>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	491b      	ldr	r1, [pc, #108]	@ (800177c <BSP_LCD_DisplayChar+0x84>)
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	3308      	adds	r3, #8
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6819      	ldr	r1, [r3, #0]
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001726:	4b14      	ldr	r3, [pc, #80]	@ (8001778 <BSP_LCD_DisplayChar+0x80>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4c14      	ldr	r4, [pc, #80]	@ (800177c <BSP_LCD_DisplayChar+0x84>)
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4423      	add	r3, r4
 8001736:	3308      	adds	r3, #8
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800173c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001740:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <BSP_LCD_DisplayChar+0x80>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4c0d      	ldr	r4, [pc, #52]	@ (800177c <BSP_LCD_DisplayChar+0x84>)
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4423      	add	r3, r4
 8001750:	3308      	adds	r3, #8
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	889b      	ldrh	r3, [r3, #4]
 8001756:	3307      	adds	r3, #7
 8001758:	2b00      	cmp	r3, #0
 800175a:	da00      	bge.n	800175e <BSP_LCD_DisplayChar+0x66>
 800175c:	3307      	adds	r3, #7
 800175e:	10db      	asrs	r3, r3, #3
 8001760:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001764:	18ca      	adds	r2, r1, r3
 8001766:	88b9      	ldrh	r1, [r7, #4]
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	4618      	mov	r0, r3
 800176c:	f000 fa88 	bl	8001c80 <DrawChar>
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bd90      	pop	{r4, r7, pc}
 8001778:	20000438 	.word	0x20000438
 800177c:	2000043c 	.word	0x2000043c

08001780 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001780:	b5b0      	push	{r4, r5, r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	60ba      	str	r2, [r7, #8]
 8001788:	461a      	mov	r2, r3
 800178a:	4603      	mov	r3, r0
 800178c:	81fb      	strh	r3, [r7, #14]
 800178e:	460b      	mov	r3, r1
 8001790:	81bb      	strh	r3, [r7, #12]
 8001792:	4613      	mov	r3, r2
 8001794:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8001796:	2301      	movs	r3, #1
 8001798:	83fb      	strh	r3, [r7, #30]
 800179a:	2300      	movs	r3, #0
 800179c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80017aa:	e002      	b.n	80017b2 <BSP_LCD_DisplayStringAt+0x32>
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	3301      	adds	r3, #1
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	617a      	str	r2, [r7, #20]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f6      	bne.n	80017ac <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80017be:	f7ff fe8f 	bl	80014e0 <BSP_LCD_GetXSize>
 80017c2:	4601      	mov	r1, r0
 80017c4:	4b50      	ldr	r3, [pc, #320]	@ (8001908 <BSP_LCD_DisplayStringAt+0x188>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4850      	ldr	r0, [pc, #320]	@ (800190c <BSP_LCD_DisplayStringAt+0x18c>)
 80017ca:	4613      	mov	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4403      	add	r3, r0
 80017d4:	3308      	adds	r3, #8
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	889b      	ldrh	r3, [r3, #4]
 80017da:	fbb1 f3f3 	udiv	r3, r1, r3
 80017de:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d01c      	beq.n	8001820 <BSP_LCD_DisplayStringAt+0xa0>
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	dc33      	bgt.n	8001852 <BSP_LCD_DisplayStringAt+0xd2>
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d002      	beq.n	80017f4 <BSP_LCD_DisplayStringAt+0x74>
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d019      	beq.n	8001826 <BSP_LCD_DisplayStringAt+0xa6>
 80017f2:	e02e      	b.n	8001852 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	1ad1      	subs	r1, r2, r3
 80017fa:	4b43      	ldr	r3, [pc, #268]	@ (8001908 <BSP_LCD_DisplayStringAt+0x188>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4843      	ldr	r0, [pc, #268]	@ (800190c <BSP_LCD_DisplayStringAt+0x18c>)
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4403      	add	r3, r0
 800180a:	3308      	adds	r3, #8
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	889b      	ldrh	r3, [r3, #4]
 8001810:	fb01 f303 	mul.w	r3, r1, r3
 8001814:	085b      	lsrs	r3, r3, #1
 8001816:	b29a      	uxth	r2, r3
 8001818:	89fb      	ldrh	r3, [r7, #14]
 800181a:	4413      	add	r3, r2
 800181c:	83fb      	strh	r3, [r7, #30]
      break;
 800181e:	e01b      	b.n	8001858 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8001820:	89fb      	ldrh	r3, [r7, #14]
 8001822:	83fb      	strh	r3, [r7, #30]
      break;
 8001824:	e018      	b.n	8001858 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	b299      	uxth	r1, r3
 800182e:	4b36      	ldr	r3, [pc, #216]	@ (8001908 <BSP_LCD_DisplayStringAt+0x188>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4836      	ldr	r0, [pc, #216]	@ (800190c <BSP_LCD_DisplayStringAt+0x18c>)
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4403      	add	r3, r0
 800183e:	3308      	adds	r3, #8
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	889b      	ldrh	r3, [r3, #4]
 8001844:	fb11 f303 	smulbb	r3, r1, r3
 8001848:	b29a      	uxth	r2, r3
 800184a:	89fb      	ldrh	r3, [r7, #14]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	83fb      	strh	r3, [r7, #30]
      break;
 8001850:	e002      	b.n	8001858 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8001852:	89fb      	ldrh	r3, [r7, #14]
 8001854:	83fb      	strh	r3, [r7, #30]
      break;
 8001856:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001858:	8bfb      	ldrh	r3, [r7, #30]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <BSP_LCD_DisplayStringAt+0xe6>
 800185e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001862:	2b00      	cmp	r3, #0
 8001864:	da1d      	bge.n	80018a2 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8001866:	2301      	movs	r3, #1
 8001868:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800186a:	e01a      	b.n	80018a2 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	89b9      	ldrh	r1, [r7, #12]
 8001872:	8bfb      	ldrh	r3, [r7, #30]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff3f 	bl	80016f8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800187a:	4b23      	ldr	r3, [pc, #140]	@ (8001908 <BSP_LCD_DisplayStringAt+0x188>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4923      	ldr	r1, [pc, #140]	@ (800190c <BSP_LCD_DisplayStringAt+0x18c>)
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	3308      	adds	r3, #8
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	889a      	ldrh	r2, [r3, #4]
 8001890:	8bfb      	ldrh	r3, [r7, #30]
 8001892:	4413      	add	r3, r2
 8001894:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	3301      	adds	r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
    i++;
 800189c:	8bbb      	ldrh	r3, [r7, #28]
 800189e:	3301      	adds	r3, #1
 80018a0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf14      	ite	ne
 80018aa:	2301      	movne	r3, #1
 80018ac:	2300      	moveq	r3, #0
 80018ae:	b2dc      	uxtb	r4, r3
 80018b0:	f7ff fe16 	bl	80014e0 <BSP_LCD_GetXSize>
 80018b4:	8bb9      	ldrh	r1, [r7, #28]
 80018b6:	4b14      	ldr	r3, [pc, #80]	@ (8001908 <BSP_LCD_DisplayStringAt+0x188>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4d14      	ldr	r5, [pc, #80]	@ (800190c <BSP_LCD_DisplayStringAt+0x18c>)
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	442b      	add	r3, r5
 80018c6:	3308      	adds	r3, #8
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	889b      	ldrh	r3, [r3, #4]
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	1ac3      	subs	r3, r0, r3
 80018d2:	b299      	uxth	r1, r3
 80018d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001908 <BSP_LCD_DisplayStringAt+0x188>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	480c      	ldr	r0, [pc, #48]	@ (800190c <BSP_LCD_DisplayStringAt+0x18c>)
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4403      	add	r3, r0
 80018e4:	3308      	adds	r3, #8
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	889b      	ldrh	r3, [r3, #4]
 80018ea:	4299      	cmp	r1, r3
 80018ec:	bf2c      	ite	cs
 80018ee:	2301      	movcs	r3, #1
 80018f0:	2300      	movcc	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4023      	ands	r3, r4
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1b7      	bne.n	800186c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3720      	adds	r7, #32
 8001902:	46bd      	mov	sp, r7
 8001904:	bdb0      	pop	{r4, r5, r7, pc}
 8001906:	bf00      	nop
 8001908:	20000438 	.word	0x20000438
 800190c:	2000043c 	.word	0x2000043c

08001910 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001910:	b5b0      	push	{r4, r5, r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	603a      	str	r2, [r7, #0]
 800191a:	80fb      	strh	r3, [r7, #6]
 800191c:	460b      	mov	r3, r1
 800191e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001920:	4b1d      	ldr	r3, [pc, #116]	@ (8001998 <BSP_LCD_DrawPixel+0x88>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a1d      	ldr	r2, [pc, #116]	@ (800199c <BSP_LCD_DrawPixel+0x8c>)
 8001926:	2134      	movs	r1, #52	@ 0x34
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	4413      	add	r3, r2
 800192e:	3348      	adds	r3, #72	@ 0x48
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d116      	bne.n	8001964 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001936:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <BSP_LCD_DrawPixel+0x88>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a18      	ldr	r2, [pc, #96]	@ (800199c <BSP_LCD_DrawPixel+0x8c>)
 800193c:	2134      	movs	r1, #52	@ 0x34
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4413      	add	r3, r2
 8001944:	335c      	adds	r3, #92	@ 0x5c
 8001946:	681c      	ldr	r4, [r3, #0]
 8001948:	88bd      	ldrh	r5, [r7, #4]
 800194a:	f7ff fdc9 	bl	80014e0 <BSP_LCD_GetXSize>
 800194e:	4603      	mov	r3, r0
 8001950:	fb03 f205 	mul.w	r2, r3, r5
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	4413      	add	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4423      	add	r3, r4
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	b292      	uxth	r2, r2
 8001960:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8001962:	e015      	b.n	8001990 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001964:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <BSP_LCD_DrawPixel+0x88>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0c      	ldr	r2, [pc, #48]	@ (800199c <BSP_LCD_DrawPixel+0x8c>)
 800196a:	2134      	movs	r1, #52	@ 0x34
 800196c:	fb01 f303 	mul.w	r3, r1, r3
 8001970:	4413      	add	r3, r2
 8001972:	335c      	adds	r3, #92	@ 0x5c
 8001974:	681c      	ldr	r4, [r3, #0]
 8001976:	88bd      	ldrh	r5, [r7, #4]
 8001978:	f7ff fdb2 	bl	80014e0 <BSP_LCD_GetXSize>
 800197c:	4603      	mov	r3, r0
 800197e:	fb03 f205 	mul.w	r2, r3, r5
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4423      	add	r3, r4
 800198a:	461a      	mov	r2, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bdb0      	pop	{r4, r5, r7, pc}
 8001998:	20000438 	.word	0x20000438
 800199c:	20000350 	.word	0x20000350

080019a0 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80019a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af02      	add	r7, sp, #8
 80019a8:	4604      	mov	r4, r0
 80019aa:	4608      	mov	r0, r1
 80019ac:	4611      	mov	r1, r2
 80019ae:	461a      	mov	r2, r3
 80019b0:	4623      	mov	r3, r4
 80019b2:	80fb      	strh	r3, [r7, #6]
 80019b4:	4603      	mov	r3, r0
 80019b6:	80bb      	strh	r3, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
 80019bc:	4613      	mov	r3, r2
 80019be:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80019c4:	4b30      	ldr	r3, [pc, #192]	@ (8001a88 <BSP_LCD_FillRect+0xe8>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4930      	ldr	r1, [pc, #192]	@ (8001a8c <BSP_LCD_FillRect+0xec>)
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fe1a 	bl	8001610 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80019dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001a88 <BSP_LCD_FillRect+0xe8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001a90 <BSP_LCD_FillRect+0xf0>)
 80019e2:	2134      	movs	r1, #52	@ 0x34
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	3348      	adds	r3, #72	@ 0x48
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d114      	bne.n	8001a1c <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80019f2:	4b25      	ldr	r3, [pc, #148]	@ (8001a88 <BSP_LCD_FillRect+0xe8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a26      	ldr	r2, [pc, #152]	@ (8001a90 <BSP_LCD_FillRect+0xf0>)
 80019f8:	2134      	movs	r1, #52	@ 0x34
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	335c      	adds	r3, #92	@ 0x5c
 8001a02:	681c      	ldr	r4, [r3, #0]
 8001a04:	f7ff fd6c 	bl	80014e0 <BSP_LCD_GetXSize>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	88bb      	ldrh	r3, [r7, #4]
 8001a0c:	fb03 f202 	mul.w	r2, r3, r2
 8001a10:	88fb      	ldrh	r3, [r7, #6]
 8001a12:	4413      	add	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4423      	add	r3, r4
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	e013      	b.n	8001a44 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a88 <BSP_LCD_FillRect+0xe8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a1b      	ldr	r2, [pc, #108]	@ (8001a90 <BSP_LCD_FillRect+0xf0>)
 8001a22:	2134      	movs	r1, #52	@ 0x34
 8001a24:	fb01 f303 	mul.w	r3, r1, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	335c      	adds	r3, #92	@ 0x5c
 8001a2c:	681c      	ldr	r4, [r3, #0]
 8001a2e:	f7ff fd57 	bl	80014e0 <BSP_LCD_GetXSize>
 8001a32:	4602      	mov	r2, r0
 8001a34:	88bb      	ldrh	r3, [r7, #4]
 8001a36:	fb03 f202 	mul.w	r2, r3, r2
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4423      	add	r3, r4
 8001a42:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001a44:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <BSP_LCD_FillRect+0xe8>)
 8001a46:	681c      	ldr	r4, [r3, #0]
 8001a48:	68fd      	ldr	r5, [r7, #12]
 8001a4a:	887e      	ldrh	r6, [r7, #2]
 8001a4c:	f8b7 8000 	ldrh.w	r8, [r7]
 8001a50:	f7ff fd46 	bl	80014e0 <BSP_LCD_GetXSize>
 8001a54:	4602      	mov	r2, r0
 8001a56:	887b      	ldrh	r3, [r7, #2]
 8001a58:	1ad1      	subs	r1, r2, r3
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <BSP_LCD_FillRect+0xe8>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	480b      	ldr	r0, [pc, #44]	@ (8001a8c <BSP_LCD_FillRect+0xec>)
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4403      	add	r3, r0
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	9301      	str	r3, [sp, #4]
 8001a6e:	9100      	str	r1, [sp, #0]
 8001a70:	4643      	mov	r3, r8
 8001a72:	4632      	mov	r2, r6
 8001a74:	4629      	mov	r1, r5
 8001a76:	4620      	mov	r0, r4
 8001a78:	f000 f9ba 	bl	8001df0 <LL_FillBuffer>
}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a86:	bf00      	nop
 8001a88:	20000438 	.word	0x20000438
 8001a8c:	2000043c 	.word	0x2000043c
 8001a90:	20000350 	.word	0x20000350

08001a94 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b090      	sub	sp, #64	@ 0x40
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001a9e:	4b64      	ldr	r3, [pc, #400]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	4a63      	ldr	r2, [pc, #396]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001aa4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aaa:	4b61      	ldr	r3, [pc, #388]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ab6:	4b5e      	ldr	r3, [pc, #376]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	4a5d      	ldr	r2, [pc, #372]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001abc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac2:	4b5b      	ldr	r3, [pc, #364]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ace:	4b58      	ldr	r3, [pc, #352]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a57      	ldr	r2, [pc, #348]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001ad4:	f043 0310 	orr.w	r3, r3, #16
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ada:	4b55      	ldr	r3, [pc, #340]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	623b      	str	r3, [r7, #32]
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ae6:	4b52      	ldr	r3, [pc, #328]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	4a51      	ldr	r2, [pc, #324]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	4b4f      	ldr	r3, [pc, #316]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001afe:	4b4c      	ldr	r3, [pc, #304]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a4b      	ldr	r2, [pc, #300]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b49      	ldr	r3, [pc, #292]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b12:	61bb      	str	r3, [r7, #24]
 8001b14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b16:	4b46      	ldr	r3, [pc, #280]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	4a45      	ldr	r2, [pc, #276]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001b1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b22:	4b43      	ldr	r3, [pc, #268]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001b2e:	4b40      	ldr	r3, [pc, #256]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	4a3f      	ldr	r2, [pc, #252]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001b34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8001b46:	4b3a      	ldr	r3, [pc, #232]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	4a39      	ldr	r2, [pc, #228]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b52:	4b37      	ldr	r3, [pc, #220]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001b5e:	4b34      	ldr	r3, [pc, #208]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	4a33      	ldr	r2, [pc, #204]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001b64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6a:	4b31      	ldr	r3, [pc, #196]	@ (8001c30 <BSP_LCD_MspInit+0x19c>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8001b76:	2310      	movs	r3, #16
 8001b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001b82:	2302      	movs	r3, #2
 8001b84:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001b86:	230e      	movs	r3, #14
 8001b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001b8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4828      	ldr	r0, [pc, #160]	@ (8001c34 <BSP_LCD_MspInit+0x1a0>)
 8001b92:	f001 fa4f 	bl	8003034 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001ba0:	2309      	movs	r3, #9
 8001ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4823      	ldr	r0, [pc, #140]	@ (8001c38 <BSP_LCD_MspInit+0x1a4>)
 8001bac:	f001 fa42 	bl	8003034 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8001bb0:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001bba:	230e      	movs	r3, #14
 8001bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001bbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	481d      	ldr	r0, [pc, #116]	@ (8001c3c <BSP_LCD_MspInit+0x1a8>)
 8001bc6:	f001 fa35 	bl	8003034 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001bca:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001bd4:	230e      	movs	r3, #14
 8001bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001bd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4818      	ldr	r0, [pc, #96]	@ (8001c40 <BSP_LCD_MspInit+0x1ac>)
 8001be0:	f001 fa28 	bl	8003034 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001be4:	23f7      	movs	r3, #247	@ 0xf7
 8001be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001bec:	230e      	movs	r3, #14
 8001bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001bf0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4813      	ldr	r0, [pc, #76]	@ (8001c44 <BSP_LCD_MspInit+0x1b0>)
 8001bf8:	f001 fa1c 	bl	8003034 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001bfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001c02:	2301      	movs	r3, #1
 8001c04:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001c06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480b      	ldr	r0, [pc, #44]	@ (8001c3c <BSP_LCD_MspInit+0x1a8>)
 8001c0e:	f001 fa11 	bl	8003034 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001c12:	2308      	movs	r3, #8
 8001c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001c16:	2301      	movs	r3, #1
 8001c18:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001c1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4808      	ldr	r0, [pc, #32]	@ (8001c44 <BSP_LCD_MspInit+0x1b0>)
 8001c22:	f001 fa07 	bl	8003034 <HAL_GPIO_Init>
}
 8001c26:	bf00      	nop
 8001c28:	3740      	adds	r7, #64	@ 0x40
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40021800 	.word	0x40021800
 8001c3c:	40022000 	.word	0x40022000
 8001c40:	40022400 	.word	0x40022400
 8001c44:	40022800 	.word	0x40022800

08001c48 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001c52:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <BSP_LCD_ClockConfig+0x34>)
 8001c54:	2208      	movs	r2, #8
 8001c56:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001c58:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <BSP_LCD_ClockConfig+0x34>)
 8001c5a:	22c0      	movs	r2, #192	@ 0xc0
 8001c5c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <BSP_LCD_ClockConfig+0x34>)
 8001c60:	2205      	movs	r2, #5
 8001c62:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001c64:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <BSP_LCD_ClockConfig+0x34>)
 8001c66:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001c6c:	4803      	ldr	r0, [pc, #12]	@ (8001c7c <BSP_LCD_ClockConfig+0x34>)
 8001c6e:	f004 f9c7 	bl	8006000 <HAL_RCCEx_PeriphCLKConfig>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000454 	.word	0x20000454

08001c80 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	603a      	str	r2, [r7, #0]
 8001c8a:	80fb      	strh	r3, [r7, #6]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8001c98:	4b53      	ldr	r3, [pc, #332]	@ (8001de8 <DrawChar+0x168>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4953      	ldr	r1, [pc, #332]	@ (8001dec <DrawChar+0x16c>)
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	3308      	adds	r3, #8
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	88db      	ldrh	r3, [r3, #6]
 8001cae:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001cb0:	4b4d      	ldr	r3, [pc, #308]	@ (8001de8 <DrawChar+0x168>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	494d      	ldr	r1, [pc, #308]	@ (8001dec <DrawChar+0x16c>)
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	3308      	adds	r3, #8
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	889b      	ldrh	r3, [r3, #4]
 8001cc6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8001cc8:	8a3b      	ldrh	r3, [r7, #16]
 8001cca:	3307      	adds	r3, #7
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	da00      	bge.n	8001cd2 <DrawChar+0x52>
 8001cd0:	3307      	adds	r3, #7
 8001cd2:	10db      	asrs	r3, r3, #3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	8a3b      	ldrh	r3, [r7, #16]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e076      	b.n	8001dd6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001ce8:	8a3b      	ldrh	r3, [r7, #16]
 8001cea:	3307      	adds	r3, #7
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	da00      	bge.n	8001cf2 <DrawChar+0x72>
 8001cf0:	3307      	adds	r3, #7
 8001cf2:	10db      	asrs	r3, r3, #3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8001d02:	8a3b      	ldrh	r3, [r7, #16]
 8001d04:	3307      	adds	r3, #7
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	da00      	bge.n	8001d0c <DrawChar+0x8c>
 8001d0a:	3307      	adds	r3, #7
 8001d0c:	10db      	asrs	r3, r3, #3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d002      	beq.n	8001d18 <DrawChar+0x98>
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d004      	beq.n	8001d20 <DrawChar+0xa0>
 8001d16:	e00c      	b.n	8001d32 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	617b      	str	r3, [r7, #20]
      break;
 8001d1e:	e016      	b.n	8001d4e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	3201      	adds	r2, #1
 8001d2a:	7812      	ldrb	r2, [r2, #0]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
      break;
 8001d30:	e00d      	b.n	8001d4e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	041a      	lsls	r2, r3, #16
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	4313      	orrs	r3, r2
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	3202      	adds	r2, #2
 8001d46:	7812      	ldrb	r2, [r2, #0]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
      break;
 8001d4c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	e036      	b.n	8001dc2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001d54:	8a3a      	ldrh	r2, [r7, #16]
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	1ad2      	subs	r2, r2, r3
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	2201      	movs	r2, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d012      	beq.n	8001d96 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	4413      	add	r3, r2
 8001d78:	b298      	uxth	r0, r3
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <DrawChar+0x168>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	491b      	ldr	r1, [pc, #108]	@ (8001dec <DrawChar+0x16c>)
 8001d80:	4613      	mov	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	88bb      	ldrh	r3, [r7, #4]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f7ff fdbe 	bl	8001910 <BSP_LCD_DrawPixel>
 8001d94:	e012      	b.n	8001dbc <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b298      	uxth	r0, r3
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <DrawChar+0x168>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4911      	ldr	r1, [pc, #68]	@ (8001dec <DrawChar+0x16c>)
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	3304      	adds	r3, #4
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	88bb      	ldrh	r3, [r7, #4]
 8001db6:	4619      	mov	r1, r3
 8001db8:	f7ff fdaa 	bl	8001910 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	8a3b      	ldrh	r3, [r7, #16]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d3c4      	bcc.n	8001d54 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8001dca:	88bb      	ldrh	r3, [r7, #4]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	8a7b      	ldrh	r3, [r7, #18]
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d384      	bcc.n	8001ce8 <DrawChar+0x68>
  }
}
 8001dde:	bf00      	nop
 8001de0:	bf00      	nop
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000438 	.word	0x20000438
 8001dec:	2000043c 	.word	0x2000043c

08001df0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001e78 <LL_FillBuffer+0x88>)
 8001e00:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e04:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001e06:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <LL_FillBuffer+0x8c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8001e80 <LL_FillBuffer+0x90>)
 8001e0c:	2134      	movs	r1, #52	@ 0x34
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	3348      	adds	r3, #72	@ 0x48
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d103      	bne.n	8001e24 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8001e1c:	4b16      	ldr	r3, [pc, #88]	@ (8001e78 <LL_FillBuffer+0x88>)
 8001e1e:	2202      	movs	r2, #2
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	e002      	b.n	8001e2a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001e24:	4b14      	ldr	r3, [pc, #80]	@ (8001e78 <LL_FillBuffer+0x88>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001e2a:	4a13      	ldr	r2, [pc, #76]	@ (8001e78 <LL_FillBuffer+0x88>)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <LL_FillBuffer+0x88>)
 8001e32:	4a14      	ldr	r2, [pc, #80]	@ (8001e84 <LL_FillBuffer+0x94>)
 8001e34:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001e36:	4810      	ldr	r0, [pc, #64]	@ (8001e78 <LL_FillBuffer+0x88>)
 8001e38:	f000 fd60 	bl	80028fc <HAL_DMA2D_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d115      	bne.n	8001e6e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001e42:	68f9      	ldr	r1, [r7, #12]
 8001e44:	480c      	ldr	r0, [pc, #48]	@ (8001e78 <LL_FillBuffer+0x88>)
 8001e46:	f000 ffc7 	bl	8002dd8 <HAL_DMA2D_ConfigLayer>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10e      	bne.n	8001e6e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69f9      	ldr	r1, [r7, #28]
 8001e5a:	4807      	ldr	r0, [pc, #28]	@ (8001e78 <LL_FillBuffer+0x88>)
 8001e5c:	f000 fd98 	bl	8002990 <HAL_DMA2D_Start>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d103      	bne.n	8001e6e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001e66:	210a      	movs	r1, #10
 8001e68:	4803      	ldr	r0, [pc, #12]	@ (8001e78 <LL_FillBuffer+0x88>)
 8001e6a:	f000 fdbc 	bl	80029e6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200003f8 	.word	0x200003f8
 8001e7c:	20000438 	.word	0x20000438
 8001e80:	20000350 	.word	0x20000350
 8001e84:	4002b000 	.word	0x4002b000

08001e88 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001e8c:	4b29      	ldr	r3, [pc, #164]	@ (8001f34 <BSP_SDRAM_Init+0xac>)
 8001e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8001f38 <BSP_SDRAM_Init+0xb0>)
 8001e90:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8001e92:	4b2a      	ldr	r3, [pc, #168]	@ (8001f3c <BSP_SDRAM_Init+0xb4>)
 8001e94:	2202      	movs	r2, #2
 8001e96:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001e98:	4b28      	ldr	r3, [pc, #160]	@ (8001f3c <BSP_SDRAM_Init+0xb4>)
 8001e9a:	2207      	movs	r2, #7
 8001e9c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8001e9e:	4b27      	ldr	r3, [pc, #156]	@ (8001f3c <BSP_SDRAM_Init+0xb4>)
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001ea4:	4b25      	ldr	r3, [pc, #148]	@ (8001f3c <BSP_SDRAM_Init+0xb4>)
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8001eaa:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <BSP_SDRAM_Init+0xb4>)
 8001eac:	2202      	movs	r2, #2
 8001eae:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001eb0:	4b22      	ldr	r3, [pc, #136]	@ (8001f3c <BSP_SDRAM_Init+0xb4>)
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001eb6:	4b21      	ldr	r3, [pc, #132]	@ (8001f3c <BSP_SDRAM_Init+0xb4>)
 8001eb8:	2202      	movs	r2, #2
 8001eba:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f34 <BSP_SDRAM_Init+0xac>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f34 <BSP_SDRAM_Init+0xac>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f34 <BSP_SDRAM_Init+0xac>)
 8001eca:	2204      	movs	r2, #4
 8001ecc:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001ece:	4b19      	ldr	r3, [pc, #100]	@ (8001f34 <BSP_SDRAM_Init+0xac>)
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001ed4:	4b17      	ldr	r3, [pc, #92]	@ (8001f34 <BSP_SDRAM_Init+0xac>)
 8001ed6:	2240      	movs	r2, #64	@ 0x40
 8001ed8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001eda:	4b16      	ldr	r3, [pc, #88]	@ (8001f34 <BSP_SDRAM_Init+0xac>)
 8001edc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ee0:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ee2:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <BSP_SDRAM_Init+0xac>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <BSP_SDRAM_Init+0xac>)
 8001eea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001eee:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001ef0:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <BSP_SDRAM_Init+0xac>)
 8001ef2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ef6:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <BSP_SDRAM_Init+0xac>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001efe:	2100      	movs	r1, #0
 8001f00:	480c      	ldr	r0, [pc, #48]	@ (8001f34 <BSP_SDRAM_Init+0xac>)
 8001f02:	f000 f87f 	bl	8002004 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001f06:	490d      	ldr	r1, [pc, #52]	@ (8001f3c <BSP_SDRAM_Init+0xb4>)
 8001f08:	480a      	ldr	r0, [pc, #40]	@ (8001f34 <BSP_SDRAM_Init+0xac>)
 8001f0a:	f004 fc69 	bl	80067e0 <HAL_SDRAM_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001f14:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <BSP_SDRAM_Init+0xb8>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
 8001f1a:	e002      	b.n	8001f22 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <BSP_SDRAM_Init+0xb8>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001f22:	f240 6003 	movw	r0, #1539	@ 0x603
 8001f26:	f000 f80d 	bl	8001f44 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001f2a:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <BSP_SDRAM_Init+0xb8>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200004d8 	.word	0x200004d8
 8001f38:	a0000140 	.word	0xa0000140
 8001f3c:	2000050c 	.word	0x2000050c
 8001f40:	2000001c 	.word	0x2000001c

08001f44 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001f50:	4b2a      	ldr	r3, [pc, #168]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f56:	4b29      	ldr	r3, [pc, #164]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f58:	2210      	movs	r2, #16
 8001f5a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001f5c:	4b27      	ldr	r3, [pc, #156]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001f62:	4b26      	ldr	r3, [pc, #152]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f6c:	4923      	ldr	r1, [pc, #140]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f6e:	4824      	ldr	r0, [pc, #144]	@ (8002000 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f70:	f004 fc6a 	bl	8006848 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001f74:	2001      	movs	r0, #1
 8001f76:	f000 f96b 	bl	8002250 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001f7a:	4b20      	ldr	r3, [pc, #128]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f80:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f82:	2210      	movs	r2, #16
 8001f84:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001f86:	4b1d      	ldr	r3, [pc, #116]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001f92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f96:	4919      	ldr	r1, [pc, #100]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f98:	4819      	ldr	r0, [pc, #100]	@ (8002000 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f9a:	f004 fc55 	bl	8006848 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001f9e:	4b17      	ldr	r3, [pc, #92]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001fa4:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fa6:	2210      	movs	r2, #16
 8001fa8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001faa:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fac:	2208      	movs	r2, #8
 8001fae:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001fb0:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001fb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fba:	4910      	ldr	r1, [pc, #64]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fbc:	4810      	ldr	r0, [pc, #64]	@ (8002000 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001fbe:	f004 fc43 	bl	8006848 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001fc2:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001fc6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fca:	2204      	movs	r2, #4
 8001fcc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fd0:	2210      	movs	r2, #16
 8001fd2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4a07      	ldr	r2, [pc, #28]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fde:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001fe0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fe4:	4905      	ldr	r1, [pc, #20]	@ (8001ffc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fe6:	4806      	ldr	r0, [pc, #24]	@ (8002000 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001fe8:	f004 fc2e 	bl	8006848 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4804      	ldr	r0, [pc, #16]	@ (8002000 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001ff0:	f004 fc5f 	bl	80068b2 <HAL_SDRAM_ProgramRefreshRate>
}
 8001ff4:	bf00      	nop
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000528 	.word	0x20000528
 8002000:	200004d8 	.word	0x200004d8

08002004 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002004:	b580      	push	{r7, lr}
 8002006:	b090      	sub	sp, #64	@ 0x40
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800200e:	4b70      	ldr	r3, [pc, #448]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 8002010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002012:	4a6f      	ldr	r2, [pc, #444]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6393      	str	r3, [r2, #56]	@ 0x38
 800201a:	4b6d      	ldr	r3, [pc, #436]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 800201c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002026:	4b6a      	ldr	r3, [pc, #424]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	4a69      	ldr	r2, [pc, #420]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 800202c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002030:	6313      	str	r3, [r2, #48]	@ 0x30
 8002032:	4b67      	ldr	r3, [pc, #412]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800203a:	627b      	str	r3, [r7, #36]	@ 0x24
 800203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800203e:	4b64      	ldr	r3, [pc, #400]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	4a63      	ldr	r2, [pc, #396]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	6313      	str	r3, [r2, #48]	@ 0x30
 800204a:	4b61      	ldr	r3, [pc, #388]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	623b      	str	r3, [r7, #32]
 8002054:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002056:	4b5e      	ldr	r3, [pc, #376]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	4a5d      	ldr	r2, [pc, #372]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 800205c:	f043 0308 	orr.w	r3, r3, #8
 8002060:	6313      	str	r3, [r2, #48]	@ 0x30
 8002062:	4b5b      	ldr	r3, [pc, #364]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800206e:	4b58      	ldr	r3, [pc, #352]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	4a57      	ldr	r2, [pc, #348]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 8002074:	f043 0310 	orr.w	r3, r3, #16
 8002078:	6313      	str	r3, [r2, #48]	@ 0x30
 800207a:	4b55      	ldr	r3, [pc, #340]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	61bb      	str	r3, [r7, #24]
 8002084:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002086:	4b52      	ldr	r3, [pc, #328]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	4a51      	ldr	r2, [pc, #324]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 800208c:	f043 0320 	orr.w	r3, r3, #32
 8002090:	6313      	str	r3, [r2, #48]	@ 0x30
 8002092:	4b4f      	ldr	r3, [pc, #316]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800209e:	4b4c      	ldr	r3, [pc, #304]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	4a4b      	ldr	r2, [pc, #300]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 80020a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020aa:	4b49      	ldr	r3, [pc, #292]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020b6:	4b46      	ldr	r3, [pc, #280]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	4a45      	ldr	r2, [pc, #276]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 80020bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c2:	4b43      	ldr	r3, [pc, #268]	@ (80021d0 <BSP_SDRAM_MspInit+0x1cc>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80020d2:	2301      	movs	r3, #1
 80020d4:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80020d6:	2302      	movs	r3, #2
 80020d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80020da:	230c      	movs	r3, #12
 80020dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80020de:	2308      	movs	r3, #8
 80020e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80020e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020e6:	4619      	mov	r1, r3
 80020e8:	483a      	ldr	r0, [pc, #232]	@ (80021d4 <BSP_SDRAM_MspInit+0x1d0>)
 80020ea:	f000 ffa3 	bl	8003034 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80020ee:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80020f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80020f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020f8:	4619      	mov	r1, r3
 80020fa:	4837      	ldr	r0, [pc, #220]	@ (80021d8 <BSP_SDRAM_MspInit+0x1d4>)
 80020fc:	f000 ff9a 	bl	8003034 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002100:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002104:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002106:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800210a:	4619      	mov	r1, r3
 800210c:	4833      	ldr	r0, [pc, #204]	@ (80021dc <BSP_SDRAM_MspInit+0x1d8>)
 800210e:	f000 ff91 	bl	8003034 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002112:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002116:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002118:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800211c:	4619      	mov	r1, r3
 800211e:	4830      	ldr	r0, [pc, #192]	@ (80021e0 <BSP_SDRAM_MspInit+0x1dc>)
 8002120:	f000 ff88 	bl	8003034 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002124:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800212a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800212e:	4619      	mov	r1, r3
 8002130:	482c      	ldr	r0, [pc, #176]	@ (80021e4 <BSP_SDRAM_MspInit+0x1e0>)
 8002132:	f000 ff7f 	bl	8003034 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002136:	2328      	movs	r3, #40	@ 0x28
 8002138:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800213a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800213e:	4619      	mov	r1, r3
 8002140:	4829      	ldr	r0, [pc, #164]	@ (80021e8 <BSP_SDRAM_MspInit+0x1e4>)
 8002142:	f000 ff77 	bl	8003034 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002146:	4b29      	ldr	r3, [pc, #164]	@ (80021ec <BSP_SDRAM_MspInit+0x1e8>)
 8002148:	2200      	movs	r2, #0
 800214a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800214c:	4b27      	ldr	r3, [pc, #156]	@ (80021ec <BSP_SDRAM_MspInit+0x1e8>)
 800214e:	2280      	movs	r2, #128	@ 0x80
 8002150:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002152:	4b26      	ldr	r3, [pc, #152]	@ (80021ec <BSP_SDRAM_MspInit+0x1e8>)
 8002154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002158:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800215a:	4b24      	ldr	r3, [pc, #144]	@ (80021ec <BSP_SDRAM_MspInit+0x1e8>)
 800215c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002160:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002162:	4b22      	ldr	r3, [pc, #136]	@ (80021ec <BSP_SDRAM_MspInit+0x1e8>)
 8002164:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002168:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <BSP_SDRAM_MspInit+0x1e8>)
 800216c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002170:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002172:	4b1e      	ldr	r3, [pc, #120]	@ (80021ec <BSP_SDRAM_MspInit+0x1e8>)
 8002174:	2200      	movs	r2, #0
 8002176:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002178:	4b1c      	ldr	r3, [pc, #112]	@ (80021ec <BSP_SDRAM_MspInit+0x1e8>)
 800217a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800217e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002180:	4b1a      	ldr	r3, [pc, #104]	@ (80021ec <BSP_SDRAM_MspInit+0x1e8>)
 8002182:	2200      	movs	r2, #0
 8002184:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002186:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <BSP_SDRAM_MspInit+0x1e8>)
 8002188:	2203      	movs	r2, #3
 800218a:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800218c:	4b17      	ldr	r3, [pc, #92]	@ (80021ec <BSP_SDRAM_MspInit+0x1e8>)
 800218e:	2200      	movs	r2, #0
 8002190:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002192:	4b16      	ldr	r3, [pc, #88]	@ (80021ec <BSP_SDRAM_MspInit+0x1e8>)
 8002194:	2200      	movs	r2, #0
 8002196:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <BSP_SDRAM_MspInit+0x1e8>)
 800219a:	4a15      	ldr	r2, [pc, #84]	@ (80021f0 <BSP_SDRAM_MspInit+0x1ec>)
 800219c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a12      	ldr	r2, [pc, #72]	@ (80021ec <BSP_SDRAM_MspInit+0x1e8>)
 80021a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80021a4:	4a11      	ldr	r2, [pc, #68]	@ (80021ec <BSP_SDRAM_MspInit+0x1e8>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80021aa:	4810      	ldr	r0, [pc, #64]	@ (80021ec <BSP_SDRAM_MspInit+0x1e8>)
 80021ac:	f000 fa04 	bl	80025b8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80021b0:	480e      	ldr	r0, [pc, #56]	@ (80021ec <BSP_SDRAM_MspInit+0x1e8>)
 80021b2:	f000 f953 	bl	800245c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	210f      	movs	r1, #15
 80021ba:	2038      	movs	r0, #56	@ 0x38
 80021bc:	f000 f924 	bl	8002408 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80021c0:	2038      	movs	r0, #56	@ 0x38
 80021c2:	f000 f93d 	bl	8002440 <HAL_NVIC_EnableIRQ>
}
 80021c6:	bf00      	nop
 80021c8:	3740      	adds	r7, #64	@ 0x40
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40020800 	.word	0x40020800
 80021d8:	40020c00 	.word	0x40020c00
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40021400 	.word	0x40021400
 80021e4:	40021800 	.word	0x40021800
 80021e8:	40021c00 	.word	0x40021c00
 80021ec:	20000538 	.word	0x20000538
 80021f0:	40026410 	.word	0x40026410

080021f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f8:	2003      	movs	r0, #3
 80021fa:	f000 f8fa 	bl	80023f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fe:	2000      	movs	r0, #0
 8002200:	f7fe fe22 	bl	8000e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002204:	f7fe fb32 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002214:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <HAL_IncTick+0x20>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <HAL_IncTick+0x24>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4413      	add	r3, r2
 8002220:	4a04      	ldr	r2, [pc, #16]	@ (8002234 <HAL_IncTick+0x24>)
 8002222:	6013      	str	r3, [r2, #0]
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000024 	.word	0x20000024
 8002234:	20000598 	.word	0x20000598

08002238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return uwTick;
 800223c:	4b03      	ldr	r3, [pc, #12]	@ (800224c <HAL_GetTick+0x14>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20000598 	.word	0x20000598

08002250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002258:	f7ff ffee 	bl	8002238 <HAL_GetTick>
 800225c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002268:	d005      	beq.n	8002276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800226a:	4b0a      	ldr	r3, [pc, #40]	@ (8002294 <HAL_Delay+0x44>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002276:	bf00      	nop
 8002278:	f7ff ffde 	bl	8002238 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	429a      	cmp	r2, r3
 8002286:	d8f7      	bhi.n	8002278 <HAL_Delay+0x28>
  {
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000024 	.word	0x20000024

08002298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a8:	4b0b      	ldr	r3, [pc, #44]	@ (80022d8 <__NVIC_SetPriorityGrouping+0x40>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022b4:	4013      	ands	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022c0:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c6:	4a04      	ldr	r2, [pc, #16]	@ (80022d8 <__NVIC_SetPriorityGrouping+0x40>)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	60d3      	str	r3, [r2, #12]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00
 80022dc:	05fa0000 	.word	0x05fa0000

080022e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e4:	4b04      	ldr	r3, [pc, #16]	@ (80022f8 <__NVIC_GetPriorityGrouping+0x18>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	f003 0307 	and.w	r3, r3, #7
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	2b00      	cmp	r3, #0
 800230c:	db0b      	blt.n	8002326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	f003 021f 	and.w	r2, r3, #31
 8002314:	4907      	ldr	r1, [pc, #28]	@ (8002334 <__NVIC_EnableIRQ+0x38>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	2001      	movs	r0, #1
 800231e:	fa00 f202 	lsl.w	r2, r0, r2
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e000e100 	.word	0xe000e100

08002338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	2b00      	cmp	r3, #0
 800234a:	db0a      	blt.n	8002362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	490c      	ldr	r1, [pc, #48]	@ (8002384 <__NVIC_SetPriority+0x4c>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	0112      	lsls	r2, r2, #4
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	440b      	add	r3, r1
 800235c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002360:	e00a      	b.n	8002378 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4908      	ldr	r1, [pc, #32]	@ (8002388 <__NVIC_SetPriority+0x50>)
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	3b04      	subs	r3, #4
 8002370:	0112      	lsls	r2, r2, #4
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	440b      	add	r3, r1
 8002376:	761a      	strb	r2, [r3, #24]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000e100 	.word	0xe000e100
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800238c:	b480      	push	{r7}
 800238e:	b089      	sub	sp, #36	@ 0x24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f1c3 0307 	rsb	r3, r3, #7
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	bf28      	it	cs
 80023aa:	2304      	movcs	r3, #4
 80023ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3304      	adds	r3, #4
 80023b2:	2b06      	cmp	r3, #6
 80023b4:	d902      	bls.n	80023bc <NVIC_EncodePriority+0x30>
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3b03      	subs	r3, #3
 80023ba:	e000      	b.n	80023be <NVIC_EncodePriority+0x32>
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	401a      	ands	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa01 f303 	lsl.w	r3, r1, r3
 80023de:	43d9      	mvns	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	4313      	orrs	r3, r2
         );
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3724      	adds	r7, #36	@ 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ff4c 	bl	8002298 <__NVIC_SetPriorityGrouping>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800241a:	f7ff ff61 	bl	80022e0 <__NVIC_GetPriorityGrouping>
 800241e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	6978      	ldr	r0, [r7, #20]
 8002426:	f7ff ffb1 	bl	800238c <NVIC_EncodePriority>
 800242a:	4602      	mov	r2, r0
 800242c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ff80 	bl	8002338 <__NVIC_SetPriority>
}
 8002438:	bf00      	nop
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ff54 	bl	80022fc <__NVIC_EnableIRQ>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002468:	f7ff fee6 	bl	8002238 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e099      	b.n	80025ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0201 	bic.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002498:	e00f      	b.n	80024ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800249a:	f7ff fecd 	bl	8002238 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d908      	bls.n	80024ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2220      	movs	r2, #32
 80024ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2203      	movs	r2, #3
 80024b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e078      	b.n	80025ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e8      	bne.n	800249a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4b38      	ldr	r3, [pc, #224]	@ (80025b4 <HAL_DMA_Init+0x158>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	2b04      	cmp	r3, #4
 8002512:	d107      	bne.n	8002524 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251c:	4313      	orrs	r3, r2
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f023 0307 	bic.w	r3, r3, #7
 800253a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4313      	orrs	r3, r2
 8002544:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254a:	2b04      	cmp	r3, #4
 800254c:	d117      	bne.n	800257e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00e      	beq.n	800257e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f94f 	bl	8002804 <DMA_CheckFifoParam>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2240      	movs	r2, #64	@ 0x40
 8002570:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800257a:	2301      	movs	r3, #1
 800257c:	e016      	b.n	80025ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f906 	bl	8002798 <DMA_CalcBaseAndBitshift>
 800258c:	4603      	mov	r3, r0
 800258e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002594:	223f      	movs	r2, #63	@ 0x3f
 8002596:	409a      	lsls	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	f010803f 	.word	0xf010803f

080025b8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e050      	b.n	800266c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d101      	bne.n	80025da <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80025d6:	2302      	movs	r3, #2
 80025d8:	e048      	b.n	800266c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2200      	movs	r2, #0
 80025f8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2200      	movs	r2, #0
 8002610:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2221      	movs	r2, #33	@ 0x21
 8002618:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f8bc 	bl	8002798 <DMA_CalcBaseAndBitshift>
 8002620:	4603      	mov	r3, r0
 8002622:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002628:	223f      	movs	r2, #63	@ 0x3f
 800262a:	409a      	lsls	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002680:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002682:	f7ff fdd9 	bl	8002238 <HAL_GetTick>
 8002686:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d008      	beq.n	80026a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2280      	movs	r2, #128	@ 0x80
 8002698:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e052      	b.n	800274c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0216 	bic.w	r2, r2, #22
 80026b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695a      	ldr	r2, [r3, #20]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d103      	bne.n	80026d6 <HAL_DMA_Abort+0x62>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0208 	bic.w	r2, r2, #8
 80026e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0201 	bic.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026f6:	e013      	b.n	8002720 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026f8:	f7ff fd9e 	bl	8002238 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b05      	cmp	r3, #5
 8002704:	d90c      	bls.n	8002720 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2220      	movs	r2, #32
 800270a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2203      	movs	r2, #3
 8002710:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e015      	b.n	800274c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1e4      	bne.n	80026f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002732:	223f      	movs	r2, #63	@ 0x3f
 8002734:	409a      	lsls	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d004      	beq.n	8002772 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2280      	movs	r2, #128	@ 0x80
 800276c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e00c      	b.n	800278c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2205      	movs	r2, #5
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0201 	bic.w	r2, r2, #1
 8002788:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	3b10      	subs	r3, #16
 80027a8:	4a13      	ldr	r2, [pc, #76]	@ (80027f8 <DMA_CalcBaseAndBitshift+0x60>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	091b      	lsrs	r3, r3, #4
 80027b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027b2:	4a12      	ldr	r2, [pc, #72]	@ (80027fc <DMA_CalcBaseAndBitshift+0x64>)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d908      	bls.n	80027d8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <DMA_CalcBaseAndBitshift+0x68>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	1d1a      	adds	r2, r3, #4
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80027d6:	e006      	b.n	80027e6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <DMA_CalcBaseAndBitshift+0x68>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	aaaaaaab 	.word	0xaaaaaaab
 80027fc:	0800c0e0 	.word	0x0800c0e0
 8002800:	fffffc00 	.word	0xfffffc00

08002804 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002814:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d11f      	bne.n	800285e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d856      	bhi.n	80028d2 <DMA_CheckFifoParam+0xce>
 8002824:	a201      	add	r2, pc, #4	@ (adr r2, 800282c <DMA_CheckFifoParam+0x28>)
 8002826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282a:	bf00      	nop
 800282c:	0800283d 	.word	0x0800283d
 8002830:	0800284f 	.word	0x0800284f
 8002834:	0800283d 	.word	0x0800283d
 8002838:	080028d3 	.word	0x080028d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002840:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d046      	beq.n	80028d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800284c:	e043      	b.n	80028d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002852:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002856:	d140      	bne.n	80028da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800285c:	e03d      	b.n	80028da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002866:	d121      	bne.n	80028ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d837      	bhi.n	80028de <DMA_CheckFifoParam+0xda>
 800286e:	a201      	add	r2, pc, #4	@ (adr r2, 8002874 <DMA_CheckFifoParam+0x70>)
 8002870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002874:	08002885 	.word	0x08002885
 8002878:	0800288b 	.word	0x0800288b
 800287c:	08002885 	.word	0x08002885
 8002880:	0800289d 	.word	0x0800289d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
      break;
 8002888:	e030      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d025      	beq.n	80028e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289a:	e022      	b.n	80028e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028a4:	d11f      	bne.n	80028e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028aa:	e01c      	b.n	80028e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d903      	bls.n	80028ba <DMA_CheckFifoParam+0xb6>
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d003      	beq.n	80028c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028b8:	e018      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
      break;
 80028be:	e015      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00e      	beq.n	80028ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      break;
 80028d0:	e00b      	b.n	80028ea <DMA_CheckFifoParam+0xe6>
      break;
 80028d2:	bf00      	nop
 80028d4:	e00a      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028d6:	bf00      	nop
 80028d8:	e008      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028da:	bf00      	nop
 80028dc:	e006      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028de:	bf00      	nop
 80028e0:	e004      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028e2:	bf00      	nop
 80028e4:	e002      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;   
 80028e6:	bf00      	nop
 80028e8:	e000      	b.n	80028ec <DMA_CheckFifoParam+0xe8>
      break;
 80028ea:	bf00      	nop
    }
  } 
  
  return status; 
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop

080028fc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e039      	b.n	8002982 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fd ffca 	bl	80008bc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800294c:	f023 0107 	bic.w	r1, r3, #7
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002962:	4b0a      	ldr	r3, [pc, #40]	@ (800298c <HAL_DMA2D_Init+0x90>)
 8002964:	4013      	ands	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68d1      	ldr	r1, [r2, #12]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	430b      	orrs	r3, r1
 8002970:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	ffffc000 	.word	0xffffc000

08002990 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_DMA2D_Start+0x1c>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e018      	b.n	80029de <HAL_DMA2D_Start+0x4e>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fa98 	bl	8002efc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b086      	sub	sp, #24
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d056      	beq.n	8002ab0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a02:	f7ff fc19 	bl	8002238 <HAL_GetTick>
 8002a06:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002a08:	e04b      	b.n	8002aa2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d023      	beq.n	8002a64 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2a:	f043 0202 	orr.w	r2, r3, #2
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a40:	f043 0201 	orr.w	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2221      	movs	r2, #33	@ 0x21
 8002a4e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2204      	movs	r2, #4
 8002a54:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0a5      	b.n	8002bb0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a6a:	d01a      	beq.n	8002aa2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a6c:	f7ff fbe4 	bl	8002238 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d302      	bcc.n	8002a82 <HAL_DMA2D_PollForTransfer+0x9c>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a86:	f043 0220 	orr.w	r2, r3, #32
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2203      	movs	r2, #3
 8002a92:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e086      	b.n	8002bb0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0ac      	beq.n	8002a0a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d061      	beq.n	8002b96 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ad2:	f7ff fbb1 	bl	8002238 <HAL_GetTick>
 8002ad6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002ad8:	e056      	b.n	8002b88 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d02e      	beq.n	8002b4a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afa:	f043 0204 	orr.w	r2, r3, #4
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b10:	f043 0202 	orr.w	r2, r3, #2
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d005      	beq.n	8002b2e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2229      	movs	r2, #41	@ 0x29
 8002b34:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2204      	movs	r2, #4
 8002b3a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e032      	b.n	8002bb0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b50:	d01a      	beq.n	8002b88 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b52:	f7ff fb71 	bl	8002238 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d302      	bcc.n	8002b68 <HAL_DMA2D_PollForTransfer+0x182>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10f      	bne.n	8002b88 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2203      	movs	r2, #3
 8002b78:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e013      	b.n	8002bb0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0a1      	beq.n	8002ada <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2212      	movs	r2, #18
 8002b9c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d026      	beq.n	8002c28 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d021      	beq.n	8002c28 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf8:	f043 0201 	orr.w	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2201      	movs	r2, #1
 8002c06:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0320 	and.w	r3, r3, #32
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d026      	beq.n	8002c80 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d021      	beq.n	8002c80 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c4a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2220      	movs	r2, #32
 8002c52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c58:	f043 0202 	orr.w	r2, r3, #2
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2204      	movs	r2, #4
 8002c64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d026      	beq.n	8002cd8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d021      	beq.n	8002cd8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2208      	movs	r2, #8
 8002caa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb0:	f043 0204 	orr.w	r2, r3, #4
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2204      	movs	r2, #4
 8002cbc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d013      	beq.n	8002d0a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00e      	beq.n	8002d0a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cfa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2204      	movs	r2, #4
 8002d02:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f853 	bl	8002db0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d024      	beq.n	8002d5e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01f      	beq.n	8002d5e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d2c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2202      	movs	r2, #2
 8002d34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d01f      	beq.n	8002da8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d01a      	beq.n	8002da8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d80:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2210      	movs	r2, #16
 8002d88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f80e 	bl	8002dc4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002da8:	bf00      	nop
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_DMA2D_ConfigLayer+0x20>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e079      	b.n	8002eec <HAL_DMA2D_ConfigLayer+0x114>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	3318      	adds	r3, #24
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	041b      	lsls	r3, r3, #16
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002e22:	4b35      	ldr	r3, [pc, #212]	@ (8002ef8 <HAL_DMA2D_ConfigLayer+0x120>)
 8002e24:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b0a      	cmp	r3, #10
 8002e2c:	d003      	beq.n	8002e36 <HAL_DMA2D_ConfigLayer+0x5e>
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b09      	cmp	r3, #9
 8002e34:	d107      	bne.n	8002e46 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	e005      	b.n	8002e52 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	061b      	lsls	r3, r3, #24
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d120      	bne.n	8002e9a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	ea02 0103 	and.w	r1, r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b0a      	cmp	r3, #10
 8002e80:	d003      	beq.n	8002e8a <HAL_DMA2D_ConfigLayer+0xb2>
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b09      	cmp	r3, #9
 8002e88:	d127      	bne.n	8002eda <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002e96:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e98:	e01f      	b.n	8002eda <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69da      	ldr	r2, [r3, #28]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	ea02 0103 	and.w	r1, r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b0a      	cmp	r3, #10
 8002ec2:	d003      	beq.n	8002ecc <HAL_DMA2D_ConfigLayer+0xf4>
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b09      	cmp	r3, #9
 8002eca:	d106      	bne.n	8002eda <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002ed8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	ff03000f 	.word	0xff03000f

08002efc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b08b      	sub	sp, #44	@ 0x2c
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f10:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	041a      	lsls	r2, r3, #16
 8002f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f34:	d174      	bne.n	8003020 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002f3c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002f44:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002f4c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d108      	bne.n	8002f6e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f6c:	e053      	b.n	8003016 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d106      	bne.n	8002f84 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f82:	e048      	b.n	8003016 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d111      	bne.n	8002fb0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	0cdb      	lsrs	r3, r3, #19
 8002f90:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	0a9b      	lsrs	r3, r3, #10
 8002f96:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	08db      	lsrs	r3, r3, #3
 8002f9c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	015a      	lsls	r2, r3, #5
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	02db      	lsls	r3, r3, #11
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fae:	e032      	b.n	8003016 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d117      	bne.n	8002fe8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	0fdb      	lsrs	r3, r3, #31
 8002fbc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	0cdb      	lsrs	r3, r3, #19
 8002fc2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	0adb      	lsrs	r3, r3, #11
 8002fc8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	08db      	lsrs	r3, r3, #3
 8002fce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	029b      	lsls	r3, r3, #10
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	03db      	lsls	r3, r3, #15
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe6:	e016      	b.n	8003016 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	0f1b      	lsrs	r3, r3, #28
 8002fec:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	0d1b      	lsrs	r3, r3, #20
 8002ff2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	0b1b      	lsrs	r3, r3, #12
 8002ff8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	011a      	lsls	r2, r3, #4
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	021b      	lsls	r3, r3, #8
 8003008:	431a      	orrs	r2, r3
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	031b      	lsls	r3, r3, #12
 800300e:	4313      	orrs	r3, r2
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800301c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800301e:	e003      	b.n	8003028 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	60da      	str	r2, [r3, #12]
}
 8003028:	bf00      	nop
 800302a:	372c      	adds	r7, #44	@ 0x2c
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003034:	b480      	push	{r7}
 8003036:	b089      	sub	sp, #36	@ 0x24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	e175      	b.n	8003340 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003054:	2201      	movs	r2, #1
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	429a      	cmp	r2, r3
 800306e:	f040 8164 	bne.w	800333a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b01      	cmp	r3, #1
 800307c:	d005      	beq.n	800308a <HAL_GPIO_Init+0x56>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d130      	bne.n	80030ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	2203      	movs	r2, #3
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030c0:	2201      	movs	r2, #1
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f003 0201 	and.w	r2, r3, #1
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d017      	beq.n	8003128 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	2203      	movs	r2, #3
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d123      	bne.n	800317c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	08da      	lsrs	r2, r3, #3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3208      	adds	r2, #8
 800313c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	220f      	movs	r2, #15
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	08da      	lsrs	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3208      	adds	r2, #8
 8003176:	69b9      	ldr	r1, [r7, #24]
 8003178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	2203      	movs	r2, #3
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0203 	and.w	r2, r3, #3
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80be 	beq.w	800333a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031be:	4b66      	ldr	r3, [pc, #408]	@ (8003358 <HAL_GPIO_Init+0x324>)
 80031c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c2:	4a65      	ldr	r2, [pc, #404]	@ (8003358 <HAL_GPIO_Init+0x324>)
 80031c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ca:	4b63      	ldr	r3, [pc, #396]	@ (8003358 <HAL_GPIO_Init+0x324>)
 80031cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031d6:	4a61      	ldr	r2, [pc, #388]	@ (800335c <HAL_GPIO_Init+0x328>)
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	089b      	lsrs	r3, r3, #2
 80031dc:	3302      	adds	r3, #2
 80031de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	220f      	movs	r2, #15
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4013      	ands	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a58      	ldr	r2, [pc, #352]	@ (8003360 <HAL_GPIO_Init+0x32c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d037      	beq.n	8003272 <HAL_GPIO_Init+0x23e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a57      	ldr	r2, [pc, #348]	@ (8003364 <HAL_GPIO_Init+0x330>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d031      	beq.n	800326e <HAL_GPIO_Init+0x23a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a56      	ldr	r2, [pc, #344]	@ (8003368 <HAL_GPIO_Init+0x334>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d02b      	beq.n	800326a <HAL_GPIO_Init+0x236>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a55      	ldr	r2, [pc, #340]	@ (800336c <HAL_GPIO_Init+0x338>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d025      	beq.n	8003266 <HAL_GPIO_Init+0x232>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a54      	ldr	r2, [pc, #336]	@ (8003370 <HAL_GPIO_Init+0x33c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d01f      	beq.n	8003262 <HAL_GPIO_Init+0x22e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a53      	ldr	r2, [pc, #332]	@ (8003374 <HAL_GPIO_Init+0x340>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d019      	beq.n	800325e <HAL_GPIO_Init+0x22a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a52      	ldr	r2, [pc, #328]	@ (8003378 <HAL_GPIO_Init+0x344>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d013      	beq.n	800325a <HAL_GPIO_Init+0x226>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a51      	ldr	r2, [pc, #324]	@ (800337c <HAL_GPIO_Init+0x348>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00d      	beq.n	8003256 <HAL_GPIO_Init+0x222>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a50      	ldr	r2, [pc, #320]	@ (8003380 <HAL_GPIO_Init+0x34c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d007      	beq.n	8003252 <HAL_GPIO_Init+0x21e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a4f      	ldr	r2, [pc, #316]	@ (8003384 <HAL_GPIO_Init+0x350>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d101      	bne.n	800324e <HAL_GPIO_Init+0x21a>
 800324a:	2309      	movs	r3, #9
 800324c:	e012      	b.n	8003274 <HAL_GPIO_Init+0x240>
 800324e:	230a      	movs	r3, #10
 8003250:	e010      	b.n	8003274 <HAL_GPIO_Init+0x240>
 8003252:	2308      	movs	r3, #8
 8003254:	e00e      	b.n	8003274 <HAL_GPIO_Init+0x240>
 8003256:	2307      	movs	r3, #7
 8003258:	e00c      	b.n	8003274 <HAL_GPIO_Init+0x240>
 800325a:	2306      	movs	r3, #6
 800325c:	e00a      	b.n	8003274 <HAL_GPIO_Init+0x240>
 800325e:	2305      	movs	r3, #5
 8003260:	e008      	b.n	8003274 <HAL_GPIO_Init+0x240>
 8003262:	2304      	movs	r3, #4
 8003264:	e006      	b.n	8003274 <HAL_GPIO_Init+0x240>
 8003266:	2303      	movs	r3, #3
 8003268:	e004      	b.n	8003274 <HAL_GPIO_Init+0x240>
 800326a:	2302      	movs	r3, #2
 800326c:	e002      	b.n	8003274 <HAL_GPIO_Init+0x240>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_GPIO_Init+0x240>
 8003272:	2300      	movs	r3, #0
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	f002 0203 	and.w	r2, r2, #3
 800327a:	0092      	lsls	r2, r2, #2
 800327c:	4093      	lsls	r3, r2
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003284:	4935      	ldr	r1, [pc, #212]	@ (800335c <HAL_GPIO_Init+0x328>)
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	3302      	adds	r3, #2
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003292:	4b3d      	ldr	r3, [pc, #244]	@ (8003388 <HAL_GPIO_Init+0x354>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032b6:	4a34      	ldr	r2, [pc, #208]	@ (8003388 <HAL_GPIO_Init+0x354>)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032bc:	4b32      	ldr	r3, [pc, #200]	@ (8003388 <HAL_GPIO_Init+0x354>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032e0:	4a29      	ldr	r2, [pc, #164]	@ (8003388 <HAL_GPIO_Init+0x354>)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032e6:	4b28      	ldr	r3, [pc, #160]	@ (8003388 <HAL_GPIO_Init+0x354>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800330a:	4a1f      	ldr	r2, [pc, #124]	@ (8003388 <HAL_GPIO_Init+0x354>)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003310:	4b1d      	ldr	r3, [pc, #116]	@ (8003388 <HAL_GPIO_Init+0x354>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003334:	4a14      	ldr	r2, [pc, #80]	@ (8003388 <HAL_GPIO_Init+0x354>)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3301      	adds	r3, #1
 800333e:	61fb      	str	r3, [r7, #28]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	2b0f      	cmp	r3, #15
 8003344:	f67f ae86 	bls.w	8003054 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003348:	bf00      	nop
 800334a:	bf00      	nop
 800334c:	3724      	adds	r7, #36	@ 0x24
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800
 800335c:	40013800 	.word	0x40013800
 8003360:	40020000 	.word	0x40020000
 8003364:	40020400 	.word	0x40020400
 8003368:	40020800 	.word	0x40020800
 800336c:	40020c00 	.word	0x40020c00
 8003370:	40021000 	.word	0x40021000
 8003374:	40021400 	.word	0x40021400
 8003378:	40021800 	.word	0x40021800
 800337c:	40021c00 	.word	0x40021c00
 8003380:	40022000 	.word	0x40022000
 8003384:	40022400 	.word	0x40022400
 8003388:	40013c00 	.word	0x40013c00

0800338c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	807b      	strh	r3, [r7, #2]
 8003398:	4613      	mov	r3, r2
 800339a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800339c:	787b      	ldrb	r3, [r7, #1]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033a2:	887a      	ldrh	r2, [r7, #2]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033a8:	e003      	b.n	80033b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033aa:	887b      	ldrh	r3, [r7, #2]
 80033ac:	041a      	lsls	r2, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	619a      	str	r2, [r3, #24]
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b086      	sub	sp, #24
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f005 f9cd 	bl	8008774 <USB_GetMode>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b01      	cmp	r3, #1
 80033de:	f040 80fb 	bne.w	80035d8 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f005 f990 	bl	800870c <USB_ReadInterrupts>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 80f1 	beq.w	80035d6 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f005 f987 	bl	800870c <USB_ReadInterrupts>
 80033fe:	4603      	mov	r3, r0
 8003400:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003404:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003408:	d104      	bne.n	8003414 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003412:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f005 f977 	bl	800870c <USB_ReadInterrupts>
 800341e:	4603      	mov	r3, r0
 8003420:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003424:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003428:	d104      	bne.n	8003434 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003432:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f005 f967 	bl	800870c <USB_ReadInterrupts>
 800343e:	4603      	mov	r3, r0
 8003440:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003444:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003448:	d104      	bne.n	8003454 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003452:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f005 f957 	bl	800870c <USB_ReadInterrupts>
 800345e:	4603      	mov	r3, r0
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b02      	cmp	r3, #2
 8003466:	d103      	bne.n	8003470 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2202      	movs	r2, #2
 800346e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f005 f949 	bl	800870c <USB_ReadInterrupts>
 800347a:	4603      	mov	r3, r0
 800347c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003484:	d120      	bne.n	80034c8 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800348e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d113      	bne.n	80034c8 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80034a0:	2110      	movs	r1, #16
 80034a2:	6938      	ldr	r0, [r7, #16]
 80034a4:	f005 f87a 	bl	800859c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80034a8:	6938      	ldr	r0, [r7, #16]
 80034aa:	f005 f8a9 	bl	8008600 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	7a5b      	ldrb	r3, [r3, #9]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d105      	bne.n	80034c2 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2101      	movs	r1, #1
 80034bc:	4618      	mov	r0, r3
 80034be:	f005 f967 	bl	8008790 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f006 fd06 	bl	8009ed4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f005 f91d 	bl	800870c <USB_ReadInterrupts>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034dc:	d102      	bne.n	80034e4 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f001 fc87 	bl	8004df2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f005 f90f 	bl	800870c <USB_ReadInterrupts>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d106      	bne.n	8003506 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f006 fccf 	bl	8009e9c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2208      	movs	r2, #8
 8003504:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f005 f8fe 	bl	800870c <USB_ReadInterrupts>
 8003510:	4603      	mov	r3, r0
 8003512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003516:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800351a:	d139      	bne.n	8003590 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f005 f972 	bl	800880a <USB_HC_ReadInterrupt>
 8003526:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	e025      	b.n	800357a <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	fa22 f303 	lsr.w	r3, r2, r3
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d018      	beq.n	8003574 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4413      	add	r3, r2
 800354a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003554:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003558:	d106      	bne.n	8003568 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	4619      	mov	r1, r3
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f859 	bl	8003618 <HCD_HC_IN_IRQHandler>
 8003566:	e005      	b.n	8003574 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 febb 	bl	80042ea <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	3301      	adds	r3, #1
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	795b      	ldrb	r3, [r3, #5]
 800357e:	461a      	mov	r2, r3
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	4293      	cmp	r3, r2
 8003584:	d3d3      	bcc.n	800352e <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800358e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f005 f8b9 	bl	800870c <USB_ReadInterrupts>
 800359a:	4603      	mov	r3, r0
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	2b10      	cmp	r3, #16
 80035a2:	d101      	bne.n	80035a8 <HAL_HCD_IRQHandler+0x1ea>
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <HAL_HCD_IRQHandler+0x1ec>
 80035a8:	2300      	movs	r3, #0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d014      	beq.n	80035d8 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699a      	ldr	r2, [r3, #24]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0210 	bic.w	r2, r2, #16
 80035bc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f001 fb38 	bl	8004c34 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0210 	orr.w	r2, r2, #16
 80035d2:	619a      	str	r2, [r3, #24]
 80035d4:	e000      	b.n	80035d8 <HAL_HCD_IRQHandler+0x21a>
      return;
 80035d6:	bf00      	nop
    }
  }
}
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_HCD_Stop+0x16>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e00d      	b.n	8003610 <HAL_HCD_Stop+0x32>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f005 fa33 	bl	8008a6c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	4611      	mov	r1, r2
 8003636:	4618      	mov	r0, r3
 8003638:	f005 f87b 	bl	8008732 <USB_ReadChInterrupts>
 800363c:	4603      	mov	r3, r0
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b04      	cmp	r3, #4
 8003644:	d11a      	bne.n	800367c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003646:	78fb      	ldrb	r3, [r7, #3]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003652:	461a      	mov	r2, r3
 8003654:	2304      	movs	r3, #4
 8003656:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	334d      	adds	r3, #77	@ 0x4d
 8003668:	2207      	movs	r2, #7
 800366a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f005 f8d9 	bl	800882c <USB_HC_Halt>
 800367a:	e09e      	b.n	80037ba <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f005 f854 	bl	8008732 <USB_ReadChInterrupts>
 800368a:	4603      	mov	r3, r0
 800368c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003694:	d11b      	bne.n	80036ce <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036a2:	461a      	mov	r2, r3
 80036a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	334d      	adds	r3, #77	@ 0x4d
 80036ba:	2208      	movs	r2, #8
 80036bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	78fa      	ldrb	r2, [r7, #3]
 80036c4:	4611      	mov	r1, r2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f005 f8b0 	bl	800882c <USB_HC_Halt>
 80036cc:	e075      	b.n	80037ba <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	4611      	mov	r1, r2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f005 f82b 	bl	8008732 <USB_ReadChInterrupts>
 80036dc:	4603      	mov	r3, r0
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d11a      	bne.n	800371c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036f2:	461a      	mov	r2, r3
 80036f4:	2308      	movs	r3, #8
 80036f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80036f8:	78fa      	ldrb	r2, [r7, #3]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	334d      	adds	r3, #77	@ 0x4d
 8003708:	2206      	movs	r2, #6
 800370a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f005 f889 	bl	800882c <USB_HC_Halt>
 800371a:	e04e      	b.n	80037ba <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f005 f804 	bl	8008732 <USB_ReadChInterrupts>
 800372a:	4603      	mov	r3, r0
 800372c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003734:	d11b      	bne.n	800376e <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003736:	78fb      	ldrb	r3, [r7, #3]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4413      	add	r3, r2
 800373e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003742:	461a      	mov	r2, r3
 8003744:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003748:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	334d      	adds	r3, #77	@ 0x4d
 800375a:	2209      	movs	r2, #9
 800375c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	4611      	mov	r1, r2
 8003766:	4618      	mov	r0, r3
 8003768:	f005 f860 	bl	800882c <USB_HC_Halt>
 800376c:	e025      	b.n	80037ba <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	4611      	mov	r1, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f004 ffdb 	bl	8008732 <USB_ReadChInterrupts>
 800377c:	4603      	mov	r3, r0
 800377e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003782:	2b80      	cmp	r3, #128	@ 0x80
 8003784:	d119      	bne.n	80037ba <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003786:	78fb      	ldrb	r3, [r7, #3]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4413      	add	r3, r2
 800378e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003792:	461a      	mov	r2, r3
 8003794:	2380      	movs	r3, #128	@ 0x80
 8003796:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	334d      	adds	r3, #77	@ 0x4d
 80037a8:	2207      	movs	r2, #7
 80037aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	4611      	mov	r1, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f005 f839 	bl	800882c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f004 ffb5 	bl	8008732 <USB_ReadChInterrupts>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037d2:	d112      	bne.n	80037fa <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	78fa      	ldrb	r2, [r7, #3]
 80037da:	4611      	mov	r1, r2
 80037dc:	4618      	mov	r0, r3
 80037de:	f005 f825 	bl	800882c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ee:	461a      	mov	r2, r3
 80037f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037f4:	6093      	str	r3, [r2, #8]
 80037f6:	f000 bd75 	b.w	80042e4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	4611      	mov	r1, r2
 8003802:	4618      	mov	r0, r3
 8003804:	f004 ff95 	bl	8008732 <USB_ReadChInterrupts>
 8003808:	4603      	mov	r3, r0
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b01      	cmp	r3, #1
 8003810:	f040 8128 	bne.w	8003a64 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003820:	461a      	mov	r2, r3
 8003822:	2320      	movs	r3, #32
 8003824:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	331b      	adds	r3, #27
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d119      	bne.n	8003870 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800383c:	78fa      	ldrb	r2, [r7, #3]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	331b      	adds	r3, #27
 800384c:	2200      	movs	r2, #0
 800384e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	4413      	add	r3, r2
 8003858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	0151      	lsls	r1, r2, #5
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	440a      	add	r2, r1
 8003866:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800386a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800386e:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	799b      	ldrb	r3, [r3, #6]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01b      	beq.n	80038b0 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	3330      	adds	r3, #48	@ 0x30
 8003888:	6819      	ldr	r1, [r3, #0]
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4413      	add	r3, r2
 8003892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	1ac9      	subs	r1, r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4403      	add	r3, r0
 80038ac:	3338      	adds	r3, #56	@ 0x38
 80038ae:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	334d      	adds	r3, #77	@ 0x4d
 80038c0:	2201      	movs	r2, #1
 80038c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	3344      	adds	r3, #68	@ 0x44
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038e4:	461a      	mov	r2, r3
 80038e6:	2301      	movs	r3, #1
 80038e8:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	3326      	adds	r3, #38	@ 0x26
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003900:	78fa      	ldrb	r2, [r7, #3]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	3326      	adds	r3, #38	@ 0x26
 8003910:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003912:	2b02      	cmp	r3, #2
 8003914:	d110      	bne.n	8003938 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f004 ff84 	bl	800882c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003930:	461a      	mov	r2, r3
 8003932:	2310      	movs	r3, #16
 8003934:	6093      	str	r3, [r2, #8]
 8003936:	e03d      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	3326      	adds	r3, #38	@ 0x26
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b03      	cmp	r3, #3
 800394c:	d00a      	beq.n	8003964 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	3326      	adds	r3, #38	@ 0x26
 800395e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003960:	2b01      	cmp	r3, #1
 8003962:	d127      	bne.n	80039b4 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4413      	add	r3, r2
 800396c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	78fa      	ldrb	r2, [r7, #3]
 8003974:	0151      	lsls	r1, r2, #5
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	440a      	add	r2, r1
 800397a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800397e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003982:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003984:	78fa      	ldrb	r2, [r7, #3]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	334c      	adds	r3, #76	@ 0x4c
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	334c      	adds	r3, #76	@ 0x4c
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	4619      	mov	r1, r3
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f006 fa9e 	bl	8009ef0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	799b      	ldrb	r3, [r3, #6]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d13b      	bne.n	8003a34 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	3338      	adds	r3, #56	@ 0x38
 80039cc:	6819      	ldr	r1, [r3, #0]
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4403      	add	r3, r0
 80039dc:	3328      	adds	r3, #40	@ 0x28
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	440b      	add	r3, r1
 80039e2:	1e59      	subs	r1, r3, #1
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	1a9b      	subs	r3, r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4403      	add	r3, r0
 80039f2:	3328      	adds	r3, #40	@ 0x28
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 8470 	beq.w	80042e4 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003a04:	78fa      	ldrb	r2, [r7, #3]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	333c      	adds	r3, #60	@ 0x3c
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	f083 0301 	eor.w	r3, r3, #1
 8003a1c:	b2d8      	uxtb	r0, r3
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	333c      	adds	r3, #60	@ 0x3c
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	701a      	strb	r2, [r3, #0]
 8003a30:	f000 bc58 	b.w	80042e4 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	333c      	adds	r3, #60	@ 0x3c
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	f083 0301 	eor.w	r3, r3, #1
 8003a4c:	b2d8      	uxtb	r0, r3
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	333c      	adds	r3, #60	@ 0x3c
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	701a      	strb	r2, [r3, #0]
 8003a60:	f000 bc40 	b.w	80042e4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f004 fe60 	bl	8008732 <USB_ReadChInterrupts>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d131      	bne.n	8003ae0 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2320      	movs	r3, #32
 8003a8c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	331a      	adds	r3, #26
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	f040 841f 	bne.w	80042e4 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	331b      	adds	r3, #27
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	334d      	adds	r3, #77	@ 0x4d
 8003aca:	2203      	movs	r2, #3
 8003acc:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f004 fea8 	bl	800882c <USB_HC_Halt>
 8003adc:	f000 bc02 	b.w	80042e4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f004 fe22 	bl	8008732 <USB_ReadChInterrupts>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	f040 8305 	bne.w	8004104 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b06:	461a      	mov	r2, r3
 8003b08:	2302      	movs	r3, #2
 8003b0a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	334d      	adds	r3, #77	@ 0x4d
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d114      	bne.n	8003b4c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	334d      	adds	r3, #77	@ 0x4d
 8003b32:	2202      	movs	r2, #2
 8003b34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	334c      	adds	r3, #76	@ 0x4c
 8003b46:	2201      	movs	r2, #1
 8003b48:	701a      	strb	r2, [r3, #0]
 8003b4a:	e2cc      	b.n	80040e6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	334d      	adds	r3, #77	@ 0x4d
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d114      	bne.n	8003b8c <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	4613      	mov	r3, r2
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	1a9b      	subs	r3, r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	334d      	adds	r3, #77	@ 0x4d
 8003b72:	2202      	movs	r2, #2
 8003b74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	334c      	adds	r3, #76	@ 0x4c
 8003b86:	2205      	movs	r2, #5
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	e2ac      	b.n	80040e6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003b8c:	78fa      	ldrb	r2, [r7, #3]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	334d      	adds	r3, #77	@ 0x4d
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b07      	cmp	r3, #7
 8003ba0:	d00b      	beq.n	8003bba <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	334d      	adds	r3, #77	@ 0x4d
 8003bb2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003bb4:	2b09      	cmp	r3, #9
 8003bb6:	f040 80a6 	bne.w	8003d06 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	334d      	adds	r3, #77	@ 0x4d
 8003bca:	2202      	movs	r2, #2
 8003bcc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	3344      	adds	r3, #68	@ 0x44
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	1c59      	adds	r1, r3, #1
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4403      	add	r3, r0
 8003bee:	3344      	adds	r3, #68	@ 0x44
 8003bf0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	3344      	adds	r3, #68	@ 0x44
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d943      	bls.n	8003c90 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003c08:	78fa      	ldrb	r2, [r7, #3]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	3344      	adds	r3, #68	@ 0x44
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003c1c:	78fa      	ldrb	r2, [r7, #3]
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	331a      	adds	r3, #26
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d123      	bne.n	8003c7a <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	331b      	adds	r3, #27
 8003c42:	2200      	movs	r2, #0
 8003c44:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	440b      	add	r3, r1
 8003c54:	331c      	adds	r3, #28
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	0151      	lsls	r1, r2, #5
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	440a      	add	r2, r1
 8003c70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c78:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	334c      	adds	r3, #76	@ 0x4c
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c8e:	e229      	b.n	80040e4 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	334c      	adds	r3, #76	@ 0x4c
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	3326      	adds	r3, #38	@ 0x26
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3326      	adds	r3, #38	@ 0x26
 8003cca:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	f040 8209 	bne.w	80040e4 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ce8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cf0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d04:	e1ee      	b.n	80040e4 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003d06:	78fa      	ldrb	r2, [r7, #3]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	334d      	adds	r3, #77	@ 0x4d
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b05      	cmp	r3, #5
 8003d1a:	f040 80c8 	bne.w	8003eae <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d1e:	78fa      	ldrb	r2, [r7, #3]
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	334d      	adds	r3, #77	@ 0x4d
 8003d2e:	2202      	movs	r2, #2
 8003d30:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	331b      	adds	r3, #27
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	f040 81ce 	bne.w	80040e6 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003d4a:	78fa      	ldrb	r2, [r7, #3]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	3326      	adds	r3, #38	@ 0x26
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d16b      	bne.n	8003e38 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003d60:	78fa      	ldrb	r2, [r7, #3]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	3348      	adds	r3, #72	@ 0x48
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	1c59      	adds	r1, r3, #1
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4403      	add	r3, r0
 8003d80:	3348      	adds	r3, #72	@ 0x48
 8003d82:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	3348      	adds	r3, #72	@ 0x48
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d943      	bls.n	8003e22 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	3348      	adds	r3, #72	@ 0x48
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	440b      	add	r3, r1
 8003dbc:	331b      	adds	r3, #27
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003dc2:	78fa      	ldrb	r2, [r7, #3]
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	1a9b      	subs	r3, r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	3344      	adds	r3, #68	@ 0x44
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d809      	bhi.n	8003dec <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003dd8:	78fa      	ldrb	r2, [r7, #3]
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	1a9b      	subs	r3, r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	331c      	adds	r3, #28
 8003de8:	2201      	movs	r2, #1
 8003dea:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	0151      	lsls	r1, r2, #5
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	440a      	add	r2, r1
 8003e02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e0a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e0c:	78fa      	ldrb	r2, [r7, #3]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	334c      	adds	r3, #76	@ 0x4c
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	e014      	b.n	8003e4c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	334c      	adds	r3, #76	@ 0x4c
 8003e32:	2202      	movs	r2, #2
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	e009      	b.n	8003e4c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	334c      	adds	r3, #76	@ 0x4c
 8003e48:	2202      	movs	r2, #2
 8003e4a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e4c:	78fa      	ldrb	r2, [r7, #3]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	3326      	adds	r3, #38	@ 0x26
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00b      	beq.n	8003e7a <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	1a9b      	subs	r3, r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	3326      	adds	r3, #38	@ 0x26
 8003e72:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	f040 8136 	bne.w	80040e6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e90:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e98:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e9a:	78fb      	ldrb	r3, [r7, #3]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	e11b      	b.n	80040e6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003eae:	78fa      	ldrb	r2, [r7, #3]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	334d      	adds	r3, #77	@ 0x4d
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	f040 8081 	bne.w	8003fc8 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	334d      	adds	r3, #77	@ 0x4d
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	331b      	adds	r3, #27
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	f040 80fa 	bne.w	80040e6 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	334c      	adds	r3, #76	@ 0x4c
 8003f02:	2202      	movs	r2, #2
 8003f04:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	0151      	lsls	r1, r2, #5
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	440a      	add	r2, r1
 8003f1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f24:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	78fa      	ldrb	r2, [r7, #3]
 8003f36:	0151      	lsls	r1, r2, #5
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	440a      	add	r2, r1
 8003f3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f44:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	78fa      	ldrb	r2, [r7, #3]
 8003f56:	0151      	lsls	r1, r2, #5
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	440a      	add	r2, r1
 8003f5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f60:	f023 0320 	bic.w	r3, r3, #32
 8003f64:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f66:	78fa      	ldrb	r2, [r7, #3]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	1a9b      	subs	r3, r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	3326      	adds	r3, #38	@ 0x26
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00b      	beq.n	8003f94 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f7c:	78fa      	ldrb	r2, [r7, #3]
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	3326      	adds	r3, #38	@ 0x26
 8003f8c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	f040 80a9 	bne.w	80040e6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003faa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fb2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e08e      	b.n	80040e6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003fc8:	78fa      	ldrb	r2, [r7, #3]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	334d      	adds	r3, #77	@ 0x4d
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d143      	bne.n	8004066 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fde:	78fa      	ldrb	r2, [r7, #3]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	334d      	adds	r3, #77	@ 0x4d
 8003fee:	2202      	movs	r2, #2
 8003ff0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	1a9b      	subs	r3, r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	334c      	adds	r3, #76	@ 0x4c
 8004002:	2202      	movs	r2, #2
 8004004:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004006:	78fa      	ldrb	r2, [r7, #3]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	3326      	adds	r3, #38	@ 0x26
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800401c:	78fa      	ldrb	r2, [r7, #3]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	3326      	adds	r3, #38	@ 0x26
 800402c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800402e:	2b02      	cmp	r3, #2
 8004030:	d159      	bne.n	80040e6 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4413      	add	r3, r2
 800403a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004048:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004050:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004052:	78fb      	ldrb	r3, [r7, #3]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4413      	add	r3, r2
 800405a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800405e:	461a      	mov	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	e03f      	b.n	80040e6 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004066:	78fa      	ldrb	r2, [r7, #3]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	334d      	adds	r3, #77	@ 0x4d
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b08      	cmp	r3, #8
 800407a:	d126      	bne.n	80040ca <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	334d      	adds	r3, #77	@ 0x4d
 800408c:	2202      	movs	r2, #2
 800408e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004090:	78fa      	ldrb	r2, [r7, #3]
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	3344      	adds	r3, #68	@ 0x44
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	1c59      	adds	r1, r3, #1
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4403      	add	r3, r0
 80040b0:	3344      	adds	r3, #68	@ 0x44
 80040b2:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80040b4:	78fa      	ldrb	r2, [r7, #3]
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	4613      	mov	r3, r2
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	1a9b      	subs	r3, r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	334c      	adds	r3, #76	@ 0x4c
 80040c4:	2204      	movs	r2, #4
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	e00d      	b.n	80040e6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80040ca:	78fa      	ldrb	r2, [r7, #3]
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	334d      	adds	r3, #77	@ 0x4d
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	f000 8100 	beq.w	80042e2 <HCD_HC_IN_IRQHandler+0xcca>
 80040e2:	e000      	b.n	80040e6 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80040e4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80040e6:	78fa      	ldrb	r2, [r7, #3]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	334c      	adds	r3, #76	@ 0x4c
 80040f6:	781a      	ldrb	r2, [r3, #0]
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	4619      	mov	r1, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f005 fef7 	bl	8009ef0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004102:	e0ef      	b.n	80042e4 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	78fa      	ldrb	r2, [r7, #3]
 800410a:	4611      	mov	r1, r2
 800410c:	4618      	mov	r0, r3
 800410e:	f004 fb10 	bl	8008732 <USB_ReadChInterrupts>
 8004112:	4603      	mov	r3, r0
 8004114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004118:	2b40      	cmp	r3, #64	@ 0x40
 800411a:	d12f      	bne.n	800417c <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	4413      	add	r3, r2
 8004124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004128:	461a      	mov	r2, r3
 800412a:	2340      	movs	r3, #64	@ 0x40
 800412c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	334d      	adds	r3, #77	@ 0x4d
 800413e:	2205      	movs	r2, #5
 8004140:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	331a      	adds	r3, #26
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	3344      	adds	r3, #68	@ 0x44
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f004 fb59 	bl	800882c <USB_HC_Halt>
 800417a:	e0b3      	b.n	80042e4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f004 fad4 	bl	8008732 <USB_ReadChInterrupts>
 800418a:	4603      	mov	r3, r0
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b10      	cmp	r3, #16
 8004192:	f040 80a7 	bne.w	80042e4 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	3326      	adds	r3, #38	@ 0x26
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d11b      	bne.n	80041e4 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	4613      	mov	r3, r2
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	1a9b      	subs	r3, r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	3344      	adds	r3, #68	@ 0x44
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	334d      	adds	r3, #77	@ 0x4d
 80041d0:	2204      	movs	r2, #4
 80041d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	4611      	mov	r1, r2
 80041dc:	4618      	mov	r0, r3
 80041de:	f004 fb25 	bl	800882c <USB_HC_Halt>
 80041e2:	e03f      	b.n	8004264 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041e4:	78fa      	ldrb	r2, [r7, #3]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	3326      	adds	r3, #38	@ 0x26
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	3326      	adds	r3, #38	@ 0x26
 800420a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800420c:	2b02      	cmp	r3, #2
 800420e:	d129      	bne.n	8004264 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004210:	78fa      	ldrb	r2, [r7, #3]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	3344      	adds	r3, #68	@ 0x44
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	799b      	ldrb	r3, [r3, #6]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <HCD_HC_IN_IRQHandler+0xc2a>
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	331b      	adds	r3, #27
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d110      	bne.n	8004264 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004242:	78fa      	ldrb	r2, [r7, #3]
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	334d      	adds	r3, #77	@ 0x4d
 8004252:	2204      	movs	r2, #4
 8004254:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	4611      	mov	r1, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f004 fae4 	bl	800882c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004264:	78fa      	ldrb	r2, [r7, #3]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	331b      	adds	r3, #27
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d129      	bne.n	80042ce <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	1a9b      	subs	r3, r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	331b      	adds	r3, #27
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4413      	add	r3, r2
 8004296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	78fa      	ldrb	r2, [r7, #3]
 800429e:	0151      	lsls	r1, r2, #5
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	440a      	add	r2, r1
 80042a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ac:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	0151      	lsls	r1, r2, #5
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	440a      	add	r2, r1
 80042c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042c8:	f043 0320 	orr.w	r3, r3, #32
 80042cc:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042da:	461a      	mov	r2, r3
 80042dc:	2310      	movs	r3, #16
 80042de:	6093      	str	r3, [r2, #8]
 80042e0:	e000      	b.n	80042e4 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80042e2:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b086      	sub	sp, #24
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	460b      	mov	r3, r1
 80042f4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	78fa      	ldrb	r2, [r7, #3]
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f004 fa12 	bl	8008732 <USB_ReadChInterrupts>
 800430e:	4603      	mov	r3, r0
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b04      	cmp	r3, #4
 8004316:	d11b      	bne.n	8004350 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4413      	add	r3, r2
 8004320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004324:	461a      	mov	r2, r3
 8004326:	2304      	movs	r3, #4
 8004328:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800432a:	78fa      	ldrb	r2, [r7, #3]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	334d      	adds	r3, #77	@ 0x4d
 800433a:	2207      	movs	r2, #7
 800433c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	78fa      	ldrb	r2, [r7, #3]
 8004344:	4611      	mov	r1, r2
 8004346:	4618      	mov	r0, r3
 8004348:	f004 fa70 	bl	800882c <USB_HC_Halt>
 800434c:	f000 bc6f 	b.w	8004c2e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	78fa      	ldrb	r2, [r7, #3]
 8004356:	4611      	mov	r1, r2
 8004358:	4618      	mov	r0, r3
 800435a:	f004 f9ea 	bl	8008732 <USB_ReadChInterrupts>
 800435e:	4603      	mov	r3, r0
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b20      	cmp	r3, #32
 8004366:	f040 8082 	bne.w	800446e <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800436a:	78fb      	ldrb	r3, [r7, #3]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4413      	add	r3, r2
 8004372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004376:	461a      	mov	r2, r3
 8004378:	2320      	movs	r3, #32
 800437a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	1a9b      	subs	r3, r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	3319      	adds	r3, #25
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d124      	bne.n	80043dc <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004392:	78fa      	ldrb	r2, [r7, #3]
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	3319      	adds	r3, #25
 80043a2:	2200      	movs	r2, #0
 80043a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	334c      	adds	r3, #76	@ 0x4c
 80043b6:	2202      	movs	r2, #2
 80043b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	1a9b      	subs	r3, r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	334d      	adds	r3, #77	@ 0x4d
 80043ca:	2203      	movs	r2, #3
 80043cc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	78fa      	ldrb	r2, [r7, #3]
 80043d4:	4611      	mov	r1, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f004 fa28 	bl	800882c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	331a      	adds	r3, #26
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	f040 841d 	bne.w	8004c2e <HCD_HC_OUT_IRQHandler+0x944>
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	331b      	adds	r3, #27
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	f040 8411 	bne.w	8004c2e <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800440c:	78fa      	ldrb	r2, [r7, #3]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	3326      	adds	r3, #38	@ 0x26
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d009      	beq.n	8004436 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004422:	78fa      	ldrb	r2, [r7, #3]
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	331b      	adds	r3, #27
 8004432:	2201      	movs	r2, #1
 8004434:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004436:	78fa      	ldrb	r2, [r7, #3]
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	334d      	adds	r3, #77	@ 0x4d
 8004446:	2203      	movs	r2, #3
 8004448:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	78fa      	ldrb	r2, [r7, #3]
 8004450:	4611      	mov	r1, r2
 8004452:	4618      	mov	r0, r3
 8004454:	f004 f9ea 	bl	800882c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	3344      	adds	r3, #68	@ 0x44
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	e3df      	b.n	8004c2e <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	78fa      	ldrb	r2, [r7, #3]
 8004474:	4611      	mov	r1, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f004 f95b 	bl	8008732 <USB_ReadChInterrupts>
 800447c:	4603      	mov	r3, r0
 800447e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004486:	d111      	bne.n	80044ac <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	4413      	add	r3, r2
 8004490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004494:	461a      	mov	r2, r3
 8004496:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800449a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	78fa      	ldrb	r2, [r7, #3]
 80044a2:	4611      	mov	r1, r2
 80044a4:	4618      	mov	r0, r3
 80044a6:	f004 f9c1 	bl	800882c <USB_HC_Halt>
 80044aa:	e3c0      	b.n	8004c2e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	78fa      	ldrb	r2, [r7, #3]
 80044b2:	4611      	mov	r1, r2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f004 f93c 	bl	8008732 <USB_ReadChInterrupts>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d168      	bne.n	8004596 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	3344      	adds	r3, #68	@ 0x44
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	4611      	mov	r1, r2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f004 f926 	bl	8008732 <USB_ReadChInterrupts>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ec:	2b40      	cmp	r3, #64	@ 0x40
 80044ee:	d112      	bne.n	8004516 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80044f0:	78fa      	ldrb	r2, [r7, #3]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	3319      	adds	r3, #25
 8004500:	2201      	movs	r2, #1
 8004502:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	4413      	add	r3, r2
 800450c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004510:	461a      	mov	r2, r3
 8004512:	2340      	movs	r3, #64	@ 0x40
 8004514:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	331b      	adds	r3, #27
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d019      	beq.n	8004560 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800452c:	78fa      	ldrb	r2, [r7, #3]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	331b      	adds	r3, #27
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4413      	add	r3, r2
 8004548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	0151      	lsls	r1, r2, #5
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	440a      	add	r2, r1
 8004556:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800455a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800455e:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4413      	add	r3, r2
 8004568:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800456c:	461a      	mov	r2, r3
 800456e:	2301      	movs	r3, #1
 8004570:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004572:	78fa      	ldrb	r2, [r7, #3]
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	334d      	adds	r3, #77	@ 0x4d
 8004582:	2201      	movs	r2, #1
 8004584:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	78fa      	ldrb	r2, [r7, #3]
 800458c:	4611      	mov	r1, r2
 800458e:	4618      	mov	r0, r3
 8004590:	f004 f94c 	bl	800882c <USB_HC_Halt>
 8004594:	e34b      	b.n	8004c2e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	78fa      	ldrb	r2, [r7, #3]
 800459c:	4611      	mov	r1, r2
 800459e:	4618      	mov	r0, r3
 80045a0:	f004 f8c7 	bl	8008732 <USB_ReadChInterrupts>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045aa:	2b40      	cmp	r3, #64	@ 0x40
 80045ac:	d139      	bne.n	8004622 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80045ae:	78fa      	ldrb	r2, [r7, #3]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	1a9b      	subs	r3, r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	440b      	add	r3, r1
 80045bc:	334d      	adds	r3, #77	@ 0x4d
 80045be:	2205      	movs	r2, #5
 80045c0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80045c2:	78fa      	ldrb	r2, [r7, #3]
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	1a9b      	subs	r3, r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	440b      	add	r3, r1
 80045d0:	331a      	adds	r3, #26
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d109      	bne.n	80045ec <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80045d8:	78fa      	ldrb	r2, [r7, #3]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	3319      	adds	r3, #25
 80045e8:	2201      	movs	r2, #1
 80045ea:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80045ec:	78fa      	ldrb	r2, [r7, #3]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	3344      	adds	r3, #68	@ 0x44
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	78fa      	ldrb	r2, [r7, #3]
 8004606:	4611      	mov	r1, r2
 8004608:	4618      	mov	r0, r3
 800460a:	f004 f90f 	bl	800882c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	4413      	add	r3, r2
 8004616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800461a:	461a      	mov	r2, r3
 800461c:	2340      	movs	r3, #64	@ 0x40
 800461e:	6093      	str	r3, [r2, #8]
 8004620:	e305      	b.n	8004c2e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	78fa      	ldrb	r2, [r7, #3]
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f004 f881 	bl	8008732 <USB_ReadChInterrupts>
 8004630:	4603      	mov	r3, r0
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b08      	cmp	r3, #8
 8004638:	d11a      	bne.n	8004670 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	4413      	add	r3, r2
 8004642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004646:	461a      	mov	r2, r3
 8004648:	2308      	movs	r3, #8
 800464a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800464c:	78fa      	ldrb	r2, [r7, #3]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	334d      	adds	r3, #77	@ 0x4d
 800465c:	2206      	movs	r2, #6
 800465e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	78fa      	ldrb	r2, [r7, #3]
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f004 f8df 	bl	800882c <USB_HC_Halt>
 800466e:	e2de      	b.n	8004c2e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	78fa      	ldrb	r2, [r7, #3]
 8004676:	4611      	mov	r1, r2
 8004678:	4618      	mov	r0, r3
 800467a:	f004 f85a 	bl	8008732 <USB_ReadChInterrupts>
 800467e:	4603      	mov	r3, r0
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b10      	cmp	r3, #16
 8004686:	d144      	bne.n	8004712 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	3344      	adds	r3, #68	@ 0x44
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800469c:	78fa      	ldrb	r2, [r7, #3]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	334d      	adds	r3, #77	@ 0x4d
 80046ac:	2204      	movs	r2, #4
 80046ae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80046b0:	78fa      	ldrb	r2, [r7, #3]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	3319      	adds	r3, #25
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d114      	bne.n	80046f0 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	3318      	adds	r3, #24
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80046dc:	78fa      	ldrb	r2, [r7, #3]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	3319      	adds	r3, #25
 80046ec:	2201      	movs	r2, #1
 80046ee:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	78fa      	ldrb	r2, [r7, #3]
 80046f6:	4611      	mov	r1, r2
 80046f8:	4618      	mov	r0, r3
 80046fa:	f004 f897 	bl	800882c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4413      	add	r3, r2
 8004706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800470a:	461a      	mov	r2, r3
 800470c:	2310      	movs	r3, #16
 800470e:	6093      	str	r3, [r2, #8]
 8004710:	e28d      	b.n	8004c2e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	4611      	mov	r1, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f004 f809 	bl	8008732 <USB_ReadChInterrupts>
 8004720:	4603      	mov	r3, r0
 8004722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004726:	2b80      	cmp	r3, #128	@ 0x80
 8004728:	d169      	bne.n	80047fe <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	799b      	ldrb	r3, [r3, #6]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d111      	bne.n	8004756 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004732:	78fa      	ldrb	r2, [r7, #3]
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	1a9b      	subs	r3, r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	334d      	adds	r3, #77	@ 0x4d
 8004742:	2207      	movs	r2, #7
 8004744:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	78fa      	ldrb	r2, [r7, #3]
 800474c:	4611      	mov	r1, r2
 800474e:	4618      	mov	r0, r3
 8004750:	f004 f86c 	bl	800882c <USB_HC_Halt>
 8004754:	e049      	b.n	80047ea <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	1a9b      	subs	r3, r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	3344      	adds	r3, #68	@ 0x44
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	1c59      	adds	r1, r3, #1
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4403      	add	r3, r0
 8004776:	3344      	adds	r3, #68	@ 0x44
 8004778:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	3344      	adds	r3, #68	@ 0x44
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d922      	bls.n	80047d6 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004790:	78fa      	ldrb	r2, [r7, #3]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	3344      	adds	r3, #68	@ 0x44
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80047a4:	78fa      	ldrb	r2, [r7, #3]
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	334c      	adds	r3, #76	@ 0x4c
 80047b4:	2204      	movs	r2, #4
 80047b6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80047b8:	78fa      	ldrb	r2, [r7, #3]
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	334c      	adds	r3, #76	@ 0x4c
 80047c8:	781a      	ldrb	r2, [r3, #0]
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	4619      	mov	r1, r3
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f005 fb8e 	bl	8009ef0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80047d4:	e009      	b.n	80047ea <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047d6:	78fa      	ldrb	r2, [r7, #3]
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	334c      	adds	r3, #76	@ 0x4c
 80047e6:	2202      	movs	r2, #2
 80047e8:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80047ea:	78fb      	ldrb	r3, [r7, #3]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047f6:	461a      	mov	r2, r3
 80047f8:	2380      	movs	r3, #128	@ 0x80
 80047fa:	6093      	str	r3, [r2, #8]
 80047fc:	e217      	b.n	8004c2e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	78fa      	ldrb	r2, [r7, #3]
 8004804:	4611      	mov	r1, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f003 ff93 	bl	8008732 <USB_ReadChInterrupts>
 800480c:	4603      	mov	r3, r0
 800480e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004816:	d11b      	bne.n	8004850 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004818:	78fa      	ldrb	r2, [r7, #3]
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	4613      	mov	r3, r2
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	334d      	adds	r3, #77	@ 0x4d
 8004828:	2209      	movs	r2, #9
 800482a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	78fa      	ldrb	r2, [r7, #3]
 8004832:	4611      	mov	r1, r2
 8004834:	4618      	mov	r0, r3
 8004836:	f003 fff9 	bl	800882c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800483a:	78fb      	ldrb	r3, [r7, #3]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	4413      	add	r3, r2
 8004842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004846:	461a      	mov	r2, r3
 8004848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800484c:	6093      	str	r3, [r2, #8]
 800484e:	e1ee      	b.n	8004c2e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	78fa      	ldrb	r2, [r7, #3]
 8004856:	4611      	mov	r1, r2
 8004858:	4618      	mov	r0, r3
 800485a:	f003 ff6a 	bl	8008732 <USB_ReadChInterrupts>
 800485e:	4603      	mov	r3, r0
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b02      	cmp	r3, #2
 8004866:	f040 81df 	bne.w	8004c28 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800486a:	78fb      	ldrb	r3, [r7, #3]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4413      	add	r3, r2
 8004872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004876:	461a      	mov	r2, r3
 8004878:	2302      	movs	r3, #2
 800487a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800487c:	78fa      	ldrb	r2, [r7, #3]
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	334d      	adds	r3, #77	@ 0x4d
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b01      	cmp	r3, #1
 8004890:	f040 8093 	bne.w	80049ba <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004894:	78fa      	ldrb	r2, [r7, #3]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	334d      	adds	r3, #77	@ 0x4d
 80048a4:	2202      	movs	r2, #2
 80048a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	334c      	adds	r3, #76	@ 0x4c
 80048b8:	2201      	movs	r2, #1
 80048ba:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	3326      	adds	r3, #38	@ 0x26
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d00b      	beq.n	80048ea <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	3326      	adds	r3, #38	@ 0x26
 80048e2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	f040 8190 	bne.w	8004c0a <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	799b      	ldrb	r3, [r3, #6]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d115      	bne.n	800491e <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	333d      	adds	r3, #61	@ 0x3d
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	78fa      	ldrb	r2, [r7, #3]
 8004906:	f083 0301 	eor.w	r3, r3, #1
 800490a:	b2d8      	uxtb	r0, r3
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	333d      	adds	r3, #61	@ 0x3d
 800491a:	4602      	mov	r2, r0
 800491c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	799b      	ldrb	r3, [r3, #6]
 8004922:	2b01      	cmp	r3, #1
 8004924:	f040 8171 	bne.w	8004c0a <HCD_HC_OUT_IRQHandler+0x920>
 8004928:	78fa      	ldrb	r2, [r7, #3]
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	1a9b      	subs	r3, r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	3334      	adds	r3, #52	@ 0x34
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8165 	beq.w	8004c0a <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004940:	78fa      	ldrb	r2, [r7, #3]
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	4613      	mov	r3, r2
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	1a9b      	subs	r3, r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	3334      	adds	r3, #52	@ 0x34
 8004950:	6819      	ldr	r1, [r3, #0]
 8004952:	78fa      	ldrb	r2, [r7, #3]
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4403      	add	r3, r0
 8004960:	3328      	adds	r3, #40	@ 0x28
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	440b      	add	r3, r1
 8004966:	1e59      	subs	r1, r3, #1
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4403      	add	r3, r0
 8004976:	3328      	adds	r3, #40	@ 0x28
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	fbb1 f3f3 	udiv	r3, r1, r3
 800497e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 813f 	beq.w	8004c0a <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800498c:	78fa      	ldrb	r2, [r7, #3]
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	333d      	adds	r3, #61	@ 0x3d
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	78fa      	ldrb	r2, [r7, #3]
 80049a0:	f083 0301 	eor.w	r3, r3, #1
 80049a4:	b2d8      	uxtb	r0, r3
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	333d      	adds	r3, #61	@ 0x3d
 80049b4:	4602      	mov	r2, r0
 80049b6:	701a      	strb	r2, [r3, #0]
 80049b8:	e127      	b.n	8004c0a <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	334d      	adds	r3, #77	@ 0x4d
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d120      	bne.n	8004a12 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049d0:	78fa      	ldrb	r2, [r7, #3]
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	4613      	mov	r3, r2
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	334d      	adds	r3, #77	@ 0x4d
 80049e0:	2202      	movs	r2, #2
 80049e2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80049e4:	78fa      	ldrb	r2, [r7, #3]
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	4613      	mov	r3, r2
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	440b      	add	r3, r1
 80049f2:	331b      	adds	r3, #27
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	f040 8107 	bne.w	8004c0a <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049fc:	78fa      	ldrb	r2, [r7, #3]
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	4613      	mov	r3, r2
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	1a9b      	subs	r3, r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	334c      	adds	r3, #76	@ 0x4c
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	701a      	strb	r2, [r3, #0]
 8004a10:	e0fb      	b.n	8004c0a <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004a12:	78fa      	ldrb	r2, [r7, #3]
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	4613      	mov	r3, r2
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	1a9b      	subs	r3, r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	334d      	adds	r3, #77	@ 0x4d
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d13a      	bne.n	8004a9e <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a28:	78fa      	ldrb	r2, [r7, #3]
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	1a9b      	subs	r3, r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	334d      	adds	r3, #77	@ 0x4d
 8004a38:	2202      	movs	r2, #2
 8004a3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a3c:	78fa      	ldrb	r2, [r7, #3]
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	4613      	mov	r3, r2
 8004a42:	011b      	lsls	r3, r3, #4
 8004a44:	1a9b      	subs	r3, r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	334c      	adds	r3, #76	@ 0x4c
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004a50:	78fa      	ldrb	r2, [r7, #3]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	331b      	adds	r3, #27
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	f040 80d1 	bne.w	8004c0a <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004a68:	78fa      	ldrb	r2, [r7, #3]
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	1a9b      	subs	r3, r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	331b      	adds	r3, #27
 8004a78:	2200      	movs	r2, #0
 8004a7a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	78fa      	ldrb	r2, [r7, #3]
 8004a8c:	0151      	lsls	r1, r2, #5
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	440a      	add	r2, r1
 8004a92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a9a:	6053      	str	r3, [r2, #4]
 8004a9c:	e0b5      	b.n	8004c0a <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004a9e:	78fa      	ldrb	r2, [r7, #3]
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	334d      	adds	r3, #77	@ 0x4d
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b05      	cmp	r3, #5
 8004ab2:	d114      	bne.n	8004ade <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ab4:	78fa      	ldrb	r2, [r7, #3]
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	334d      	adds	r3, #77	@ 0x4d
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004ac8:	78fa      	ldrb	r2, [r7, #3]
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	334c      	adds	r3, #76	@ 0x4c
 8004ad8:	2202      	movs	r2, #2
 8004ada:	701a      	strb	r2, [r3, #0]
 8004adc:	e095      	b.n	8004c0a <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004ade:	78fa      	ldrb	r2, [r7, #3]
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	1a9b      	subs	r3, r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	440b      	add	r3, r1
 8004aec:	334d      	adds	r3, #77	@ 0x4d
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b06      	cmp	r3, #6
 8004af2:	d114      	bne.n	8004b1e <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004af4:	78fa      	ldrb	r2, [r7, #3]
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	4613      	mov	r3, r2
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	1a9b      	subs	r3, r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	334d      	adds	r3, #77	@ 0x4d
 8004b04:	2202      	movs	r2, #2
 8004b06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004b08:	78fa      	ldrb	r2, [r7, #3]
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	1a9b      	subs	r3, r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	334c      	adds	r3, #76	@ 0x4c
 8004b18:	2205      	movs	r2, #5
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	e075      	b.n	8004c0a <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004b1e:	78fa      	ldrb	r2, [r7, #3]
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	334d      	adds	r3, #77	@ 0x4d
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b07      	cmp	r3, #7
 8004b32:	d00a      	beq.n	8004b4a <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	334d      	adds	r3, #77	@ 0x4d
 8004b44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004b46:	2b09      	cmp	r3, #9
 8004b48:	d170      	bne.n	8004c2c <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b4a:	78fa      	ldrb	r2, [r7, #3]
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	334d      	adds	r3, #77	@ 0x4d
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	3344      	adds	r3, #68	@ 0x44
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	1c59      	adds	r1, r3, #1
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	1a9b      	subs	r3, r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4403      	add	r3, r0
 8004b7e:	3344      	adds	r3, #68	@ 0x44
 8004b80:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b82:	78fa      	ldrb	r2, [r7, #3]
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	1a9b      	subs	r3, r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	3344      	adds	r3, #68	@ 0x44
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d914      	bls.n	8004bc2 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004b98:	78fa      	ldrb	r2, [r7, #3]
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	3344      	adds	r3, #68	@ 0x44
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004bac:	78fa      	ldrb	r2, [r7, #3]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	334c      	adds	r3, #76	@ 0x4c
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004bc0:	e022      	b.n	8004c08 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bc2:	78fa      	ldrb	r2, [r7, #3]
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	1a9b      	subs	r3, r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	334c      	adds	r3, #76	@ 0x4c
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004bd6:	78fb      	ldrb	r3, [r7, #3]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004bec:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004bf4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004bf6:	78fb      	ldrb	r3, [r7, #3]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c02:	461a      	mov	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c08:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	334c      	adds	r3, #76	@ 0x4c
 8004c1a:	781a      	ldrb	r2, [r3, #0]
 8004c1c:	78fb      	ldrb	r3, [r7, #3]
 8004c1e:	4619      	mov	r1, r3
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f005 f965 	bl	8009ef0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004c26:	e002      	b.n	8004c2e <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004c28:	bf00      	nop
 8004c2a:	e000      	b.n	8004c2e <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004c2c:	bf00      	nop
  }
}
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08a      	sub	sp, #40	@ 0x28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c44:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	f003 030f 	and.w	r3, r3, #15
 8004c54:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	0c5b      	lsrs	r3, r3, #17
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c68:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d004      	beq.n	8004c7a <HCD_RXQLVL_IRQHandler+0x46>
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b05      	cmp	r3, #5
 8004c74:	f000 80b6 	beq.w	8004de4 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004c78:	e0b7      	b.n	8004dea <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80b3 	beq.w	8004de8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	4613      	mov	r3, r2
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	1a9b      	subs	r3, r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	332c      	adds	r3, #44	@ 0x2c
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 80a7 	beq.w	8004de8 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	3338      	adds	r3, #56	@ 0x38
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	18d1      	adds	r1, r2, r3
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	1a9b      	subs	r3, r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4403      	add	r3, r0
 8004cbe:	3334      	adds	r3, #52	@ 0x34
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4299      	cmp	r1, r3
 8004cc4:	f200 8083 	bhi.w	8004dce <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	332c      	adds	r3, #44	@ 0x2c
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	b292      	uxth	r2, r2
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f003 fcba 	bl	800865c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4613      	mov	r3, r2
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	332c      	adds	r3, #44	@ 0x2c
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	18d1      	adds	r1, r2, r3
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	4613      	mov	r3, r2
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4403      	add	r3, r0
 8004d0c:	332c      	adds	r3, #44	@ 0x2c
 8004d0e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004d10:	6879      	ldr	r1, [r7, #4]
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4613      	mov	r3, r2
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	3338      	adds	r3, #56	@ 0x38
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	18d1      	adds	r1, r2, r3
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4403      	add	r3, r0
 8004d34:	3338      	adds	r3, #56	@ 0x38
 8004d36:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	0cdb      	lsrs	r3, r3, #19
 8004d48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d4c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4613      	mov	r3, r2
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	1a9b      	subs	r3, r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	3328      	adds	r3, #40	@ 0x28
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d13f      	bne.n	8004de8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d03c      	beq.n	8004de8 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d84:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d8c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	4613      	mov	r3, r2
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	1a9b      	subs	r3, r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	333c      	adds	r3, #60	@ 0x3c
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	f083 0301 	eor.w	r3, r3, #1
 8004db6:	b2d8      	uxtb	r0, r3
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	333c      	adds	r3, #60	@ 0x3c
 8004dc8:	4602      	mov	r2, r0
 8004dca:	701a      	strb	r2, [r3, #0]
      break;
 8004dcc:	e00c      	b.n	8004de8 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	334c      	adds	r3, #76	@ 0x4c
 8004dde:	2204      	movs	r2, #4
 8004de0:	701a      	strb	r2, [r3, #0]
      break;
 8004de2:	e001      	b.n	8004de8 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004de4:	bf00      	nop
 8004de6:	e000      	b.n	8004dea <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004de8:	bf00      	nop
  }
}
 8004dea:	bf00      	nop
 8004dec:	3728      	adds	r7, #40	@ 0x28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b086      	sub	sp, #24
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004e1e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d10b      	bne.n	8004e42 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d102      	bne.n	8004e3a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f005 f83f 	bl	8009eb8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f043 0302 	orr.w	r3, r3, #2
 8004e40:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d132      	bne.n	8004eb2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f043 0308 	orr.w	r3, r3, #8
 8004e52:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f003 0304 	and.w	r3, r3, #4
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d126      	bne.n	8004eac <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	7a5b      	ldrb	r3, [r3, #9]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d113      	bne.n	8004e8e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004e6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e70:	d106      	bne.n	8004e80 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2102      	movs	r1, #2
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f003 fc89 	bl	8008790 <USB_InitFSLSPClkSel>
 8004e7e:	e011      	b.n	8004ea4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2101      	movs	r1, #1
 8004e86:	4618      	mov	r0, r3
 8004e88:	f003 fc82 	bl	8008790 <USB_InitFSLSPClkSel>
 8004e8c:	e00a      	b.n	8004ea4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	79db      	ldrb	r3, [r3, #7]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d106      	bne.n	8004ea4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004ea2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f005 f835 	bl	8009f14 <HAL_HCD_PortEnabled_Callback>
 8004eaa:	e002      	b.n	8004eb2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f005 f83f 	bl	8009f30 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d103      	bne.n	8004ec4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f043 0320 	orr.w	r3, r3, #32
 8004ec2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004eca:	461a      	mov	r2, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	6013      	str	r3, [r2, #0]
}
 8004ed0:	bf00      	nop
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e0bf      	b.n	800506a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fb fd02 	bl	8000908 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004f1a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6999      	ldr	r1, [r3, #24]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f30:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6899      	ldr	r1, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8005074 <HAL_LTDC_Init+0x19c>)
 8004f4c:	400b      	ands	r3, r1
 8004f4e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	041b      	lsls	r3, r3, #16
 8004f56:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6899      	ldr	r1, [r3, #8]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68d9      	ldr	r1, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	4b3e      	ldr	r3, [pc, #248]	@ (8005074 <HAL_LTDC_Init+0x19c>)
 8004f7a:	400b      	ands	r3, r1
 8004f7c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	041b      	lsls	r3, r3, #16
 8004f84:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68d9      	ldr	r1, [r3, #12]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1a      	ldr	r2, [r3, #32]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6919      	ldr	r1, [r3, #16]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	4b33      	ldr	r3, [pc, #204]	@ (8005074 <HAL_LTDC_Init+0x19c>)
 8004fa8:	400b      	ands	r3, r1
 8004faa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	041b      	lsls	r3, r3, #16
 8004fb2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6919      	ldr	r1, [r3, #16]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6959      	ldr	r1, [r3, #20]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	4b27      	ldr	r3, [pc, #156]	@ (8005074 <HAL_LTDC_Init+0x19c>)
 8004fd6:	400b      	ands	r3, r1
 8004fd8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fde:	041b      	lsls	r3, r3, #16
 8004fe0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6959      	ldr	r1, [r3, #20]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ffe:	021b      	lsls	r3, r3, #8
 8005000:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005008:	041b      	lsls	r3, r3, #16
 800500a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800501a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0206 	orr.w	r2, r2, #6
 8005046:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	f000f800 	.word	0xf000f800

08005078 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005086:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800508e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f003 0304 	and.w	r3, r3, #4
 8005096:	2b00      	cmp	r3, #0
 8005098:	d023      	beq.n	80050e2 <HAL_LTDC_IRQHandler+0x6a>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01e      	beq.n	80050e2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0204 	bic.w	r2, r2, #4
 80050b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2204      	movs	r2, #4
 80050ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80050c2:	f043 0201 	orr.w	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2204      	movs	r2, #4
 80050d0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f86f 	bl	80051c0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d023      	beq.n	8005134 <HAL_LTDC_IRQHandler+0xbc>
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d01e      	beq.n	8005134 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0202 	bic.w	r2, r2, #2
 8005104:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2202      	movs	r2, #2
 800510c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005114:	f043 0202 	orr.w	r2, r3, #2
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2204      	movs	r2, #4
 8005122:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f846 	bl	80051c0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01b      	beq.n	8005176 <HAL_LTDC_IRQHandler+0xfe>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d016      	beq.n	8005176 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0201 	bic.w	r2, r2, #1
 8005156:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2201      	movs	r2, #1
 800515e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f82f 	bl	80051d4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01b      	beq.n	80051b8 <HAL_LTDC_IRQHandler+0x140>
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d016      	beq.n	80051b8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0208 	bic.w	r2, r2, #8
 8005198:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2208      	movs	r2, #8
 80051a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f818 	bl	80051e8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80051b8:	bf00      	nop
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80051fc:	b5b0      	push	{r4, r5, r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800520e:	2b01      	cmp	r3, #1
 8005210:	d101      	bne.n	8005216 <HAL_LTDC_ConfigLayer+0x1a>
 8005212:	2302      	movs	r3, #2
 8005214:	e02c      	b.n	8005270 <HAL_LTDC_ConfigLayer+0x74>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2202      	movs	r2, #2
 8005222:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2134      	movs	r1, #52	@ 0x34
 800522c:	fb01 f303 	mul.w	r3, r1, r3
 8005230:	4413      	add	r3, r2
 8005232:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4614      	mov	r4, r2
 800523a:	461d      	mov	r5, r3
 800523c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800523e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f81f 	bl	8005294 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2201      	movs	r2, #1
 800525c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bdb0      	pop	{r4, r5, r7, pc}

08005278 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005286:	b2db      	uxtb	r3, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005294:	b480      	push	{r7}
 8005296:	b089      	sub	sp, #36	@ 0x24
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	0c1b      	lsrs	r3, r3, #16
 80052ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b0:	4413      	add	r3, r2
 80052b2:	041b      	lsls	r3, r3, #16
 80052b4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	01db      	lsls	r3, r3, #7
 80052c0:	4413      	add	r3, r2
 80052c2:	3384      	adds	r3, #132	@ 0x84
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	6812      	ldr	r2, [r2, #0]
 80052ca:	4611      	mov	r1, r2
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	01d2      	lsls	r2, r2, #7
 80052d0:	440a      	add	r2, r1
 80052d2:	3284      	adds	r2, #132	@ 0x84
 80052d4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80052d8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	0c1b      	lsrs	r3, r3, #16
 80052e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80052ea:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80052ec:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4619      	mov	r1, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	01db      	lsls	r3, r3, #7
 80052f8:	440b      	add	r3, r1
 80052fa:	3384      	adds	r3, #132	@ 0x84
 80052fc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005302:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005312:	4413      	add	r3, r2
 8005314:	041b      	lsls	r3, r3, #16
 8005316:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	01db      	lsls	r3, r3, #7
 8005322:	4413      	add	r3, r2
 8005324:	3384      	adds	r3, #132	@ 0x84
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	4611      	mov	r1, r2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	01d2      	lsls	r2, r2, #7
 8005332:	440a      	add	r2, r1
 8005334:	3284      	adds	r2, #132	@ 0x84
 8005336:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800533a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800534a:	4413      	add	r3, r2
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4619      	mov	r1, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	01db      	lsls	r3, r3, #7
 8005358:	440b      	add	r3, r1
 800535a:	3384      	adds	r3, #132	@ 0x84
 800535c:	4619      	mov	r1, r3
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	4313      	orrs	r3, r2
 8005362:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	01db      	lsls	r3, r3, #7
 800536e:	4413      	add	r3, r2
 8005370:	3384      	adds	r3, #132	@ 0x84
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	4611      	mov	r1, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	01d2      	lsls	r2, r2, #7
 800537e:	440a      	add	r2, r1
 8005380:	3284      	adds	r2, #132	@ 0x84
 8005382:	f023 0307 	bic.w	r3, r3, #7
 8005386:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	01db      	lsls	r3, r3, #7
 8005392:	4413      	add	r3, r2
 8005394:	3384      	adds	r3, #132	@ 0x84
 8005396:	461a      	mov	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80053ae:	041b      	lsls	r3, r3, #16
 80053b0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	061b      	lsls	r3, r3, #24
 80053b8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	01db      	lsls	r3, r3, #7
 80053c4:	4413      	add	r3, r2
 80053c6:	3384      	adds	r3, #132	@ 0x84
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	01db      	lsls	r3, r3, #7
 80053d4:	4413      	add	r3, r2
 80053d6:	3384      	adds	r3, #132	@ 0x84
 80053d8:	461a      	mov	r2, r3
 80053da:	2300      	movs	r3, #0
 80053dc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053e4:	461a      	mov	r2, r3
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	431a      	orrs	r2, r3
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	431a      	orrs	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4619      	mov	r1, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	01db      	lsls	r3, r3, #7
 80053f8:	440b      	add	r3, r1
 80053fa:	3384      	adds	r3, #132	@ 0x84
 80053fc:	4619      	mov	r1, r3
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	01db      	lsls	r3, r3, #7
 800540e:	4413      	add	r3, r2
 8005410:	3384      	adds	r3, #132	@ 0x84
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	4611      	mov	r1, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	01d2      	lsls	r2, r2, #7
 800541e:	440a      	add	r2, r1
 8005420:	3284      	adds	r2, #132	@ 0x84
 8005422:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005426:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	01db      	lsls	r3, r3, #7
 8005432:	4413      	add	r3, r2
 8005434:	3384      	adds	r3, #132	@ 0x84
 8005436:	461a      	mov	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	01db      	lsls	r3, r3, #7
 8005448:	4413      	add	r3, r2
 800544a:	3384      	adds	r3, #132	@ 0x84
 800544c:	69da      	ldr	r2, [r3, #28]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4619      	mov	r1, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	01db      	lsls	r3, r3, #7
 8005458:	440b      	add	r3, r1
 800545a:	3384      	adds	r3, #132	@ 0x84
 800545c:	4619      	mov	r1, r3
 800545e:	4b58      	ldr	r3, [pc, #352]	@ (80055c0 <LTDC_SetConfig+0x32c>)
 8005460:	4013      	ands	r3, r2
 8005462:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	69da      	ldr	r2, [r3, #28]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	68f9      	ldr	r1, [r7, #12]
 800546e:	6809      	ldr	r1, [r1, #0]
 8005470:	4608      	mov	r0, r1
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	01c9      	lsls	r1, r1, #7
 8005476:	4401      	add	r1, r0
 8005478:	3184      	adds	r1, #132	@ 0x84
 800547a:	4313      	orrs	r3, r2
 800547c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	01db      	lsls	r3, r3, #7
 8005488:	4413      	add	r3, r2
 800548a:	3384      	adds	r3, #132	@ 0x84
 800548c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	01db      	lsls	r3, r3, #7
 8005498:	4413      	add	r3, r2
 800549a:	3384      	adds	r3, #132	@ 0x84
 800549c:	461a      	mov	r2, r3
 800549e:	2300      	movs	r3, #0
 80054a0:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	01db      	lsls	r3, r3, #7
 80054ac:	4413      	add	r3, r2
 80054ae:	3384      	adds	r3, #132	@ 0x84
 80054b0:	461a      	mov	r2, r3
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b6:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d102      	bne.n	80054c6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80054c0:	2304      	movs	r3, #4
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	e01b      	b.n	80054fe <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d102      	bne.n	80054d4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80054ce:	2303      	movs	r3, #3
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	e014      	b.n	80054fe <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d00b      	beq.n	80054f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d007      	beq.n	80054f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d003      	beq.n	80054f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80054f0:	2b07      	cmp	r3, #7
 80054f2:	d102      	bne.n	80054fa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80054f4:	2302      	movs	r3, #2
 80054f6:	61fb      	str	r3, [r7, #28]
 80054f8:	e001      	b.n	80054fe <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80054fa:	2301      	movs	r3, #1
 80054fc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	01db      	lsls	r3, r3, #7
 8005508:	4413      	add	r3, r2
 800550a:	3384      	adds	r3, #132	@ 0x84
 800550c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	6812      	ldr	r2, [r2, #0]
 8005512:	4611      	mov	r1, r2
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	01d2      	lsls	r2, r2, #7
 8005518:	440a      	add	r2, r1
 800551a:	3284      	adds	r2, #132	@ 0x84
 800551c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005520:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	fb02 f303 	mul.w	r3, r2, r3
 800552c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	6859      	ldr	r1, [r3, #4]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	1acb      	subs	r3, r1, r3
 8005538:	69f9      	ldr	r1, [r7, #28]
 800553a:	fb01 f303 	mul.w	r3, r1, r3
 800553e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005540:	68f9      	ldr	r1, [r7, #12]
 8005542:	6809      	ldr	r1, [r1, #0]
 8005544:	4608      	mov	r0, r1
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	01c9      	lsls	r1, r1, #7
 800554a:	4401      	add	r1, r0
 800554c:	3184      	adds	r1, #132	@ 0x84
 800554e:	4313      	orrs	r3, r2
 8005550:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	01db      	lsls	r3, r3, #7
 800555c:	4413      	add	r3, r2
 800555e:	3384      	adds	r3, #132	@ 0x84
 8005560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4619      	mov	r1, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	01db      	lsls	r3, r3, #7
 800556c:	440b      	add	r3, r1
 800556e:	3384      	adds	r3, #132	@ 0x84
 8005570:	4619      	mov	r1, r3
 8005572:	4b14      	ldr	r3, [pc, #80]	@ (80055c4 <LTDC_SetConfig+0x330>)
 8005574:	4013      	ands	r3, r2
 8005576:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	01db      	lsls	r3, r3, #7
 8005582:	4413      	add	r3, r2
 8005584:	3384      	adds	r3, #132	@ 0x84
 8005586:	461a      	mov	r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	01db      	lsls	r3, r3, #7
 8005598:	4413      	add	r3, r2
 800559a:	3384      	adds	r3, #132	@ 0x84
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	4611      	mov	r1, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	01d2      	lsls	r2, r2, #7
 80055a8:	440a      	add	r2, r1
 80055aa:	3284      	adds	r2, #132	@ 0x84
 80055ac:	f043 0301 	orr.w	r3, r3, #1
 80055b0:	6013      	str	r3, [r2, #0]
}
 80055b2:	bf00      	nop
 80055b4:	3724      	adds	r7, #36	@ 0x24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	fffff8f8 	.word	0xfffff8f8
 80055c4:	fffff800 	.word	0xfffff800

080055c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055cc:	4b05      	ldr	r3, [pc, #20]	@ (80055e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a04      	ldr	r2, [pc, #16]	@ (80055e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80055d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055d6:	6013      	str	r3, [r2, #0]
}
 80055d8:	bf00      	nop
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40007000 	.word	0x40007000

080055e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80055f2:	4b23      	ldr	r3, [pc, #140]	@ (8005680 <HAL_PWREx_EnableOverDrive+0x98>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f6:	4a22      	ldr	r2, [pc, #136]	@ (8005680 <HAL_PWREx_EnableOverDrive+0x98>)
 80055f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80055fe:	4b20      	ldr	r3, [pc, #128]	@ (8005680 <HAL_PWREx_EnableOverDrive+0x98>)
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800560a:	4b1e      	ldr	r3, [pc, #120]	@ (8005684 <HAL_PWREx_EnableOverDrive+0x9c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a1d      	ldr	r2, [pc, #116]	@ (8005684 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005614:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005616:	f7fc fe0f 	bl	8002238 <HAL_GetTick>
 800561a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800561c:	e009      	b.n	8005632 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800561e:	f7fc fe0b 	bl	8002238 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800562c:	d901      	bls.n	8005632 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e022      	b.n	8005678 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005632:	4b14      	ldr	r3, [pc, #80]	@ (8005684 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800563a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800563e:	d1ee      	bne.n	800561e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005640:	4b10      	ldr	r3, [pc, #64]	@ (8005684 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a0f      	ldr	r2, [pc, #60]	@ (8005684 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005646:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800564a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800564c:	f7fc fdf4 	bl	8002238 <HAL_GetTick>
 8005650:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005652:	e009      	b.n	8005668 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005654:	f7fc fdf0 	bl	8002238 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005662:	d901      	bls.n	8005668 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e007      	b.n	8005678 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005668:	4b06      	ldr	r3, [pc, #24]	@ (8005684 <HAL_PWREx_EnableOverDrive+0x9c>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005670:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005674:	d1ee      	bne.n	8005654 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40023800 	.word	0x40023800
 8005684:	40007000 	.word	0x40007000

08005688 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005690:	2300      	movs	r3, #0
 8005692:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e291      	b.n	8005bc2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 8087 	beq.w	80057ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056ac:	4b96      	ldr	r3, [pc, #600]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 030c 	and.w	r3, r3, #12
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d00c      	beq.n	80056d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056b8:	4b93      	ldr	r3, [pc, #588]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f003 030c 	and.w	r3, r3, #12
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d112      	bne.n	80056ea <HAL_RCC_OscConfig+0x62>
 80056c4:	4b90      	ldr	r3, [pc, #576]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056d0:	d10b      	bne.n	80056ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d2:	4b8d      	ldr	r3, [pc, #564]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d06c      	beq.n	80057b8 <HAL_RCC_OscConfig+0x130>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d168      	bne.n	80057b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e26b      	b.n	8005bc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056f2:	d106      	bne.n	8005702 <HAL_RCC_OscConfig+0x7a>
 80056f4:	4b84      	ldr	r3, [pc, #528]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a83      	ldr	r2, [pc, #524]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 80056fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	e02e      	b.n	8005760 <HAL_RCC_OscConfig+0xd8>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10c      	bne.n	8005724 <HAL_RCC_OscConfig+0x9c>
 800570a:	4b7f      	ldr	r3, [pc, #508]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a7e      	ldr	r2, [pc, #504]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 8005710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	4b7c      	ldr	r3, [pc, #496]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a7b      	ldr	r2, [pc, #492]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 800571c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e01d      	b.n	8005760 <HAL_RCC_OscConfig+0xd8>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800572c:	d10c      	bne.n	8005748 <HAL_RCC_OscConfig+0xc0>
 800572e:	4b76      	ldr	r3, [pc, #472]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a75      	ldr	r2, [pc, #468]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 8005734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	4b73      	ldr	r3, [pc, #460]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a72      	ldr	r2, [pc, #456]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 8005740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	e00b      	b.n	8005760 <HAL_RCC_OscConfig+0xd8>
 8005748:	4b6f      	ldr	r3, [pc, #444]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a6e      	ldr	r2, [pc, #440]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 800574e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	4b6c      	ldr	r3, [pc, #432]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a6b      	ldr	r2, [pc, #428]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 800575a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800575e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d013      	beq.n	8005790 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005768:	f7fc fd66 	bl	8002238 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005770:	f7fc fd62 	bl	8002238 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b64      	cmp	r3, #100	@ 0x64
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e21f      	b.n	8005bc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005782:	4b61      	ldr	r3, [pc, #388]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCC_OscConfig+0xe8>
 800578e:	e014      	b.n	80057ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005790:	f7fc fd52 	bl	8002238 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005798:	f7fc fd4e 	bl	8002238 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b64      	cmp	r3, #100	@ 0x64
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e20b      	b.n	8005bc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057aa:	4b57      	ldr	r3, [pc, #348]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f0      	bne.n	8005798 <HAL_RCC_OscConfig+0x110>
 80057b6:	e000      	b.n	80057ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d069      	beq.n	800589a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057c6:	4b50      	ldr	r3, [pc, #320]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 030c 	and.w	r3, r3, #12
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057d2:	4b4d      	ldr	r3, [pc, #308]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 030c 	and.w	r3, r3, #12
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d11c      	bne.n	8005818 <HAL_RCC_OscConfig+0x190>
 80057de:	4b4a      	ldr	r3, [pc, #296]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d116      	bne.n	8005818 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ea:	4b47      	ldr	r3, [pc, #284]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <HAL_RCC_OscConfig+0x17a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d001      	beq.n	8005802 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e1df      	b.n	8005bc2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005802:	4b41      	ldr	r3, [pc, #260]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	493d      	ldr	r1, [pc, #244]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 8005812:	4313      	orrs	r3, r2
 8005814:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005816:	e040      	b.n	800589a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d023      	beq.n	8005868 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005820:	4b39      	ldr	r3, [pc, #228]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a38      	ldr	r2, [pc, #224]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582c:	f7fc fd04 	bl	8002238 <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005834:	f7fc fd00 	bl	8002238 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e1bd      	b.n	8005bc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005846:	4b30      	ldr	r3, [pc, #192]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0f0      	beq.n	8005834 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005852:	4b2d      	ldr	r3, [pc, #180]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	4929      	ldr	r1, [pc, #164]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 8005862:	4313      	orrs	r3, r2
 8005864:	600b      	str	r3, [r1, #0]
 8005866:	e018      	b.n	800589a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005868:	4b27      	ldr	r3, [pc, #156]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a26      	ldr	r2, [pc, #152]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 800586e:	f023 0301 	bic.w	r3, r3, #1
 8005872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005874:	f7fc fce0 	bl	8002238 <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800587c:	f7fc fcdc 	bl	8002238 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e199      	b.n	8005bc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800588e:	4b1e      	ldr	r3, [pc, #120]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f0      	bne.n	800587c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d038      	beq.n	8005918 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d019      	beq.n	80058e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058ae:	4b16      	ldr	r3, [pc, #88]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 80058b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058b2:	4a15      	ldr	r2, [pc, #84]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 80058b4:	f043 0301 	orr.w	r3, r3, #1
 80058b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ba:	f7fc fcbd 	bl	8002238 <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058c0:	e008      	b.n	80058d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058c2:	f7fc fcb9 	bl	8002238 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e176      	b.n	8005bc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 80058d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0f0      	beq.n	80058c2 <HAL_RCC_OscConfig+0x23a>
 80058e0:	e01a      	b.n	8005918 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058e2:	4b09      	ldr	r3, [pc, #36]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 80058e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058e6:	4a08      	ldr	r2, [pc, #32]	@ (8005908 <HAL_RCC_OscConfig+0x280>)
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ee:	f7fc fca3 	bl	8002238 <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058f4:	e00a      	b.n	800590c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058f6:	f7fc fc9f 	bl	8002238 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d903      	bls.n	800590c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e15c      	b.n	8005bc2 <HAL_RCC_OscConfig+0x53a>
 8005908:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800590c:	4b91      	ldr	r3, [pc, #580]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 800590e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1ee      	bne.n	80058f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 80a4 	beq.w	8005a6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005926:	4b8b      	ldr	r3, [pc, #556]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10d      	bne.n	800594e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005932:	4b88      	ldr	r3, [pc, #544]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005936:	4a87      	ldr	r2, [pc, #540]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800593c:	6413      	str	r3, [r2, #64]	@ 0x40
 800593e:	4b85      	ldr	r3, [pc, #532]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005946:	60bb      	str	r3, [r7, #8]
 8005948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800594a:	2301      	movs	r3, #1
 800594c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800594e:	4b82      	ldr	r3, [pc, #520]	@ (8005b58 <HAL_RCC_OscConfig+0x4d0>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005956:	2b00      	cmp	r3, #0
 8005958:	d118      	bne.n	800598c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800595a:	4b7f      	ldr	r3, [pc, #508]	@ (8005b58 <HAL_RCC_OscConfig+0x4d0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a7e      	ldr	r2, [pc, #504]	@ (8005b58 <HAL_RCC_OscConfig+0x4d0>)
 8005960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005966:	f7fc fc67 	bl	8002238 <HAL_GetTick>
 800596a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800596c:	e008      	b.n	8005980 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596e:	f7fc fc63 	bl	8002238 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b64      	cmp	r3, #100	@ 0x64
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e120      	b.n	8005bc2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005980:	4b75      	ldr	r3, [pc, #468]	@ (8005b58 <HAL_RCC_OscConfig+0x4d0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f0      	beq.n	800596e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d106      	bne.n	80059a2 <HAL_RCC_OscConfig+0x31a>
 8005994:	4b6f      	ldr	r3, [pc, #444]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005998:	4a6e      	ldr	r2, [pc, #440]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 800599a:	f043 0301 	orr.w	r3, r3, #1
 800599e:	6713      	str	r3, [r2, #112]	@ 0x70
 80059a0:	e02d      	b.n	80059fe <HAL_RCC_OscConfig+0x376>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10c      	bne.n	80059c4 <HAL_RCC_OscConfig+0x33c>
 80059aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 80059ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ae:	4a69      	ldr	r2, [pc, #420]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 80059b0:	f023 0301 	bic.w	r3, r3, #1
 80059b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80059b6:	4b67      	ldr	r3, [pc, #412]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 80059b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ba:	4a66      	ldr	r2, [pc, #408]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 80059bc:	f023 0304 	bic.w	r3, r3, #4
 80059c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80059c2:	e01c      	b.n	80059fe <HAL_RCC_OscConfig+0x376>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	2b05      	cmp	r3, #5
 80059ca:	d10c      	bne.n	80059e6 <HAL_RCC_OscConfig+0x35e>
 80059cc:	4b61      	ldr	r3, [pc, #388]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 80059ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d0:	4a60      	ldr	r2, [pc, #384]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 80059d2:	f043 0304 	orr.w	r3, r3, #4
 80059d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80059d8:	4b5e      	ldr	r3, [pc, #376]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 80059da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059dc:	4a5d      	ldr	r2, [pc, #372]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 80059de:	f043 0301 	orr.w	r3, r3, #1
 80059e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80059e4:	e00b      	b.n	80059fe <HAL_RCC_OscConfig+0x376>
 80059e6:	4b5b      	ldr	r3, [pc, #364]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 80059e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ea:	4a5a      	ldr	r2, [pc, #360]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 80059ec:	f023 0301 	bic.w	r3, r3, #1
 80059f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80059f2:	4b58      	ldr	r3, [pc, #352]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 80059f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f6:	4a57      	ldr	r2, [pc, #348]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 80059f8:	f023 0304 	bic.w	r3, r3, #4
 80059fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d015      	beq.n	8005a32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a06:	f7fc fc17 	bl	8002238 <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a0c:	e00a      	b.n	8005a24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a0e:	f7fc fc13 	bl	8002238 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e0ce      	b.n	8005bc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a24:	4b4b      	ldr	r3, [pc, #300]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0ee      	beq.n	8005a0e <HAL_RCC_OscConfig+0x386>
 8005a30:	e014      	b.n	8005a5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a32:	f7fc fc01 	bl	8002238 <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a38:	e00a      	b.n	8005a50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3a:	f7fc fbfd 	bl	8002238 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e0b8      	b.n	8005bc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a50:	4b40      	ldr	r3, [pc, #256]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1ee      	bne.n	8005a3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a5c:	7dfb      	ldrb	r3, [r7, #23]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d105      	bne.n	8005a6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a62:	4b3c      	ldr	r3, [pc, #240]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a66:	4a3b      	ldr	r2, [pc, #236]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005a68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a6c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 80a4 	beq.w	8005bc0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a78:	4b36      	ldr	r3, [pc, #216]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 030c 	and.w	r3, r3, #12
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d06b      	beq.n	8005b5c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d149      	bne.n	8005b20 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a8c:	4b31      	ldr	r3, [pc, #196]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a30      	ldr	r2, [pc, #192]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005a92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a98:	f7fc fbce 	bl	8002238 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aa0:	f7fc fbca 	bl	8002238 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e087      	b.n	8005bc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ab2:	4b28      	ldr	r3, [pc, #160]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f0      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	69da      	ldr	r2, [r3, #28]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005acc:	019b      	lsls	r3, r3, #6
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad4:	085b      	lsrs	r3, r3, #1
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	041b      	lsls	r3, r3, #16
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae0:	061b      	lsls	r3, r3, #24
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005ae6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005aea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aec:	4b19      	ldr	r3, [pc, #100]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a18      	ldr	r2, [pc, #96]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005af2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af8:	f7fc fb9e 	bl	8002238 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b00:	f7fc fb9a 	bl	8002238 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e057      	b.n	8005bc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b12:	4b10      	ldr	r3, [pc, #64]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0f0      	beq.n	8005b00 <HAL_RCC_OscConfig+0x478>
 8005b1e:	e04f      	b.n	8005bc0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b20:	4b0c      	ldr	r3, [pc, #48]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a0b      	ldr	r2, [pc, #44]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005b26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2c:	f7fc fb84 	bl	8002238 <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b34:	f7fc fb80 	bl	8002238 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e03d      	b.n	8005bc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b46:	4b03      	ldr	r3, [pc, #12]	@ (8005b54 <HAL_RCC_OscConfig+0x4cc>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1f0      	bne.n	8005b34 <HAL_RCC_OscConfig+0x4ac>
 8005b52:	e035      	b.n	8005bc0 <HAL_RCC_OscConfig+0x538>
 8005b54:	40023800 	.word	0x40023800
 8005b58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005bcc <HAL_RCC_OscConfig+0x544>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d028      	beq.n	8005bbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d121      	bne.n	8005bbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d11a      	bne.n	8005bbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d111      	bne.n	8005bbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d107      	bne.n	8005bbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d001      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e000      	b.n	8005bc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40023800 	.word	0x40023800

08005bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e0d0      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005be8:	4b6a      	ldr	r3, [pc, #424]	@ (8005d94 <HAL_RCC_ClockConfig+0x1c4>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d910      	bls.n	8005c18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bf6:	4b67      	ldr	r3, [pc, #412]	@ (8005d94 <HAL_RCC_ClockConfig+0x1c4>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f023 020f 	bic.w	r2, r3, #15
 8005bfe:	4965      	ldr	r1, [pc, #404]	@ (8005d94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c06:	4b63      	ldr	r3, [pc, #396]	@ (8005d94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d001      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0b8      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d020      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d005      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c30:	4b59      	ldr	r3, [pc, #356]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	4a58      	ldr	r2, [pc, #352]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005c36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c48:	4b53      	ldr	r3, [pc, #332]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	4a52      	ldr	r2, [pc, #328]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005c4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c54:	4b50      	ldr	r3, [pc, #320]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	494d      	ldr	r1, [pc, #308]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d040      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d107      	bne.n	8005c8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c7a:	4b47      	ldr	r3, [pc, #284]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d115      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e07f      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d107      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c92:	4b41      	ldr	r3, [pc, #260]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d109      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e073      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e06b      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cb2:	4b39      	ldr	r3, [pc, #228]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f023 0203 	bic.w	r2, r3, #3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	4936      	ldr	r1, [pc, #216]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cc4:	f7fc fab8 	bl	8002238 <HAL_GetTick>
 8005cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cca:	e00a      	b.n	8005ce2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ccc:	f7fc fab4 	bl	8002238 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e053      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 020c 	and.w	r2, r3, #12
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d1eb      	bne.n	8005ccc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cf4:	4b27      	ldr	r3, [pc, #156]	@ (8005d94 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 030f 	and.w	r3, r3, #15
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d210      	bcs.n	8005d24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d02:	4b24      	ldr	r3, [pc, #144]	@ (8005d94 <HAL_RCC_ClockConfig+0x1c4>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f023 020f 	bic.w	r2, r3, #15
 8005d0a:	4922      	ldr	r1, [pc, #136]	@ (8005d94 <HAL_RCC_ClockConfig+0x1c4>)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d12:	4b20      	ldr	r3, [pc, #128]	@ (8005d94 <HAL_RCC_ClockConfig+0x1c4>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 030f 	and.w	r3, r3, #15
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d001      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e032      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d008      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d30:	4b19      	ldr	r3, [pc, #100]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	4916      	ldr	r1, [pc, #88]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d4e:	4b12      	ldr	r3, [pc, #72]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	490e      	ldr	r1, [pc, #56]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d62:	f000 f821 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 8005d66:	4602      	mov	r2, r0
 8005d68:	4b0b      	ldr	r3, [pc, #44]	@ (8005d98 <HAL_RCC_ClockConfig+0x1c8>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	091b      	lsrs	r3, r3, #4
 8005d6e:	f003 030f 	and.w	r3, r3, #15
 8005d72:	490a      	ldr	r1, [pc, #40]	@ (8005d9c <HAL_RCC_ClockConfig+0x1cc>)
 8005d74:	5ccb      	ldrb	r3, [r1, r3]
 8005d76:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7a:	4a09      	ldr	r2, [pc, #36]	@ (8005da0 <HAL_RCC_ClockConfig+0x1d0>)
 8005d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d7e:	4b09      	ldr	r3, [pc, #36]	@ (8005da4 <HAL_RCC_ClockConfig+0x1d4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fb f860 	bl	8000e48 <HAL_InitTick>

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	40023c00 	.word	0x40023c00
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	0800a19c 	.word	0x0800a19c
 8005da0:	20000008 	.word	0x20000008
 8005da4:	20000020 	.word	0x20000020

08005da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dac:	b090      	sub	sp, #64	@ 0x40
 8005dae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005db4:	2300      	movs	r3, #0
 8005db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005db8:	2300      	movs	r3, #0
 8005dba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dc0:	4b59      	ldr	r3, [pc, #356]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f003 030c 	and.w	r3, r3, #12
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d00d      	beq.n	8005de8 <HAL_RCC_GetSysClockFreq+0x40>
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	f200 80a1 	bhi.w	8005f14 <HAL_RCC_GetSysClockFreq+0x16c>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <HAL_RCC_GetSysClockFreq+0x34>
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d003      	beq.n	8005de2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dda:	e09b      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ddc:	4b53      	ldr	r3, [pc, #332]	@ (8005f2c <HAL_RCC_GetSysClockFreq+0x184>)
 8005dde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005de0:	e09b      	b.n	8005f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005de2:	4b53      	ldr	r3, [pc, #332]	@ (8005f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8005de4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005de6:	e098      	b.n	8005f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005de8:	4b4f      	ldr	r3, [pc, #316]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005df0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005df2:	4b4d      	ldr	r3, [pc, #308]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d028      	beq.n	8005e50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	099b      	lsrs	r3, r3, #6
 8005e04:	2200      	movs	r2, #0
 8005e06:	623b      	str	r3, [r7, #32]
 8005e08:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005e10:	2100      	movs	r1, #0
 8005e12:	4b47      	ldr	r3, [pc, #284]	@ (8005f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8005e14:	fb03 f201 	mul.w	r2, r3, r1
 8005e18:	2300      	movs	r3, #0
 8005e1a:	fb00 f303 	mul.w	r3, r0, r3
 8005e1e:	4413      	add	r3, r2
 8005e20:	4a43      	ldr	r2, [pc, #268]	@ (8005f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8005e22:	fba0 1202 	umull	r1, r2, r0, r2
 8005e26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e28:	460a      	mov	r2, r1
 8005e2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005e2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e2e:	4413      	add	r3, r2
 8005e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e34:	2200      	movs	r2, #0
 8005e36:	61bb      	str	r3, [r7, #24]
 8005e38:	61fa      	str	r2, [r7, #28]
 8005e3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005e42:	f7fa f9e5 	bl	8000210 <__aeabi_uldivmod>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e4e:	e053      	b.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e50:	4b35      	ldr	r3, [pc, #212]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	099b      	lsrs	r3, r3, #6
 8005e56:	2200      	movs	r2, #0
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	617a      	str	r2, [r7, #20]
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005e62:	f04f 0b00 	mov.w	fp, #0
 8005e66:	4652      	mov	r2, sl
 8005e68:	465b      	mov	r3, fp
 8005e6a:	f04f 0000 	mov.w	r0, #0
 8005e6e:	f04f 0100 	mov.w	r1, #0
 8005e72:	0159      	lsls	r1, r3, #5
 8005e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e78:	0150      	lsls	r0, r2, #5
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	ebb2 080a 	subs.w	r8, r2, sl
 8005e82:	eb63 090b 	sbc.w	r9, r3, fp
 8005e86:	f04f 0200 	mov.w	r2, #0
 8005e8a:	f04f 0300 	mov.w	r3, #0
 8005e8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005e92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005e96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005e9a:	ebb2 0408 	subs.w	r4, r2, r8
 8005e9e:	eb63 0509 	sbc.w	r5, r3, r9
 8005ea2:	f04f 0200 	mov.w	r2, #0
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	00eb      	lsls	r3, r5, #3
 8005eac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eb0:	00e2      	lsls	r2, r4, #3
 8005eb2:	4614      	mov	r4, r2
 8005eb4:	461d      	mov	r5, r3
 8005eb6:	eb14 030a 	adds.w	r3, r4, sl
 8005eba:	603b      	str	r3, [r7, #0]
 8005ebc:	eb45 030b 	adc.w	r3, r5, fp
 8005ec0:	607b      	str	r3, [r7, #4]
 8005ec2:	f04f 0200 	mov.w	r2, #0
 8005ec6:	f04f 0300 	mov.w	r3, #0
 8005eca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ece:	4629      	mov	r1, r5
 8005ed0:	028b      	lsls	r3, r1, #10
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ed8:	4621      	mov	r1, r4
 8005eda:	028a      	lsls	r2, r1, #10
 8005edc:	4610      	mov	r0, r2
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	60bb      	str	r3, [r7, #8]
 8005ee6:	60fa      	str	r2, [r7, #12]
 8005ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005eec:	f7fa f990 	bl	8000210 <__aeabi_uldivmod>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	0c1b      	lsrs	r3, r3, #16
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	3301      	adds	r3, #1
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005f08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005f12:	e002      	b.n	8005f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f14:	4b05      	ldr	r3, [pc, #20]	@ (8005f2c <HAL_RCC_GetSysClockFreq+0x184>)
 8005f16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3740      	adds	r7, #64	@ 0x40
 8005f20:	46bd      	mov	sp, r7
 8005f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f26:	bf00      	nop
 8005f28:	40023800 	.word	0x40023800
 8005f2c:	00f42400 	.word	0x00f42400
 8005f30:	017d7840 	.word	0x017d7840

08005f34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f38:	4b03      	ldr	r3, [pc, #12]	@ (8005f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	20000008 	.word	0x20000008

08005f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f50:	f7ff fff0 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8005f54:	4602      	mov	r2, r0
 8005f56:	4b05      	ldr	r3, [pc, #20]	@ (8005f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	0a9b      	lsrs	r3, r3, #10
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	4903      	ldr	r1, [pc, #12]	@ (8005f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f62:	5ccb      	ldrb	r3, [r1, r3]
 8005f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	0800a1ac 	.word	0x0800a1ac

08005f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f78:	f7ff ffdc 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	4b05      	ldr	r3, [pc, #20]	@ (8005f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	0b5b      	lsrs	r3, r3, #13
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	4903      	ldr	r1, [pc, #12]	@ (8005f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f8a:	5ccb      	ldrb	r3, [r1, r3]
 8005f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40023800 	.word	0x40023800
 8005f98:	0800a1ac 	.word	0x0800a1ac

08005f9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	220f      	movs	r2, #15
 8005faa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005fac:	4b12      	ldr	r3, [pc, #72]	@ (8005ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 0203 	and.w	r2, r3, #3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8005ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005fd0:	4b09      	ldr	r3, [pc, #36]	@ (8005ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	08db      	lsrs	r3, r3, #3
 8005fd6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005fde:	4b07      	ldr	r3, [pc, #28]	@ (8005ffc <HAL_RCC_GetClockConfig+0x60>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 020f 	and.w	r2, r3, #15
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	601a      	str	r2, [r3, #0]
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	40023c00 	.word	0x40023c00

08006000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006014:	2300      	movs	r3, #0
 8006016:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006018:	2300      	movs	r3, #0
 800601a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d012      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006028:	4b69      	ldr	r3, [pc, #420]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	4a68      	ldr	r2, [pc, #416]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006032:	6093      	str	r3, [r2, #8]
 8006034:	4b66      	ldr	r3, [pc, #408]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800603c:	4964      	ldr	r1, [pc, #400]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800603e:	4313      	orrs	r3, r2
 8006040:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800604a:	2301      	movs	r3, #1
 800604c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d017      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800605a:	4b5d      	ldr	r3, [pc, #372]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800605c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006060:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006068:	4959      	ldr	r1, [pc, #356]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006074:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006078:	d101      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800607a:	2301      	movs	r3, #1
 800607c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006086:	2301      	movs	r3, #1
 8006088:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d017      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006096:	4b4e      	ldr	r3, [pc, #312]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800609c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a4:	494a      	ldr	r1, [pc, #296]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060b4:	d101      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80060b6:	2301      	movs	r3, #1
 80060b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80060c2:	2301      	movs	r3, #1
 80060c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80060d2:	2301      	movs	r3, #1
 80060d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 808b 	beq.w	80061fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060e4:	4b3a      	ldr	r3, [pc, #232]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e8:	4a39      	ldr	r2, [pc, #228]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80060f0:	4b37      	ldr	r3, [pc, #220]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060f8:	60bb      	str	r3, [r7, #8]
 80060fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80060fc:	4b35      	ldr	r3, [pc, #212]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a34      	ldr	r2, [pc, #208]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006106:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006108:	f7fc f896 	bl	8002238 <HAL_GetTick>
 800610c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800610e:	e008      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006110:	f7fc f892 	bl	8002238 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b64      	cmp	r3, #100	@ 0x64
 800611c:	d901      	bls.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e357      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006122:	4b2c      	ldr	r3, [pc, #176]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0f0      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800612e:	4b28      	ldr	r3, [pc, #160]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006136:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d035      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	429a      	cmp	r2, r3
 800614a:	d02e      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800614c:	4b20      	ldr	r3, [pc, #128]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800614e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006154:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006156:	4b1e      	ldr	r3, [pc, #120]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800615a:	4a1d      	ldr	r2, [pc, #116]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006160:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006162:	4b1b      	ldr	r3, [pc, #108]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006166:	4a1a      	ldr	r2, [pc, #104]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006168:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800616c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800616e:	4a18      	ldr	r2, [pc, #96]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006174:	4b16      	ldr	r3, [pc, #88]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b01      	cmp	r3, #1
 800617e:	d114      	bne.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006180:	f7fc f85a 	bl	8002238 <HAL_GetTick>
 8006184:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006186:	e00a      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006188:	f7fc f856 	bl	8002238 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006196:	4293      	cmp	r3, r2
 8006198:	d901      	bls.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e319      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800619e:	4b0c      	ldr	r3, [pc, #48]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0ee      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061b6:	d111      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80061b8:	4b05      	ldr	r3, [pc, #20]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80061c4:	4b04      	ldr	r3, [pc, #16]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061c6:	400b      	ands	r3, r1
 80061c8:	4901      	ldr	r1, [pc, #4]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	608b      	str	r3, [r1, #8]
 80061ce:	e00b      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80061d0:	40023800 	.word	0x40023800
 80061d4:	40007000 	.word	0x40007000
 80061d8:	0ffffcff 	.word	0x0ffffcff
 80061dc:	4baa      	ldr	r3, [pc, #680]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	4aa9      	ldr	r2, [pc, #676]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061e2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80061e6:	6093      	str	r3, [r2, #8]
 80061e8:	4ba7      	ldr	r3, [pc, #668]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061f4:	49a4      	ldr	r1, [pc, #656]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0310 	and.w	r3, r3, #16
 8006202:	2b00      	cmp	r3, #0
 8006204:	d010      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006206:	4ba0      	ldr	r3, [pc, #640]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800620c:	4a9e      	ldr	r2, [pc, #632]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800620e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006212:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006216:	4b9c      	ldr	r3, [pc, #624]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006218:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006220:	4999      	ldr	r1, [pc, #612]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006222:	4313      	orrs	r3, r2
 8006224:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006234:	4b94      	ldr	r3, [pc, #592]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800623a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006242:	4991      	ldr	r1, [pc, #580]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006244:	4313      	orrs	r3, r2
 8006246:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006256:	4b8c      	ldr	r3, [pc, #560]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800625c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006264:	4988      	ldr	r1, [pc, #544]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006266:	4313      	orrs	r3, r2
 8006268:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00a      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006278:	4b83      	ldr	r3, [pc, #524]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800627a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006286:	4980      	ldr	r1, [pc, #512]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006288:	4313      	orrs	r3, r2
 800628a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800629a:	4b7b      	ldr	r3, [pc, #492]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800629c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a8:	4977      	ldr	r1, [pc, #476]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00a      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062bc:	4b72      	ldr	r3, [pc, #456]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c2:	f023 0203 	bic.w	r2, r3, #3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ca:	496f      	ldr	r1, [pc, #444]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062de:	4b6a      	ldr	r3, [pc, #424]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062e4:	f023 020c 	bic.w	r2, r3, #12
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ec:	4966      	ldr	r1, [pc, #408]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00a      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006300:	4b61      	ldr	r3, [pc, #388]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006306:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800630e:	495e      	ldr	r1, [pc, #376]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006310:	4313      	orrs	r3, r2
 8006312:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006322:	4b59      	ldr	r3, [pc, #356]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006328:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006330:	4955      	ldr	r1, [pc, #340]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006344:	4b50      	ldr	r3, [pc, #320]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006352:	494d      	ldr	r1, [pc, #308]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006354:	4313      	orrs	r3, r2
 8006356:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006366:	4b48      	ldr	r3, [pc, #288]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800636c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006374:	4944      	ldr	r1, [pc, #272]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006376:	4313      	orrs	r3, r2
 8006378:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006388:	4b3f      	ldr	r3, [pc, #252]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006396:	493c      	ldr	r1, [pc, #240]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80063aa:	4b37      	ldr	r3, [pc, #220]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063b8:	4933      	ldr	r1, [pc, #204]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063cc:	4b2e      	ldr	r3, [pc, #184]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063da:	492b      	ldr	r1, [pc, #172]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d011      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80063ee:	4b26      	ldr	r3, [pc, #152]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063fc:	4922      	ldr	r1, [pc, #136]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800640c:	d101      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800640e:	2301      	movs	r3, #1
 8006410:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800641e:	2301      	movs	r3, #1
 8006420:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800642e:	4b16      	ldr	r3, [pc, #88]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006434:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800643c:	4912      	ldr	r1, [pc, #72]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800643e:	4313      	orrs	r3, r2
 8006440:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00b      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006450:	4b0d      	ldr	r3, [pc, #52]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006456:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006460:	4909      	ldr	r1, [pc, #36]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d006      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 80d9 	beq.w	800662e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800647c:	4b02      	ldr	r3, [pc, #8]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a01      	ldr	r2, [pc, #4]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006482:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006486:	e001      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006488:	40023800 	.word	0x40023800
 800648c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800648e:	f7fb fed3 	bl	8002238 <HAL_GetTick>
 8006492:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006494:	e008      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006496:	f7fb fecf 	bl	8002238 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b64      	cmp	r3, #100	@ 0x64
 80064a2:	d901      	bls.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e194      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064a8:	4b6c      	ldr	r3, [pc, #432]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1f0      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d021      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d11d      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80064c8:	4b64      	ldr	r3, [pc, #400]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064ce:	0c1b      	lsrs	r3, r3, #16
 80064d0:	f003 0303 	and.w	r3, r3, #3
 80064d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064d6:	4b61      	ldr	r3, [pc, #388]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064dc:	0e1b      	lsrs	r3, r3, #24
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	019a      	lsls	r2, r3, #6
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	041b      	lsls	r3, r3, #16
 80064ee:	431a      	orrs	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	061b      	lsls	r3, r3, #24
 80064f4:	431a      	orrs	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	071b      	lsls	r3, r3, #28
 80064fc:	4957      	ldr	r1, [pc, #348]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d004      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006514:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006518:	d00a      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006522:	2b00      	cmp	r3, #0
 8006524:	d02e      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800652e:	d129      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006530:	4b4a      	ldr	r3, [pc, #296]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006532:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006536:	0c1b      	lsrs	r3, r3, #16
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800653e:	4b47      	ldr	r3, [pc, #284]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006540:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006544:	0f1b      	lsrs	r3, r3, #28
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	019a      	lsls	r2, r3, #6
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	041b      	lsls	r3, r3, #16
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	061b      	lsls	r3, r3, #24
 800655e:	431a      	orrs	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	071b      	lsls	r3, r3, #28
 8006564:	493d      	ldr	r1, [pc, #244]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800656c:	4b3b      	ldr	r3, [pc, #236]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800656e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006572:	f023 021f 	bic.w	r2, r3, #31
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657a:	3b01      	subs	r3, #1
 800657c:	4937      	ldr	r1, [pc, #220]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800657e:	4313      	orrs	r3, r2
 8006580:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01d      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006590:	4b32      	ldr	r3, [pc, #200]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006596:	0e1b      	lsrs	r3, r3, #24
 8006598:	f003 030f 	and.w	r3, r3, #15
 800659c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800659e:	4b2f      	ldr	r3, [pc, #188]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065a4:	0f1b      	lsrs	r3, r3, #28
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	019a      	lsls	r2, r3, #6
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	431a      	orrs	r2, r3
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	061b      	lsls	r3, r3, #24
 80065be:	431a      	orrs	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	071b      	lsls	r3, r3, #28
 80065c4:	4925      	ldr	r1, [pc, #148]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d011      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	019a      	lsls	r2, r3, #6
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	041b      	lsls	r3, r3, #16
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	061b      	lsls	r3, r3, #24
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	071b      	lsls	r3, r3, #28
 80065f4:	4919      	ldr	r1, [pc, #100]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80065fc:	4b17      	ldr	r3, [pc, #92]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a16      	ldr	r2, [pc, #88]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006602:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006608:	f7fb fe16 	bl	8002238 <HAL_GetTick>
 800660c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800660e:	e008      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006610:	f7fb fe12 	bl	8002238 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b64      	cmp	r3, #100	@ 0x64
 800661c:	d901      	bls.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e0d7      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006622:	4b0e      	ldr	r3, [pc, #56]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0f0      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	2b01      	cmp	r3, #1
 8006632:	f040 80cd 	bne.w	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006636:	4b09      	ldr	r3, [pc, #36]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a08      	ldr	r2, [pc, #32]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800663c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006640:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006642:	f7fb fdf9 	bl	8002238 <HAL_GetTick>
 8006646:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006648:	e00a      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800664a:	f7fb fdf5 	bl	8002238 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b64      	cmp	r3, #100	@ 0x64
 8006656:	d903      	bls.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e0ba      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800665c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006660:	4b5e      	ldr	r3, [pc, #376]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006668:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800666c:	d0ed      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800668a:	2b00      	cmp	r3, #0
 800668c:	d02e      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	d12a      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006696:	4b51      	ldr	r3, [pc, #324]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800669c:	0c1b      	lsrs	r3, r3, #16
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066a4:	4b4d      	ldr	r3, [pc, #308]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066aa:	0f1b      	lsrs	r3, r3, #28
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	019a      	lsls	r2, r3, #6
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	041b      	lsls	r3, r3, #16
 80066bc:	431a      	orrs	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	061b      	lsls	r3, r3, #24
 80066c4:	431a      	orrs	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	071b      	lsls	r3, r3, #28
 80066ca:	4944      	ldr	r1, [pc, #272]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80066d2:	4b42      	ldr	r3, [pc, #264]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e0:	3b01      	subs	r3, #1
 80066e2:	021b      	lsls	r3, r3, #8
 80066e4:	493d      	ldr	r1, [pc, #244]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d022      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006700:	d11d      	bne.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006702:	4b36      	ldr	r3, [pc, #216]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006708:	0e1b      	lsrs	r3, r3, #24
 800670a:	f003 030f 	and.w	r3, r3, #15
 800670e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006710:	4b32      	ldr	r3, [pc, #200]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006716:	0f1b      	lsrs	r3, r3, #28
 8006718:	f003 0307 	and.w	r3, r3, #7
 800671c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	019a      	lsls	r2, r3, #6
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	041b      	lsls	r3, r3, #16
 800672a:	431a      	orrs	r2, r3
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	061b      	lsls	r3, r3, #24
 8006730:	431a      	orrs	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	071b      	lsls	r3, r3, #28
 8006736:	4929      	ldr	r1, [pc, #164]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006738:	4313      	orrs	r3, r2
 800673a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0308 	and.w	r3, r3, #8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d028      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800674a:	4b24      	ldr	r3, [pc, #144]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800674c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006750:	0e1b      	lsrs	r3, r3, #24
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006758:	4b20      	ldr	r3, [pc, #128]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800675a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800675e:	0c1b      	lsrs	r3, r3, #16
 8006760:	f003 0303 	and.w	r3, r3, #3
 8006764:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	019a      	lsls	r2, r3, #6
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	041b      	lsls	r3, r3, #16
 8006770:	431a      	orrs	r2, r3
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	061b      	lsls	r3, r3, #24
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	071b      	lsls	r3, r3, #28
 800677e:	4917      	ldr	r1, [pc, #92]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006786:	4b15      	ldr	r3, [pc, #84]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800678c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006794:	4911      	ldr	r1, [pc, #68]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006796:	4313      	orrs	r3, r2
 8006798:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800679c:	4b0f      	ldr	r3, [pc, #60]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a0e      	ldr	r2, [pc, #56]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067a8:	f7fb fd46 	bl	8002238 <HAL_GetTick>
 80067ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067ae:	e008      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80067b0:	f7fb fd42 	bl	8002238 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b64      	cmp	r3, #100	@ 0x64
 80067bc:	d901      	bls.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e007      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067c2:	4b06      	ldr	r3, [pc, #24]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067ce:	d1ef      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3720      	adds	r7, #32
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	40023800 	.word	0x40023800

080067e0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e025      	b.n	8006840 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d106      	bne.n	800680e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7fa fb13 	bl	8000e34 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2202      	movs	r2, #2
 8006812:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	3304      	adds	r3, #4
 800681e:	4619      	mov	r1, r3
 8006820:	4610      	mov	r0, r2
 8006822:	f001 fd97 	bl	8008354 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6818      	ldr	r0, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	461a      	mov	r2, r3
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	f001 fdeb 	bl	800840c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800685a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	2b02      	cmp	r3, #2
 8006860:	d101      	bne.n	8006866 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006862:	2302      	movs	r3, #2
 8006864:	e021      	b.n	80068aa <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d002      	beq.n	8006872 <HAL_SDRAM_SendCommand+0x2a>
 800686c:	7dfb      	ldrb	r3, [r7, #23]
 800686e:	2b05      	cmp	r3, #5
 8006870:	d118      	bne.n	80068a4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2202      	movs	r2, #2
 8006876:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	68b9      	ldr	r1, [r7, #8]
 8006882:	4618      	mov	r0, r3
 8006884:	f001 fe2c 	bl	80084e0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b02      	cmp	r3, #2
 800688e:	d104      	bne.n	800689a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2205      	movs	r2, #5
 8006894:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006898:	e006      	b.n	80068a8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80068a2:	e001      	b.n	80068a8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e000      	b.n	80068aa <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d101      	bne.n	80068cc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80068c8:	2302      	movs	r3, #2
 80068ca:	e016      	b.n	80068fa <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d10f      	bne.n	80068f8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 fe1e 	bl	8008528 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	e000      	b.n	80068fa <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b082      	sub	sp, #8
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e049      	b.n	80069a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d106      	bne.n	800692e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7fa f8b5 	bl	8000a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2202      	movs	r2, #2
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3304      	adds	r3, #4
 800693e:	4619      	mov	r1, r3
 8006940:	4610      	mov	r0, r2
 8006942:	f000 f9dd 	bl	8006d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d001      	beq.n	80069c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e054      	b.n	8006a72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0201 	orr.w	r2, r2, #1
 80069de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a26      	ldr	r2, [pc, #152]	@ (8006a80 <HAL_TIM_Base_Start_IT+0xd0>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d022      	beq.n	8006a30 <HAL_TIM_Base_Start_IT+0x80>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069f2:	d01d      	beq.n	8006a30 <HAL_TIM_Base_Start_IT+0x80>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a22      	ldr	r2, [pc, #136]	@ (8006a84 <HAL_TIM_Base_Start_IT+0xd4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d018      	beq.n	8006a30 <HAL_TIM_Base_Start_IT+0x80>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a21      	ldr	r2, [pc, #132]	@ (8006a88 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d013      	beq.n	8006a30 <HAL_TIM_Base_Start_IT+0x80>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8006a8c <HAL_TIM_Base_Start_IT+0xdc>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d00e      	beq.n	8006a30 <HAL_TIM_Base_Start_IT+0x80>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a1e      	ldr	r2, [pc, #120]	@ (8006a90 <HAL_TIM_Base_Start_IT+0xe0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d009      	beq.n	8006a30 <HAL_TIM_Base_Start_IT+0x80>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1c      	ldr	r2, [pc, #112]	@ (8006a94 <HAL_TIM_Base_Start_IT+0xe4>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d004      	beq.n	8006a30 <HAL_TIM_Base_Start_IT+0x80>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8006a98 <HAL_TIM_Base_Start_IT+0xe8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d115      	bne.n	8006a5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689a      	ldr	r2, [r3, #8]
 8006a36:	4b19      	ldr	r3, [pc, #100]	@ (8006a9c <HAL_TIM_Base_Start_IT+0xec>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b06      	cmp	r3, #6
 8006a40:	d015      	beq.n	8006a6e <HAL_TIM_Base_Start_IT+0xbe>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a48:	d011      	beq.n	8006a6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f042 0201 	orr.w	r2, r2, #1
 8006a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5a:	e008      	b.n	8006a6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 0201 	orr.w	r2, r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	e000      	b.n	8006a70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40010000 	.word	0x40010000
 8006a84:	40000400 	.word	0x40000400
 8006a88:	40000800 	.word	0x40000800
 8006a8c:	40000c00 	.word	0x40000c00
 8006a90:	40010400 	.word	0x40010400
 8006a94:	40014000 	.word	0x40014000
 8006a98:	40001800 	.word	0x40001800
 8006a9c:	00010007 	.word	0x00010007

08006aa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d020      	beq.n	8006b04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01b      	beq.n	8006b04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f06f 0202 	mvn.w	r2, #2
 8006ad4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f8e9 	bl	8006cc2 <HAL_TIM_IC_CaptureCallback>
 8006af0:	e005      	b.n	8006afe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f8db 	bl	8006cae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f8ec 	bl	8006cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f003 0304 	and.w	r3, r3, #4
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d020      	beq.n	8006b50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01b      	beq.n	8006b50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f06f 0204 	mvn.w	r2, #4
 8006b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2202      	movs	r2, #2
 8006b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f8c3 	bl	8006cc2 <HAL_TIM_IC_CaptureCallback>
 8006b3c:	e005      	b.n	8006b4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f8b5 	bl	8006cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f8c6 	bl	8006cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d020      	beq.n	8006b9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f003 0308 	and.w	r3, r3, #8
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01b      	beq.n	8006b9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f06f 0208 	mvn.w	r2, #8
 8006b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2204      	movs	r2, #4
 8006b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f89d 	bl	8006cc2 <HAL_TIM_IC_CaptureCallback>
 8006b88:	e005      	b.n	8006b96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f88f 	bl	8006cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f8a0 	bl	8006cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f003 0310 	and.w	r3, r3, #16
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d020      	beq.n	8006be8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f003 0310 	and.w	r3, r3, #16
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01b      	beq.n	8006be8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f06f 0210 	mvn.w	r2, #16
 8006bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2208      	movs	r2, #8
 8006bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f877 	bl	8006cc2 <HAL_TIM_IC_CaptureCallback>
 8006bd4:	e005      	b.n	8006be2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f869 	bl	8006cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f87a 	bl	8006cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00c      	beq.n	8006c0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d007      	beq.n	8006c0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f06f 0201 	mvn.w	r2, #1
 8006c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7f9 fe18 	bl	800083c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d104      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00c      	beq.n	8006c3a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d007      	beq.n	8006c3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f919 	bl	8006e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00c      	beq.n	8006c5e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d007      	beq.n	8006c5e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f911 	bl	8006e80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00c      	beq.n	8006c82 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d007      	beq.n	8006c82 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f834 	bl	8006cea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	f003 0320 	and.w	r3, r3, #32
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00c      	beq.n	8006ca6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f003 0320 	and.w	r3, r3, #32
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d007      	beq.n	8006ca6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f06f 0220 	mvn.w	r2, #32
 8006c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f8d9 	bl	8006e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ca6:	bf00      	nop
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cb6:	bf00      	nop
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
	...

08006d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a46      	ldr	r2, [pc, #280]	@ (8006e2c <TIM_Base_SetConfig+0x12c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d013      	beq.n	8006d40 <TIM_Base_SetConfig+0x40>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d1e:	d00f      	beq.n	8006d40 <TIM_Base_SetConfig+0x40>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a43      	ldr	r2, [pc, #268]	@ (8006e30 <TIM_Base_SetConfig+0x130>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d00b      	beq.n	8006d40 <TIM_Base_SetConfig+0x40>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a42      	ldr	r2, [pc, #264]	@ (8006e34 <TIM_Base_SetConfig+0x134>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d007      	beq.n	8006d40 <TIM_Base_SetConfig+0x40>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a41      	ldr	r2, [pc, #260]	@ (8006e38 <TIM_Base_SetConfig+0x138>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d003      	beq.n	8006d40 <TIM_Base_SetConfig+0x40>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a40      	ldr	r2, [pc, #256]	@ (8006e3c <TIM_Base_SetConfig+0x13c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d108      	bne.n	8006d52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a35      	ldr	r2, [pc, #212]	@ (8006e2c <TIM_Base_SetConfig+0x12c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d02b      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d60:	d027      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a32      	ldr	r2, [pc, #200]	@ (8006e30 <TIM_Base_SetConfig+0x130>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d023      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a31      	ldr	r2, [pc, #196]	@ (8006e34 <TIM_Base_SetConfig+0x134>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d01f      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a30      	ldr	r2, [pc, #192]	@ (8006e38 <TIM_Base_SetConfig+0x138>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d01b      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a2f      	ldr	r2, [pc, #188]	@ (8006e3c <TIM_Base_SetConfig+0x13c>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d017      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a2e      	ldr	r2, [pc, #184]	@ (8006e40 <TIM_Base_SetConfig+0x140>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d013      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a2d      	ldr	r2, [pc, #180]	@ (8006e44 <TIM_Base_SetConfig+0x144>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00f      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a2c      	ldr	r2, [pc, #176]	@ (8006e48 <TIM_Base_SetConfig+0x148>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d00b      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8006e4c <TIM_Base_SetConfig+0x14c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d007      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a2a      	ldr	r2, [pc, #168]	@ (8006e50 <TIM_Base_SetConfig+0x150>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d003      	beq.n	8006db2 <TIM_Base_SetConfig+0xb2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a29      	ldr	r2, [pc, #164]	@ (8006e54 <TIM_Base_SetConfig+0x154>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d108      	bne.n	8006dc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a10      	ldr	r2, [pc, #64]	@ (8006e2c <TIM_Base_SetConfig+0x12c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d003      	beq.n	8006df8 <TIM_Base_SetConfig+0xf8>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a12      	ldr	r2, [pc, #72]	@ (8006e3c <TIM_Base_SetConfig+0x13c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d103      	bne.n	8006e00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	691a      	ldr	r2, [r3, #16]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d105      	bne.n	8006e1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	f023 0201 	bic.w	r2, r3, #1
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	611a      	str	r2, [r3, #16]
  }
}
 8006e1e:	bf00      	nop
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	40010000 	.word	0x40010000
 8006e30:	40000400 	.word	0x40000400
 8006e34:	40000800 	.word	0x40000800
 8006e38:	40000c00 	.word	0x40000c00
 8006e3c:	40010400 	.word	0x40010400
 8006e40:	40014000 	.word	0x40014000
 8006e44:	40014400 	.word	0x40014400
 8006e48:	40014800 	.word	0x40014800
 8006e4c:	40001800 	.word	0x40001800
 8006e50:	40001c00 	.word	0x40001c00
 8006e54:	40002000 	.word	0x40002000

08006e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e040      	b.n	8006f28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d106      	bne.n	8006ebc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7f9 fe5c 	bl	8000b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2224      	movs	r2, #36	@ 0x24
 8006ec0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0201 	bic.w	r2, r2, #1
 8006ed0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fdc2 	bl	8007a64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fb5b 	bl	800759c <UART_SetConfig>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d101      	bne.n	8006ef0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e01b      	b.n	8006f28 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006efe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0201 	orr.w	r2, r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fe41 	bl	8007ba8 <UART_CheckIdleState>
 8006f26:	4603      	mov	r3, r0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08a      	sub	sp, #40	@ 0x28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	d132      	bne.n	8006fae <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <HAL_UART_Receive_IT+0x24>
 8006f4e:	88fb      	ldrh	r3, [r7, #6]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e02b      	b.n	8006fb0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d018      	beq.n	8006f9e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	613b      	str	r3, [r7, #16]
   return(result);
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8a:	623b      	str	r3, [r7, #32]
 8006f8c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	69f9      	ldr	r1, [r7, #28]
 8006f90:	6a3a      	ldr	r2, [r7, #32]
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e6      	bne.n	8006f6c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f9e:	88fb      	ldrh	r3, [r7, #6]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	68b9      	ldr	r1, [r7, #8]
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 fec3 	bl	8007d30 <UART_Start_Receive_IT>
 8006faa:	4603      	mov	r3, r0
 8006fac:	e000      	b.n	8006fb0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006fae:	2302      	movs	r3, #2
  }
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3728      	adds	r7, #40	@ 0x28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b0ba      	sub	sp, #232	@ 0xe8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006fde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006fe2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006fec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d115      	bne.n	8007020 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ff8:	f003 0320 	and.w	r3, r3, #32
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00f      	beq.n	8007020 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007004:	f003 0320 	and.w	r3, r3, #32
 8007008:	2b00      	cmp	r3, #0
 800700a:	d009      	beq.n	8007020 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 8297 	beq.w	8007544 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	4798      	blx	r3
      }
      return;
 800701e:	e291      	b.n	8007544 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 8117 	beq.w	8007258 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800702a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d106      	bne.n	8007044 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007036:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800703a:	4b85      	ldr	r3, [pc, #532]	@ (8007250 <HAL_UART_IRQHandler+0x298>)
 800703c:	4013      	ands	r3, r2
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 810a 	beq.w	8007258 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b00      	cmp	r3, #0
 800704e:	d011      	beq.n	8007074 <HAL_UART_IRQHandler+0xbc>
 8007050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00b      	beq.n	8007074 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2201      	movs	r2, #1
 8007062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800706a:	f043 0201 	orr.w	r2, r3, #1
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	2b00      	cmp	r3, #0
 800707e:	d011      	beq.n	80070a4 <HAL_UART_IRQHandler+0xec>
 8007080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00b      	beq.n	80070a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2202      	movs	r2, #2
 8007092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800709a:	f043 0204 	orr.w	r2, r3, #4
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d011      	beq.n	80070d4 <HAL_UART_IRQHandler+0x11c>
 80070b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00b      	beq.n	80070d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2204      	movs	r2, #4
 80070c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070ca:	f043 0202 	orr.w	r2, r3, #2
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80070d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d017      	beq.n	8007110 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070e4:	f003 0320 	and.w	r3, r3, #32
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d105      	bne.n	80070f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80070ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00b      	beq.n	8007110 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2208      	movs	r2, #8
 80070fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007106:	f043 0208 	orr.w	r2, r3, #8
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007118:	2b00      	cmp	r3, #0
 800711a:	d012      	beq.n	8007142 <HAL_UART_IRQHandler+0x18a>
 800711c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007120:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00c      	beq.n	8007142 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007130:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007138:	f043 0220 	orr.w	r2, r3, #32
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 81fd 	beq.w	8007548 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800714e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00d      	beq.n	8007176 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800715a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b00      	cmp	r3, #0
 8007164:	d007      	beq.n	8007176 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800717c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800718a:	2b40      	cmp	r3, #64	@ 0x40
 800718c:	d005      	beq.n	800719a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800718e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007192:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007196:	2b00      	cmp	r3, #0
 8007198:	d04f      	beq.n	800723a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fe8e 	bl	8007ebc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071aa:	2b40      	cmp	r3, #64	@ 0x40
 80071ac:	d141      	bne.n	8007232 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3308      	adds	r3, #8
 80071b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80071c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3308      	adds	r3, #8
 80071d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80071da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80071de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80071e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80071f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1d9      	bne.n	80071ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d013      	beq.n	800722a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007206:	4a13      	ldr	r2, [pc, #76]	@ (8007254 <HAL_UART_IRQHandler+0x29c>)
 8007208:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800720e:	4618      	mov	r0, r3
 8007210:	f7fb faa0 	bl	8002754 <HAL_DMA_Abort_IT>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d017      	beq.n	800724a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800721e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007224:	4610      	mov	r0, r2
 8007226:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007228:	e00f      	b.n	800724a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f9a0 	bl	8007570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007230:	e00b      	b.n	800724a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f99c 	bl	8007570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007238:	e007      	b.n	800724a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f998 	bl	8007570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007248:	e17e      	b.n	8007548 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800724a:	bf00      	nop
    return;
 800724c:	e17c      	b.n	8007548 <HAL_UART_IRQHandler+0x590>
 800724e:	bf00      	nop
 8007250:	04000120 	.word	0x04000120
 8007254:	08007f85 	.word	0x08007f85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800725c:	2b01      	cmp	r3, #1
 800725e:	f040 814c 	bne.w	80074fa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007266:	f003 0310 	and.w	r3, r3, #16
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 8145 	beq.w	80074fa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007274:	f003 0310 	and.w	r3, r3, #16
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 813e 	beq.w	80074fa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2210      	movs	r2, #16
 8007284:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007290:	2b40      	cmp	r3, #64	@ 0x40
 8007292:	f040 80b6 	bne.w	8007402 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 8150 	beq.w	800754c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80072b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072b6:	429a      	cmp	r2, r3
 80072b8:	f080 8148 	bcs.w	800754c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072d0:	f000 8086 	beq.w	80073e0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072e0:	e853 3f00 	ldrex	r3, [r3]
 80072e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80072e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80072fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007302:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800730a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1da      	bne.n	80072d4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3308      	adds	r3, #8
 8007324:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007326:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007328:	e853 3f00 	ldrex	r3, [r3]
 800732c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800732e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007330:	f023 0301 	bic.w	r3, r3, #1
 8007334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3308      	adds	r3, #8
 800733e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007342:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007346:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800734a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007354:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e1      	bne.n	800731e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3308      	adds	r3, #8
 8007360:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800736a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800736c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007370:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3308      	adds	r3, #8
 800737a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800737e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007380:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007384:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800738c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e3      	bne.n	800735a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2220      	movs	r2, #32
 8007396:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073b0:	f023 0310 	bic.w	r3, r3, #16
 80073b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	461a      	mov	r2, r3
 80073be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e4      	bne.n	80073a0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fb f94a 	bl	8002674 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f8c2 	bl	8007584 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007400:	e0a4      	b.n	800754c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800740e:	b29b      	uxth	r3, r3
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 8096 	beq.w	8007550 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 8091 	beq.w	8007550 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007436:	e853 3f00 	ldrex	r3, [r3]
 800743a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800743c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800743e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007442:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	461a      	mov	r2, r3
 800744c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007450:	647b      	str	r3, [r7, #68]	@ 0x44
 8007452:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007454:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007458:	e841 2300 	strex	r3, r2, [r1]
 800745c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800745e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e4      	bne.n	800742e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3308      	adds	r3, #8
 800746a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746e:	e853 3f00 	ldrex	r3, [r3]
 8007472:	623b      	str	r3, [r7, #32]
   return(result);
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	f023 0301 	bic.w	r3, r3, #1
 800747a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3308      	adds	r3, #8
 8007484:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007488:	633a      	str	r2, [r7, #48]	@ 0x30
 800748a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800748e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007490:	e841 2300 	strex	r3, r2, [r1]
 8007494:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e3      	bne.n	8007464 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f023 0310 	bic.w	r3, r3, #16
 80074c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80074d2:	61fb      	str	r3, [r7, #28]
 80074d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d6:	69b9      	ldr	r1, [r7, #24]
 80074d8:	69fa      	ldr	r2, [r7, #28]
 80074da:	e841 2300 	strex	r3, r2, [r1]
 80074de:	617b      	str	r3, [r7, #20]
   return(result);
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e4      	bne.n	80074b0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2202      	movs	r2, #2
 80074ea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f846 	bl	8007584 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074f8:	e02a      	b.n	8007550 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80074fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00e      	beq.n	8007524 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800750a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800750e:	2b00      	cmp	r3, #0
 8007510:	d008      	beq.n	8007524 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007516:	2b00      	cmp	r3, #0
 8007518:	d01c      	beq.n	8007554 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	4798      	blx	r3
    }
    return;
 8007522:	e017      	b.n	8007554 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800752c:	2b00      	cmp	r3, #0
 800752e:	d012      	beq.n	8007556 <HAL_UART_IRQHandler+0x59e>
 8007530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00c      	beq.n	8007556 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fd37 	bl	8007fb0 <UART_EndTransmit_IT>
    return;
 8007542:	e008      	b.n	8007556 <HAL_UART_IRQHandler+0x59e>
      return;
 8007544:	bf00      	nop
 8007546:	e006      	b.n	8007556 <HAL_UART_IRQHandler+0x59e>
    return;
 8007548:	bf00      	nop
 800754a:	e004      	b.n	8007556 <HAL_UART_IRQHandler+0x59e>
      return;
 800754c:	bf00      	nop
 800754e:	e002      	b.n	8007556 <HAL_UART_IRQHandler+0x59e>
      return;
 8007550:	bf00      	nop
 8007552:	e000      	b.n	8007556 <HAL_UART_IRQHandler+0x59e>
    return;
 8007554:	bf00      	nop
  }

}
 8007556:	37e8      	adds	r7, #232	@ 0xe8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b088      	sub	sp, #32
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	431a      	orrs	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	431a      	orrs	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	4313      	orrs	r3, r2
 80075be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	4ba6      	ldr	r3, [pc, #664]	@ (8007860 <UART_SetConfig+0x2c4>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6812      	ldr	r2, [r2, #0]
 80075ce:	6979      	ldr	r1, [r7, #20]
 80075d0:	430b      	orrs	r3, r1
 80075d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	430a      	orrs	r2, r1
 800760c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a94      	ldr	r2, [pc, #592]	@ (8007864 <UART_SetConfig+0x2c8>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d120      	bne.n	800765a <UART_SetConfig+0xbe>
 8007618:	4b93      	ldr	r3, [pc, #588]	@ (8007868 <UART_SetConfig+0x2cc>)
 800761a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800761e:	f003 0303 	and.w	r3, r3, #3
 8007622:	2b03      	cmp	r3, #3
 8007624:	d816      	bhi.n	8007654 <UART_SetConfig+0xb8>
 8007626:	a201      	add	r2, pc, #4	@ (adr r2, 800762c <UART_SetConfig+0x90>)
 8007628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762c:	0800763d 	.word	0x0800763d
 8007630:	08007649 	.word	0x08007649
 8007634:	08007643 	.word	0x08007643
 8007638:	0800764f 	.word	0x0800764f
 800763c:	2301      	movs	r3, #1
 800763e:	77fb      	strb	r3, [r7, #31]
 8007640:	e150      	b.n	80078e4 <UART_SetConfig+0x348>
 8007642:	2302      	movs	r3, #2
 8007644:	77fb      	strb	r3, [r7, #31]
 8007646:	e14d      	b.n	80078e4 <UART_SetConfig+0x348>
 8007648:	2304      	movs	r3, #4
 800764a:	77fb      	strb	r3, [r7, #31]
 800764c:	e14a      	b.n	80078e4 <UART_SetConfig+0x348>
 800764e:	2308      	movs	r3, #8
 8007650:	77fb      	strb	r3, [r7, #31]
 8007652:	e147      	b.n	80078e4 <UART_SetConfig+0x348>
 8007654:	2310      	movs	r3, #16
 8007656:	77fb      	strb	r3, [r7, #31]
 8007658:	e144      	b.n	80078e4 <UART_SetConfig+0x348>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a83      	ldr	r2, [pc, #524]	@ (800786c <UART_SetConfig+0x2d0>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d132      	bne.n	80076ca <UART_SetConfig+0x12e>
 8007664:	4b80      	ldr	r3, [pc, #512]	@ (8007868 <UART_SetConfig+0x2cc>)
 8007666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800766a:	f003 030c 	and.w	r3, r3, #12
 800766e:	2b0c      	cmp	r3, #12
 8007670:	d828      	bhi.n	80076c4 <UART_SetConfig+0x128>
 8007672:	a201      	add	r2, pc, #4	@ (adr r2, 8007678 <UART_SetConfig+0xdc>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	080076ad 	.word	0x080076ad
 800767c:	080076c5 	.word	0x080076c5
 8007680:	080076c5 	.word	0x080076c5
 8007684:	080076c5 	.word	0x080076c5
 8007688:	080076b9 	.word	0x080076b9
 800768c:	080076c5 	.word	0x080076c5
 8007690:	080076c5 	.word	0x080076c5
 8007694:	080076c5 	.word	0x080076c5
 8007698:	080076b3 	.word	0x080076b3
 800769c:	080076c5 	.word	0x080076c5
 80076a0:	080076c5 	.word	0x080076c5
 80076a4:	080076c5 	.word	0x080076c5
 80076a8:	080076bf 	.word	0x080076bf
 80076ac:	2300      	movs	r3, #0
 80076ae:	77fb      	strb	r3, [r7, #31]
 80076b0:	e118      	b.n	80078e4 <UART_SetConfig+0x348>
 80076b2:	2302      	movs	r3, #2
 80076b4:	77fb      	strb	r3, [r7, #31]
 80076b6:	e115      	b.n	80078e4 <UART_SetConfig+0x348>
 80076b8:	2304      	movs	r3, #4
 80076ba:	77fb      	strb	r3, [r7, #31]
 80076bc:	e112      	b.n	80078e4 <UART_SetConfig+0x348>
 80076be:	2308      	movs	r3, #8
 80076c0:	77fb      	strb	r3, [r7, #31]
 80076c2:	e10f      	b.n	80078e4 <UART_SetConfig+0x348>
 80076c4:	2310      	movs	r3, #16
 80076c6:	77fb      	strb	r3, [r7, #31]
 80076c8:	e10c      	b.n	80078e4 <UART_SetConfig+0x348>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a68      	ldr	r2, [pc, #416]	@ (8007870 <UART_SetConfig+0x2d4>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d120      	bne.n	8007716 <UART_SetConfig+0x17a>
 80076d4:	4b64      	ldr	r3, [pc, #400]	@ (8007868 <UART_SetConfig+0x2cc>)
 80076d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80076de:	2b30      	cmp	r3, #48	@ 0x30
 80076e0:	d013      	beq.n	800770a <UART_SetConfig+0x16e>
 80076e2:	2b30      	cmp	r3, #48	@ 0x30
 80076e4:	d814      	bhi.n	8007710 <UART_SetConfig+0x174>
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d009      	beq.n	80076fe <UART_SetConfig+0x162>
 80076ea:	2b20      	cmp	r3, #32
 80076ec:	d810      	bhi.n	8007710 <UART_SetConfig+0x174>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <UART_SetConfig+0x15c>
 80076f2:	2b10      	cmp	r3, #16
 80076f4:	d006      	beq.n	8007704 <UART_SetConfig+0x168>
 80076f6:	e00b      	b.n	8007710 <UART_SetConfig+0x174>
 80076f8:	2300      	movs	r3, #0
 80076fa:	77fb      	strb	r3, [r7, #31]
 80076fc:	e0f2      	b.n	80078e4 <UART_SetConfig+0x348>
 80076fe:	2302      	movs	r3, #2
 8007700:	77fb      	strb	r3, [r7, #31]
 8007702:	e0ef      	b.n	80078e4 <UART_SetConfig+0x348>
 8007704:	2304      	movs	r3, #4
 8007706:	77fb      	strb	r3, [r7, #31]
 8007708:	e0ec      	b.n	80078e4 <UART_SetConfig+0x348>
 800770a:	2308      	movs	r3, #8
 800770c:	77fb      	strb	r3, [r7, #31]
 800770e:	e0e9      	b.n	80078e4 <UART_SetConfig+0x348>
 8007710:	2310      	movs	r3, #16
 8007712:	77fb      	strb	r3, [r7, #31]
 8007714:	e0e6      	b.n	80078e4 <UART_SetConfig+0x348>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a56      	ldr	r2, [pc, #344]	@ (8007874 <UART_SetConfig+0x2d8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d120      	bne.n	8007762 <UART_SetConfig+0x1c6>
 8007720:	4b51      	ldr	r3, [pc, #324]	@ (8007868 <UART_SetConfig+0x2cc>)
 8007722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007726:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800772a:	2bc0      	cmp	r3, #192	@ 0xc0
 800772c:	d013      	beq.n	8007756 <UART_SetConfig+0x1ba>
 800772e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007730:	d814      	bhi.n	800775c <UART_SetConfig+0x1c0>
 8007732:	2b80      	cmp	r3, #128	@ 0x80
 8007734:	d009      	beq.n	800774a <UART_SetConfig+0x1ae>
 8007736:	2b80      	cmp	r3, #128	@ 0x80
 8007738:	d810      	bhi.n	800775c <UART_SetConfig+0x1c0>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <UART_SetConfig+0x1a8>
 800773e:	2b40      	cmp	r3, #64	@ 0x40
 8007740:	d006      	beq.n	8007750 <UART_SetConfig+0x1b4>
 8007742:	e00b      	b.n	800775c <UART_SetConfig+0x1c0>
 8007744:	2300      	movs	r3, #0
 8007746:	77fb      	strb	r3, [r7, #31]
 8007748:	e0cc      	b.n	80078e4 <UART_SetConfig+0x348>
 800774a:	2302      	movs	r3, #2
 800774c:	77fb      	strb	r3, [r7, #31]
 800774e:	e0c9      	b.n	80078e4 <UART_SetConfig+0x348>
 8007750:	2304      	movs	r3, #4
 8007752:	77fb      	strb	r3, [r7, #31]
 8007754:	e0c6      	b.n	80078e4 <UART_SetConfig+0x348>
 8007756:	2308      	movs	r3, #8
 8007758:	77fb      	strb	r3, [r7, #31]
 800775a:	e0c3      	b.n	80078e4 <UART_SetConfig+0x348>
 800775c:	2310      	movs	r3, #16
 800775e:	77fb      	strb	r3, [r7, #31]
 8007760:	e0c0      	b.n	80078e4 <UART_SetConfig+0x348>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a44      	ldr	r2, [pc, #272]	@ (8007878 <UART_SetConfig+0x2dc>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d125      	bne.n	80077b8 <UART_SetConfig+0x21c>
 800776c:	4b3e      	ldr	r3, [pc, #248]	@ (8007868 <UART_SetConfig+0x2cc>)
 800776e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007776:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800777a:	d017      	beq.n	80077ac <UART_SetConfig+0x210>
 800777c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007780:	d817      	bhi.n	80077b2 <UART_SetConfig+0x216>
 8007782:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007786:	d00b      	beq.n	80077a0 <UART_SetConfig+0x204>
 8007788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800778c:	d811      	bhi.n	80077b2 <UART_SetConfig+0x216>
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <UART_SetConfig+0x1fe>
 8007792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007796:	d006      	beq.n	80077a6 <UART_SetConfig+0x20a>
 8007798:	e00b      	b.n	80077b2 <UART_SetConfig+0x216>
 800779a:	2300      	movs	r3, #0
 800779c:	77fb      	strb	r3, [r7, #31]
 800779e:	e0a1      	b.n	80078e4 <UART_SetConfig+0x348>
 80077a0:	2302      	movs	r3, #2
 80077a2:	77fb      	strb	r3, [r7, #31]
 80077a4:	e09e      	b.n	80078e4 <UART_SetConfig+0x348>
 80077a6:	2304      	movs	r3, #4
 80077a8:	77fb      	strb	r3, [r7, #31]
 80077aa:	e09b      	b.n	80078e4 <UART_SetConfig+0x348>
 80077ac:	2308      	movs	r3, #8
 80077ae:	77fb      	strb	r3, [r7, #31]
 80077b0:	e098      	b.n	80078e4 <UART_SetConfig+0x348>
 80077b2:	2310      	movs	r3, #16
 80077b4:	77fb      	strb	r3, [r7, #31]
 80077b6:	e095      	b.n	80078e4 <UART_SetConfig+0x348>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a2f      	ldr	r2, [pc, #188]	@ (800787c <UART_SetConfig+0x2e0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d125      	bne.n	800780e <UART_SetConfig+0x272>
 80077c2:	4b29      	ldr	r3, [pc, #164]	@ (8007868 <UART_SetConfig+0x2cc>)
 80077c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80077cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077d0:	d017      	beq.n	8007802 <UART_SetConfig+0x266>
 80077d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077d6:	d817      	bhi.n	8007808 <UART_SetConfig+0x26c>
 80077d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077dc:	d00b      	beq.n	80077f6 <UART_SetConfig+0x25a>
 80077de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077e2:	d811      	bhi.n	8007808 <UART_SetConfig+0x26c>
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d003      	beq.n	80077f0 <UART_SetConfig+0x254>
 80077e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077ec:	d006      	beq.n	80077fc <UART_SetConfig+0x260>
 80077ee:	e00b      	b.n	8007808 <UART_SetConfig+0x26c>
 80077f0:	2301      	movs	r3, #1
 80077f2:	77fb      	strb	r3, [r7, #31]
 80077f4:	e076      	b.n	80078e4 <UART_SetConfig+0x348>
 80077f6:	2302      	movs	r3, #2
 80077f8:	77fb      	strb	r3, [r7, #31]
 80077fa:	e073      	b.n	80078e4 <UART_SetConfig+0x348>
 80077fc:	2304      	movs	r3, #4
 80077fe:	77fb      	strb	r3, [r7, #31]
 8007800:	e070      	b.n	80078e4 <UART_SetConfig+0x348>
 8007802:	2308      	movs	r3, #8
 8007804:	77fb      	strb	r3, [r7, #31]
 8007806:	e06d      	b.n	80078e4 <UART_SetConfig+0x348>
 8007808:	2310      	movs	r3, #16
 800780a:	77fb      	strb	r3, [r7, #31]
 800780c:	e06a      	b.n	80078e4 <UART_SetConfig+0x348>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a1b      	ldr	r2, [pc, #108]	@ (8007880 <UART_SetConfig+0x2e4>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d138      	bne.n	800788a <UART_SetConfig+0x2ee>
 8007818:	4b13      	ldr	r3, [pc, #76]	@ (8007868 <UART_SetConfig+0x2cc>)
 800781a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800781e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007822:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007826:	d017      	beq.n	8007858 <UART_SetConfig+0x2bc>
 8007828:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800782c:	d82a      	bhi.n	8007884 <UART_SetConfig+0x2e8>
 800782e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007832:	d00b      	beq.n	800784c <UART_SetConfig+0x2b0>
 8007834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007838:	d824      	bhi.n	8007884 <UART_SetConfig+0x2e8>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <UART_SetConfig+0x2aa>
 800783e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007842:	d006      	beq.n	8007852 <UART_SetConfig+0x2b6>
 8007844:	e01e      	b.n	8007884 <UART_SetConfig+0x2e8>
 8007846:	2300      	movs	r3, #0
 8007848:	77fb      	strb	r3, [r7, #31]
 800784a:	e04b      	b.n	80078e4 <UART_SetConfig+0x348>
 800784c:	2302      	movs	r3, #2
 800784e:	77fb      	strb	r3, [r7, #31]
 8007850:	e048      	b.n	80078e4 <UART_SetConfig+0x348>
 8007852:	2304      	movs	r3, #4
 8007854:	77fb      	strb	r3, [r7, #31]
 8007856:	e045      	b.n	80078e4 <UART_SetConfig+0x348>
 8007858:	2308      	movs	r3, #8
 800785a:	77fb      	strb	r3, [r7, #31]
 800785c:	e042      	b.n	80078e4 <UART_SetConfig+0x348>
 800785e:	bf00      	nop
 8007860:	efff69f3 	.word	0xefff69f3
 8007864:	40011000 	.word	0x40011000
 8007868:	40023800 	.word	0x40023800
 800786c:	40004400 	.word	0x40004400
 8007870:	40004800 	.word	0x40004800
 8007874:	40004c00 	.word	0x40004c00
 8007878:	40005000 	.word	0x40005000
 800787c:	40011400 	.word	0x40011400
 8007880:	40007800 	.word	0x40007800
 8007884:	2310      	movs	r3, #16
 8007886:	77fb      	strb	r3, [r7, #31]
 8007888:	e02c      	b.n	80078e4 <UART_SetConfig+0x348>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a72      	ldr	r2, [pc, #456]	@ (8007a58 <UART_SetConfig+0x4bc>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d125      	bne.n	80078e0 <UART_SetConfig+0x344>
 8007894:	4b71      	ldr	r3, [pc, #452]	@ (8007a5c <UART_SetConfig+0x4c0>)
 8007896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800789a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800789e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80078a2:	d017      	beq.n	80078d4 <UART_SetConfig+0x338>
 80078a4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80078a8:	d817      	bhi.n	80078da <UART_SetConfig+0x33e>
 80078aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078ae:	d00b      	beq.n	80078c8 <UART_SetConfig+0x32c>
 80078b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078b4:	d811      	bhi.n	80078da <UART_SetConfig+0x33e>
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <UART_SetConfig+0x326>
 80078ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078be:	d006      	beq.n	80078ce <UART_SetConfig+0x332>
 80078c0:	e00b      	b.n	80078da <UART_SetConfig+0x33e>
 80078c2:	2300      	movs	r3, #0
 80078c4:	77fb      	strb	r3, [r7, #31]
 80078c6:	e00d      	b.n	80078e4 <UART_SetConfig+0x348>
 80078c8:	2302      	movs	r3, #2
 80078ca:	77fb      	strb	r3, [r7, #31]
 80078cc:	e00a      	b.n	80078e4 <UART_SetConfig+0x348>
 80078ce:	2304      	movs	r3, #4
 80078d0:	77fb      	strb	r3, [r7, #31]
 80078d2:	e007      	b.n	80078e4 <UART_SetConfig+0x348>
 80078d4:	2308      	movs	r3, #8
 80078d6:	77fb      	strb	r3, [r7, #31]
 80078d8:	e004      	b.n	80078e4 <UART_SetConfig+0x348>
 80078da:	2310      	movs	r3, #16
 80078dc:	77fb      	strb	r3, [r7, #31]
 80078de:	e001      	b.n	80078e4 <UART_SetConfig+0x348>
 80078e0:	2310      	movs	r3, #16
 80078e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078ec:	d15b      	bne.n	80079a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80078ee:	7ffb      	ldrb	r3, [r7, #31]
 80078f0:	2b08      	cmp	r3, #8
 80078f2:	d828      	bhi.n	8007946 <UART_SetConfig+0x3aa>
 80078f4:	a201      	add	r2, pc, #4	@ (adr r2, 80078fc <UART_SetConfig+0x360>)
 80078f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fa:	bf00      	nop
 80078fc:	08007921 	.word	0x08007921
 8007900:	08007929 	.word	0x08007929
 8007904:	08007931 	.word	0x08007931
 8007908:	08007947 	.word	0x08007947
 800790c:	08007937 	.word	0x08007937
 8007910:	08007947 	.word	0x08007947
 8007914:	08007947 	.word	0x08007947
 8007918:	08007947 	.word	0x08007947
 800791c:	0800793f 	.word	0x0800793f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007920:	f7fe fb14 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 8007924:	61b8      	str	r0, [r7, #24]
        break;
 8007926:	e013      	b.n	8007950 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007928:	f7fe fb24 	bl	8005f74 <HAL_RCC_GetPCLK2Freq>
 800792c:	61b8      	str	r0, [r7, #24]
        break;
 800792e:	e00f      	b.n	8007950 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007930:	4b4b      	ldr	r3, [pc, #300]	@ (8007a60 <UART_SetConfig+0x4c4>)
 8007932:	61bb      	str	r3, [r7, #24]
        break;
 8007934:	e00c      	b.n	8007950 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007936:	f7fe fa37 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 800793a:	61b8      	str	r0, [r7, #24]
        break;
 800793c:	e008      	b.n	8007950 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800793e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007942:	61bb      	str	r3, [r7, #24]
        break;
 8007944:	e004      	b.n	8007950 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	77bb      	strb	r3, [r7, #30]
        break;
 800794e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d074      	beq.n	8007a40 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	005a      	lsls	r2, r3, #1
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	085b      	lsrs	r3, r3, #1
 8007960:	441a      	add	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	fbb2 f3f3 	udiv	r3, r2, r3
 800796a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	2b0f      	cmp	r3, #15
 8007970:	d916      	bls.n	80079a0 <UART_SetConfig+0x404>
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007978:	d212      	bcs.n	80079a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	b29b      	uxth	r3, r3
 800797e:	f023 030f 	bic.w	r3, r3, #15
 8007982:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	085b      	lsrs	r3, r3, #1
 8007988:	b29b      	uxth	r3, r3
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	b29a      	uxth	r2, r3
 8007990:	89fb      	ldrh	r3, [r7, #14]
 8007992:	4313      	orrs	r3, r2
 8007994:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	89fa      	ldrh	r2, [r7, #14]
 800799c:	60da      	str	r2, [r3, #12]
 800799e:	e04f      	b.n	8007a40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	77bb      	strb	r3, [r7, #30]
 80079a4:	e04c      	b.n	8007a40 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079a6:	7ffb      	ldrb	r3, [r7, #31]
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d828      	bhi.n	80079fe <UART_SetConfig+0x462>
 80079ac:	a201      	add	r2, pc, #4	@ (adr r2, 80079b4 <UART_SetConfig+0x418>)
 80079ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b2:	bf00      	nop
 80079b4:	080079d9 	.word	0x080079d9
 80079b8:	080079e1 	.word	0x080079e1
 80079bc:	080079e9 	.word	0x080079e9
 80079c0:	080079ff 	.word	0x080079ff
 80079c4:	080079ef 	.word	0x080079ef
 80079c8:	080079ff 	.word	0x080079ff
 80079cc:	080079ff 	.word	0x080079ff
 80079d0:	080079ff 	.word	0x080079ff
 80079d4:	080079f7 	.word	0x080079f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079d8:	f7fe fab8 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 80079dc:	61b8      	str	r0, [r7, #24]
        break;
 80079de:	e013      	b.n	8007a08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079e0:	f7fe fac8 	bl	8005f74 <HAL_RCC_GetPCLK2Freq>
 80079e4:	61b8      	str	r0, [r7, #24]
        break;
 80079e6:	e00f      	b.n	8007a08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007a60 <UART_SetConfig+0x4c4>)
 80079ea:	61bb      	str	r3, [r7, #24]
        break;
 80079ec:	e00c      	b.n	8007a08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ee:	f7fe f9db 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 80079f2:	61b8      	str	r0, [r7, #24]
        break;
 80079f4:	e008      	b.n	8007a08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079fa:	61bb      	str	r3, [r7, #24]
        break;
 80079fc:	e004      	b.n	8007a08 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	77bb      	strb	r3, [r7, #30]
        break;
 8007a06:	bf00      	nop
    }

    if (pclk != 0U)
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d018      	beq.n	8007a40 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	085a      	lsrs	r2, r3, #1
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	441a      	add	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2b0f      	cmp	r3, #15
 8007a26:	d909      	bls.n	8007a3c <UART_SetConfig+0x4a0>
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a2e:	d205      	bcs.n	8007a3c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	60da      	str	r2, [r3, #12]
 8007a3a:	e001      	b.n	8007a40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007a4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3720      	adds	r7, #32
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	40007c00 	.word	0x40007c00
 8007a5c:	40023800 	.word	0x40023800
 8007a60:	00f42400 	.word	0x00f42400

08007a64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a70:	f003 0308 	and.w	r3, r3, #8
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00a      	beq.n	8007a8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00a      	beq.n	8007ad2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad6:	f003 0304 	and.w	r3, r3, #4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af8:	f003 0310 	and.w	r3, r3, #16
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00a      	beq.n	8007b16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	430a      	orrs	r2, r1
 8007b14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1a:	f003 0320 	and.w	r3, r3, #32
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00a      	beq.n	8007b38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	430a      	orrs	r2, r1
 8007b36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01a      	beq.n	8007b7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b62:	d10a      	bne.n	8007b7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	605a      	str	r2, [r3, #4]
  }
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08c      	sub	sp, #48	@ 0x30
 8007bac:	af02      	add	r7, sp, #8
 8007bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bb8:	f7fa fb3e 	bl	8002238 <HAL_GetTick>
 8007bbc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0308 	and.w	r3, r3, #8
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	d12e      	bne.n	8007c2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f83b 	bl	8007c56 <UART_WaitOnFlagUntilTimeout>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d021      	beq.n	8007c2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	e853 3f00 	ldrex	r3, [r3]
 8007bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bfa:	623b      	str	r3, [r7, #32]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	461a      	mov	r2, r3
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	61fb      	str	r3, [r7, #28]
 8007c06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	69b9      	ldr	r1, [r7, #24]
 8007c0a:	69fa      	ldr	r2, [r7, #28]
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	617b      	str	r3, [r7, #20]
   return(result);
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e6      	bne.n	8007be6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e011      	b.n	8007c4e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3728      	adds	r7, #40	@ 0x28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	60b9      	str	r1, [r7, #8]
 8007c60:	603b      	str	r3, [r7, #0]
 8007c62:	4613      	mov	r3, r2
 8007c64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c66:	e04f      	b.n	8007d08 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c6e:	d04b      	beq.n	8007d08 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c70:	f7fa fae2 	bl	8002238 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d302      	bcc.n	8007c86 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	e04e      	b.n	8007d28 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d037      	beq.n	8007d08 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b80      	cmp	r3, #128	@ 0x80
 8007c9c:	d034      	beq.n	8007d08 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2b40      	cmp	r3, #64	@ 0x40
 8007ca2:	d031      	beq.n	8007d08 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	f003 0308 	and.w	r3, r3, #8
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d110      	bne.n	8007cd4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2208      	movs	r2, #8
 8007cb8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 f8fe 	bl	8007ebc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2208      	movs	r2, #8
 8007cc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e029      	b.n	8007d28 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ce2:	d111      	bne.n	8007d08 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007cec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 f8e4 	bl	8007ebc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2220      	movs	r2, #32
 8007cf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e00f      	b.n	8007d28 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	69da      	ldr	r2, [r3, #28]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	4013      	ands	r3, r2
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	bf0c      	ite	eq
 8007d18:	2301      	moveq	r3, #1
 8007d1a:	2300      	movne	r3, #0
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	461a      	mov	r2, r3
 8007d20:	79fb      	ldrb	r3, [r7, #7]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d0a0      	beq.n	8007c68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b097      	sub	sp, #92	@ 0x5c
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	88fa      	ldrh	r2, [r7, #6]
 8007d48:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	88fa      	ldrh	r2, [r7, #6]
 8007d50:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d62:	d10e      	bne.n	8007d82 <UART_Start_Receive_IT+0x52>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d105      	bne.n	8007d78 <UART_Start_Receive_IT+0x48>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007d72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d76:	e02d      	b.n	8007dd4 <UART_Start_Receive_IT+0xa4>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	22ff      	movs	r2, #255	@ 0xff
 8007d7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d80:	e028      	b.n	8007dd4 <UART_Start_Receive_IT+0xa4>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10d      	bne.n	8007da6 <UART_Start_Receive_IT+0x76>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d104      	bne.n	8007d9c <UART_Start_Receive_IT+0x6c>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	22ff      	movs	r2, #255	@ 0xff
 8007d96:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d9a:	e01b      	b.n	8007dd4 <UART_Start_Receive_IT+0xa4>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	227f      	movs	r2, #127	@ 0x7f
 8007da0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007da4:	e016      	b.n	8007dd4 <UART_Start_Receive_IT+0xa4>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dae:	d10d      	bne.n	8007dcc <UART_Start_Receive_IT+0x9c>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d104      	bne.n	8007dc2 <UART_Start_Receive_IT+0x92>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	227f      	movs	r2, #127	@ 0x7f
 8007dbc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007dc0:	e008      	b.n	8007dd4 <UART_Start_Receive_IT+0xa4>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	223f      	movs	r2, #63	@ 0x3f
 8007dc6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007dca:	e003      	b.n	8007dd4 <UART_Start_Receive_IT+0xa4>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2222      	movs	r2, #34	@ 0x22
 8007de0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3308      	adds	r3, #8
 8007dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dee:	e853 3f00 	ldrex	r3, [r3]
 8007df2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df6:	f043 0301 	orr.w	r3, r3, #1
 8007dfa:	657b      	str	r3, [r7, #84]	@ 0x54
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3308      	adds	r3, #8
 8007e02:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e04:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007e06:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e0c:	e841 2300 	strex	r3, r2, [r1]
 8007e10:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1e5      	bne.n	8007de4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e20:	d107      	bne.n	8007e32 <UART_Start_Receive_IT+0x102>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d103      	bne.n	8007e32 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4a21      	ldr	r2, [pc, #132]	@ (8007eb4 <UART_Start_Receive_IT+0x184>)
 8007e2e:	669a      	str	r2, [r3, #104]	@ 0x68
 8007e30:	e002      	b.n	8007e38 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4a20      	ldr	r2, [pc, #128]	@ (8007eb8 <UART_Start_Receive_IT+0x188>)
 8007e36:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d019      	beq.n	8007e74 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e48:	e853 3f00 	ldrex	r3, [r3]
 8007e4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e50:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007e54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e60:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e6      	bne.n	8007e40 <UART_Start_Receive_IT+0x110>
 8007e72:	e018      	b.n	8007ea6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	e853 3f00 	ldrex	r3, [r3]
 8007e80:	613b      	str	r3, [r7, #16]
   return(result);
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	f043 0320 	orr.w	r3, r3, #32
 8007e88:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e92:	623b      	str	r3, [r7, #32]
 8007e94:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	69f9      	ldr	r1, [r7, #28]
 8007e98:	6a3a      	ldr	r2, [r7, #32]
 8007e9a:	e841 2300 	strex	r3, r2, [r1]
 8007e9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1e6      	bne.n	8007e74 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	375c      	adds	r7, #92	@ 0x5c
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	080081ad 	.word	0x080081ad
 8007eb8:	08008005 	.word	0x08008005

08007ebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b095      	sub	sp, #84	@ 0x54
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ed8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ee2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ee4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ee8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007eea:	e841 2300 	strex	r3, r2, [r1]
 8007eee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e6      	bne.n	8007ec4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3308      	adds	r3, #8
 8007efc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	e853 3f00 	ldrex	r3, [r3]
 8007f04:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	f023 0301 	bic.w	r3, r3, #1
 8007f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3308      	adds	r3, #8
 8007f14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f1e:	e841 2300 	strex	r3, r2, [r1]
 8007f22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1e5      	bne.n	8007ef6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d118      	bne.n	8007f64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	e853 3f00 	ldrex	r3, [r3]
 8007f3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	f023 0310 	bic.w	r3, r3, #16
 8007f46:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f50:	61bb      	str	r3, [r7, #24]
 8007f52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f54:	6979      	ldr	r1, [r7, #20]
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	e841 2300 	strex	r3, r2, [r1]
 8007f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1e6      	bne.n	8007f32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2220      	movs	r2, #32
 8007f68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007f78:	bf00      	nop
 8007f7a:	3754      	adds	r7, #84	@ 0x54
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f7ff fae4 	bl	8007570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fa8:	bf00      	nop
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b088      	sub	sp, #32
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	e853 3f00 	ldrex	r3, [r3]
 8007fc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fcc:	61fb      	str	r3, [r7, #28]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	61bb      	str	r3, [r7, #24]
 8007fd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	6979      	ldr	r1, [r7, #20]
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	e841 2300 	strex	r3, r2, [r1]
 8007fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1e6      	bne.n	8007fb8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2220      	movs	r2, #32
 8007fee:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7ff fab0 	bl	800755c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ffc:	bf00      	nop
 8007ffe:	3720      	adds	r7, #32
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b09c      	sub	sp, #112	@ 0x70
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008012:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800801c:	2b22      	cmp	r3, #34	@ 0x22
 800801e:	f040 80b9 	bne.w	8008194 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008028:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800802c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008030:	b2d9      	uxtb	r1, r3
 8008032:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008036:	b2da      	uxtb	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800803c:	400a      	ands	r2, r1
 800803e:	b2d2      	uxtb	r2, r2
 8008040:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008046:	1c5a      	adds	r2, r3, #1
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008052:	b29b      	uxth	r3, r3
 8008054:	3b01      	subs	r3, #1
 8008056:	b29a      	uxth	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008064:	b29b      	uxth	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	f040 809c 	bne.w	80081a4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800807a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800807c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008080:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800808a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800808c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008090:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1e6      	bne.n	800806c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3308      	adds	r3, #8
 80080a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a8:	e853 3f00 	ldrex	r3, [r3]
 80080ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080b0:	f023 0301 	bic.w	r3, r3, #1
 80080b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3308      	adds	r3, #8
 80080bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80080be:	647a      	str	r2, [r7, #68]	@ 0x44
 80080c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1e5      	bne.n	800809e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2220      	movs	r2, #32
 80080d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d018      	beq.n	8008126 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	623b      	str	r3, [r7, #32]
   return(result);
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008108:	663b      	str	r3, [r7, #96]	@ 0x60
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008112:	633b      	str	r3, [r7, #48]	@ 0x30
 8008114:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e6      	bne.n	80080f4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800812a:	2b01      	cmp	r3, #1
 800812c:	d12e      	bne.n	800818c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	e853 3f00 	ldrex	r3, [r3]
 8008140:	60fb      	str	r3, [r7, #12]
   return(result);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f023 0310 	bic.w	r3, r3, #16
 8008148:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008152:	61fb      	str	r3, [r7, #28]
 8008154:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	69b9      	ldr	r1, [r7, #24]
 8008158:	69fa      	ldr	r2, [r7, #28]
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	617b      	str	r3, [r7, #20]
   return(result);
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e6      	bne.n	8008134 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69db      	ldr	r3, [r3, #28]
 800816c:	f003 0310 	and.w	r3, r3, #16
 8008170:	2b10      	cmp	r3, #16
 8008172:	d103      	bne.n	800817c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2210      	movs	r2, #16
 800817a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff f9fd 	bl	8007584 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800818a:	e00b      	b.n	80081a4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7f8 fa01 	bl	8000594 <HAL_UART_RxCpltCallback>
}
 8008192:	e007      	b.n	80081a4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	699a      	ldr	r2, [r3, #24]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f042 0208 	orr.w	r2, r2, #8
 80081a2:	619a      	str	r2, [r3, #24]
}
 80081a4:	bf00      	nop
 80081a6:	3770      	adds	r7, #112	@ 0x70
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b09c      	sub	sp, #112	@ 0x70
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80081ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081c4:	2b22      	cmp	r3, #34	@ 0x22
 80081c6:	f040 80b9 	bne.w	800833c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80081da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80081de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80081e2:	4013      	ands	r3, r2
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80081e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ee:	1c9a      	adds	r2, r3, #2
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	3b01      	subs	r3, #1
 80081fe:	b29a      	uxth	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800820c:	b29b      	uxth	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	f040 809c 	bne.w	800834c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008224:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008228:	667b      	str	r3, [r7, #100]	@ 0x64
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008232:	657b      	str	r3, [r7, #84]	@ 0x54
 8008234:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008236:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008238:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e6      	bne.n	8008214 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3308      	adds	r3, #8
 800824c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008258:	f023 0301 	bic.w	r3, r3, #1
 800825c:	663b      	str	r3, [r7, #96]	@ 0x60
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3308      	adds	r3, #8
 8008264:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008266:	643a      	str	r2, [r7, #64]	@ 0x40
 8008268:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800826c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e5      	bne.n	8008246 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d018      	beq.n	80082ce <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a2:	6a3b      	ldr	r3, [r7, #32]
 80082a4:	e853 3f00 	ldrex	r3, [r3]
 80082a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80082b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082bc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082c2:	e841 2300 	strex	r3, r2, [r1]
 80082c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1e6      	bne.n	800829c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d12e      	bne.n	8008334 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	e853 3f00 	ldrex	r3, [r3]
 80082e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	f023 0310 	bic.w	r3, r3, #16
 80082f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	461a      	mov	r2, r3
 80082f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80082fa:	61bb      	str	r3, [r7, #24]
 80082fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fe:	6979      	ldr	r1, [r7, #20]
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	e841 2300 	strex	r3, r2, [r1]
 8008306:	613b      	str	r3, [r7, #16]
   return(result);
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1e6      	bne.n	80082dc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	f003 0310 	and.w	r3, r3, #16
 8008318:	2b10      	cmp	r3, #16
 800831a:	d103      	bne.n	8008324 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2210      	movs	r2, #16
 8008322:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7ff f929 	bl	8007584 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008332:	e00b      	b.n	800834c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7f8 f92d 	bl	8000594 <HAL_UART_RxCpltCallback>
}
 800833a:	e007      	b.n	800834c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	699a      	ldr	r2, [r3, #24]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f042 0208 	orr.w	r2, r2, #8
 800834a:	619a      	str	r2, [r3, #24]
}
 800834c:	bf00      	nop
 800834e:	3770      	adds	r7, #112	@ 0x70
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d121      	bne.n	80083aa <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	4b27      	ldr	r3, [pc, #156]	@ (8008408 <FMC_SDRAM_Init+0xb4>)
 800836c:	4013      	ands	r3, r2
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	6851      	ldr	r1, [r2, #4]
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	6892      	ldr	r2, [r2, #8]
 8008376:	4311      	orrs	r1, r2
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	68d2      	ldr	r2, [r2, #12]
 800837c:	4311      	orrs	r1, r2
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	6912      	ldr	r2, [r2, #16]
 8008382:	4311      	orrs	r1, r2
 8008384:	683a      	ldr	r2, [r7, #0]
 8008386:	6952      	ldr	r2, [r2, #20]
 8008388:	4311      	orrs	r1, r2
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	6992      	ldr	r2, [r2, #24]
 800838e:	4311      	orrs	r1, r2
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	69d2      	ldr	r2, [r2, #28]
 8008394:	4311      	orrs	r1, r2
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	6a12      	ldr	r2, [r2, #32]
 800839a:	4311      	orrs	r1, r2
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80083a0:	430a      	orrs	r2, r1
 80083a2:	431a      	orrs	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	e026      	b.n	80083f8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	69d9      	ldr	r1, [r3, #28]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	4319      	orrs	r1, r3
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c0:	430b      	orrs	r3, r1
 80083c2:	431a      	orrs	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	4b0e      	ldr	r3, [pc, #56]	@ (8008408 <FMC_SDRAM_Init+0xb4>)
 80083ce:	4013      	ands	r3, r2
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	6851      	ldr	r1, [r2, #4]
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	6892      	ldr	r2, [r2, #8]
 80083d8:	4311      	orrs	r1, r2
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	68d2      	ldr	r2, [r2, #12]
 80083de:	4311      	orrs	r1, r2
 80083e0:	683a      	ldr	r2, [r7, #0]
 80083e2:	6912      	ldr	r2, [r2, #16]
 80083e4:	4311      	orrs	r1, r2
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	6952      	ldr	r2, [r2, #20]
 80083ea:	4311      	orrs	r1, r2
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	6992      	ldr	r2, [r2, #24]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	431a      	orrs	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	ffff8000 	.word	0xffff8000

0800840c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d128      	bne.n	8008470 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	1e59      	subs	r1, r3, #1
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	3b01      	subs	r3, #1
 8008432:	011b      	lsls	r3, r3, #4
 8008434:	4319      	orrs	r1, r3
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	3b01      	subs	r3, #1
 800843c:	021b      	lsls	r3, r3, #8
 800843e:	4319      	orrs	r1, r3
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	3b01      	subs	r3, #1
 8008446:	031b      	lsls	r3, r3, #12
 8008448:	4319      	orrs	r1, r3
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	3b01      	subs	r3, #1
 8008450:	041b      	lsls	r3, r3, #16
 8008452:	4319      	orrs	r1, r3
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	3b01      	subs	r3, #1
 800845a:	051b      	lsls	r3, r3, #20
 800845c:	4319      	orrs	r1, r3
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	3b01      	subs	r3, #1
 8008464:	061b      	lsls	r3, r3, #24
 8008466:	430b      	orrs	r3, r1
 8008468:	431a      	orrs	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	609a      	str	r2, [r3, #8]
 800846e:	e02d      	b.n	80084cc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	4b19      	ldr	r3, [pc, #100]	@ (80084dc <FMC_SDRAM_Timing_Init+0xd0>)
 8008476:	4013      	ands	r3, r2
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	68d2      	ldr	r2, [r2, #12]
 800847c:	3a01      	subs	r2, #1
 800847e:	0311      	lsls	r1, r2, #12
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	6952      	ldr	r2, [r2, #20]
 8008484:	3a01      	subs	r2, #1
 8008486:	0512      	lsls	r2, r2, #20
 8008488:	430a      	orrs	r2, r1
 800848a:	431a      	orrs	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	1e59      	subs	r1, r3, #1
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	3b01      	subs	r3, #1
 80084a4:	011b      	lsls	r3, r3, #4
 80084a6:	4319      	orrs	r1, r3
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	3b01      	subs	r3, #1
 80084ae:	021b      	lsls	r3, r3, #8
 80084b0:	4319      	orrs	r1, r3
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	3b01      	subs	r3, #1
 80084b8:	041b      	lsls	r3, r3, #16
 80084ba:	4319      	orrs	r1, r3
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	3b01      	subs	r3, #1
 80084c2:	061b      	lsls	r3, r3, #24
 80084c4:	430b      	orrs	r3, r1
 80084c6:	431a      	orrs	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	ff0f0fff 	.word	0xff0f0fff

080084e0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	691a      	ldr	r2, [r3, #16]
 80084f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008524 <FMC_SDRAM_SendCommand+0x44>)
 80084f2:	4013      	ands	r3, r2
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	6811      	ldr	r1, [r2, #0]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	6852      	ldr	r2, [r2, #4]
 80084fc:	4311      	orrs	r1, r2
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	6892      	ldr	r2, [r2, #8]
 8008502:	3a01      	subs	r2, #1
 8008504:	0152      	lsls	r2, r2, #5
 8008506:	4311      	orrs	r1, r2
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	68d2      	ldr	r2, [r2, #12]
 800850c:	0252      	lsls	r2, r2, #9
 800850e:	430a      	orrs	r2, r1
 8008510:	431a      	orrs	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	ffc00000 	.word	0xffc00000

08008528 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	695a      	ldr	r2, [r3, #20]
 8008536:	4b07      	ldr	r3, [pc, #28]	@ (8008554 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8008538:	4013      	ands	r3, r2
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	0052      	lsls	r2, r2, #1
 800853e:	431a      	orrs	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	ffffc001 	.word	0xffffc001

08008558 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f043 0201 	orr.w	r2, r3, #1
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800857a:	b480      	push	{r7}
 800857c:	b083      	sub	sp, #12
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	f023 0201 	bic.w	r2, r3, #1
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3301      	adds	r3, #1
 80085ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085b6:	d901      	bls.n	80085bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e01b      	b.n	80085f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	daf2      	bge.n	80085aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80085c4:	2300      	movs	r3, #0
 80085c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	019b      	lsls	r3, r3, #6
 80085cc:	f043 0220 	orr.w	r2, r3, #32
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	3301      	adds	r3, #1
 80085d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085e0:	d901      	bls.n	80085e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e006      	b.n	80085f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	f003 0320 	and.w	r3, r3, #32
 80085ee:	2b20      	cmp	r3, #32
 80085f0:	d0f0      	beq.n	80085d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008608:	2300      	movs	r3, #0
 800860a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3301      	adds	r3, #1
 8008610:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008618:	d901      	bls.n	800861e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e018      	b.n	8008650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	2b00      	cmp	r3, #0
 8008624:	daf2      	bge.n	800860c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2210      	movs	r2, #16
 800862e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3301      	adds	r3, #1
 8008634:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800863c:	d901      	bls.n	8008642 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e006      	b.n	8008650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	f003 0310 	and.w	r3, r3, #16
 800864a:	2b10      	cmp	r3, #16
 800864c:	d0f0      	beq.n	8008630 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800865c:	b480      	push	{r7}
 800865e:	b08b      	sub	sp, #44	@ 0x2c
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	4613      	mov	r3, r2
 8008668:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008672:	88fb      	ldrh	r3, [r7, #6]
 8008674:	089b      	lsrs	r3, r3, #2
 8008676:	b29b      	uxth	r3, r3
 8008678:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800867a:	88fb      	ldrh	r3, [r7, #6]
 800867c:	f003 0303 	and.w	r3, r3, #3
 8008680:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008682:	2300      	movs	r3, #0
 8008684:	623b      	str	r3, [r7, #32]
 8008686:	e014      	b.n	80086b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008692:	601a      	str	r2, [r3, #0]
    pDest++;
 8008694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008696:	3301      	adds	r3, #1
 8008698:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800869a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869c:	3301      	adds	r3, #1
 800869e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80086a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a2:	3301      	adds	r3, #1
 80086a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80086a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a8:	3301      	adds	r3, #1
 80086aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	3301      	adds	r3, #1
 80086b0:	623b      	str	r3, [r7, #32]
 80086b2:	6a3a      	ldr	r2, [r7, #32]
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d3e6      	bcc.n	8008688 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80086ba:	8bfb      	ldrh	r3, [r7, #30]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d01e      	beq.n	80086fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086ca:	461a      	mov	r2, r3
 80086cc:	f107 0310 	add.w	r3, r7, #16
 80086d0:	6812      	ldr	r2, [r2, #0]
 80086d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	fa22 f303 	lsr.w	r3, r2, r3
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e4:	701a      	strb	r2, [r3, #0]
      i++;
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	3301      	adds	r3, #1
 80086ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80086ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ee:	3301      	adds	r3, #1
 80086f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80086f2:	8bfb      	ldrh	r3, [r7, #30]
 80086f4:	3b01      	subs	r3, #1
 80086f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80086f8:	8bfb      	ldrh	r3, [r7, #30]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1ea      	bne.n	80086d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80086fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008700:	4618      	mov	r0, r3
 8008702:	372c      	adds	r7, #44	@ 0x2c
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	4013      	ands	r3, r2
 8008722:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008724:	68fb      	ldr	r3, [r7, #12]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008732:	b480      	push	{r7}
 8008734:	b085      	sub	sp, #20
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	460b      	mov	r3, r1
 800873c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008742:	78fb      	ldrb	r3, [r7, #3]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	4413      	add	r3, r2
 800874a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008752:	78fb      	ldrb	r3, [r7, #3]
 8008754:	015a      	lsls	r2, r3, #5
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	4413      	add	r3, r2
 800875a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	4013      	ands	r3, r2
 8008764:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008766:	68bb      	ldr	r3, [r7, #8]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	f003 0301 	and.w	r3, r3, #1
}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80087ae:	f023 0303 	bic.w	r3, r3, #3
 80087b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	78fb      	ldrb	r3, [r7, #3]
 80087be:	f003 0303 	and.w	r3, r3, #3
 80087c2:	68f9      	ldr	r1, [r7, #12]
 80087c4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80087c8:	4313      	orrs	r3, r2
 80087ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80087cc:	78fb      	ldrb	r3, [r7, #3]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d107      	bne.n	80087e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087d8:	461a      	mov	r2, r3
 80087da:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80087de:	6053      	str	r3, [r2, #4]
 80087e0:	e00c      	b.n	80087fc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80087e2:	78fb      	ldrb	r3, [r7, #3]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d107      	bne.n	80087f8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ee:	461a      	mov	r2, r3
 80087f0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80087f4:	6053      	str	r3, [r2, #4]
 80087f6:	e001      	b.n	80087fc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e000      	b.n	80087fe <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800880a:	b480      	push	{r7}
 800880c:	b085      	sub	sp, #20
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	b29b      	uxth	r3, r3
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800882c:	b480      	push	{r7}
 800882e:	b089      	sub	sp, #36	@ 0x24
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800883c:	78fb      	ldrb	r3, [r7, #3]
 800883e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008840:	2300      	movs	r3, #0
 8008842:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	4413      	add	r3, r2
 800884c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	0c9b      	lsrs	r3, r3, #18
 8008854:	f003 0303 	and.w	r3, r3, #3
 8008858:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	4413      	add	r3, r2
 8008862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	0fdb      	lsrs	r3, r3, #31
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	4413      	add	r3, r2
 8008878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	0fdb      	lsrs	r3, r3, #31
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f003 0320 	and.w	r3, r3, #32
 800888e:	2b20      	cmp	r3, #32
 8008890:	d10d      	bne.n	80088ae <USB_HC_Halt+0x82>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10a      	bne.n	80088ae <USB_HC_Halt+0x82>
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d005      	beq.n	80088aa <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d002      	beq.n	80088aa <USB_HC_Halt+0x7e>
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d101      	bne.n	80088ae <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	e0d8      	b.n	8008a60 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <USB_HC_Halt+0x8e>
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d173      	bne.n	80089a2 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	69ba      	ldr	r2, [r7, #24]
 80088ca:	0151      	lsls	r1, r2, #5
 80088cc:	69fa      	ldr	r2, [r7, #28]
 80088ce:	440a      	add	r2, r1
 80088d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088d8:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f003 0320 	and.w	r3, r3, #32
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d14a      	bne.n	800897c <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d133      	bne.n	800895a <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	69ba      	ldr	r2, [r7, #24]
 8008902:	0151      	lsls	r1, r2, #5
 8008904:	69fa      	ldr	r2, [r7, #28]
 8008906:	440a      	add	r2, r1
 8008908:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800890c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008910:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	4413      	add	r3, r2
 800891a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	0151      	lsls	r1, r2, #5
 8008924:	69fa      	ldr	r2, [r7, #28]
 8008926:	440a      	add	r2, r1
 8008928:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800892c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008930:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	3301      	adds	r3, #1
 8008936:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800893e:	d82e      	bhi.n	800899e <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	4413      	add	r3, r2
 8008948:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008952:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008956:	d0ec      	beq.n	8008932 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008958:	e081      	b.n	8008a5e <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	015a      	lsls	r2, r3, #5
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	4413      	add	r3, r2
 8008962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	0151      	lsls	r1, r2, #5
 800896c:	69fa      	ldr	r2, [r7, #28]
 800896e:	440a      	add	r2, r1
 8008970:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008974:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008978:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800897a:	e070      	b.n	8008a5e <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	4413      	add	r3, r2
 8008984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	69ba      	ldr	r2, [r7, #24]
 800898c:	0151      	lsls	r1, r2, #5
 800898e:	69fa      	ldr	r2, [r7, #28]
 8008990:	440a      	add	r2, r1
 8008992:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008996:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800899a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800899c:	e05f      	b.n	8008a5e <USB_HC_Halt+0x232>
            break;
 800899e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80089a0:	e05d      	b.n	8008a5e <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	015a      	lsls	r2, r3, #5
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	4413      	add	r3, r2
 80089aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	69ba      	ldr	r2, [r7, #24]
 80089b2:	0151      	lsls	r1, r2, #5
 80089b4:	69fa      	ldr	r2, [r7, #28]
 80089b6:	440a      	add	r2, r1
 80089b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80089c0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d133      	bne.n	8008a3a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	015a      	lsls	r2, r3, #5
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	4413      	add	r3, r2
 80089da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	0151      	lsls	r1, r2, #5
 80089e4:	69fa      	ldr	r2, [r7, #28]
 80089e6:	440a      	add	r2, r1
 80089e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089f0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	015a      	lsls	r2, r3, #5
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	4413      	add	r3, r2
 80089fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	0151      	lsls	r1, r2, #5
 8008a04:	69fa      	ldr	r2, [r7, #28]
 8008a06:	440a      	add	r2, r1
 8008a08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a10:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	3301      	adds	r3, #1
 8008a16:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008a1e:	d81d      	bhi.n	8008a5c <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	015a      	lsls	r2, r3, #5
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a36:	d0ec      	beq.n	8008a12 <USB_HC_Halt+0x1e6>
 8008a38:	e011      	b.n	8008a5e <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	0151      	lsls	r1, r2, #5
 8008a4c:	69fa      	ldr	r2, [r7, #28]
 8008a4e:	440a      	add	r2, r1
 8008a50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a58:	6013      	str	r3, [r2, #0]
 8008a5a:	e000      	b.n	8008a5e <USB_HC_Halt+0x232>
          break;
 8008a5c:	bf00      	nop
    }
  }

  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3724      	adds	r7, #36	@ 0x24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b088      	sub	sp, #32
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f7ff fd7a 	bl	800857a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a86:	2110      	movs	r1, #16
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7ff fd87 	bl	800859c <USB_FlushTxFifo>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f7ff fdb1 	bl	8008600 <USB_FlushRxFifo>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	61bb      	str	r3, [r7, #24]
 8008aac:	e01f      	b.n	8008aee <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ac4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008acc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ad4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	3301      	adds	r3, #1
 8008aec:	61bb      	str	r3, [r7, #24]
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	2b0f      	cmp	r3, #15
 8008af2:	d9dc      	bls.n	8008aae <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008af4:	2300      	movs	r3, #0
 8008af6:	61bb      	str	r3, [r7, #24]
 8008af8:	e034      	b.n	8008b64 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	015a      	lsls	r2, r3, #5
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	4413      	add	r3, r2
 8008b02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b10:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b18:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b20:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	015a      	lsls	r2, r3, #5
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	4413      	add	r3, r2
 8008b2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b2e:	461a      	mov	r2, r3
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	3301      	adds	r3, #1
 8008b38:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b40:	d80c      	bhi.n	8008b5c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b58:	d0ec      	beq.n	8008b34 <USB_StopHost+0xc8>
 8008b5a:	e000      	b.n	8008b5e <USB_StopHost+0xf2>
        break;
 8008b5c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	3301      	adds	r3, #1
 8008b62:	61bb      	str	r3, [r7, #24]
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	2b0f      	cmp	r3, #15
 8008b68:	d9c7      	bls.n	8008afa <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b70:	461a      	mov	r2, r3
 8008b72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b76:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b7e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff fce9 	bl	8008558 <USB_EnableGlobalInt>

  return ret;
 8008b86:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3720      	adds	r7, #32
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f804 	bl	8008bb4 <USBH_HandleSof>
}
 8008bac:	bf00      	nop
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b0b      	cmp	r3, #11
 8008bc4:	d10a      	bne.n	8008bdc <USBH_HandleSof+0x28>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d005      	beq.n	8008bdc <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	4798      	blx	r3
  }
}
 8008bdc:	bf00      	nop
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008c08:	2200      	movs	r2, #0
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	f000 f8ae 	bl	8008d6c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008c10:	bf00      	nop
}
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008c28:	bf00      	nop
}
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008c68:	2200      	movs	r2, #0
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	f000 f87e 	bl	8008d6c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f001 f956 	bl	8009f4c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	791b      	ldrb	r3, [r3, #4]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f830 	bl	8008d0c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	795b      	ldrb	r3, [r3, #5]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f82a 	bl	8008d0c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008ccc:	2200      	movs	r2, #0
 8008cce:	4619      	mov	r1, r3
 8008cd0:	f000 f84c 	bl	8008d6c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b082      	sub	sp, #8
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	f000 f835 	bl	8008d6c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008d18:	78fb      	ldrb	r3, [r7, #3]
 8008d1a:	2b0f      	cmp	r3, #15
 8008d1c:	d80d      	bhi.n	8008d3a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	33e0      	adds	r3, #224	@ 0xe0
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	78fb      	ldrb	r3, [r7, #3]
 8008d2c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008d30:	6879      	ldr	r1, [r7, #4]
 8008d32:	33e0      	adds	r3, #224	@ 0xe0
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	440b      	add	r3, r1
 8008d38:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d4e:	f3ef 8305 	mrs	r3, IPSR
 8008d52:	607b      	str	r3, [r7, #4]
  return(result);
 8008d54:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	bf14      	ite	ne
 8008d5a:	2301      	movne	r3, #1
 8008d5c:	2300      	moveq	r3, #0
 8008d5e:	b2db      	uxtb	r3, r3
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <osMessagePut+0x1e>
    ticks = 1;
 8008d86:	2301      	movs	r3, #1
 8008d88:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008d8a:	f7ff ffdd 	bl	8008d48 <inHandlerMode>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d018      	beq.n	8008dc6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008d94:	f107 0210 	add.w	r2, r7, #16
 8008d98:	f107 0108 	add.w	r1, r7, #8
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f000 f9b6 	bl	8009110 <xQueueGenericSendFromISR>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d001      	beq.n	8008dae <osMessagePut+0x42>
      return osErrorOS;
 8008daa:	23ff      	movs	r3, #255	@ 0xff
 8008dac:	e018      	b.n	8008de0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d014      	beq.n	8008dde <osMessagePut+0x72>
 8008db4:	4b0c      	ldr	r3, [pc, #48]	@ (8008de8 <osMessagePut+0x7c>)
 8008db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	e00b      	b.n	8008dde <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008dc6:	f107 0108 	add.w	r1, r7, #8
 8008dca:	2300      	movs	r3, #0
 8008dcc:	697a      	ldr	r2, [r7, #20]
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f000 f894 	bl	8008efc <xQueueGenericSend>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d001      	beq.n	8008dde <osMessagePut+0x72>
      return osErrorOS;
 8008dda:	23ff      	movs	r3, #255	@ 0xff
 8008ddc:	e000      	b.n	8008de0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	e000ed04 	.word	0xe000ed04

08008dec <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	689a      	ldr	r2, [r3, #8]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	683a      	ldr	r2, [r7, #0]
 8008e16:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	1c5a      	adds	r2, r3, #1
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	601a      	str	r2, [r3, #0]
}
 8008e28:	bf00      	nop
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e4a:	d103      	bne.n	8008e54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	e00c      	b.n	8008e6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	3308      	adds	r3, #8
 8008e58:	60fb      	str	r3, [r7, #12]
 8008e5a:	e002      	b.n	8008e62 <vListInsert+0x2e>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d2f6      	bcs.n	8008e5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	1c5a      	adds	r2, r3, #1
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	601a      	str	r2, [r3, #0]
}
 8008e9a:	bf00      	nop
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b085      	sub	sp, #20
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	6892      	ldr	r2, [r2, #8]
 8008ebc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	6852      	ldr	r2, [r2, #4]
 8008ec6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d103      	bne.n	8008eda <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	689a      	ldr	r2, [r3, #8]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	1e5a      	subs	r2, r3, #1
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
	...

08008efc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08e      	sub	sp, #56	@ 0x38
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
 8008f08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10d      	bne.n	8008f34 <xQueueGenericSend+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1c:	b672      	cpsid	i
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	b662      	cpsie	i
 8008f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008f2e:	bf00      	nop
 8008f30:	bf00      	nop
 8008f32:	e7fd      	b.n	8008f30 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d103      	bne.n	8008f42 <xQueueGenericSend+0x46>
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d101      	bne.n	8008f46 <xQueueGenericSend+0x4a>
 8008f42:	2301      	movs	r3, #1
 8008f44:	e000      	b.n	8008f48 <xQueueGenericSend+0x4c>
 8008f46:	2300      	movs	r3, #0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10d      	bne.n	8008f68 <xQueueGenericSend+0x6c>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f50:	b672      	cpsid	i
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	b662      	cpsie	i
 8008f60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008f62:	bf00      	nop
 8008f64:	bf00      	nop
 8008f66:	e7fd      	b.n	8008f64 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d103      	bne.n	8008f76 <xQueueGenericSend+0x7a>
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d101      	bne.n	8008f7a <xQueueGenericSend+0x7e>
 8008f76:	2301      	movs	r3, #1
 8008f78:	e000      	b.n	8008f7c <xQueueGenericSend+0x80>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10d      	bne.n	8008f9c <xQueueGenericSend+0xa0>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f84:	b672      	cpsid	i
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	b662      	cpsie	i
 8008f94:	623b      	str	r3, [r7, #32]
}
 8008f96:	bf00      	nop
 8008f98:	bf00      	nop
 8008f9a:	e7fd      	b.n	8008f98 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f9c:	f000 fd56 	bl	8009a4c <xTaskGetSchedulerState>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d102      	bne.n	8008fac <xQueueGenericSend+0xb0>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <xQueueGenericSend+0xb4>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <xQueueGenericSend+0xb6>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10d      	bne.n	8008fd2 <xQueueGenericSend+0xd6>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fba:	b672      	cpsid	i
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	b662      	cpsie	i
 8008fca:	61fb      	str	r3, [r7, #28]
}
 8008fcc:	bf00      	nop
 8008fce:	bf00      	nop
 8008fd0:	e7fd      	b.n	8008fce <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fd2:	f000 fe61 	bl	8009c98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d302      	bcc.n	8008fe8 <xQueueGenericSend+0xec>
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d129      	bne.n	800903c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fee:	f000 f932 	bl	8009256 <prvCopyDataToQueue>
 8008ff2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d010      	beq.n	800901e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffe:	3324      	adds	r3, #36	@ 0x24
 8009000:	4618      	mov	r0, r3
 8009002:	f000 fc13 	bl	800982c <xTaskRemoveFromEventList>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d013      	beq.n	8009034 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800900c:	4b3f      	ldr	r3, [pc, #252]	@ (800910c <xQueueGenericSend+0x210>)
 800900e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	e00a      	b.n	8009034 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800901e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009020:	2b00      	cmp	r3, #0
 8009022:	d007      	beq.n	8009034 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009024:	4b39      	ldr	r3, [pc, #228]	@ (800910c <xQueueGenericSend+0x210>)
 8009026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800902a:	601a      	str	r2, [r3, #0]
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009034:	f000 fe66 	bl	8009d04 <vPortExitCritical>
				return pdPASS;
 8009038:	2301      	movs	r3, #1
 800903a:	e063      	b.n	8009104 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d103      	bne.n	800904a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009042:	f000 fe5f 	bl	8009d04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009046:	2300      	movs	r3, #0
 8009048:	e05c      	b.n	8009104 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800904a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800904c:	2b00      	cmp	r3, #0
 800904e:	d106      	bne.n	800905e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009050:	f107 0314 	add.w	r3, r7, #20
 8009054:	4618      	mov	r0, r3
 8009056:	f000 fc4f 	bl	80098f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800905a:	2301      	movs	r3, #1
 800905c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800905e:	f000 fe51 	bl	8009d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009062:	f000 f9cd 	bl	8009400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009066:	f000 fe17 	bl	8009c98 <vPortEnterCritical>
 800906a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009070:	b25b      	sxtb	r3, r3
 8009072:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009076:	d103      	bne.n	8009080 <xQueueGenericSend+0x184>
 8009078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907a:	2200      	movs	r2, #0
 800907c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009082:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009086:	b25b      	sxtb	r3, r3
 8009088:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800908c:	d103      	bne.n	8009096 <xQueueGenericSend+0x19a>
 800908e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009090:	2200      	movs	r2, #0
 8009092:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009096:	f000 fe35 	bl	8009d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800909a:	1d3a      	adds	r2, r7, #4
 800909c:	f107 0314 	add.w	r3, r7, #20
 80090a0:	4611      	mov	r1, r2
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 fc3e 	bl	8009924 <xTaskCheckForTimeOut>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d124      	bne.n	80090f8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80090ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090b0:	f000 f98d 	bl	80093ce <prvIsQueueFull>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d018      	beq.n	80090ec <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80090ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090bc:	3310      	adds	r3, #16
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	4611      	mov	r1, r2
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fb8a 	bl	80097dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80090c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090ca:	f000 f92e 	bl	800932a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80090ce:	f000 f9a5 	bl	800941c <xTaskResumeAll>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f47f af7c 	bne.w	8008fd2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80090da:	4b0c      	ldr	r3, [pc, #48]	@ (800910c <xQueueGenericSend+0x210>)
 80090dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090e0:	601a      	str	r2, [r3, #0]
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	e772      	b.n	8008fd2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80090ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090ee:	f000 f91c 	bl	800932a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090f2:	f000 f993 	bl	800941c <xTaskResumeAll>
 80090f6:	e76c      	b.n	8008fd2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80090f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090fa:	f000 f916 	bl	800932a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090fe:	f000 f98d 	bl	800941c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009102:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009104:	4618      	mov	r0, r3
 8009106:	3738      	adds	r7, #56	@ 0x38
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	e000ed04 	.word	0xe000ed04

08009110 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b08e      	sub	sp, #56	@ 0x38
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
 800911c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10d      	bne.n	8009144 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912c:	b672      	cpsid	i
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	b662      	cpsie	i
 800913c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800913e:	bf00      	nop
 8009140:	bf00      	nop
 8009142:	e7fd      	b.n	8009140 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d103      	bne.n	8009152 <xQueueGenericSendFromISR+0x42>
 800914a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <xQueueGenericSendFromISR+0x46>
 8009152:	2301      	movs	r3, #1
 8009154:	e000      	b.n	8009158 <xQueueGenericSendFromISR+0x48>
 8009156:	2300      	movs	r3, #0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10d      	bne.n	8009178 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009160:	b672      	cpsid	i
 8009162:	f383 8811 	msr	BASEPRI, r3
 8009166:	f3bf 8f6f 	isb	sy
 800916a:	f3bf 8f4f 	dsb	sy
 800916e:	b662      	cpsie	i
 8009170:	623b      	str	r3, [r7, #32]
}
 8009172:	bf00      	nop
 8009174:	bf00      	nop
 8009176:	e7fd      	b.n	8009174 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	2b02      	cmp	r3, #2
 800917c:	d103      	bne.n	8009186 <xQueueGenericSendFromISR+0x76>
 800917e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009182:	2b01      	cmp	r3, #1
 8009184:	d101      	bne.n	800918a <xQueueGenericSendFromISR+0x7a>
 8009186:	2301      	movs	r3, #1
 8009188:	e000      	b.n	800918c <xQueueGenericSendFromISR+0x7c>
 800918a:	2300      	movs	r3, #0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10d      	bne.n	80091ac <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009194:	b672      	cpsid	i
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	b662      	cpsie	i
 80091a4:	61fb      	str	r3, [r7, #28]
}
 80091a6:	bf00      	nop
 80091a8:	bf00      	nop
 80091aa:	e7fd      	b.n	80091a8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091ac:	f000 fe30 	bl	8009e10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80091b0:	f3ef 8211 	mrs	r2, BASEPRI
 80091b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b8:	b672      	cpsid	i
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	b662      	cpsie	i
 80091c8:	61ba      	str	r2, [r7, #24]
 80091ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80091cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d8:	429a      	cmp	r2, r3
 80091da:	d302      	bcc.n	80091e2 <xQueueGenericSendFromISR+0xd2>
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d12c      	bne.n	800923c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80091e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	68b9      	ldr	r1, [r7, #8]
 80091f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091f2:	f000 f830 	bl	8009256 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80091fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091fe:	d112      	bne.n	8009226 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009204:	2b00      	cmp	r3, #0
 8009206:	d016      	beq.n	8009236 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920a:	3324      	adds	r3, #36	@ 0x24
 800920c:	4618      	mov	r0, r3
 800920e:	f000 fb0d 	bl	800982c <xTaskRemoveFromEventList>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00e      	beq.n	8009236 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00b      	beq.n	8009236 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	e007      	b.n	8009236 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009226:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800922a:	3301      	adds	r3, #1
 800922c:	b2db      	uxtb	r3, r3
 800922e:	b25a      	sxtb	r2, r3
 8009230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009232:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009236:	2301      	movs	r3, #1
 8009238:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800923a:	e001      	b.n	8009240 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800923c:	2300      	movs	r3, #0
 800923e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009242:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800924a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800924c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800924e:	4618      	mov	r0, r3
 8009250:	3738      	adds	r7, #56	@ 0x38
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b086      	sub	sp, #24
 800925a:	af00      	add	r7, sp, #0
 800925c:	60f8      	str	r0, [r7, #12]
 800925e:	60b9      	str	r1, [r7, #8]
 8009260:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009262:	2300      	movs	r3, #0
 8009264:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10d      	bne.n	8009290 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d14d      	bne.n	8009318 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	4618      	mov	r0, r3
 8009282:	f000 fc01 	bl	8009a88 <xTaskPriorityDisinherit>
 8009286:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	609a      	str	r2, [r3, #8]
 800928e:	e043      	b.n	8009318 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d119      	bne.n	80092ca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6858      	ldr	r0, [r3, #4]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800929e:	461a      	mov	r2, r3
 80092a0:	68b9      	ldr	r1, [r7, #8]
 80092a2:	f000 ff13 	bl	800a0cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ae:	441a      	add	r2, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d32b      	bcc.n	8009318 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	605a      	str	r2, [r3, #4]
 80092c8:	e026      	b.n	8009318 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	68d8      	ldr	r0, [r3, #12]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d2:	461a      	mov	r2, r3
 80092d4:	68b9      	ldr	r1, [r7, #8]
 80092d6:	f000 fef9 	bl	800a0cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	68da      	ldr	r2, [r3, #12]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092e2:	425b      	negs	r3, r3
 80092e4:	441a      	add	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	68da      	ldr	r2, [r3, #12]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d207      	bcs.n	8009306 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	689a      	ldr	r2, [r3, #8]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092fe:	425b      	negs	r3, r3
 8009300:	441a      	add	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b02      	cmp	r3, #2
 800930a:	d105      	bne.n	8009318 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	3b01      	subs	r3, #1
 8009316:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009320:	697b      	ldr	r3, [r7, #20]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b084      	sub	sp, #16
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009332:	f000 fcb1 	bl	8009c98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800933c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800933e:	e011      	b.n	8009364 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009344:	2b00      	cmp	r3, #0
 8009346:	d012      	beq.n	800936e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	3324      	adds	r3, #36	@ 0x24
 800934c:	4618      	mov	r0, r3
 800934e:	f000 fa6d 	bl	800982c <xTaskRemoveFromEventList>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009358:	f000 fb4c 	bl	80099f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	3b01      	subs	r3, #1
 8009360:	b2db      	uxtb	r3, r3
 8009362:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009368:	2b00      	cmp	r3, #0
 800936a:	dce9      	bgt.n	8009340 <prvUnlockQueue+0x16>
 800936c:	e000      	b.n	8009370 <prvUnlockQueue+0x46>
					break;
 800936e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	22ff      	movs	r2, #255	@ 0xff
 8009374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009378:	f000 fcc4 	bl	8009d04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800937c:	f000 fc8c 	bl	8009c98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009386:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009388:	e011      	b.n	80093ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d012      	beq.n	80093b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	3310      	adds	r3, #16
 8009396:	4618      	mov	r0, r3
 8009398:	f000 fa48 	bl	800982c <xTaskRemoveFromEventList>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80093a2:	f000 fb27 	bl	80099f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093a6:	7bbb      	ldrb	r3, [r7, #14]
 80093a8:	3b01      	subs	r3, #1
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	dce9      	bgt.n	800938a <prvUnlockQueue+0x60>
 80093b6:	e000      	b.n	80093ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80093b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	22ff      	movs	r2, #255	@ 0xff
 80093be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80093c2:	f000 fc9f 	bl	8009d04 <vPortExitCritical>
}
 80093c6:	bf00      	nop
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b084      	sub	sp, #16
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093d6:	f000 fc5f 	bl	8009c98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d102      	bne.n	80093ec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80093e6:	2301      	movs	r3, #1
 80093e8:	60fb      	str	r3, [r7, #12]
 80093ea:	e001      	b.n	80093f0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80093ec:	2300      	movs	r3, #0
 80093ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093f0:	f000 fc88 	bl	8009d04 <vPortExitCritical>

	return xReturn;
 80093f4:	68fb      	ldr	r3, [r7, #12]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
	...

08009400 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009400:	b480      	push	{r7}
 8009402:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009404:	4b04      	ldr	r3, [pc, #16]	@ (8009418 <vTaskSuspendAll+0x18>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	3301      	adds	r3, #1
 800940a:	4a03      	ldr	r2, [pc, #12]	@ (8009418 <vTaskSuspendAll+0x18>)
 800940c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800940e:	bf00      	nop
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr
 8009418:	2000067c 	.word	0x2000067c

0800941c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009422:	2300      	movs	r3, #0
 8009424:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009426:	2300      	movs	r3, #0
 8009428:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800942a:	4b43      	ldr	r3, [pc, #268]	@ (8009538 <xTaskResumeAll+0x11c>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10d      	bne.n	800944e <xTaskResumeAll+0x32>
	__asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009436:	b672      	cpsid	i
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	b662      	cpsie	i
 8009446:	603b      	str	r3, [r7, #0]
}
 8009448:	bf00      	nop
 800944a:	bf00      	nop
 800944c:	e7fd      	b.n	800944a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800944e:	f000 fc23 	bl	8009c98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009452:	4b39      	ldr	r3, [pc, #228]	@ (8009538 <xTaskResumeAll+0x11c>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3b01      	subs	r3, #1
 8009458:	4a37      	ldr	r2, [pc, #220]	@ (8009538 <xTaskResumeAll+0x11c>)
 800945a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800945c:	4b36      	ldr	r3, [pc, #216]	@ (8009538 <xTaskResumeAll+0x11c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d161      	bne.n	8009528 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009464:	4b35      	ldr	r3, [pc, #212]	@ (800953c <xTaskResumeAll+0x120>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d05d      	beq.n	8009528 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800946c:	e02e      	b.n	80094cc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800946e:	4b34      	ldr	r3, [pc, #208]	@ (8009540 <xTaskResumeAll+0x124>)
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	3318      	adds	r3, #24
 800947a:	4618      	mov	r0, r3
 800947c:	f7ff fd13 	bl	8008ea6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3304      	adds	r3, #4
 8009484:	4618      	mov	r0, r3
 8009486:	f7ff fd0e 	bl	8008ea6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948e:	2201      	movs	r2, #1
 8009490:	409a      	lsls	r2, r3
 8009492:	4b2c      	ldr	r3, [pc, #176]	@ (8009544 <xTaskResumeAll+0x128>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4313      	orrs	r3, r2
 8009498:	4a2a      	ldr	r2, [pc, #168]	@ (8009544 <xTaskResumeAll+0x128>)
 800949a:	6013      	str	r3, [r2, #0]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094a0:	4613      	mov	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4a27      	ldr	r2, [pc, #156]	@ (8009548 <xTaskResumeAll+0x12c>)
 80094aa:	441a      	add	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3304      	adds	r3, #4
 80094b0:	4619      	mov	r1, r3
 80094b2:	4610      	mov	r0, r2
 80094b4:	f7ff fc9a 	bl	8008dec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094bc:	4b23      	ldr	r3, [pc, #140]	@ (800954c <xTaskResumeAll+0x130>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d302      	bcc.n	80094cc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80094c6:	4b22      	ldr	r3, [pc, #136]	@ (8009550 <xTaskResumeAll+0x134>)
 80094c8:	2201      	movs	r2, #1
 80094ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009540 <xTaskResumeAll+0x124>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1cc      	bne.n	800946e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094da:	f000 fa97 	bl	8009a0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80094de:	4b1d      	ldr	r3, [pc, #116]	@ (8009554 <xTaskResumeAll+0x138>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d010      	beq.n	800950c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094ea:	f000 f837 	bl	800955c <xTaskIncrementTick>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d002      	beq.n	80094fa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80094f4:	4b16      	ldr	r3, [pc, #88]	@ (8009550 <xTaskResumeAll+0x134>)
 80094f6:	2201      	movs	r2, #1
 80094f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1f1      	bne.n	80094ea <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8009506:	4b13      	ldr	r3, [pc, #76]	@ (8009554 <xTaskResumeAll+0x138>)
 8009508:	2200      	movs	r2, #0
 800950a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800950c:	4b10      	ldr	r3, [pc, #64]	@ (8009550 <xTaskResumeAll+0x134>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d009      	beq.n	8009528 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009514:	2301      	movs	r3, #1
 8009516:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009518:	4b0f      	ldr	r3, [pc, #60]	@ (8009558 <xTaskResumeAll+0x13c>)
 800951a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800951e:	601a      	str	r2, [r3, #0]
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009528:	f000 fbec 	bl	8009d04 <vPortExitCritical>

	return xAlreadyYielded;
 800952c:	68bb      	ldr	r3, [r7, #8]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	2000067c 	.word	0x2000067c
 800953c:	2000065c 	.word	0x2000065c
 8009540:	20000634 	.word	0x20000634
 8009544:	20000664 	.word	0x20000664
 8009548:	200005a0 	.word	0x200005a0
 800954c:	2000059c 	.word	0x2000059c
 8009550:	20000670 	.word	0x20000670
 8009554:	2000066c 	.word	0x2000066c
 8009558:	e000ed04 	.word	0xe000ed04

0800955c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009562:	2300      	movs	r3, #0
 8009564:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009566:	4b50      	ldr	r3, [pc, #320]	@ (80096a8 <xTaskIncrementTick+0x14c>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	f040 808b 	bne.w	8009686 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009570:	4b4e      	ldr	r3, [pc, #312]	@ (80096ac <xTaskIncrementTick+0x150>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3301      	adds	r3, #1
 8009576:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009578:	4a4c      	ldr	r2, [pc, #304]	@ (80096ac <xTaskIncrementTick+0x150>)
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d123      	bne.n	80095cc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009584:	4b4a      	ldr	r3, [pc, #296]	@ (80096b0 <xTaskIncrementTick+0x154>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00d      	beq.n	80095aa <xTaskIncrementTick+0x4e>
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009592:	b672      	cpsid	i
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	b662      	cpsie	i
 80095a2:	603b      	str	r3, [r7, #0]
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop
 80095a8:	e7fd      	b.n	80095a6 <xTaskIncrementTick+0x4a>
 80095aa:	4b41      	ldr	r3, [pc, #260]	@ (80096b0 <xTaskIncrementTick+0x154>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	60fb      	str	r3, [r7, #12]
 80095b0:	4b40      	ldr	r3, [pc, #256]	@ (80096b4 <xTaskIncrementTick+0x158>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a3e      	ldr	r2, [pc, #248]	@ (80096b0 <xTaskIncrementTick+0x154>)
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	4a3e      	ldr	r2, [pc, #248]	@ (80096b4 <xTaskIncrementTick+0x158>)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6013      	str	r3, [r2, #0]
 80095be:	4b3e      	ldr	r3, [pc, #248]	@ (80096b8 <xTaskIncrementTick+0x15c>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	3301      	adds	r3, #1
 80095c4:	4a3c      	ldr	r2, [pc, #240]	@ (80096b8 <xTaskIncrementTick+0x15c>)
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	f000 fa20 	bl	8009a0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095cc:	4b3b      	ldr	r3, [pc, #236]	@ (80096bc <xTaskIncrementTick+0x160>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d348      	bcc.n	8009668 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095d6:	4b36      	ldr	r3, [pc, #216]	@ (80096b0 <xTaskIncrementTick+0x154>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d104      	bne.n	80095ea <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095e0:	4b36      	ldr	r3, [pc, #216]	@ (80096bc <xTaskIncrementTick+0x160>)
 80095e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095e6:	601a      	str	r2, [r3, #0]
					break;
 80095e8:	e03e      	b.n	8009668 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ea:	4b31      	ldr	r3, [pc, #196]	@ (80096b0 <xTaskIncrementTick+0x154>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d203      	bcs.n	800960a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009602:	4a2e      	ldr	r2, [pc, #184]	@ (80096bc <xTaskIncrementTick+0x160>)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009608:	e02e      	b.n	8009668 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	3304      	adds	r3, #4
 800960e:	4618      	mov	r0, r3
 8009610:	f7ff fc49 	bl	8008ea6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009618:	2b00      	cmp	r3, #0
 800961a:	d004      	beq.n	8009626 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	3318      	adds	r3, #24
 8009620:	4618      	mov	r0, r3
 8009622:	f7ff fc40 	bl	8008ea6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800962a:	2201      	movs	r2, #1
 800962c:	409a      	lsls	r2, r3
 800962e:	4b24      	ldr	r3, [pc, #144]	@ (80096c0 <xTaskIncrementTick+0x164>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4313      	orrs	r3, r2
 8009634:	4a22      	ldr	r2, [pc, #136]	@ (80096c0 <xTaskIncrementTick+0x164>)
 8009636:	6013      	str	r3, [r2, #0]
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800963c:	4613      	mov	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4413      	add	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4a1f      	ldr	r2, [pc, #124]	@ (80096c4 <xTaskIncrementTick+0x168>)
 8009646:	441a      	add	r2, r3
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	3304      	adds	r3, #4
 800964c:	4619      	mov	r1, r3
 800964e:	4610      	mov	r0, r2
 8009650:	f7ff fbcc 	bl	8008dec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009658:	4b1b      	ldr	r3, [pc, #108]	@ (80096c8 <xTaskIncrementTick+0x16c>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965e:	429a      	cmp	r2, r3
 8009660:	d3b9      	bcc.n	80095d6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009662:	2301      	movs	r3, #1
 8009664:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009666:	e7b6      	b.n	80095d6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009668:	4b17      	ldr	r3, [pc, #92]	@ (80096c8 <xTaskIncrementTick+0x16c>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800966e:	4915      	ldr	r1, [pc, #84]	@ (80096c4 <xTaskIncrementTick+0x168>)
 8009670:	4613      	mov	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	440b      	add	r3, r1
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d907      	bls.n	8009690 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009680:	2301      	movs	r3, #1
 8009682:	617b      	str	r3, [r7, #20]
 8009684:	e004      	b.n	8009690 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009686:	4b11      	ldr	r3, [pc, #68]	@ (80096cc <xTaskIncrementTick+0x170>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3301      	adds	r3, #1
 800968c:	4a0f      	ldr	r2, [pc, #60]	@ (80096cc <xTaskIncrementTick+0x170>)
 800968e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009690:	4b0f      	ldr	r3, [pc, #60]	@ (80096d0 <xTaskIncrementTick+0x174>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009698:	2301      	movs	r3, #1
 800969a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800969c:	697b      	ldr	r3, [r7, #20]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3718      	adds	r7, #24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	2000067c 	.word	0x2000067c
 80096ac:	20000660 	.word	0x20000660
 80096b0:	2000062c 	.word	0x2000062c
 80096b4:	20000630 	.word	0x20000630
 80096b8:	20000674 	.word	0x20000674
 80096bc:	20000678 	.word	0x20000678
 80096c0:	20000664 	.word	0x20000664
 80096c4:	200005a0 	.word	0x200005a0
 80096c8:	2000059c 	.word	0x2000059c
 80096cc:	2000066c 	.word	0x2000066c
 80096d0:	20000670 	.word	0x20000670

080096d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b088      	sub	sp, #32
 80096d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096da:	4b3b      	ldr	r3, [pc, #236]	@ (80097c8 <vTaskSwitchContext+0xf4>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d003      	beq.n	80096ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096e2:	4b3a      	ldr	r3, [pc, #232]	@ (80097cc <vTaskSwitchContext+0xf8>)
 80096e4:	2201      	movs	r2, #1
 80096e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096e8:	e069      	b.n	80097be <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 80096ea:	4b38      	ldr	r3, [pc, #224]	@ (80097cc <vTaskSwitchContext+0xf8>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80096f0:	4b37      	ldr	r3, [pc, #220]	@ (80097d0 <vTaskSwitchContext+0xfc>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096f6:	61fb      	str	r3, [r7, #28]
 80096f8:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80096fc:	61bb      	str	r3, [r7, #24]
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	69ba      	ldr	r2, [r7, #24]
 8009704:	429a      	cmp	r2, r3
 8009706:	d111      	bne.n	800972c <vTaskSwitchContext+0x58>
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	3304      	adds	r3, #4
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	69ba      	ldr	r2, [r7, #24]
 8009710:	429a      	cmp	r2, r3
 8009712:	d10b      	bne.n	800972c <vTaskSwitchContext+0x58>
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	3308      	adds	r3, #8
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	69ba      	ldr	r2, [r7, #24]
 800971c:	429a      	cmp	r2, r3
 800971e:	d105      	bne.n	800972c <vTaskSwitchContext+0x58>
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	330c      	adds	r3, #12
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	69ba      	ldr	r2, [r7, #24]
 8009728:	429a      	cmp	r2, r3
 800972a:	d008      	beq.n	800973e <vTaskSwitchContext+0x6a>
 800972c:	4b28      	ldr	r3, [pc, #160]	@ (80097d0 <vTaskSwitchContext+0xfc>)
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	4b27      	ldr	r3, [pc, #156]	@ (80097d0 <vTaskSwitchContext+0xfc>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3334      	adds	r3, #52	@ 0x34
 8009736:	4619      	mov	r1, r3
 8009738:	4610      	mov	r0, r2
 800973a:	f7f6 ff1f 	bl	800057c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800973e:	4b25      	ldr	r3, [pc, #148]	@ (80097d4 <vTaskSwitchContext+0x100>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	fab3 f383 	clz	r3, r3
 800974a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800974c:	7afb      	ldrb	r3, [r7, #11]
 800974e:	f1c3 031f 	rsb	r3, r3, #31
 8009752:	617b      	str	r3, [r7, #20]
 8009754:	4920      	ldr	r1, [pc, #128]	@ (80097d8 <vTaskSwitchContext+0x104>)
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	4613      	mov	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4413      	add	r3, r2
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	440b      	add	r3, r1
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10d      	bne.n	8009784 <vTaskSwitchContext+0xb0>
	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976c:	b672      	cpsid	i
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	b662      	cpsie	i
 800977c:	607b      	str	r3, [r7, #4]
}
 800977e:	bf00      	nop
 8009780:	bf00      	nop
 8009782:	e7fd      	b.n	8009780 <vTaskSwitchContext+0xac>
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	4613      	mov	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4a12      	ldr	r2, [pc, #72]	@ (80097d8 <vTaskSwitchContext+0x104>)
 8009790:	4413      	add	r3, r2
 8009792:	613b      	str	r3, [r7, #16]
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	685a      	ldr	r2, [r3, #4]
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	605a      	str	r2, [r3, #4]
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	3308      	adds	r3, #8
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d104      	bne.n	80097b4 <vTaskSwitchContext+0xe0>
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	605a      	str	r2, [r3, #4]
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	4a05      	ldr	r2, [pc, #20]	@ (80097d0 <vTaskSwitchContext+0xfc>)
 80097bc:	6013      	str	r3, [r2, #0]
}
 80097be:	bf00      	nop
 80097c0:	3720      	adds	r7, #32
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	2000067c 	.word	0x2000067c
 80097cc:	20000670 	.word	0x20000670
 80097d0:	2000059c 	.word	0x2000059c
 80097d4:	20000664 	.word	0x20000664
 80097d8:	200005a0 	.word	0x200005a0

080097dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10d      	bne.n	8009808 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80097ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f0:	b672      	cpsid	i
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	b662      	cpsie	i
 8009800:	60fb      	str	r3, [r7, #12]
}
 8009802:	bf00      	nop
 8009804:	bf00      	nop
 8009806:	e7fd      	b.n	8009804 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009808:	4b07      	ldr	r3, [pc, #28]	@ (8009828 <vTaskPlaceOnEventList+0x4c>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	3318      	adds	r3, #24
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f7ff fb0f 	bl	8008e34 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009816:	2101      	movs	r1, #1
 8009818:	6838      	ldr	r0, [r7, #0]
 800981a:	f000 f9c1 	bl	8009ba0 <prvAddCurrentTaskToDelayedList>
}
 800981e:	bf00      	nop
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	2000059c 	.word	0x2000059c

0800982c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10d      	bne.n	800985e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009846:	b672      	cpsid	i
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	b662      	cpsie	i
 8009856:	60fb      	str	r3, [r7, #12]
}
 8009858:	bf00      	nop
 800985a:	bf00      	nop
 800985c:	e7fd      	b.n	800985a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	3318      	adds	r3, #24
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff fb1f 	bl	8008ea6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009868:	4b1d      	ldr	r3, [pc, #116]	@ (80098e0 <xTaskRemoveFromEventList+0xb4>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d11c      	bne.n	80098aa <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	3304      	adds	r3, #4
 8009874:	4618      	mov	r0, r3
 8009876:	f7ff fb16 	bl	8008ea6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800987e:	2201      	movs	r2, #1
 8009880:	409a      	lsls	r2, r3
 8009882:	4b18      	ldr	r3, [pc, #96]	@ (80098e4 <xTaskRemoveFromEventList+0xb8>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4313      	orrs	r3, r2
 8009888:	4a16      	ldr	r2, [pc, #88]	@ (80098e4 <xTaskRemoveFromEventList+0xb8>)
 800988a:	6013      	str	r3, [r2, #0]
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009890:	4613      	mov	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4413      	add	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4a13      	ldr	r2, [pc, #76]	@ (80098e8 <xTaskRemoveFromEventList+0xbc>)
 800989a:	441a      	add	r2, r3
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	3304      	adds	r3, #4
 80098a0:	4619      	mov	r1, r3
 80098a2:	4610      	mov	r0, r2
 80098a4:	f7ff faa2 	bl	8008dec <vListInsertEnd>
 80098a8:	e005      	b.n	80098b6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	3318      	adds	r3, #24
 80098ae:	4619      	mov	r1, r3
 80098b0:	480e      	ldr	r0, [pc, #56]	@ (80098ec <xTaskRemoveFromEventList+0xc0>)
 80098b2:	f7ff fa9b 	bl	8008dec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ba:	4b0d      	ldr	r3, [pc, #52]	@ (80098f0 <xTaskRemoveFromEventList+0xc4>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d905      	bls.n	80098d0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80098c4:	2301      	movs	r3, #1
 80098c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80098c8:	4b0a      	ldr	r3, [pc, #40]	@ (80098f4 <xTaskRemoveFromEventList+0xc8>)
 80098ca:	2201      	movs	r2, #1
 80098cc:	601a      	str	r2, [r3, #0]
 80098ce:	e001      	b.n	80098d4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80098d0:	2300      	movs	r3, #0
 80098d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80098d4:	697b      	ldr	r3, [r7, #20]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	2000067c 	.word	0x2000067c
 80098e4:	20000664 	.word	0x20000664
 80098e8:	200005a0 	.word	0x200005a0
 80098ec:	20000634 	.word	0x20000634
 80098f0:	2000059c 	.word	0x2000059c
 80098f4:	20000670 	.word	0x20000670

080098f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009900:	4b06      	ldr	r3, [pc, #24]	@ (800991c <vTaskInternalSetTimeOutState+0x24>)
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009908:	4b05      	ldr	r3, [pc, #20]	@ (8009920 <vTaskInternalSetTimeOutState+0x28>)
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	605a      	str	r2, [r3, #4]
}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	20000674 	.word	0x20000674
 8009920:	20000660 	.word	0x20000660

08009924 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b088      	sub	sp, #32
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10d      	bne.n	8009950 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009938:	b672      	cpsid	i
 800993a:	f383 8811 	msr	BASEPRI, r3
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	f3bf 8f4f 	dsb	sy
 8009946:	b662      	cpsie	i
 8009948:	613b      	str	r3, [r7, #16]
}
 800994a:	bf00      	nop
 800994c:	bf00      	nop
 800994e:	e7fd      	b.n	800994c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d10d      	bne.n	8009972 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8009956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995a:	b672      	cpsid	i
 800995c:	f383 8811 	msr	BASEPRI, r3
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	b662      	cpsie	i
 800996a:	60fb      	str	r3, [r7, #12]
}
 800996c:	bf00      	nop
 800996e:	bf00      	nop
 8009970:	e7fd      	b.n	800996e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009972:	f000 f991 	bl	8009c98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009976:	4b1d      	ldr	r3, [pc, #116]	@ (80099ec <xTaskCheckForTimeOut+0xc8>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	69ba      	ldr	r2, [r7, #24]
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800998e:	d102      	bne.n	8009996 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009990:	2300      	movs	r3, #0
 8009992:	61fb      	str	r3, [r7, #28]
 8009994:	e023      	b.n	80099de <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	4b15      	ldr	r3, [pc, #84]	@ (80099f0 <xTaskCheckForTimeOut+0xcc>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d007      	beq.n	80099b2 <xTaskCheckForTimeOut+0x8e>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	69ba      	ldr	r2, [r7, #24]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d302      	bcc.n	80099b2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80099ac:	2301      	movs	r3, #1
 80099ae:	61fb      	str	r3, [r7, #28]
 80099b0:	e015      	b.n	80099de <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d20b      	bcs.n	80099d4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	1ad2      	subs	r2, r2, r3
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7ff ff95 	bl	80098f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80099ce:	2300      	movs	r3, #0
 80099d0:	61fb      	str	r3, [r7, #28]
 80099d2:	e004      	b.n	80099de <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	2200      	movs	r2, #0
 80099d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80099da:	2301      	movs	r3, #1
 80099dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80099de:	f000 f991 	bl	8009d04 <vPortExitCritical>

	return xReturn;
 80099e2:	69fb      	ldr	r3, [r7, #28]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3720      	adds	r7, #32
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	20000660 	.word	0x20000660
 80099f0:	20000674 	.word	0x20000674

080099f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80099f4:	b480      	push	{r7}
 80099f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80099f8:	4b03      	ldr	r3, [pc, #12]	@ (8009a08 <vTaskMissedYield+0x14>)
 80099fa:	2201      	movs	r2, #1
 80099fc:	601a      	str	r2, [r3, #0]
}
 80099fe:	bf00      	nop
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr
 8009a08:	20000670 	.word	0x20000670

08009a0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a12:	4b0c      	ldr	r3, [pc, #48]	@ (8009a44 <prvResetNextTaskUnblockTime+0x38>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d104      	bne.n	8009a26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a48 <prvResetNextTaskUnblockTime+0x3c>)
 8009a1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a24:	e008      	b.n	8009a38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a26:	4b07      	ldr	r3, [pc, #28]	@ (8009a44 <prvResetNextTaskUnblockTime+0x38>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	4a04      	ldr	r2, [pc, #16]	@ (8009a48 <prvResetNextTaskUnblockTime+0x3c>)
 8009a36:	6013      	str	r3, [r2, #0]
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	2000062c 	.word	0x2000062c
 8009a48:	20000678 	.word	0x20000678

08009a4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a52:	4b0b      	ldr	r3, [pc, #44]	@ (8009a80 <xTaskGetSchedulerState+0x34>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d102      	bne.n	8009a60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	607b      	str	r3, [r7, #4]
 8009a5e:	e008      	b.n	8009a72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a60:	4b08      	ldr	r3, [pc, #32]	@ (8009a84 <xTaskGetSchedulerState+0x38>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d102      	bne.n	8009a6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a68:	2302      	movs	r3, #2
 8009a6a:	607b      	str	r3, [r7, #4]
 8009a6c:	e001      	b.n	8009a72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a72:	687b      	ldr	r3, [r7, #4]
	}
 8009a74:	4618      	mov	r0, r3
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	20000668 	.word	0x20000668
 8009a84:	2000067c 	.word	0x2000067c

08009a88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a94:	2300      	movs	r3, #0
 8009a96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d074      	beq.n	8009b88 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8009b94 <xTaskPriorityDisinherit+0x10c>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d00d      	beq.n	8009ac4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aac:	b672      	cpsid	i
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	b662      	cpsie	i
 8009abc:	60fb      	str	r3, [r7, #12]
}
 8009abe:	bf00      	nop
 8009ac0:	bf00      	nop
 8009ac2:	e7fd      	b.n	8009ac0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10d      	bne.n	8009ae8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad0:	b672      	cpsid	i
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	b662      	cpsie	i
 8009ae0:	60bb      	str	r3, [r7, #8]
}
 8009ae2:	bf00      	nop
 8009ae4:	bf00      	nop
 8009ae6:	e7fd      	b.n	8009ae4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009aec:	1e5a      	subs	r2, r3, #1
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d044      	beq.n	8009b88 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d140      	bne.n	8009b88 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	3304      	adds	r3, #4
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7ff f9cb 	bl	8008ea6 <uxListRemove>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d115      	bne.n	8009b42 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b1a:	491f      	ldr	r1, [pc, #124]	@ (8009b98 <xTaskPriorityDisinherit+0x110>)
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4413      	add	r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	440b      	add	r3, r1
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10a      	bne.n	8009b42 <xTaskPriorityDisinherit+0xba>
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b30:	2201      	movs	r2, #1
 8009b32:	fa02 f303 	lsl.w	r3, r2, r3
 8009b36:	43da      	mvns	r2, r3
 8009b38:	4b18      	ldr	r3, [pc, #96]	@ (8009b9c <xTaskPriorityDisinherit+0x114>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	4a17      	ldr	r2, [pc, #92]	@ (8009b9c <xTaskPriorityDisinherit+0x114>)
 8009b40:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4e:	f1c3 0207 	rsb	r2, r3, #7
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	409a      	lsls	r2, r3
 8009b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b9c <xTaskPriorityDisinherit+0x114>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	4a0d      	ldr	r2, [pc, #52]	@ (8009b9c <xTaskPriorityDisinherit+0x114>)
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4a08      	ldr	r2, [pc, #32]	@ (8009b98 <xTaskPriorityDisinherit+0x110>)
 8009b76:	441a      	add	r2, r3
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4610      	mov	r0, r2
 8009b80:	f7ff f934 	bl	8008dec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b84:	2301      	movs	r3, #1
 8009b86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b88:	697b      	ldr	r3, [r7, #20]
	}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3718      	adds	r7, #24
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	2000059c 	.word	0x2000059c
 8009b98:	200005a0 	.word	0x200005a0
 8009b9c:	20000664 	.word	0x20000664

08009ba0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009baa:	4b29      	ldr	r3, [pc, #164]	@ (8009c50 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bb0:	4b28      	ldr	r3, [pc, #160]	@ (8009c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7ff f975 	bl	8008ea6 <uxListRemove>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10b      	bne.n	8009bda <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009bc2:	4b24      	ldr	r3, [pc, #144]	@ (8009c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc8:	2201      	movs	r2, #1
 8009bca:	fa02 f303 	lsl.w	r3, r2, r3
 8009bce:	43da      	mvns	r2, r3
 8009bd0:	4b21      	ldr	r3, [pc, #132]	@ (8009c58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	4a20      	ldr	r2, [pc, #128]	@ (8009c58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009bd8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009be0:	d10a      	bne.n	8009bf8 <prvAddCurrentTaskToDelayedList+0x58>
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d007      	beq.n	8009bf8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009be8:	4b1a      	ldr	r3, [pc, #104]	@ (8009c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3304      	adds	r3, #4
 8009bee:	4619      	mov	r1, r3
 8009bf0:	481a      	ldr	r0, [pc, #104]	@ (8009c5c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009bf2:	f7ff f8fb 	bl	8008dec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009bf6:	e026      	b.n	8009c46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c00:	4b14      	ldr	r3, [pc, #80]	@ (8009c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d209      	bcs.n	8009c24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c10:	4b13      	ldr	r3, [pc, #76]	@ (8009c60 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	4b0f      	ldr	r3, [pc, #60]	@ (8009c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	f7ff f909 	bl	8008e34 <vListInsert>
}
 8009c22:	e010      	b.n	8009c46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c24:	4b0f      	ldr	r3, [pc, #60]	@ (8009c64 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	4b0a      	ldr	r3, [pc, #40]	@ (8009c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	4619      	mov	r1, r3
 8009c30:	4610      	mov	r0, r2
 8009c32:	f7ff f8ff 	bl	8008e34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c36:	4b0c      	ldr	r3, [pc, #48]	@ (8009c68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d202      	bcs.n	8009c46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009c40:	4a09      	ldr	r2, [pc, #36]	@ (8009c68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	6013      	str	r3, [r2, #0]
}
 8009c46:	bf00      	nop
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20000660 	.word	0x20000660
 8009c54:	2000059c 	.word	0x2000059c
 8009c58:	20000664 	.word	0x20000664
 8009c5c:	20000648 	.word	0x20000648
 8009c60:	20000630 	.word	0x20000630
 8009c64:	2000062c 	.word	0x2000062c
 8009c68:	20000678 	.word	0x20000678
 8009c6c:	00000000 	.word	0x00000000

08009c70 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c70:	4b07      	ldr	r3, [pc, #28]	@ (8009c90 <pxCurrentTCBConst2>)
 8009c72:	6819      	ldr	r1, [r3, #0]
 8009c74:	6808      	ldr	r0, [r1, #0]
 8009c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7a:	f380 8809 	msr	PSP, r0
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f04f 0000 	mov.w	r0, #0
 8009c86:	f380 8811 	msr	BASEPRI, r0
 8009c8a:	4770      	bx	lr
 8009c8c:	f3af 8000 	nop.w

08009c90 <pxCurrentTCBConst2>:
 8009c90:	2000059c 	.word	0x2000059c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c94:	bf00      	nop
 8009c96:	bf00      	nop

08009c98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca2:	b672      	cpsid	i
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	b662      	cpsie	i
 8009cb2:	607b      	str	r3, [r7, #4]
}
 8009cb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009cb6:	4b11      	ldr	r3, [pc, #68]	@ (8009cfc <vPortEnterCritical+0x64>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	4a0f      	ldr	r2, [pc, #60]	@ (8009cfc <vPortEnterCritical+0x64>)
 8009cbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8009cfc <vPortEnterCritical+0x64>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d112      	bne.n	8009cee <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8009d00 <vPortEnterCritical+0x68>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00d      	beq.n	8009cee <vPortEnterCritical+0x56>
	__asm volatile
 8009cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd6:	b672      	cpsid	i
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	b662      	cpsie	i
 8009ce6:	603b      	str	r3, [r7, #0]
}
 8009ce8:	bf00      	nop
 8009cea:	bf00      	nop
 8009cec:	e7fd      	b.n	8009cea <vPortEnterCritical+0x52>
	}
}
 8009cee:	bf00      	nop
 8009cf0:	370c      	adds	r7, #12
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	20000028 	.word	0x20000028
 8009d00:	e000ed04 	.word	0xe000ed04

08009d04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d0a:	4b13      	ldr	r3, [pc, #76]	@ (8009d58 <vPortExitCritical+0x54>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10d      	bne.n	8009d2e <vPortExitCritical+0x2a>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d16:	b672      	cpsid	i
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	b662      	cpsie	i
 8009d26:	607b      	str	r3, [r7, #4]
}
 8009d28:	bf00      	nop
 8009d2a:	bf00      	nop
 8009d2c:	e7fd      	b.n	8009d2a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8009d58 <vPortExitCritical+0x54>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3b01      	subs	r3, #1
 8009d34:	4a08      	ldr	r2, [pc, #32]	@ (8009d58 <vPortExitCritical+0x54>)
 8009d36:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d38:	4b07      	ldr	r3, [pc, #28]	@ (8009d58 <vPortExitCritical+0x54>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d105      	bne.n	8009d4c <vPortExitCritical+0x48>
 8009d40:	2300      	movs	r3, #0
 8009d42:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	f383 8811 	msr	BASEPRI, r3
}
 8009d4a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	20000028 	.word	0x20000028
 8009d5c:	00000000 	.word	0x00000000

08009d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d60:	f3ef 8009 	mrs	r0, PSP
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	4b15      	ldr	r3, [pc, #84]	@ (8009dc0 <pxCurrentTCBConst>)
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	f01e 0f10 	tst.w	lr, #16
 8009d70:	bf08      	it	eq
 8009d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7a:	6010      	str	r0, [r2, #0]
 8009d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009d84:	b672      	cpsid	i
 8009d86:	f380 8811 	msr	BASEPRI, r0
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	b662      	cpsie	i
 8009d94:	f7ff fc9e 	bl	80096d4 <vTaskSwitchContext>
 8009d98:	f04f 0000 	mov.w	r0, #0
 8009d9c:	f380 8811 	msr	BASEPRI, r0
 8009da0:	bc09      	pop	{r0, r3}
 8009da2:	6819      	ldr	r1, [r3, #0]
 8009da4:	6808      	ldr	r0, [r1, #0]
 8009da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009daa:	f01e 0f10 	tst.w	lr, #16
 8009dae:	bf08      	it	eq
 8009db0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009db4:	f380 8809 	msr	PSP, r0
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop

08009dc0 <pxCurrentTCBConst>:
 8009dc0:	2000059c 	.word	0x2000059c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop

08009dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd2:	b672      	cpsid	i
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	b662      	cpsie	i
 8009de2:	607b      	str	r3, [r7, #4]
}
 8009de4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009de6:	f7ff fbb9 	bl	800955c <xTaskIncrementTick>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d003      	beq.n	8009df8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009df0:	4b06      	ldr	r3, [pc, #24]	@ (8009e0c <SysTick_Handler+0x44>)
 8009df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009df6:	601a      	str	r2, [r3, #0]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	f383 8811 	msr	BASEPRI, r3
}
 8009e02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e04:	bf00      	nop
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	e000ed04 	.word	0xe000ed04

08009e10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e16:	f3ef 8305 	mrs	r3, IPSR
 8009e1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2b0f      	cmp	r3, #15
 8009e20:	d917      	bls.n	8009e52 <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e22:	4a1a      	ldr	r2, [pc, #104]	@ (8009e8c <vPortValidateInterruptPriority+0x7c>)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	4413      	add	r3, r2
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e2c:	4b18      	ldr	r3, [pc, #96]	@ (8009e90 <vPortValidateInterruptPriority+0x80>)
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	7afa      	ldrb	r2, [r7, #11]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d20d      	bcs.n	8009e52 <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3a:	b672      	cpsid	i
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	b662      	cpsie	i
 8009e4a:	607b      	str	r3, [r7, #4]
}
 8009e4c:	bf00      	nop
 8009e4e:	bf00      	nop
 8009e50:	e7fd      	b.n	8009e4e <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e52:	4b10      	ldr	r3, [pc, #64]	@ (8009e94 <vPortValidateInterruptPriority+0x84>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e98 <vPortValidateInterruptPriority+0x88>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d90d      	bls.n	8009e7e <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e66:	b672      	cpsid	i
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	b662      	cpsie	i
 8009e76:	603b      	str	r3, [r7, #0]
}
 8009e78:	bf00      	nop
 8009e7a:	bf00      	nop
 8009e7c:	e7fd      	b.n	8009e7a <vPortValidateInterruptPriority+0x6a>
	}
 8009e7e:	bf00      	nop
 8009e80:	3714      	adds	r7, #20
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	e000e3f0 	.word	0xe000e3f0
 8009e90:	20000680 	.word	0x20000680
 8009e94:	e000ed0c 	.word	0xe000ed0c
 8009e98:	20000684 	.word	0x20000684

08009e9c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7fe fe70 	bl	8008b90 <USBH_LL_IncTimer>
}
 8009eb0:	bf00      	nop
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fe feb4 	bl	8008c34 <USBH_LL_Connect>
}
 8009ecc:	bf00      	nop
 8009ece:	3708      	adds	r7, #8
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fe fec9 	bl	8008c7a <USBH_LL_Disconnect>
}
 8009ee8:	bf00      	nop
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	460b      	mov	r3, r1
 8009efa:	70fb      	strb	r3, [r7, #3]
 8009efc:	4613      	mov	r3, r2
 8009efe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fe fee9 	bl	8008cde <USBH_LL_NotifyURBChange>
#endif
}
 8009f0c:	bf00      	nop
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe fe5e 	bl	8008be4 <USBH_LL_PortEnabled>
}
 8009f28:	bf00      	nop
 8009f2a:	3708      	adds	r7, #8
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fe fe6a 	bl	8008c18 <USBH_LL_PortDisabled>
}
 8009f44:	bf00      	nop
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f54:	2300      	movs	r3, #0
 8009f56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7f9 fb3b 	bl	80035de <HAL_HCD_Stop>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 f808 	bl	8009f84 <USBH_Get_USB_Status>
 8009f74:	4603      	mov	r3, r0
 8009f76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f78:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
	...

08009f84 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f92:	79fb      	ldrb	r3, [r7, #7]
 8009f94:	2b03      	cmp	r3, #3
 8009f96:	d817      	bhi.n	8009fc8 <USBH_Get_USB_Status+0x44>
 8009f98:	a201      	add	r2, pc, #4	@ (adr r2, 8009fa0 <USBH_Get_USB_Status+0x1c>)
 8009f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9e:	bf00      	nop
 8009fa0:	08009fb1 	.word	0x08009fb1
 8009fa4:	08009fb7 	.word	0x08009fb7
 8009fa8:	08009fbd 	.word	0x08009fbd
 8009fac:	08009fc3 	.word	0x08009fc3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fb4:	e00b      	b.n	8009fce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8009fba:	e008      	b.n	8009fce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8009fc0:	e005      	b.n	8009fce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	73fb      	strb	r3, [r7, #15]
    break;
 8009fc6:	e002      	b.n	8009fce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009fc8:	2302      	movs	r3, #2
 8009fca:	73fb      	strb	r3, [r7, #15]
    break;
 8009fcc:	bf00      	nop
  }
  return usb_status;
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <islower>:
 8009fdc:	4b04      	ldr	r3, [pc, #16]	@ (8009ff0 <islower+0x14>)
 8009fde:	4403      	add	r3, r0
 8009fe0:	7858      	ldrb	r0, [r3, #1]
 8009fe2:	f000 0003 	and.w	r0, r0, #3
 8009fe6:	1e83      	subs	r3, r0, #2
 8009fe8:	4258      	negs	r0, r3
 8009fea:	4158      	adcs	r0, r3
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	0800c0e8 	.word	0x0800c0e8

08009ff4 <toupper>:
 8009ff4:	4b03      	ldr	r3, [pc, #12]	@ (800a004 <toupper+0x10>)
 8009ff6:	5c1b      	ldrb	r3, [r3, r0]
 8009ff8:	f003 0303 	and.w	r3, r3, #3
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	bf08      	it	eq
 800a000:	3820      	subeq	r0, #32
 800a002:	4770      	bx	lr
 800a004:	0800c0e9 	.word	0x0800c0e9

0800a008 <memset>:
 800a008:	4402      	add	r2, r0
 800a00a:	4603      	mov	r3, r0
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d100      	bne.n	800a012 <memset+0xa>
 800a010:	4770      	bx	lr
 800a012:	f803 1b01 	strb.w	r1, [r3], #1
 800a016:	e7f9      	b.n	800a00c <memset+0x4>

0800a018 <strchr>:
 800a018:	b2c9      	uxtb	r1, r1
 800a01a:	4603      	mov	r3, r0
 800a01c:	4618      	mov	r0, r3
 800a01e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a022:	b112      	cbz	r2, 800a02a <strchr+0x12>
 800a024:	428a      	cmp	r2, r1
 800a026:	d1f9      	bne.n	800a01c <strchr+0x4>
 800a028:	4770      	bx	lr
 800a02a:	2900      	cmp	r1, #0
 800a02c:	bf18      	it	ne
 800a02e:	2000      	movne	r0, #0
 800a030:	4770      	bx	lr

0800a032 <strncpy>:
 800a032:	b510      	push	{r4, lr}
 800a034:	3901      	subs	r1, #1
 800a036:	4603      	mov	r3, r0
 800a038:	b132      	cbz	r2, 800a048 <strncpy+0x16>
 800a03a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a03e:	f803 4b01 	strb.w	r4, [r3], #1
 800a042:	3a01      	subs	r2, #1
 800a044:	2c00      	cmp	r4, #0
 800a046:	d1f7      	bne.n	800a038 <strncpy+0x6>
 800a048:	441a      	add	r2, r3
 800a04a:	2100      	movs	r1, #0
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d100      	bne.n	800a052 <strncpy+0x20>
 800a050:	bd10      	pop	{r4, pc}
 800a052:	f803 1b01 	strb.w	r1, [r3], #1
 800a056:	e7f9      	b.n	800a04c <strncpy+0x1a>

0800a058 <strstr>:
 800a058:	780a      	ldrb	r2, [r1, #0]
 800a05a:	b570      	push	{r4, r5, r6, lr}
 800a05c:	b96a      	cbnz	r2, 800a07a <strstr+0x22>
 800a05e:	bd70      	pop	{r4, r5, r6, pc}
 800a060:	429a      	cmp	r2, r3
 800a062:	d109      	bne.n	800a078 <strstr+0x20>
 800a064:	460c      	mov	r4, r1
 800a066:	4605      	mov	r5, r0
 800a068:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d0f6      	beq.n	800a05e <strstr+0x6>
 800a070:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a074:	429e      	cmp	r6, r3
 800a076:	d0f7      	beq.n	800a068 <strstr+0x10>
 800a078:	3001      	adds	r0, #1
 800a07a:	7803      	ldrb	r3, [r0, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1ef      	bne.n	800a060 <strstr+0x8>
 800a080:	4618      	mov	r0, r3
 800a082:	e7ec      	b.n	800a05e <strstr+0x6>

0800a084 <__libc_init_array>:
 800a084:	b570      	push	{r4, r5, r6, lr}
 800a086:	4d0d      	ldr	r5, [pc, #52]	@ (800a0bc <__libc_init_array+0x38>)
 800a088:	4c0d      	ldr	r4, [pc, #52]	@ (800a0c0 <__libc_init_array+0x3c>)
 800a08a:	1b64      	subs	r4, r4, r5
 800a08c:	10a4      	asrs	r4, r4, #2
 800a08e:	2600      	movs	r6, #0
 800a090:	42a6      	cmp	r6, r4
 800a092:	d109      	bne.n	800a0a8 <__libc_init_array+0x24>
 800a094:	4d0b      	ldr	r5, [pc, #44]	@ (800a0c4 <__libc_init_array+0x40>)
 800a096:	4c0c      	ldr	r4, [pc, #48]	@ (800a0c8 <__libc_init_array+0x44>)
 800a098:	f000 f826 	bl	800a0e8 <_init>
 800a09c:	1b64      	subs	r4, r4, r5
 800a09e:	10a4      	asrs	r4, r4, #2
 800a0a0:	2600      	movs	r6, #0
 800a0a2:	42a6      	cmp	r6, r4
 800a0a4:	d105      	bne.n	800a0b2 <__libc_init_array+0x2e>
 800a0a6:	bd70      	pop	{r4, r5, r6, pc}
 800a0a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ac:	4798      	blx	r3
 800a0ae:	3601      	adds	r6, #1
 800a0b0:	e7ee      	b.n	800a090 <__libc_init_array+0xc>
 800a0b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0b6:	4798      	blx	r3
 800a0b8:	3601      	adds	r6, #1
 800a0ba:	e7f2      	b.n	800a0a2 <__libc_init_array+0x1e>
 800a0bc:	0800c1f4 	.word	0x0800c1f4
 800a0c0:	0800c1f4 	.word	0x0800c1f4
 800a0c4:	0800c1f4 	.word	0x0800c1f4
 800a0c8:	0800c1f8 	.word	0x0800c1f8

0800a0cc <memcpy>:
 800a0cc:	440a      	add	r2, r1
 800a0ce:	4291      	cmp	r1, r2
 800a0d0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a0d4:	d100      	bne.n	800a0d8 <memcpy+0xc>
 800a0d6:	4770      	bx	lr
 800a0d8:	b510      	push	{r4, lr}
 800a0da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0e2:	4291      	cmp	r1, r2
 800a0e4:	d1f9      	bne.n	800a0da <memcpy+0xe>
 800a0e6:	bd10      	pop	{r4, pc}

0800a0e8 <_init>:
 800a0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ea:	bf00      	nop
 800a0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ee:	bc08      	pop	{r3}
 800a0f0:	469e      	mov	lr, r3
 800a0f2:	4770      	bx	lr

0800a0f4 <_fini>:
 800a0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f6:	bf00      	nop
 800a0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0fa:	bc08      	pop	{r3}
 800a0fc:	469e      	mov	lr, r3
 800a0fe:	4770      	bx	lr
